version: v1.0
name: FlowCrypt Android App
agent:
  machine:
    type: e1-standard-4
    os_image: ubuntu1804
execution_time_limit:
  minutes: 45

fail_fast:
  stop:
    when: "branch != 'master'" # Stopping all jobs on the first failure

auto_cancel:
  running:
    when: "branch != 'master'" # Auto-cancel all pipelines on a new push to a non-master branch

global_job_config:
  env_vars:
    - name: ADB_INSTALL_TIMEOUT #https://android.googlesource.com/platform/tools/base/+/bc733f18ec99fe5e14804ec062edc98039d67685/ddmlib/src/main/java/com/android/ddmlib/Device.java#88
      value: "10"
    - name: SEMAPHORE_GIT_DIR
      value: /home/semaphore/git/flowcrypt-android
    - name: ANDROID_SDK_ROOT
      value: /home/semaphore/Android/Sdk
  prologue:
    commands:
      - sem-version java 11
      - export PATH=${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}
      - sudo rm -rf ~/.rbenv ~/.phpbrew
      - checkout
      # init environment variables
      - export SUM=$(checksum build.gradle)-$(checksum FlowCrypt/build.gradle)-$(checksum ./script/ci-install-android-sdk.sh)
      - export APP_GRADLE_CACHE=gradle-cache-$SUM # per conf files hash
      - export ANDROID_SDK_CACHE=android-sdk-$SUM # per conf files hash
      - export BUILD_CXX_CACHE=build-cxx-cache-$SEMAPHORE_GIT_BRANCH-$SUM  # per branch and conf files hash
      - export BUILD_NATIVE_CACHE=build-native-cache-$SEMAPHORE_GIT_BRANCH-$SUM  # per branch and conf files hash
      - export BUILD_CACHE=build-cache-$SEMAPHORE_GIT_BRANCH-$SUM  # per branch and conf files hash
      # restore app caches
      - cache restore $APP_GRADLE_CACHE
      - cache restore $BUILD_CXX_CACHE
      - cache restore $BUILD_NATIVE_CACHE
      - cache restore $BUILD_CACHE
      # restore global caches
      - cache restore $ANDROID_SDK_CACHE
      - cache restore gradle-wrapper
      - cache restore gradle-cache
      - cache restore android-build-cache
      # Install Android dependencies if needed
      - ./script/ci-install-android-sdk.sh
      # Install ninja
      - sudo apt install -y ninja-build
blocks:
  - name: 'Build'
    execution_time_limit:
      minutes: 20
    task:
      jobs:
        - name: 'Build Project'
          commands:
            # print debug info
            - cat /proc/cpuinfo
            # print Java version
            - java -version
            # compile project
            - ./gradlew --console=plain assembleDevTestDebug
      epilogue:
        on_pass:
          commands:
            # store app cache
            - echo "Store the app cache"
            - cache has_key $APP_GRADLE_CACHE || cache store $APP_GRADLE_CACHE .gradle
            - cache has_key $BUILD_CXX_CACHE || cache store $BUILD_CXX_CACHE FlowCrypt/.cxx
            - cache has_key $BUILD_NATIVE_CACHE || cache store $BUILD_NATIVE_CACHE FlowCrypt/.externalNativeBuild
            - cache has_key $BUILD_CACHE || cache store $BUILD_CACHE FlowCrypt/build

            # clean and store global cache
            - echo "Store the global cache"
            - find ~/.gradle/caches/ -name "*.lock" -type f -delete # https://medium.com/cirruslabs/mastering-gradle-caching-and-incremental-builds-37eb1af7fcde
            - cache has_key $ANDROID_SDK_CACHE || cache store $ANDROID_SDK_CACHE $ANDROID_SDK_ROOT
            - cache delete gradle-wrapper
            - cache delete gradle-cache
            - cache delete android-build-cache
            - cache store gradle-wrapper ~/.gradle/wrapper
            - cache store gradle-cache ~/.gradle/caches
            - cache store android-build-cache ~/.android/build-cache

  - name: 'Testing'
    task:
      jobs:
        - name: 'Lint(structural quality)'
          execution_time_limit:
            minutes: 15
          commands:
            # run Lint checks
            - ./script/ci-lint-checks.sh

        - name: 'JUnit tests'
          execution_time_limit:
            minutes: 15
          commands:
            # run JUnit tests
            - ./script/ci-junit-tests.sh

        - name: 'Instrumentation tests(No email server)'
          matrix:
            - env_var: EMULATOR
              values: [ "0", "1", "2", "3" ]
          commands:
            # Setup and run an emulator
            - ./script/ci-setup-and-run-emulator.sh
            # wait until ready
            - ./script/ci-wait-for-emulator.sh
            # Run logging
            - adb logcat --buffer=crash > ~/logcat_log.txt &
            # Run instrumentation tests
            - ./script/ci-instrumentation-tests-without-mailserver.sh 4 $EMULATOR

        - name: 'Instrumentation tests(with email server)'
          commands:
            # Run an email server
            - cd docker-mailserver && ./run_email_server.sh && cd -
            # Setup and run an emulator
            - ./script/ci-setup-and-run-emulator.sh
            #wait until ready
            - ./script/ci-wait-for-emulator.sh
            # Run logging
            - adb logcat --buffer=crash > ~/logcat_log.txt &
            # Run instrumentation tests
            - ./script/ci-instrumentation-tests-with-mailserver.sh
      epilogue:
        always:
          commands:
            # print debug info about connected device
            - echo "Print connected devices"
            - adb devices

            # store logcat log
            - echo "Store logcat log"
            - artifact push job --expire-in 1w ~/logcat_log.txt

            # store screenshots
            - echo "Store screenshots"
            - adb pull "/sdcard/Pictures"
            - adb shell ls /sdcard/Pictures
            - artifact push job --expire-in 1w Pictures
        on_fail:
          commands:
            # store tests results
            - echo "Store tests results"
            - artifact push job --expire-in 1w FlowCrypt/build/reports/

            # store the device's screenshot. it may help to debug a failure
            - echo "Store the device's screenshot"
            - adb shell screencap -p /sdcard/screencap.png
            - adb pull "/sdcard/screencap.png"
            - artifact push job --expire-in 1w screencap.png
