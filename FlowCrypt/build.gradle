/*
 * Â© 2016-2019 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com
 * Contributors: DenBond7
 */

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.akaita.android.easylauncher'

def keystoreProperties = new Properties()
File propertiesFile = project.file("keystore.properties")
if (propertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(propertiesFile))
}

android {
    if (projects.hasProperty('devBuild')) {
        splits.abi.enable = false
        splits.density.enable = false
        aaptOptions.cruncherEnable = false
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.flowcrypt.email"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        release {
            def keyStoreFile = keystoreProperties['storeFile']
            def keyStorePass = keystoreProperties['storePassword']
            def keySignAlias = keystoreProperties['keyAlias']
            def keyPass = keystoreProperties['keyPassword']

            if (project.hasProperty('runtimeSign')) {
                if (project.hasProperty('storeFile')) {
                    keyStoreFile = project.property("storeFile")
                }

                if (project.hasProperty('storePassword')) {
                    keyStorePass = project.property("storePassword")
                }

                if (project.hasProperty('keyAlias')) {
                    keySignAlias = project.property("keyAlias")
                }

                if (project.hasProperty('keyPassword')) {
                    keyPass = project.property("keyPassword")
                }
            }

            storeFile keyStoreFile != null ? file(keyStoreFile) : file("fix me...")
            storePassword keyStorePass
            keyAlias keySignAlias
            keyPassword keyPass
        }

        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "flowcryptdebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'false'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"NONE\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'false'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"NONE\""
            resValue 'string', 'application_id', android.defaultConfig.applicationId
            resValue 'string', 'gradle_is_acra_enabled', 'true'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'false'
            resValue 'string', 'gradle_http_log_level', 'NONE'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_node_http_log_level', 'NONE'
        }

        enterprise {
            initWith release
            applicationIdSuffix ".enterprise"
        }

        debug {
            versionNameSuffix '_' + defaultConfig.versionCode + '__' + new SimpleDateFormat('yyyy_MM_dd').format(new Date())
            applicationIdSuffix '.debug'
            resValue 'string', 'application_id', android.defaultConfig.applicationId + applicationIdSuffix
            signingConfig signingConfigs.debug
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // If you want Gradle to package prebuilt native libraries
    // with your APK, modify the default source set configuration
    // to include the directory of your prebuilt .so files as follows.
    sourceSets {
        main {
            jniLibs.srcDirs 'libs/libnode/bin/'
        }
    }

    flavorDimensions "standard"

    productFlavors {
        //This flavor must be used only for a development.
        // It has settings for a fast building (some features are disabled or not included).
        dev {
            signingConfig signingConfigs.debug
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BODY\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BODY\""
            resValue 'string', 'gradle_is_acra_enabled', 'false'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'true'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BODY'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'true'
            resValue 'string', 'gradle_node_http_log_level', 'BODY'
            versionNameSuffix "_dev"
            dimension "standard"
            minSdkVersion rootProject.ext.minSdkVersion
            resConfigs "en", "xxhdpi"
        }

        //This is a production flavor
        prod {
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BASIC\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BASIC\""
            resValue 'string', 'gradle_is_acra_enabled', 'true'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'false'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BASIC'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'true'
            resValue 'string', 'gradle_node_http_log_level', 'BASIC'
            dimension "standard"
        }

        //This flavor must be used only for a testing
        devTest {
            signingConfig signingConfigs.debug
            versionNameSuffix "_devTest"
            dimension "standard"
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'false'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"NONE\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'false'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"NONE\""
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility
        targetCompatibility rootProject.ext.javaSourceCompatibility
    }

    lintOptions {
        warningsAsErrors true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    tasks.register('renameReleaseBuilds') {
        doLast {
            applicationVariants.all { variant ->
                if (variant.buildType.buildType == buildTypes.release
                        || variant.buildType.buildType == buildTypes.enterprise) {
                    variant.outputs.each { output ->
                        def file = output.outputFile
                        def newName = file.name.replace(".apk", "_" + defaultConfig.versionCode +
                                "_" + defaultConfig.versionName + "_"
                                + new SimpleDateFormat('yyyy_MM_dd_HH_mm').format(new Date()) + ".apk")
                        output.outputFile.renameTo(new File(file.parent, newName))
                    }
                }
            }
        }
    }

    task copyReleaseApks(type: Copy) {
        from("$buildDir") {
            include '**/*release*.apk'
            include '**/*enterprise*.apk'
        }

        includeEmptyDirs = false
        into '../release'
        eachFile { file ->
            file.path = file.name
        }
    }

    afterEvaluate {
        Task taskPackageProdRelease = tasks.findByName('packageProdRelease')
        if (taskPackageProdRelease != null) {
            taskPackageProdRelease.finalizedBy renameReleaseBuilds
        }

        Task taskPackageProdEnterprise = tasks.findByName('packageProdEnterprise')
        if (taskPackageProdEnterprise != null) {
            taskPackageProdEnterprise.finalizedBy renameReleaseBuilds
        }
    }
}

easylauncher {
    foregroundIconNames "@mipmap/ic_launcher_foreground" // Foreground of adaptive launcher icon
    buildTypes {
        debug {
            filters = [
                    customColorRibbonFilter("debug", "#556600CC", "#FFFFFF", "bottom")
            ]
        }
    }
}

dependencies {
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakcanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakcanaryVersion}"

    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-web:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"

    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakcanaryVersion}"
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.legacy:legacy-support-v4:${rootProject.ext.androidxBaseVersion}"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation "androidx.legacy:legacy-preference-v14:${rootProject.ext.androidxBaseVersion}"
    implementation "androidx.cardview:cardview:${rootProject.ext.androidxBaseVersion}"
    implementation "androidx.browser:browser:${rootProject.ext.androidxBaseVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.androidxBaseVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.test.espresso:espresso-idling-resource:${rootProject.ext.espressoVersion}"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'

    //https://developers.google.com/android/guides/setup
    implementation 'com.google.android.gms:play-services-base:16.1.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    //https://mvnrepository.com/artifact/com.google.android.material/material
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.api-client:google-api-client-android:1.29.2'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev104-1.25.0'

    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpVersion}"
    implementation 'com.jakewharton:disklrucache:2.0.2'

    implementation "com.sun.mail:android-mail:${rootProject.ext.javaMailVersion}"
    implementation("com.sun.mail:gimap:${rootProject.ext.javaMailVersion}") {
        //exclude group: 'com.sun.mail' because it exists in 'com.sun.mail:android-mail'
        exclude group: 'com.sun.mail'
    }

    implementation "com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${rootProject.ext.glideVersion}"
    kapt "androidx.annotation:annotation:${rootProject.ext.androidxBaseVersion}"

    implementation 'commons-io:commons-io:2.6'
    implementation 'ch.acra:acra:4.11'
    implementation 'com.hootsuite.android:nachos:1.1.1'
    implementation 'com.nulab-inc:zxcvbn:1.2.5'
    implementation 'com.madgag.spongycastle:pkix:1.54.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
}
