
try {
/* final flowcrypt-android bundle starts here */
const dereq_inherits = require("util").inherits; // standard node util, not to interfere with webpack require, which cannot resolve it
const dereq_html_sanitize =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 44);
/******/ })
/************************************************************************/
/******/ ({

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var require;var require;(function(f){if(true){module.exports=f();}else { var g; }})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a;}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r);},p,p.exports,r,e,n,t);}return n[i].exports;}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o;}return r;}()({1:[function(require,module,exports){'use strict';var htmlparser=require('htmlparser2');var extend=require('xtend');var quoteRegexp=require('lodash.escaperegexp');var cloneDeep=require('lodash.clonedeep');var mergeWith=require('lodash.mergewith');var isString=require('lodash.isstring');var isPlainObject=require('lodash.isplainobject');var srcset=require('srcset');var postcss=require('postcss');var url=require('url');function each(obj,cb){if(obj)Object.keys(obj).forEach(function(key){cb(obj[key],key);});}// Avoid false positives with .__proto__, .hasOwnProperty, etc.
function has(obj,key){return{}.hasOwnProperty.call(obj,key);}// Returns those elements of `a` for which `cb(a)` returns truthy
function filter(a,cb){var n=[];each(a,function(v){if(cb(v)){n.push(v);}});return n;}module.exports=sanitizeHtml;// A valid attribute name.
// We use a tolerant definition based on the set of strings defined by
// html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state
// and html.spec.whatwg.org/multipage/parsing.html#attribute-name-state .
// The characters accepted are ones which can be appended to the attribute
// name buffer without triggering a parse error:
//   * unexpected-equals-sign-before-attribute-name
//   * unexpected-null-character
//   * unexpected-character-in-attribute-name
// We exclude the empty string because it's impossible to get to the after
// attribute name state with an empty attribute name buffer.
var VALID_HTML_ATTRIBUTE_NAME=/^[^\0\t\n\f\r /<=>]+$/;// Ignore the _recursing flag; it's there for recursive
// invocation as a guard against this exploit:
// https://github.com/fb55/htmlparser2/issues/105
function sanitizeHtml(html,options,_recursing){var result='';function Frame(tag,attribs){var that=this;this.tag=tag;this.attribs=attribs||{};this.tagPosition=result.length;this.text='';// Node inner text
this.updateParentNodeText=function(){if(stack.length){var parentFrame=stack[stack.length-1];parentFrame.text+=that.text;}};}if(!options){options=sanitizeHtml.defaults;options.parser=htmlParserDefaults;}else{options=extend(sanitizeHtml.defaults,options);if(options.parser){options.parser=extend(htmlParserDefaults,options.parser);}else{options.parser=htmlParserDefaults;}}// Tags that contain something other than HTML, or where discarding
// the text when the tag is disallowed makes sense for other reasons.
// If we are not allowing these tags, we should drop their content too.
// For other tags you would drop the tag but keep its content.
var nonTextTagsArray=options.nonTextTags||['script','style','textarea'];var allowedAttributesMap;var allowedAttributesGlobMap;if(options.allowedAttributes){allowedAttributesMap={};allowedAttributesGlobMap={};each(options.allowedAttributes,function(attributes,tag){allowedAttributesMap[tag]=[];var globRegex=[];attributes.forEach(function(obj){if(isString(obj)&&obj.indexOf('*')>=0){globRegex.push(quoteRegexp(obj).replace(/\\\*/g,'.*'));}else{allowedAttributesMap[tag].push(obj);}});allowedAttributesGlobMap[tag]=new RegExp('^('+globRegex.join('|')+')$');});}var allowedClassesMap={};each(options.allowedClasses,function(classes,tag){// Implicitly allows the class attribute
if(allowedAttributesMap){if(!has(allowedAttributesMap,tag)){allowedAttributesMap[tag]=[];}allowedAttributesMap[tag].push('class');}allowedClassesMap[tag]=classes;});var transformTagsMap={};var transformTagsAll;each(options.transformTags,function(transform,tag){var transFun;if(typeof transform==='function'){transFun=transform;}else if(typeof transform==="string"){transFun=sanitizeHtml.simpleTransform(transform);}if(tag==='*'){transformTagsAll=transFun;}else{transformTagsMap[tag]=transFun;}});var depth=0;var stack=[];var skipMap={};var transformMap={};var skipText=false;var skipTextDepth=0;var parser=new htmlparser.Parser({onopentag:function onopentag(name,attribs){if(skipText){skipTextDepth++;return;}var frame=new Frame(name,attribs);stack.push(frame);var skip=false;var hasText=frame.text?true:false;var transformedTag;if(has(transformTagsMap,name)){transformedTag=transformTagsMap[name](name,attribs);frame.attribs=attribs=transformedTag.attribs;if(transformedTag.text!==undefined){frame.innerText=transformedTag.text;}if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName;}}if(transformTagsAll){transformedTag=transformTagsAll(name,attribs);frame.attribs=attribs=transformedTag.attribs;if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName;}}if(options.allowedTags&&options.allowedTags.indexOf(name)===-1){skip=true;if(nonTextTagsArray.indexOf(name)!==-1){skipText=true;skipTextDepth=1;}skipMap[depth]=true;}depth++;if(skip){// We want the contents but not this tag
return;}result+='<'+name;if(!allowedAttributesMap||has(allowedAttributesMap,name)||allowedAttributesMap['*']){each(attribs,function(value,a){if(!VALID_HTML_ATTRIBUTE_NAME.test(a)){// This prevents part of an attribute name in the output from being
// interpreted as the end of an attribute, or end of a tag.
delete frame.attribs[a];return;}var parsed;// check allowedAttributesMap for the element and attribute and modify the value
// as necessary if there are specific values defined.
var passedAllowedAttributesMapCheck=false;if(!allowedAttributesMap||has(allowedAttributesMap,name)&&allowedAttributesMap[name].indexOf(a)!==-1||allowedAttributesMap['*']&&allowedAttributesMap['*'].indexOf(a)!==-1||has(allowedAttributesGlobMap,name)&&allowedAttributesGlobMap[name].test(a)||allowedAttributesGlobMap['*']&&allowedAttributesGlobMap['*'].test(a)){passedAllowedAttributesMapCheck=true;}else if(allowedAttributesMap&&allowedAttributesMap[name]){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=allowedAttributesMap[name][Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var o=_step.value;if(isPlainObject(o)&&o.name&&o.name===a){passedAllowedAttributesMapCheck=true;var newValue='';if(o.multiple===true){// verify the values that are allowed
var splitStrArray=value.split(' ');var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=splitStrArray[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var s=_step2.value;if(o.values.indexOf(s)!==-1){if(newValue===''){newValue=s;}else{newValue+=' '+s;}}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}else if(o.values.indexOf(value)>=0){// verified an allowed value matches the entire attribute value
newValue=value;}value=newValue;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}if(passedAllowedAttributesMapCheck){if(options.allowedSchemesAppliedToAttributes.indexOf(a)!==-1){if(naughtyHref(name,value)){delete frame.attribs[a];return;}}if(name==='iframe'&&a==='src'){var allowed=true;try{// naughtyHref is in charge of whether protocol relative URLs
// are cool. We should just accept them
parsed=url.parse(value,false,true);var isRelativeUrl=parsed&&parsed.host===null&&parsed.protocol===null;if(isRelativeUrl){// default value of allowIframeRelativeUrls is true unless allowIframeHostnames specified
allowed=has(options,"allowIframeRelativeUrls")?options.allowIframeRelativeUrls:!options.allowedIframeHostnames;}else if(options.allowedIframeHostnames){allowed=options.allowedIframeHostnames.find(function(hostname){return hostname===parsed.hostname;});}}catch(e){// Unparseable iframe src
allowed=false;}if(!allowed){delete frame.attribs[a];return;}}if(a==='srcset'){try{parsed=srcset.parse(value);each(parsed,function(value){if(naughtyHref('srcset',value.url)){value.evil=true;}});parsed=filter(parsed,function(v){return!v.evil;});if(!parsed.length){delete frame.attribs[a];return;}else{value=srcset.stringify(filter(parsed,function(v){return!v.evil;}));frame.attribs[a]=value;}}catch(e){// Unparseable srcset
delete frame.attribs[a];return;}}if(a==='class'){value=filterClasses(value,allowedClassesMap[name]);if(!value.length){delete frame.attribs[a];return;}}if(a==='style'){try{var abstractSyntaxTree=postcss.parse(name+" {"+value+"}");var filteredAST=filterCss(abstractSyntaxTree,options.allowedStyles);value=stringifyStyleAttributes(filteredAST);if(value.length===0){delete frame.attribs[a];return;}}catch(e){delete frame.attribs[a];return;}}result+=' '+a;if(value.length){result+='="'+escapeHtml(value,true)+'"';}}else{delete frame.attribs[a];}});}if(options.selfClosing.indexOf(name)!==-1){result+=" />";}else{result+=">";if(frame.innerText&&!hasText&&!options.textFilter){result+=frame.innerText;}}},ontext:function ontext(text){if(skipText){return;}var lastFrame=stack[stack.length-1];var tag;if(lastFrame){tag=lastFrame.tag;// If inner text was set by transform function then let's use it
text=lastFrame.innerText!==undefined?lastFrame.innerText:text;}if(tag==='script'||tag==='style'){// htmlparser2 gives us these as-is. Escaping them ruins the content. Allowing
// script tags is, by definition, game over for XSS protection, so if that's
// your concern, don't allow them. The same is essentially true for style tags
// which have their own collection of XSS vectors.
result+=text;}else{var escaped=escapeHtml(text,false);if(options.textFilter){result+=options.textFilter(escaped);}else{result+=escaped;}}if(stack.length){var frame=stack[stack.length-1];frame.text+=text;}},onclosetag:function onclosetag(name){if(skipText){skipTextDepth--;if(!skipTextDepth){skipText=false;}else{return;}}var frame=stack.pop();if(!frame){// Do not crash on bad markup
return;}skipText=false;depth--;if(skipMap[depth]){delete skipMap[depth];frame.updateParentNodeText();return;}if(transformMap[depth]){name=transformMap[depth];delete transformMap[depth];}if(options.exclusiveFilter&&options.exclusiveFilter(frame)){result=result.substr(0,frame.tagPosition);return;}frame.updateParentNodeText();if(options.selfClosing.indexOf(name)!==-1){// Already output />
return;}result+="</"+name+">";}},options.parser);parser.write(html);parser.end();return result;function escapeHtml(s,quote){if(typeof s!=='string'){s=s+'';}if(options.parser.decodeEntities){s=s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/\>/g,'&gt;');if(quote){s=s.replace(/\"/g,'&quot;');}}// TODO: this is inadequate because it will pass `&0;`. This approach
// will not work, each & must be considered with regard to whether it
// is followed by a 100% syntactically valid entity or not, and escaped
// if it is not. If this bothers you, don't set parser.decodeEntities
// to false. (The default is true.)
s=s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g,'&amp;')// Match ampersands not part of existing HTML entity
.replace(/</g,'&lt;').replace(/\>/g,'&gt;');if(quote){s=s.replace(/\"/g,'&quot;');}return s;}function naughtyHref(name,href){// Browsers ignore character codes of 32 (space) and below in a surprising
// number of situations. Start reading here:
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab
href=href.replace(/[\x00-\x20]+/g,'');// Clobber any comments in URLs, which the browser might
// interpret inside an XML data island, allowing
// a javascript: URL to be snuck through
href=href.replace(/<\!\-\-.*?\-\-\>/g,'');// Case insensitive so we don't get faked out by JAVASCRIPT #1
var matches=href.match(/^([a-zA-Z]+)\:/);if(!matches){// Protocol-relative URL starting with any combination of '/' and '\'
if(href.match(/^[\/\\]{2}/)){return!options.allowProtocolRelative;}// No scheme
return false;}var scheme=matches[1].toLowerCase();if(has(options.allowedSchemesByTag,name)){return options.allowedSchemesByTag[name].indexOf(scheme)===-1;}return!options.allowedSchemes||options.allowedSchemes.indexOf(scheme)===-1;}/**
   * Filters user input css properties by whitelisted regex attributes.
   *
   * @param {object} abstractSyntaxTree  - Object representation of CSS attributes.
   * @property {array[Declaration]} abstractSyntaxTree.nodes[0] - Each object cointains prop and value key, i.e { prop: 'color', value: 'red' }.
   * @param {object} allowedStyles       - Keys are properties (i.e color), value is list of permitted regex rules (i.e /green/i).
   * @return {object}                    - Abstract Syntax Tree with filtered style attributes.
   */function filterCss(abstractSyntaxTree,allowedStyles){if(!allowedStyles){return abstractSyntaxTree;}var filteredAST=cloneDeep(abstractSyntaxTree);var astRules=abstractSyntaxTree.nodes[0];var selectedRule;// Merge global and tag-specific styles into new AST.
if(allowedStyles[astRules.selector]&&allowedStyles['*']){selectedRule=mergeWith(cloneDeep(allowedStyles[astRules.selector]),allowedStyles['*'],function(objValue,srcValue){if(Array.isArray(objValue)){return objValue.concat(srcValue);}});}else{selectedRule=allowedStyles[astRules.selector]||allowedStyles['*'];}if(selectedRule){filteredAST.nodes[0].nodes=astRules.nodes.reduce(filterDeclarations(selectedRule),[]);}return filteredAST;}/**
   * Extracts the style attribues from an AbstractSyntaxTree and formats those
   * values in the inline style attribute format.
   *
   * @param  {AbstractSyntaxTree} filteredAST
   * @return {string}             - Example: "color:yellow;text-align:center;font-family:helvetica;"
   */function stringifyStyleAttributes(filteredAST){return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes,attributeObject){extractedAttributes.push(attributeObject.prop+':'+attributeObject.value);return extractedAttributes;},[]).join(';');}/**
    * Filters the existing attributes for the given property. Discards any attributes
    * which don't match the whitelist.
    *
    * @param  {object} selectedRule             - Example: { color: red, font-family: helvetica }
    * @param  {array} allowedDeclarationsList   - List of declarations which pass whitelisting.
    * @param  {object} attributeObject          - Object representing the current css property.
    * @property {string} attributeObject.type   - Typically 'declaration'.
    * @property {string} attributeObject.prop   - The CSS property, i.e 'color'.
    * @property {string} attributeObject.value  - The corresponding value to the css property, i.e 'red'.
    * @return {function}                        - When used in Array.reduce, will return an array of Declaration objects
    */function filterDeclarations(selectedRule){return function(allowedDeclarationsList,attributeObject){// If this property is whitelisted...
if(selectedRule.hasOwnProperty(attributeObject.prop)){var matchesRegex=selectedRule[attributeObject.prop].some(function(regularExpression){return regularExpression.test(attributeObject.value);});if(matchesRegex){allowedDeclarationsList.push(attributeObject);}}return allowedDeclarationsList;};}function filterClasses(classes,allowed){if(!allowed){// The class attribute is allowed without filtering on this tag
return classes;}classes=classes.split(/\s+/);return classes.filter(function(clss){return allowed.indexOf(clss)!==-1;}).join(' ');}}// Defaults are accessible to you so that you can use them as a starting point
// programmatically if you wish
var htmlParserDefaults={decodeEntities:true};sanitizeHtml.defaults={allowedTags:['h3','h4','h5','h6','blockquote','p','a','ul','ol','nl','li','b','i','strong','em','strike','code','hr','br','div','table','thead','caption','tbody','tr','th','td','pre','iframe'],allowedAttributes:{a:['href','name','target'],// We don't currently allow img itself by default, but this
// would make sense if we did. You could add srcset here,
// and if you do the URL is checked for safety
img:['src']},// Lots of these won't come up by default because we don't allow them
selfClosing:['img','br','hr','area','base','basefont','input','link','meta'],// URL schemes we permit
allowedSchemes:['http','https','ftp','mailto'],allowedSchemesByTag:{},allowedSchemesAppliedToAttributes:['href','src','cite'],allowProtocolRelative:true};sanitizeHtml.simpleTransform=function(newTagName,newAttribs,merge){merge=merge===undefined?true:merge;newAttribs=newAttribs||{};return function(tagName,attribs){var attrib;if(merge){for(attrib in newAttribs){attribs[attrib]=newAttribs[attrib];}}else{attribs=newAttribs;}return{tagName:newTagName,attribs:attribs};};};},{"htmlparser2":34,"lodash.clonedeep":37,"lodash.escaperegexp":38,"lodash.isplainobject":39,"lodash.isstring":40,"lodash.mergewith":41,"postcss":56,"srcset":85,"url":87,"xtend":89}],2:[function(require,module,exports){(function(global){'use strict';// there's 3 implementations written in increasing order of efficiency
// 1 - no Set type is defined
function uniqNoSet(arr){var ret=[];for(var i=0;i<arr.length;i++){if(ret.indexOf(arr[i])===-1){ret.push(arr[i]);}}return ret;}// 2 - a simple Set type is defined
function uniqSet(arr){var seen=new Set();return arr.filter(function(el){if(!seen.has(el)){seen.add(el);return true;}return false;});}// 3 - a standard Set type is defined and it has a forEach method
function uniqSetWithForEach(arr){var ret=[];new Set(arr).forEach(function(el){ret.push(el);});return ret;}// V8 currently has a broken implementation
// https://github.com/joyent/node/issues/8449
function doesForEachActuallyWork(){var ret=false;new Set([true]).forEach(function(el){ret=el;});return ret===true;}if('Set'in global){if(typeof Set.prototype.forEach==='function'&&doesForEachActuallyWork()){module.exports=uniqSetWithForEach;}else{module.exports=uniqSet;}}else{module.exports=uniqNoSet;}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],3:[function(require,module,exports){'use strict';exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;function getLens(b64){var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// Trim off extra bytes after placeholder bytes are found
// See: https://github.com/beatgammit/base64-js/issues/42
var validLen=b64.indexOf('=');if(validLen===-1)validLen=len;var placeHoldersLen=validLen===len?0:4-validLen%4;return[validLen,placeHoldersLen];}// base64 is 4/3 + up to two characters of the original data
function byteLength(b64){var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];return(validLen+placeHoldersLen)*3/4-placeHoldersLen;}function _byteLength(b64,validLen,placeHoldersLen){return(validLen+placeHoldersLen)*3/4-placeHoldersLen;}function toByteArray(b64){var tmp;var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));var curByte=0;// if there are placeholders, only get up to the last complete 4 chars
var len=placeHoldersLen>0?validLen-4:validLen;for(var i=0;i<len;i+=4){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[curByte++]=tmp>>16&0xFF;arr[curByte++]=tmp>>8&0xFF;arr[curByte++]=tmp&0xFF;}if(placeHoldersLen===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[curByte++]=tmp&0xFF;}if(placeHoldersLen===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[curByte++]=tmp>>8&0xFF;arr[curByte++]=tmp&0xFF;}return arr;}function tripletToBase64(num){return lookup[num>>18&0x3F]+lookup[num>>12&0x3F]+lookup[num>>6&0x3F]+lookup[num&0x3F];}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16&0xFF0000)+(uint8[i+1]<<8&0xFF00)+(uint8[i+2]&0xFF);output.push(tripletToBase64(tmp));}return output.join('');}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes
var parts=[];var maxChunkLength=16383;// must be multiple of 3
// go through the array every three bytes, we'll deal with trailing stuff later
for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes
if(extraBytes===1){tmp=uint8[len-1];parts.push(lookup[tmp>>2]+lookup[tmp<<4&0x3F]+'==');}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];parts.push(lookup[tmp>>10]+lookup[tmp>>4&0x3F]+lookup[tmp<<2&0x3F]+'=');}return parts.join('');}},{}],4:[function(require,module,exports){},{}],5:[function(require,module,exports){(function(Buffer){/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */'use strict';var base64=require('base64-js');var ieee754=require('ieee754');exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=0x7fffffff;exports.kMaxLength=K_MAX_LENGTH;/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!=='undefined'&&typeof console.error==='function'){console.error('This browser lacks typed array (Uint8Array) support which is required by '+'`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');}function typedArraySupport(){// Can typed array instances can be augmented?
try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42;}};return arr.foo()===42;}catch(e){return false;}}Object.defineProperty(Buffer.prototype,'parent',{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer;}});Object.defineProperty(Buffer.prototype,'offset',{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset;}});function createBuffer(length){if(length>K_MAX_LENGTH){throw new RangeError('The value "'+length+'" is invalid for option "size"');}// Return an augmented `Uint8Array` instance
var buf=new Uint8Array(length);buf.__proto__=Buffer.prototype;return buf;}/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */function Buffer(arg,encodingOrOffset,length){// Common case.
if(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new TypeError('The "string" argument must be of type string. Received type number');}return allocUnsafe(arg);}return from(arg,encodingOrOffset,length);}// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if(typeof Symbol!=='undefined'&&Symbol.species!=null&&Buffer[Symbol.species]===Buffer){Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true,enumerable:false,writable:false});}Buffer.poolSize=8192;// not used by this implementation
function from(value,encodingOrOffset,length){if(typeof value==='string'){return fromString(value,encodingOrOffset);}if(ArrayBuffer.isView(value)){return fromArrayLike(value);}if(value==null){throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, '+'or Array-like Object. Received type '+typeof value);}if(isInstance(value,ArrayBuffer)||value&&isInstance(value.buffer,ArrayBuffer)){return fromArrayBuffer(value,encodingOrOffset,length);}if(typeof value==='number'){throw new TypeError('The "value" argument must not be of type number. Received type number');}var valueOf=value.valueOf&&value.valueOf();if(valueOf!=null&&valueOf!==value){return Buffer.from(valueOf,encodingOrOffset,length);}var b=fromObject(value);if(b)return b;if(typeof Symbol!=='undefined'&&Symbol.toPrimitive!=null&&typeof value[Symbol.toPrimitive]==='function'){return Buffer.from(value[Symbol.toPrimitive]('string'),encodingOrOffset,length);}throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, '+'or Array-like Object. Received type '+typeof value);}/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/Buffer.from=function(value,encodingOrOffset,length){return from(value,encodingOrOffset,length);};// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;function assertSize(size){if(typeof size!=='number'){throw new TypeError('"size" argument must be of type number');}else if(size<0){throw new RangeError('The value "'+size+'" is invalid for option "size"');}}function alloc(size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This
// prevents accidentally sending in a number that would
// be interpretted as a start offset.
return typeof encoding==='string'?createBuffer(size).fill(fill,encoding):createBuffer(size).fill(fill);}return createBuffer(size);}/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/Buffer.alloc=function(size,fill,encoding){return alloc(size,fill,encoding);};function allocUnsafe(size){assertSize(size);return createBuffer(size<0?0:checked(size)|0);}/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */Buffer.allocUnsafe=function(size){return allocUnsafe(size);};/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */Buffer.allocUnsafeSlow=function(size){return allocUnsafe(size);};function fromString(string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}var length=byteLength(string,encoding)|0;var buf=createBuffer(length);var actual=buf.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will
// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
buf=buf.slice(0,actual);}return buf;}function fromArrayLike(array){var length=array.length<0?0:checked(array.length)|0;var buf=createBuffer(length);for(var i=0;i<length;i+=1){buf[i]=array[i]&255;}return buf;}function fromArrayBuffer(array,byteOffset,length){if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('"offset" is outside of buffer bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('"length" is outside of buffer bounds');}var buf;if(byteOffset===undefined&&length===undefined){buf=new Uint8Array(array);}else if(length===undefined){buf=new Uint8Array(array,byteOffset);}else{buf=new Uint8Array(array,byteOffset,length);}// Return an augmented `Uint8Array` instance
buf.__proto__=Buffer.prototype;return buf;}function fromObject(obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;var buf=createBuffer(len);if(buf.length===0){return buf;}obj.copy(buf,0,0,len);return buf;}if(obj.length!==undefined){if(typeof obj.length!=='number'||numberIsNaN(obj.length)){return createBuffer(0);}return fromArrayLike(obj);}if(obj.type==='Buffer'&&Array.isArray(obj.data)){return fromArrayLike(obj.data);}}function checked(length){// Note: cannot use `length < K_MAX_LENGTH` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(length>=K_MAX_LENGTH){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+K_MAX_LENGTH.toString(16)+' bytes');}return length|0;}function SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq
length=0;}return Buffer.alloc(+length);}Buffer.isBuffer=function isBuffer(b){return b!=null&&b._isBuffer===true&&b!==Buffer.prototype;// so Buffer.isBuffer(Buffer.prototype) will be false
};Buffer.compare=function compare(a,b){if(isInstance(a,Uint8Array))a=Buffer.from(a,a.offset,a.byteLength);if(isInstance(b,Uint8Array))b=Buffer.from(b,b.offset,b.byteLength);if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!Array.isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers');}if(list.length===0){return Buffer.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(isInstance(buf,Uint8Array)){buf=Buffer.from(buf);}if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length;}if(ArrayBuffer.isView(string)||isInstance(string,ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. '+'Received type '+typeof string);}var len=string.length;var mustMatch=arguments.length>2&&arguments[2]===true;if(!mustMatch&&len===0)return 0;// Use a for loop to avoid recursion
var loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase){return mustMatch?-1:utf8ToBytes(string).length;// assume utf8
}encoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
// property of a typed array.
// This behaves neither like String nor Uint8Array in that we set start/end
// to their upper/lower bounds if the value passed is out of range.
// undefined is handled specially as per ECMA-262 6th Edition,
// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
if(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
end>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'latin1':case'binary':return latin1Slice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this;};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this;};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this;};Buffer.prototype.toString=function toString(){var length=this.length;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===0;};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;str=this.toString('hex',0,max).replace(/(.{2})/g,'$1 ').trim();if(this.length>max)str+=' ... ';return'<Buffer '+str+'>';};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(isInstance(target,Uint8Array)){target=Buffer.from(target,target.offset,target.byteLength);}if(!Buffer.isBuffer(target)){throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. '+'Received type '+typeof target);}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match
if(buffer.length===0)return-1;// Normalize byteOffset
if(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.
if(numberIsNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
byteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer
if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val
if(typeof val==='string'){val=Buffer.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf
if(Buffer.isBuffer(val)){// Special case: looking for empty string/buffer always fails
if(val.length===0){return-1;}return arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]
if(typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}var strLen=string.length;if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(numberIsNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)
if(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)
}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])
}else if(isFinite(offset)){offset=offset>>>0;if(isFinite(length)){length=length>>>0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'latin1':case'binary':return latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write
return base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf);}else{return base64.fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
codePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)
codePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()
}// Decode in chunks to avoid "call stack size exceeded".
var res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf=this.subarray(start,end);// Return an augmented `Uint8Array` instance
newBuf.__proto__=Buffer.prototype;return newBuf;};/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readInt8=function readInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4);};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4);};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8);};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);this[offset]=value&0xff;this[offset+1]=value>>>8;return offset+2;};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);this[offset]=value>>>8;this[offset+1]=value&0xff;return offset+2;};Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;return offset+4;};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;return offset+4;};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);this[offset]=value&0xff;this[offset+1]=value>>>8;return offset+2;};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);this[offset]=value>>>8;this[offset+1]=value&0xff;return offset+2;};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;return offset+4;};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!Buffer.isBuffer(target))throw new TypeError('argument should be a Buffer');if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done
if(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions
if(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('Index out of range');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?
if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;if(this===target&&typeof Uint8Array.prototype.copyWithin==='function'){// Use built-in when available, missing from IE11
this.copyWithin(targetStart,start,end);}else if(this===target&&start<targetStart&&targetStart<end){// descending copy from end
for(var i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,end),targetStart);}return len;};// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:
if(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}if(val.length===1){var code=val.charCodeAt(0);if(encoding==='utf8'&&code<128||encoding==='latin1'){// Fast path: If `val` fits into a single byte, use that numeric value.
val=code;}}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.
if(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=Buffer.isBuffer(val)?val:Buffer.from(val,encoding);var len=bytes.length;if(len===0){throw new TypeError('The value "'+val+'" is invalid for argument "value"');}for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function base64clean(str){// Node takes equal signs as end of the Base64 encoding
str=str.split('=')[0];// Node strips out invalid characters like \n and \t from the string, base64-js does not
str=str.trim().replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''
if(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
while(str.length%4!==0){str=str+'=';}return str;}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component
if(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead
if(!leadSurrogate){// no lead yet
if(codePoint>0xDBFF){// unexpected trail
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead
leadSurrogate=codePoint;continue;}// 2 leads in a row
if(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair
codePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8
if(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..
byteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return base64.toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj,type){return obj instanceof type||obj!=null&&obj.constructor!=null&&obj.constructor.name!=null&&obj.constructor.name===type.name;}function numberIsNaN(obj){// For IE11 support
return obj!==obj;// eslint-disable-line no-self-compare
}}).call(this,require("buffer").Buffer);},{"base64-js":3,"buffer":5,"ieee754":35}],6:[function(require,module,exports){/*
  Module dependencies
*/var ElementType=require('domelementtype');var entities=require('entities');var unencodedElements={__proto__:null,style:true,script:true,xmp:true,iframe:true,noembed:true,noframes:true,plaintext:true,noscript:true};/*
  Format attributes
*/function formatAttrs(attributes,opts){if(!attributes)return;var output='',value;// Loop through the attributes
for(var key in attributes){value=attributes[key];if(output){output+=' ';}output+=key;if(value!==null&&value!==''||opts.xmlMode){output+='="'+(opts.decodeEntities?entities.encodeXML(value):value)+'"';}}return output;}/*
  Self-enclosing tags (stolen from node-htmlparser)
*/var singleTag={__proto__:null,area:true,base:true,basefont:true,br:true,col:true,command:true,embed:true,frame:true,hr:true,img:true,input:true,isindex:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true};var render=module.exports=function(dom,opts){if(!Array.isArray(dom)&&!dom.cheerio)dom=[dom];opts=opts||{};var output='';for(var i=0;i<dom.length;i++){var elem=dom[i];if(elem.type==='root')output+=render(elem.children,opts);else if(ElementType.isTag(elem))output+=renderTag(elem,opts);else if(elem.type===ElementType.Directive)output+=renderDirective(elem);else if(elem.type===ElementType.Comment)output+=renderComment(elem);else if(elem.type===ElementType.CDATA)output+=renderCdata(elem);else output+=renderText(elem,opts);}return output;};function renderTag(elem,opts){// Handle SVG
if(elem.name==="svg")opts={decodeEntities:opts.decodeEntities,xmlMode:true};var tag='<'+elem.name,attribs=formatAttrs(elem.attribs,opts);if(attribs){tag+=' '+attribs;}if(opts.xmlMode&&(!elem.children||elem.children.length===0)){tag+='/>';}else{tag+='>';if(elem.children){tag+=render(elem.children,opts);}if(!singleTag[elem.name]||opts.xmlMode){tag+='</'+elem.name+'>';}}return tag;}function renderDirective(elem){return'<'+elem.data+'>';}function renderText(elem,opts){var data=elem.data||'';// if entities weren't decoded, no need to encode them back
if(opts.decodeEntities&&!(elem.parent&&elem.parent.name in unencodedElements)){data=entities.encodeXML(data);}return data;}function renderCdata(elem){return'<![CDATA['+elem.children[0].data+']]>';}function renderComment(elem){return'<!--'+elem.data+'-->';}},{"domelementtype":7,"entities":18}],7:[function(require,module,exports){//Types of elements found in the DOM
module.exports={Text:"text",//Text
Directive:"directive",//<? ... ?>
Comment:"comment",//<!-- ... -->
Script:"script",//<script> tags
Style:"style",//<style> tags
Tag:"tag",//Any tag
CDATA:"cdata",//<![CDATA[ ... ]]>
Doctype:"doctype",isTag:function(elem){return elem.type==="tag"||elem.type==="script"||elem.type==="style";}};},{}],8:[function(require,module,exports){var ElementType=require("domelementtype");var re_whitespace=/\s+/g;var NodePrototype=require("./lib/node");var ElementPrototype=require("./lib/element");function DomHandler(callback,options,elementCB){if(typeof callback==="object"){elementCB=options;options=callback;callback=null;}else if(typeof options==="function"){elementCB=options;options=defaultOpts;}this._callback=callback;this._options=options||defaultOpts;this._elementCB=elementCB;this.dom=[];this._done=false;this._tagStack=[];this._parser=this._parser||null;}//default options
var defaultOpts={normalizeWhitespace:false,//Replace all whitespace with single spaces
withStartIndices:false,//Add startIndex properties to nodes
withEndIndices:false//Add endIndex properties to nodes
};DomHandler.prototype.onparserinit=function(parser){this._parser=parser;};//Resets the handler back to starting state
DomHandler.prototype.onreset=function(){DomHandler.call(this,this._callback,this._options,this._elementCB);};//Signals the handler that parsing is done
DomHandler.prototype.onend=function(){if(this._done)return;this._done=true;this._parser=null;this._handleCallback(null);};DomHandler.prototype._handleCallback=DomHandler.prototype.onerror=function(error){if(typeof this._callback==="function"){this._callback(error,this.dom);}else{if(error)throw error;}};DomHandler.prototype.onclosetag=function(){//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
var elem=this._tagStack.pop();if(this._options.withEndIndices&&elem){elem.endIndex=this._parser.endIndex;}if(this._elementCB)this._elementCB(elem);};DomHandler.prototype._createDomElement=function(properties){if(!this._options.withDomLvl1)return properties;var element;if(properties.type==="tag"){element=Object.create(ElementPrototype);}else{element=Object.create(NodePrototype);}for(var key in properties){if(properties.hasOwnProperty(key)){element[key]=properties[key];}}return element;};DomHandler.prototype._addDomElement=function(element){var parent=this._tagStack[this._tagStack.length-1];var siblings=parent?parent.children:this.dom;var previousSibling=siblings[siblings.length-1];element.next=null;if(this._options.withStartIndices){element.startIndex=this._parser.startIndex;}if(this._options.withEndIndices){element.endIndex=this._parser.endIndex;}if(previousSibling){element.prev=previousSibling;previousSibling.next=element;}else{element.prev=null;}siblings.push(element);element.parent=parent||null;};DomHandler.prototype.onopentag=function(name,attribs){var properties={type:name==="script"?ElementType.Script:name==="style"?ElementType.Style:ElementType.Tag,name:name,attribs:attribs,children:[]};var element=this._createDomElement(properties);this._addDomElement(element);this._tagStack.push(element);};DomHandler.prototype.ontext=function(data){//the ignoreWhitespace is officially dropped, but for now,
//it's an alias for normalizeWhitespace
var normalize=this._options.normalizeWhitespace||this._options.ignoreWhitespace;var lastTag;if(!this._tagStack.length&&this.dom.length&&(lastTag=this.dom[this.dom.length-1]).type===ElementType.Text){if(normalize){lastTag.data=(lastTag.data+data).replace(re_whitespace," ");}else{lastTag.data+=data;}}else{if(this._tagStack.length&&(lastTag=this._tagStack[this._tagStack.length-1])&&(lastTag=lastTag.children[lastTag.children.length-1])&&lastTag.type===ElementType.Text){if(normalize){lastTag.data=(lastTag.data+data).replace(re_whitespace," ");}else{lastTag.data+=data;}}else{if(normalize){data=data.replace(re_whitespace," ");}var element=this._createDomElement({data:data,type:ElementType.Text});this._addDomElement(element);}}};DomHandler.prototype.oncomment=function(data){var lastTag=this._tagStack[this._tagStack.length-1];if(lastTag&&lastTag.type===ElementType.Comment){lastTag.data+=data;return;}var properties={data:data,type:ElementType.Comment};var element=this._createDomElement(properties);this._addDomElement(element);this._tagStack.push(element);};DomHandler.prototype.oncdatastart=function(){var properties={children:[{data:"",type:ElementType.Text}],type:ElementType.CDATA};var element=this._createDomElement(properties);this._addDomElement(element);this._tagStack.push(element);};DomHandler.prototype.oncommentend=DomHandler.prototype.oncdataend=function(){this._tagStack.pop();};DomHandler.prototype.onprocessinginstruction=function(name,data){var element=this._createDomElement({name:name,data:data,type:ElementType.Directive});this._addDomElement(element);};module.exports=DomHandler;},{"./lib/element":9,"./lib/node":10,"domelementtype":7}],9:[function(require,module,exports){// DOM-Level-1-compliant structure
var NodePrototype=require('./node');var ElementPrototype=module.exports=Object.create(NodePrototype);var domLvl1={tagName:"name"};Object.keys(domLvl1).forEach(function(key){var shorthand=domLvl1[key];Object.defineProperty(ElementPrototype,key,{get:function(){return this[shorthand]||null;},set:function(val){this[shorthand]=val;return val;}});});},{"./node":10}],10:[function(require,module,exports){// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype=module.exports={get firstChild(){var children=this.children;return children&&children[0]||null;},get lastChild(){var children=this.children;return children&&children[children.length-1]||null;},get nodeType(){return nodeTypes[this.type]||nodeTypes.element;}};var domLvl1={tagName:"name",childNodes:"children",parentNode:"parent",previousSibling:"prev",nextSibling:"next",nodeValue:"data"};var nodeTypes={element:1,text:3,cdata:4,comment:8};Object.keys(domLvl1).forEach(function(key){var shorthand=domLvl1[key];Object.defineProperty(NodePrototype,key,{get:function(){return this[shorthand]||null;},set:function(val){this[shorthand]=val;return val;}});});},{}],11:[function(require,module,exports){var DomUtils=module.exports;[require("./lib/stringify"),require("./lib/traversal"),require("./lib/manipulation"),require("./lib/querying"),require("./lib/legacy"),require("./lib/helpers")].forEach(function(ext){Object.keys(ext).forEach(function(key){DomUtils[key]=ext[key].bind(DomUtils);});});},{"./lib/helpers":12,"./lib/legacy":13,"./lib/manipulation":14,"./lib/querying":15,"./lib/stringify":16,"./lib/traversal":17}],12:[function(require,module,exports){// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets=function(nodes){var idx=nodes.length,node,ancestor,replace;// Check if each node (or one of its ancestors) is already contained in the
// array.
while(--idx>-1){node=ancestor=nodes[idx];// Temporarily remove the node under consideration
nodes[idx]=null;replace=true;while(ancestor){if(nodes.indexOf(ancestor)>-1){replace=false;nodes.splice(idx,1);break;}ancestor=ancestor.parent;}// If the node has been found to be unique, re-insert it.
if(replace){nodes[idx]=node;}}return nodes;};// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION={DISCONNECTED:1,PRECEDING:2,FOLLOWING:4,CONTAINS:8,CONTAINED_BY:16};// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos=exports.compareDocumentPosition=function(nodeA,nodeB){var aParents=[];var bParents=[];var current,sharedParent,siblings,aSibling,bSibling,idx;if(nodeA===nodeB){return 0;}current=nodeA;while(current){aParents.unshift(current);current=current.parent;}current=nodeB;while(current){bParents.unshift(current);current=current.parent;}idx=0;while(aParents[idx]===bParents[idx]){idx++;}if(idx===0){return POSITION.DISCONNECTED;}sharedParent=aParents[idx-1];siblings=sharedParent.children;aSibling=aParents[idx];bSibling=bParents[idx];if(siblings.indexOf(aSibling)>siblings.indexOf(bSibling)){if(sharedParent===nodeB){return POSITION.FOLLOWING|POSITION.CONTAINED_BY;}return POSITION.FOLLOWING;}else{if(sharedParent===nodeA){return POSITION.PRECEDING|POSITION.CONTAINS;}return POSITION.PRECEDING;}};// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort=function(nodes){var idx=nodes.length,node,position;nodes=nodes.slice();while(--idx>-1){node=nodes[idx];position=nodes.indexOf(node);if(position>-1&&position<idx){nodes.splice(idx,1);}}nodes.sort(function(a,b){var relative=comparePos(a,b);if(relative&POSITION.PRECEDING){return-1;}else if(relative&POSITION.FOLLOWING){return 1;}return 0;});return nodes;};},{}],13:[function(require,module,exports){var ElementType=require("domelementtype");var isTag=exports.isTag=ElementType.isTag;exports.testElement=function(options,element){for(var key in options){if(!options.hasOwnProperty(key));else if(key==="tag_name"){if(!isTag(element)||!options.tag_name(element.name)){return false;}}else if(key==="tag_type"){if(!options.tag_type(element.type))return false;}else if(key==="tag_contains"){if(isTag(element)||!options.tag_contains(element.data)){return false;}}else if(!element.attribs||!options[key](element.attribs[key])){return false;}}return true;};var Checks={tag_name:function(name){if(typeof name==="function"){return function(elem){return isTag(elem)&&name(elem.name);};}else if(name==="*"){return isTag;}else{return function(elem){return isTag(elem)&&elem.name===name;};}},tag_type:function(type){if(typeof type==="function"){return function(elem){return type(elem.type);};}else{return function(elem){return elem.type===type;};}},tag_contains:function(data){if(typeof data==="function"){return function(elem){return!isTag(elem)&&data(elem.data);};}else{return function(elem){return!isTag(elem)&&elem.data===data;};}}};function getAttribCheck(attrib,value){if(typeof value==="function"){return function(elem){return elem.attribs&&value(elem.attribs[attrib]);};}else{return function(elem){return elem.attribs&&elem.attribs[attrib]===value;};}}function combineFuncs(a,b){return function(elem){return a(elem)||b(elem);};}exports.getElements=function(options,element,recurse,limit){var funcs=Object.keys(options).map(function(key){var value=options[key];return key in Checks?Checks[key](value):getAttribCheck(key,value);});return funcs.length===0?[]:this.filter(funcs.reduce(combineFuncs),element,recurse,limit);};exports.getElementById=function(id,element,recurse){if(!Array.isArray(element))element=[element];return this.findOne(getAttribCheck("id",id),element,recurse!==false);};exports.getElementsByTagName=function(name,element,recurse,limit){return this.filter(Checks.tag_name(name),element,recurse,limit);};exports.getElementsByTagType=function(type,element,recurse,limit){return this.filter(Checks.tag_type(type),element,recurse,limit);};},{"domelementtype":7}],14:[function(require,module,exports){exports.removeElement=function(elem){if(elem.prev)elem.prev.next=elem.next;if(elem.next)elem.next.prev=elem.prev;if(elem.parent){var childs=elem.parent.children;childs.splice(childs.lastIndexOf(elem),1);}};exports.replaceElement=function(elem,replacement){var prev=replacement.prev=elem.prev;if(prev){prev.next=replacement;}var next=replacement.next=elem.next;if(next){next.prev=replacement;}var parent=replacement.parent=elem.parent;if(parent){var childs=parent.children;childs[childs.lastIndexOf(elem)]=replacement;}};exports.appendChild=function(elem,child){child.parent=elem;if(elem.children.push(child)!==1){var sibling=elem.children[elem.children.length-2];sibling.next=child;child.prev=sibling;child.next=null;}};exports.append=function(elem,next){var parent=elem.parent,currNext=elem.next;next.next=currNext;next.prev=elem;elem.next=next;next.parent=parent;if(currNext){currNext.prev=next;if(parent){var childs=parent.children;childs.splice(childs.lastIndexOf(currNext),0,next);}}else if(parent){parent.children.push(next);}};exports.prepend=function(elem,prev){var parent=elem.parent;if(parent){var childs=parent.children;childs.splice(childs.lastIndexOf(elem),0,prev);}if(elem.prev){elem.prev.next=prev;}prev.parent=parent;prev.prev=elem.prev;prev.next=elem;elem.prev=prev;};},{}],15:[function(require,module,exports){var isTag=require("domelementtype").isTag;module.exports={filter:filter,find:find,findOneChild:findOneChild,findOne:findOne,existsOne:existsOne,findAll:findAll};function filter(test,element,recurse,limit){if(!Array.isArray(element))element=[element];if(typeof limit!=="number"||!isFinite(limit)){limit=Infinity;}return find(test,element,recurse!==false,limit);}function find(test,elems,recurse,limit){var result=[],childs;for(var i=0,j=elems.length;i<j;i++){if(test(elems[i])){result.push(elems[i]);if(--limit<=0)break;}childs=elems[i].children;if(recurse&&childs&&childs.length>0){childs=find(test,childs,recurse,limit);result=result.concat(childs);limit-=childs.length;if(limit<=0)break;}}return result;}function findOneChild(test,elems){for(var i=0,l=elems.length;i<l;i++){if(test(elems[i]))return elems[i];}return null;}function findOne(test,elems){var elem=null;for(var i=0,l=elems.length;i<l&&!elem;i++){if(!isTag(elems[i])){continue;}else if(test(elems[i])){elem=elems[i];}else if(elems[i].children.length>0){elem=findOne(test,elems[i].children);}}return elem;}function existsOne(test,elems){for(var i=0,l=elems.length;i<l;i++){if(isTag(elems[i])&&(test(elems[i])||elems[i].children.length>0&&existsOne(test,elems[i].children))){return true;}}return false;}function findAll(test,rootElems){var result=[];var stack=rootElems.slice();while(stack.length){var elem=stack.shift();if(!isTag(elem))continue;if(elem.children&&elem.children.length>0){stack.unshift.apply(stack,elem.children);}if(test(elem))result.push(elem);}return result;}},{"domelementtype":7}],16:[function(require,module,exports){var ElementType=require("domelementtype"),getOuterHTML=require("dom-serializer"),isTag=ElementType.isTag;module.exports={getInnerHTML:getInnerHTML,getOuterHTML:getOuterHTML,getText:getText};function getInnerHTML(elem,opts){return elem.children?elem.children.map(function(elem){return getOuterHTML(elem,opts);}).join(""):"";}function getText(elem){if(Array.isArray(elem))return elem.map(getText).join("");if(isTag(elem))return elem.name==="br"?"\n":getText(elem.children);if(elem.type===ElementType.CDATA)return getText(elem.children);if(elem.type===ElementType.Text)return elem.data;return"";}},{"dom-serializer":6,"domelementtype":7}],17:[function(require,module,exports){var getChildren=exports.getChildren=function(elem){return elem.children;};var getParent=exports.getParent=function(elem){return elem.parent;};exports.getSiblings=function(elem){var parent=getParent(elem);return parent?getChildren(parent):[elem];};exports.getAttributeValue=function(elem,name){return elem.attribs&&elem.attribs[name];};exports.hasAttrib=function(elem,name){return!!elem.attribs&&hasOwnProperty.call(elem.attribs,name);};exports.getName=function(elem){return elem.name;};},{}],18:[function(require,module,exports){var encode=require("./lib/encode.js"),decode=require("./lib/decode.js");exports.decode=function(data,level){return(!level||level<=0?decode.XML:decode.HTML)(data);};exports.decodeStrict=function(data,level){return(!level||level<=0?decode.XML:decode.HTMLStrict)(data);};exports.encode=function(data,level){return(!level||level<=0?encode.XML:encode.HTML)(data);};exports.encodeXML=encode.XML;exports.encodeHTML4=exports.encodeHTML5=exports.encodeHTML=encode.HTML;exports.decodeXML=exports.decodeXMLStrict=decode.XML;exports.decodeHTML4=exports.decodeHTML5=exports.decodeHTML=decode.HTML;exports.decodeHTML4Strict=exports.decodeHTML5Strict=exports.decodeHTMLStrict=decode.HTMLStrict;exports.escape=encode.escape;},{"./lib/decode.js":19,"./lib/encode.js":21}],19:[function(require,module,exports){var entityMap=require("../maps/entities.json"),legacyMap=require("../maps/legacy.json"),xmlMap=require("../maps/xml.json"),decodeCodePoint=require("./decode_codepoint.js");var decodeXMLStrict=getStrictDecoder(xmlMap),decodeHTMLStrict=getStrictDecoder(entityMap);function getStrictDecoder(map){var keys=Object.keys(map).join("|"),replace=getReplacer(map);keys+="|#[xX][\\da-fA-F]+|#\\d+";var re=new RegExp("&(?:"+keys+");","g");return function(str){return String(str).replace(re,replace);};}var decodeHTML=function(){var legacy=Object.keys(legacyMap).sort(sorter);var keys=Object.keys(entityMap).sort(sorter);for(var i=0,j=0;i<keys.length;i++){if(legacy[j]===keys[i]){keys[i]+=";?";j++;}else{keys[i]+=";";}}var re=new RegExp("&(?:"+keys.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),replace=getReplacer(entityMap);function replacer(str){if(str.substr(-1)!==";")str+=";";return replace(str);}//TODO consider creating a merged map
return function(str){return String(str).replace(re,replacer);};}();function sorter(a,b){return a<b?1:-1;}function getReplacer(map){return function replace(str){if(str.charAt(1)==="#"){if(str.charAt(2)==="X"||str.charAt(2)==="x"){return decodeCodePoint(parseInt(str.substr(3),16));}return decodeCodePoint(parseInt(str.substr(2),10));}return map[str.slice(1,-1)];};}module.exports={XML:decodeXMLStrict,HTML:decodeHTML,HTMLStrict:decodeHTMLStrict};},{"../maps/entities.json":23,"../maps/legacy.json":24,"../maps/xml.json":25,"./decode_codepoint.js":20}],20:[function(require,module,exports){var decodeMap=require("../maps/decode.json");module.exports=decodeCodePoint;// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){if(codePoint>=0xd800&&codePoint<=0xdfff||codePoint>0x10ffff){return"\uFFFD";}if(codePoint in decodeMap){codePoint=decodeMap[codePoint];}var output="";if(codePoint>0xffff){codePoint-=0x10000;output+=String.fromCharCode(codePoint>>>10&0x3ff|0xd800);codePoint=0xdc00|codePoint&0x3ff;}output+=String.fromCharCode(codePoint);return output;}},{"../maps/decode.json":22}],21:[function(require,module,exports){var inverseXML=getInverseObj(require("../maps/xml.json")),xmlReplacer=getInverseReplacer(inverseXML);exports.XML=getInverse(inverseXML,xmlReplacer);var inverseHTML=getInverseObj(require("../maps/entities.json")),htmlReplacer=getInverseReplacer(inverseHTML);exports.HTML=getInverse(inverseHTML,htmlReplacer);function getInverseObj(obj){return Object.keys(obj).sort().reduce(function(inverse,name){inverse[obj[name]]="&"+name+";";return inverse;},{});}function getInverseReplacer(inverse){var single=[],multiple=[];Object.keys(inverse).forEach(function(k){if(k.length===1){single.push("\\"+k);}else{multiple.push(k);}});//TODO add ranges
multiple.unshift("["+single.join("")+"]");return new RegExp(multiple.join("|"),"g");}var re_nonASCII=/[^\0-\x7F]/g,re_astralSymbols=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function singleCharReplacer(c){return"&#x"+c.charCodeAt(0).toString(16).toUpperCase()+";";}function astralReplacer(c){// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
var high=c.charCodeAt(0);var low=c.charCodeAt(1);var codePoint=(high-0xd800)*0x400+low-0xdc00+0x10000;return"&#x"+codePoint.toString(16).toUpperCase()+";";}function getInverse(inverse,re){function func(name){return inverse[name];}return function(data){return data.replace(re,func).replace(re_astralSymbols,astralReplacer).replace(re_nonASCII,singleCharReplacer);};}var re_xmlChars=getInverseReplacer(inverseXML);function escapeXML(data){return data.replace(re_xmlChars,singleCharReplacer).replace(re_astralSymbols,astralReplacer).replace(re_nonASCII,singleCharReplacer);}exports.escape=escapeXML;},{"../maps/entities.json":23,"../maps/xml.json":25}],22:[function(require,module,exports){module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376};},{}],23:[function(require,module,exports){module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"};},{}],24:[function(require,module,exports){module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"};},{}],25:[function(require,module,exports){module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""};},{}],26:[function(require,module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var objectCreate=Object.create||objectCreatePolyfill;var objectKeys=Object.keys||objectKeysPolyfill;var bind=Function.prototype.bind||functionBindPolyfill;function EventEmitter(){if(!this._events||!Object.prototype.hasOwnProperty.call(this,'_events')){this._events=objectCreate(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners=10;var hasDefineProperty;try{var o={};if(Object.defineProperty)Object.defineProperty(o,'x',{value:0});hasDefineProperty=o.x===0;}catch(err){hasDefineProperty=false;}if(hasDefineProperty){Object.defineProperty(EventEmitter,'defaultMaxListeners',{enumerable:true,get:function(){return defaultMaxListeners;},set:function(arg){// check whether the input is a positive number (whose value is zero or
// greater and not a NaN).
if(typeof arg!=='number'||arg<0||arg!==arg)throw new TypeError('"defaultMaxListeners" must be a positive number');defaultMaxListeners=arg;}});}else{EventEmitter.defaultMaxListeners=defaultMaxListeners;}// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||isNaN(n))throw new TypeError('"n" argument must be a positive number');this._maxListeners=n;return this;};function $getMaxListeners(that){if(that._maxListeners===undefined)return EventEmitter.defaultMaxListeners;return that._maxListeners;}EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return $getMaxListeners(this);};// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler,isFn,self){if(isFn)handler.call(self);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self);}}function emitOne(handler,isFn,self,arg1){if(isFn)handler.call(self,arg1);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1);}}function emitTwo(handler,isFn,self,arg1,arg2){if(isFn)handler.call(self,arg1,arg2);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1,arg2);}}function emitThree(handler,isFn,self,arg1,arg2,arg3){if(isFn)handler.call(self,arg1,arg2,arg3);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].call(self,arg1,arg2,arg3);}}function emitMany(handler,isFn,self,args){if(isFn)handler.apply(self,args);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)listeners[i].apply(self,args);}}EventEmitter.prototype.emit=function emit(type){var er,handler,len,args,i,events;var doError=type==='error';events=this._events;if(events)doError=doError&&events.error==null;else if(!doError)return false;// If there is no 'error' event listener then throw.
if(doError){if(arguments.length>1)er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Unhandled "error" event. ('+er+')');err.context=er;throw err;}return false;}handler=events[type];if(!handler)return false;var isFn=typeof handler==='function';len=arguments.length;switch(len){// fast cases
case 1:emitNone(handler,isFn,this);break;case 2:emitOne(handler,isFn,this,arguments[1]);break;case 3:emitTwo(handler,isFn,this,arguments[1],arguments[2]);break;case 4:emitThree(handler,isFn,this,arguments[1],arguments[2],arguments[3]);break;// slower
default:args=new Array(len-1);for(i=1;i<len;i++)args[i-1]=arguments[i];emitMany(handler,isFn,this,args);}return true;};function _addListener(target,type,listener,prepend){var m;var events;var existing;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=target._events;if(!events){events=target._events=objectCreate(null);target._eventsCount=0;}else{// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(!existing){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else{if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];}else{// If we've already got an array, just append.
if(prepend){existing.unshift(listener);}else{existing.push(listener);}}// Check for listener leak
if(!existing.warned){m=$getMaxListeners(target);if(m&&m>0&&existing.length>m){existing.warned=true;var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' "'+String(type)+'" listeners '+'added. Use emitter.setMaxListeners() to '+'increase limit.');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;if(typeof console==='object'&&console.warn){console.warn('%s: %s',w.name,w.message);}}}}return target;}EventEmitter.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,false);};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,true);};function onceWrapper(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;switch(arguments.length){case 0:return this.listener.call(this.target);case 1:return this.listener.call(this.target,arguments[0]);case 2:return this.listener.call(this.target,arguments[0],arguments[1]);case 3:return this.listener.call(this.target,arguments[0],arguments[1],arguments[2]);default:var args=new Array(arguments.length);for(var i=0;i<args.length;++i)args[i]=arguments[i];this.listener.apply(this.target,args);}}}function _onceWrap(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=bind.call(onceWrapper,state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped;}EventEmitter.prototype.once=function once(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.on(type,_onceWrap(this,type,listener));return this;};EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.prependListener(type,_onceWrap(this,type,listener));return this;};// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=this._events;if(!events)return this;list=events[type];if(!list)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=objectCreate(null);else{delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(position===0)list.shift();else spliceOne(list,position);if(list.length===1)events[type]=list[0];if(events.removeListener)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(!events)return this;// not listening for removeListener, no need to emit
if(!events.removeListener){if(arguments.length===0){this._events=objectCreate(null);this._eventsCount=0;}else if(events[type]){if(--this._eventsCount===0)this._events=objectCreate(null);else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=objectKeys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=objectCreate(null);this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners){// LIFO order
for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this;};function _listeners(target,type,unwrap){var events=target._events;if(!events)return[];var evlistener=events[type];if(!evlistener)return[];if(typeof evlistener==='function')return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners(evlistener):arrayClone(evlistener,evlistener.length);}EventEmitter.prototype.listeners=function listeners(type){return _listeners(this,type,true);};EventEmitter.prototype.rawListeners=function rawListeners(type){return _listeners(this,type,false);};EventEmitter.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else{return listenerCount.call(emitter,type);}};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(type){var events=this._events;if(events){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener){return evlistener.length;}}return 0;}EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[];};// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1)list[i]=list[k];list.pop();}function arrayClone(arr,n){var copy=new Array(n);for(var i=0;i<n;++i)copy[i]=arr[i];return copy;}function unwrapListeners(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}function objectCreatePolyfill(proto){var F=function(){};F.prototype=proto;return new F();}function objectKeysPolyfill(obj){var keys=[];for(var k in obj)if(Object.prototype.hasOwnProperty.call(obj,k)){keys.push(k);}return k;}function functionBindPolyfill(context){var fn=this;return function(){return fn.apply(context,arguments);};}},{}],27:[function(require,module,exports){module.exports=CollectingHandler;function CollectingHandler(cbs){this._cbs=cbs||{};this.events=[];}var EVENTS=require("./").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){name="on"+name;CollectingHandler.prototype[name]=function(){this.events.push([name]);if(this._cbs[name])this._cbs[name]();};}else if(EVENTS[name]===1){name="on"+name;CollectingHandler.prototype[name]=function(a){this.events.push([name,a]);if(this._cbs[name])this._cbs[name](a);};}else if(EVENTS[name]===2){name="on"+name;CollectingHandler.prototype[name]=function(a,b){this.events.push([name,a,b]);if(this._cbs[name])this._cbs[name](a,b);};}else{throw Error("wrong number of arguments");}});CollectingHandler.prototype.onreset=function(){this.events=[];if(this._cbs.onreset)this._cbs.onreset();};CollectingHandler.prototype.restart=function(){if(this._cbs.onreset)this._cbs.onreset();for(var i=0,len=this.events.length;i<len;i++){if(this._cbs[this.events[i][0]]){var num=this.events[i].length;if(num===1){this._cbs[this.events[i][0]]();}else if(num===2){this._cbs[this.events[i][0]](this.events[i][1]);}else{this._cbs[this.events[i][0]](this.events[i][1],this.events[i][2]);}}}};},{"./":34}],28:[function(require,module,exports){var DomHandler=require("domhandler");var DomUtils=require("domutils");//TODO: make this a streamable handler
function FeedHandler(callback,options){this.init(callback,options);}dereq_inherits(FeedHandler,DomHandler);FeedHandler.prototype.init=DomHandler;function getElements(what,where){return DomUtils.getElementsByTagName(what,where,true);}function getOneElement(what,where){return DomUtils.getElementsByTagName(what,where,true,1)[0];}function fetch(what,where,recurse){return DomUtils.getText(DomUtils.getElementsByTagName(what,where,recurse,1)).trim();}function addConditionally(obj,prop,what,where,recurse){var tmp=fetch(what,where,recurse);if(tmp)obj[prop]=tmp;}var isValidFeed=function(value){return value==="rss"||value==="feed"||value==="rdf:RDF";};FeedHandler.prototype.onend=function(){var feed={},feedRoot=getOneElement(isValidFeed,this.dom),tmp,childs;if(feedRoot){if(feedRoot.name==="feed"){childs=feedRoot.children;feed.type="atom";addConditionally(feed,"id","id",childs);addConditionally(feed,"title","title",childs);if((tmp=getOneElement("link",childs))&&(tmp=tmp.attribs)&&(tmp=tmp.href))feed.link=tmp;addConditionally(feed,"description","subtitle",childs);if(tmp=fetch("updated",childs))feed.updated=new Date(tmp);addConditionally(feed,"author","email",childs,true);feed.items=getElements("entry",childs).map(function(item){var entry={},tmp;item=item.children;addConditionally(entry,"id","id",item);addConditionally(entry,"title","title",item);if((tmp=getOneElement("link",item))&&(tmp=tmp.attribs)&&(tmp=tmp.href))entry.link=tmp;if(tmp=fetch("summary",item)||fetch("content",item))entry.description=tmp;if(tmp=fetch("updated",item))entry.pubDate=new Date(tmp);return entry;});}else{childs=getOneElement("channel",feedRoot.children).children;feed.type=feedRoot.name.substr(0,3);feed.id="";addConditionally(feed,"title","title",childs);addConditionally(feed,"link","link",childs);addConditionally(feed,"description","description",childs);if(tmp=fetch("lastBuildDate",childs))feed.updated=new Date(tmp);addConditionally(feed,"author","managingEditor",childs,true);feed.items=getElements("item",feedRoot.children).map(function(item){var entry={},tmp;item=item.children;addConditionally(entry,"id","guid",item);addConditionally(entry,"title","title",item);addConditionally(entry,"link","link",item);addConditionally(entry,"description","description",item);if(tmp=fetch("pubDate",item))entry.pubDate=new Date(tmp);return entry;});}}this.dom=feed;DomHandler.prototype._handleCallback.call(this,feedRoot?null:Error("couldn't find root of feed"));};module.exports=FeedHandler;},{"domhandler":8,"domutils":11,"inherits":36}],29:[function(require,module,exports){var Tokenizer=require("./Tokenizer.js");/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/ /*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/var formTags={input:true,option:true,optgroup:true,select:true,button:true,datalist:true,textarea:true};var openImpliesClose={tr:{tr:true,th:true,td:true},th:{th:true},td:{thead:true,th:true,td:true},body:{head:true,link:true,script:true},li:{li:true},p:{p:true},h1:{p:true},h2:{p:true},h3:{p:true},h4:{p:true},h5:{p:true},h6:{p:true},select:formTags,input:formTags,output:formTags,button:formTags,datalist:formTags,textarea:formTags,option:{option:true},optgroup:{optgroup:true}};var voidElements={__proto__:null,area:true,base:true,basefont:true,br:true,col:true,command:true,embed:true,frame:true,hr:true,img:true,input:true,isindex:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true};var foreignContextElements={__proto__:null,math:true,svg:true};var htmlIntegrationElements={__proto__:null,mi:true,mo:true,mn:true,ms:true,mtext:true,"annotation-xml":true,foreignObject:true,desc:true,title:true};var re_nameEnd=/\s|\//;function Parser(cbs,options){this._options=options||{};this._cbs=cbs||{};this._tagname="";this._attribname="";this._attribvalue="";this._attribs=null;this._stack=[];this._foreignContext=[];this.startIndex=0;this.endIndex=null;this._lowerCaseTagNames="lowerCaseTags"in this._options?!!this._options.lowerCaseTags:!this._options.xmlMode;this._lowerCaseAttributeNames="lowerCaseAttributeNames"in this._options?!!this._options.lowerCaseAttributeNames:!this._options.xmlMode;if(this._options.Tokenizer){Tokenizer=this._options.Tokenizer;}this._tokenizer=new Tokenizer(this._options,this);if(this._cbs.onparserinit)this._cbs.onparserinit(this);}dereq_inherits(Parser,require("events").EventEmitter);Parser.prototype._updatePosition=function(initialOffset){if(this.endIndex===null){if(this._tokenizer._sectionStart<=initialOffset){this.startIndex=0;}else{this.startIndex=this._tokenizer._sectionStart-initialOffset;}}else this.startIndex=this.endIndex+1;this.endIndex=this._tokenizer.getAbsoluteIndex();};//Tokenizer event handlers
Parser.prototype.ontext=function(data){this._updatePosition(1);this.endIndex--;if(this._cbs.ontext)this._cbs.ontext(data);};Parser.prototype.onopentagname=function(name){if(this._lowerCaseTagNames){name=name.toLowerCase();}this._tagname=name;if(!this._options.xmlMode&&name in openImpliesClose){for(var el;(el=this._stack[this._stack.length-1])in openImpliesClose[name];this.onclosetag(el));}if(this._options.xmlMode||!(name in voidElements)){this._stack.push(name);if(name in foreignContextElements)this._foreignContext.push(true);else if(name in htmlIntegrationElements)this._foreignContext.push(false);}if(this._cbs.onopentagname)this._cbs.onopentagname(name);if(this._cbs.onopentag)this._attribs={};};Parser.prototype.onopentagend=function(){this._updatePosition(1);if(this._attribs){if(this._cbs.onopentag)this._cbs.onopentag(this._tagname,this._attribs);this._attribs=null;}if(!this._options.xmlMode&&this._cbs.onclosetag&&this._tagname in voidElements){this._cbs.onclosetag(this._tagname);}this._tagname="";};Parser.prototype.onclosetag=function(name){this._updatePosition(1);if(this._lowerCaseTagNames){name=name.toLowerCase();}if(name in foreignContextElements||name in htmlIntegrationElements){this._foreignContext.pop();}if(this._stack.length&&(!(name in voidElements)||this._options.xmlMode)){var pos=this._stack.lastIndexOf(name);if(pos!==-1){if(this._cbs.onclosetag){pos=this._stack.length-pos;while(pos--)this._cbs.onclosetag(this._stack.pop());}else this._stack.length=pos;}else if(name==="p"&&!this._options.xmlMode){this.onopentagname(name);this._closeCurrentTag();}}else if(!this._options.xmlMode&&(name==="br"||name==="p")){this.onopentagname(name);this._closeCurrentTag();}};Parser.prototype.onselfclosingtag=function(){if(this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]){this._closeCurrentTag();}else{this.onopentagend();}};Parser.prototype._closeCurrentTag=function(){var name=this._tagname;this.onopentagend();//self-closing tags will be on the top of the stack
//(cheaper check than in onclosetag)
if(this._stack[this._stack.length-1]===name){if(this._cbs.onclosetag){this._cbs.onclosetag(name);}this._stack.pop();}};Parser.prototype.onattribname=function(name){if(this._lowerCaseAttributeNames){name=name.toLowerCase();}this._attribname=name;};Parser.prototype.onattribdata=function(value){this._attribvalue+=value;};Parser.prototype.onattribend=function(){if(this._cbs.onattribute)this._cbs.onattribute(this._attribname,this._attribvalue);if(this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)){this._attribs[this._attribname]=this._attribvalue;}this._attribname="";this._attribvalue="";};Parser.prototype._getInstructionName=function(value){var idx=value.search(re_nameEnd),name=idx<0?value:value.substr(0,idx);if(this._lowerCaseTagNames){name=name.toLowerCase();}return name;};Parser.prototype.ondeclaration=function(value){if(this._cbs.onprocessinginstruction){var name=this._getInstructionName(value);this._cbs.onprocessinginstruction("!"+name,"!"+value);}};Parser.prototype.onprocessinginstruction=function(value){if(this._cbs.onprocessinginstruction){var name=this._getInstructionName(value);this._cbs.onprocessinginstruction("?"+name,"?"+value);}};Parser.prototype.oncomment=function(value){this._updatePosition(4);if(this._cbs.oncomment)this._cbs.oncomment(value);if(this._cbs.oncommentend)this._cbs.oncommentend();};Parser.prototype.oncdata=function(value){this._updatePosition(1);if(this._options.xmlMode||this._options.recognizeCDATA){if(this._cbs.oncdatastart)this._cbs.oncdatastart();if(this._cbs.ontext)this._cbs.ontext(value);if(this._cbs.oncdataend)this._cbs.oncdataend();}else{this.oncomment("[CDATA["+value+"]]");}};Parser.prototype.onerror=function(err){if(this._cbs.onerror)this._cbs.onerror(err);};Parser.prototype.onend=function(){if(this._cbs.onclosetag){for(var i=this._stack.length;i>0;this._cbs.onclosetag(this._stack[--i]));}if(this._cbs.onend)this._cbs.onend();};//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset=function(){if(this._cbs.onreset)this._cbs.onreset();this._tokenizer.reset();this._tagname="";this._attribname="";this._attribs=null;this._stack=[];if(this._cbs.onparserinit)this._cbs.onparserinit(this);};//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete=function(data){this.reset();this.end(data);};Parser.prototype.write=function(chunk){this._tokenizer.write(chunk);};Parser.prototype.end=function(chunk){this._tokenizer.end(chunk);};Parser.prototype.pause=function(){this._tokenizer.pause();};Parser.prototype.resume=function(){this._tokenizer.resume();};//alias for backwards compat
Parser.prototype.parseChunk=Parser.prototype.write;Parser.prototype.done=Parser.prototype.end;module.exports=Parser;},{"./Tokenizer.js":32,"events":26,"inherits":36}],30:[function(require,module,exports){module.exports=ProxyHandler;function ProxyHandler(cbs){this._cbs=cbs||{};}var EVENTS=require("./").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){name="on"+name;ProxyHandler.prototype[name]=function(){if(this._cbs[name])this._cbs[name]();};}else if(EVENTS[name]===1){name="on"+name;ProxyHandler.prototype[name]=function(a){if(this._cbs[name])this._cbs[name](a);};}else if(EVENTS[name]===2){name="on"+name;ProxyHandler.prototype[name]=function(a,b){if(this._cbs[name])this._cbs[name](a,b);};}else{throw Error("wrong number of arguments");}});},{"./":34}],31:[function(require,module,exports){module.exports=Stream;var Parser=require("./WritableStream.js");function Stream(options){Parser.call(this,new Cbs(this),options);}dereq_inherits(Stream,Parser);Stream.prototype.readable=true;function Cbs(scope){this.scope=scope;}var EVENTS=require("../").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){Cbs.prototype["on"+name]=function(){this.scope.emit(name);};}else if(EVENTS[name]===1){Cbs.prototype["on"+name]=function(a){this.scope.emit(name,a);};}else if(EVENTS[name]===2){Cbs.prototype["on"+name]=function(a,b){this.scope.emit(name,a,b);};}else{throw Error("wrong number of arguments!");}});},{"../":34,"./WritableStream.js":33,"inherits":36}],32:[function(require,module,exports){module.exports=Tokenizer;var decodeCodePoint=require("entities/lib/decode_codepoint.js");var entityMap=require("entities/maps/entities.json");var legacyMap=require("entities/maps/legacy.json");var xmlMap=require("entities/maps/xml.json");var i=0;var TEXT=i++;var BEFORE_TAG_NAME=i++;//after <
var IN_TAG_NAME=i++;var IN_SELF_CLOSING_TAG=i++;var BEFORE_CLOSING_TAG_NAME=i++;var IN_CLOSING_TAG_NAME=i++;var AFTER_CLOSING_TAG_NAME=i++;//attributes
var BEFORE_ATTRIBUTE_NAME=i++;var IN_ATTRIBUTE_NAME=i++;var AFTER_ATTRIBUTE_NAME=i++;var BEFORE_ATTRIBUTE_VALUE=i++;var IN_ATTRIBUTE_VALUE_DQ=i++;// "
var IN_ATTRIBUTE_VALUE_SQ=i++;// '
var IN_ATTRIBUTE_VALUE_NQ=i++;//declarations
var BEFORE_DECLARATION=i++;// !
var IN_DECLARATION=i++;//processing instructions
var IN_PROCESSING_INSTRUCTION=i++;// ?
//comments
var BEFORE_COMMENT=i++;var IN_COMMENT=i++;var AFTER_COMMENT_1=i++;var AFTER_COMMENT_2=i++;//cdata
var BEFORE_CDATA_1=i++;// [
var BEFORE_CDATA_2=i++;// C
var BEFORE_CDATA_3=i++;// D
var BEFORE_CDATA_4=i++;// A
var BEFORE_CDATA_5=i++;// T
var BEFORE_CDATA_6=i++;// A
var IN_CDATA=i++;// [
var AFTER_CDATA_1=i++;// ]
var AFTER_CDATA_2=i++;// ]
//special tags
var BEFORE_SPECIAL=i++;//S
var BEFORE_SPECIAL_END=i++;//S
var BEFORE_SCRIPT_1=i++;//C
var BEFORE_SCRIPT_2=i++;//R
var BEFORE_SCRIPT_3=i++;//I
var BEFORE_SCRIPT_4=i++;//P
var BEFORE_SCRIPT_5=i++;//T
var AFTER_SCRIPT_1=i++;//C
var AFTER_SCRIPT_2=i++;//R
var AFTER_SCRIPT_3=i++;//I
var AFTER_SCRIPT_4=i++;//P
var AFTER_SCRIPT_5=i++;//T
var BEFORE_STYLE_1=i++;//T
var BEFORE_STYLE_2=i++;//Y
var BEFORE_STYLE_3=i++;//L
var BEFORE_STYLE_4=i++;//E
var AFTER_STYLE_1=i++;//T
var AFTER_STYLE_2=i++;//Y
var AFTER_STYLE_3=i++;//L
var AFTER_STYLE_4=i++;//E
var BEFORE_ENTITY=i++;//&
var BEFORE_NUMERIC_ENTITY=i++;//#
var IN_NAMED_ENTITY=i++;var IN_NUMERIC_ENTITY=i++;var IN_HEX_ENTITY=i++;//X
var j=0;var SPECIAL_NONE=j++;var SPECIAL_SCRIPT=j++;var SPECIAL_STYLE=j++;function whitespace(c){return c===" "||c==="\n"||c==="\t"||c==="\f"||c==="\r";}function ifElseState(upper,SUCCESS,FAILURE){var lower=upper.toLowerCase();if(upper===lower){return function(c){if(c===lower){this._state=SUCCESS;}else{this._state=FAILURE;this._index--;}};}else{return function(c){if(c===lower||c===upper){this._state=SUCCESS;}else{this._state=FAILURE;this._index--;}};}}function consumeSpecialNameChar(upper,NEXT_STATE){var lower=upper.toLowerCase();return function(c){if(c===lower||c===upper){this._state=NEXT_STATE;}else{this._state=IN_TAG_NAME;this._index--;//consume the token again
}};}function Tokenizer(options,cbs){this._state=TEXT;this._buffer="";this._sectionStart=0;this._index=0;this._bufferOffset=0;//chars removed from _buffer
this._baseState=TEXT;this._special=SPECIAL_NONE;this._cbs=cbs;this._running=true;this._ended=false;this._xmlMode=!!(options&&options.xmlMode);this._decodeEntities=!!(options&&options.decodeEntities);}Tokenizer.prototype._stateText=function(c){if(c==="<"){if(this._index>this._sectionStart){this._cbs.ontext(this._getSection());}this._state=BEFORE_TAG_NAME;this._sectionStart=this._index;}else if(this._decodeEntities&&this._special===SPECIAL_NONE&&c==="&"){if(this._index>this._sectionStart){this._cbs.ontext(this._getSection());}this._baseState=TEXT;this._state=BEFORE_ENTITY;this._sectionStart=this._index;}};Tokenizer.prototype._stateBeforeTagName=function(c){if(c==="/"){this._state=BEFORE_CLOSING_TAG_NAME;}else if(c==="<"){this._cbs.ontext(this._getSection());this._sectionStart=this._index;}else if(c===">"||this._special!==SPECIAL_NONE||whitespace(c)){this._state=TEXT;}else if(c==="!"){this._state=BEFORE_DECLARATION;this._sectionStart=this._index+1;}else if(c==="?"){this._state=IN_PROCESSING_INSTRUCTION;this._sectionStart=this._index+1;}else{this._state=!this._xmlMode&&(c==="s"||c==="S")?BEFORE_SPECIAL:IN_TAG_NAME;this._sectionStart=this._index;}};Tokenizer.prototype._stateInTagName=function(c){if(c==="/"||c===">"||whitespace(c)){this._emitToken("onopentagname");this._state=BEFORE_ATTRIBUTE_NAME;this._index--;}};Tokenizer.prototype._stateBeforeCloseingTagName=function(c){if(whitespace(c));else if(c===">"){this._state=TEXT;}else if(this._special!==SPECIAL_NONE){if(c==="s"||c==="S"){this._state=BEFORE_SPECIAL_END;}else{this._state=TEXT;this._index--;}}else{this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index;}};Tokenizer.prototype._stateInCloseingTagName=function(c){if(c===">"||whitespace(c)){this._emitToken("onclosetag");this._state=AFTER_CLOSING_TAG_NAME;this._index--;}};Tokenizer.prototype._stateAfterCloseingTagName=function(c){//skip everything until ">"
if(c===">"){this._state=TEXT;this._sectionStart=this._index+1;}};Tokenizer.prototype._stateBeforeAttributeName=function(c){if(c===">"){this._cbs.onopentagend();this._state=TEXT;this._sectionStart=this._index+1;}else if(c==="/"){this._state=IN_SELF_CLOSING_TAG;}else if(!whitespace(c)){this._state=IN_ATTRIBUTE_NAME;this._sectionStart=this._index;}};Tokenizer.prototype._stateInSelfClosingTag=function(c){if(c===">"){this._cbs.onselfclosingtag();this._state=TEXT;this._sectionStart=this._index+1;}else if(!whitespace(c)){this._state=BEFORE_ATTRIBUTE_NAME;this._index--;}};Tokenizer.prototype._stateInAttributeName=function(c){if(c==="="||c==="/"||c===">"||whitespace(c)){this._cbs.onattribname(this._getSection());this._sectionStart=-1;this._state=AFTER_ATTRIBUTE_NAME;this._index--;}};Tokenizer.prototype._stateAfterAttributeName=function(c){if(c==="="){this._state=BEFORE_ATTRIBUTE_VALUE;}else if(c==="/"||c===">"){this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;this._index--;}else if(!whitespace(c)){this._cbs.onattribend();this._state=IN_ATTRIBUTE_NAME;this._sectionStart=this._index;}};Tokenizer.prototype._stateBeforeAttributeValue=function(c){if(c==='"'){this._state=IN_ATTRIBUTE_VALUE_DQ;this._sectionStart=this._index+1;}else if(c==="'"){this._state=IN_ATTRIBUTE_VALUE_SQ;this._sectionStart=this._index+1;}else if(!whitespace(c)){this._state=IN_ATTRIBUTE_VALUE_NQ;this._sectionStart=this._index;this._index--;//reconsume token
}};Tokenizer.prototype._stateInAttributeValueDoubleQuotes=function(c){if(c==='"'){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index;}};Tokenizer.prototype._stateInAttributeValueSingleQuotes=function(c){if(c==="'"){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index;}};Tokenizer.prototype._stateInAttributeValueNoQuotes=function(c){if(whitespace(c)||c===">"){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;this._index--;}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index;}};Tokenizer.prototype._stateBeforeDeclaration=function(c){this._state=c==="["?BEFORE_CDATA_1:c==="-"?BEFORE_COMMENT:IN_DECLARATION;};Tokenizer.prototype._stateInDeclaration=function(c){if(c===">"){this._cbs.ondeclaration(this._getSection());this._state=TEXT;this._sectionStart=this._index+1;}};Tokenizer.prototype._stateInProcessingInstruction=function(c){if(c===">"){this._cbs.onprocessinginstruction(this._getSection());this._state=TEXT;this._sectionStart=this._index+1;}};Tokenizer.prototype._stateBeforeComment=function(c){if(c==="-"){this._state=IN_COMMENT;this._sectionStart=this._index+1;}else{this._state=IN_DECLARATION;}};Tokenizer.prototype._stateInComment=function(c){if(c==="-")this._state=AFTER_COMMENT_1;};Tokenizer.prototype._stateAfterComment1=function(c){if(c==="-"){this._state=AFTER_COMMENT_2;}else{this._state=IN_COMMENT;}};Tokenizer.prototype._stateAfterComment2=function(c){if(c===">"){//remove 2 trailing chars
this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2));this._state=TEXT;this._sectionStart=this._index+1;}else if(c!=="-"){this._state=IN_COMMENT;}// else: stay in AFTER_COMMENT_2 (`--->`)
};Tokenizer.prototype._stateBeforeCdata1=ifElseState("C",BEFORE_CDATA_2,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata2=ifElseState("D",BEFORE_CDATA_3,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata3=ifElseState("A",BEFORE_CDATA_4,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata4=ifElseState("T",BEFORE_CDATA_5,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata5=ifElseState("A",BEFORE_CDATA_6,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata6=function(c){if(c==="["){this._state=IN_CDATA;this._sectionStart=this._index+1;}else{this._state=IN_DECLARATION;this._index--;}};Tokenizer.prototype._stateInCdata=function(c){if(c==="]")this._state=AFTER_CDATA_1;};Tokenizer.prototype._stateAfterCdata1=function(c){if(c==="]")this._state=AFTER_CDATA_2;else this._state=IN_CDATA;};Tokenizer.prototype._stateAfterCdata2=function(c){if(c===">"){//remove 2 trailing chars
this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2));this._state=TEXT;this._sectionStart=this._index+1;}else if(c!=="]"){this._state=IN_CDATA;}//else: stay in AFTER_CDATA_2 (`]]]>`)
};Tokenizer.prototype._stateBeforeSpecial=function(c){if(c==="c"||c==="C"){this._state=BEFORE_SCRIPT_1;}else if(c==="t"||c==="T"){this._state=BEFORE_STYLE_1;}else{this._state=IN_TAG_NAME;this._index--;//consume the token again
}};Tokenizer.prototype._stateBeforeSpecialEnd=function(c){if(this._special===SPECIAL_SCRIPT&&(c==="c"||c==="C")){this._state=AFTER_SCRIPT_1;}else if(this._special===SPECIAL_STYLE&&(c==="t"||c==="T")){this._state=AFTER_STYLE_1;}else this._state=TEXT;};Tokenizer.prototype._stateBeforeScript1=consumeSpecialNameChar("R",BEFORE_SCRIPT_2);Tokenizer.prototype._stateBeforeScript2=consumeSpecialNameChar("I",BEFORE_SCRIPT_3);Tokenizer.prototype._stateBeforeScript3=consumeSpecialNameChar("P",BEFORE_SCRIPT_4);Tokenizer.prototype._stateBeforeScript4=consumeSpecialNameChar("T",BEFORE_SCRIPT_5);Tokenizer.prototype._stateBeforeScript5=function(c){if(c==="/"||c===">"||whitespace(c)){this._special=SPECIAL_SCRIPT;}this._state=IN_TAG_NAME;this._index--;//consume the token again
};Tokenizer.prototype._stateAfterScript1=ifElseState("R",AFTER_SCRIPT_2,TEXT);Tokenizer.prototype._stateAfterScript2=ifElseState("I",AFTER_SCRIPT_3,TEXT);Tokenizer.prototype._stateAfterScript3=ifElseState("P",AFTER_SCRIPT_4,TEXT);Tokenizer.prototype._stateAfterScript4=ifElseState("T",AFTER_SCRIPT_5,TEXT);Tokenizer.prototype._stateAfterScript5=function(c){if(c===">"||whitespace(c)){this._special=SPECIAL_NONE;this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index-6;this._index--;//reconsume the token
}else this._state=TEXT;};Tokenizer.prototype._stateBeforeStyle1=consumeSpecialNameChar("Y",BEFORE_STYLE_2);Tokenizer.prototype._stateBeforeStyle2=consumeSpecialNameChar("L",BEFORE_STYLE_3);Tokenizer.prototype._stateBeforeStyle3=consumeSpecialNameChar("E",BEFORE_STYLE_4);Tokenizer.prototype._stateBeforeStyle4=function(c){if(c==="/"||c===">"||whitespace(c)){this._special=SPECIAL_STYLE;}this._state=IN_TAG_NAME;this._index--;//consume the token again
};Tokenizer.prototype._stateAfterStyle1=ifElseState("Y",AFTER_STYLE_2,TEXT);Tokenizer.prototype._stateAfterStyle2=ifElseState("L",AFTER_STYLE_3,TEXT);Tokenizer.prototype._stateAfterStyle3=ifElseState("E",AFTER_STYLE_4,TEXT);Tokenizer.prototype._stateAfterStyle4=function(c){if(c===">"||whitespace(c)){this._special=SPECIAL_NONE;this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index-5;this._index--;//reconsume the token
}else this._state=TEXT;};Tokenizer.prototype._stateBeforeEntity=ifElseState("#",BEFORE_NUMERIC_ENTITY,IN_NAMED_ENTITY);Tokenizer.prototype._stateBeforeNumericEntity=ifElseState("X",IN_HEX_ENTITY,IN_NUMERIC_ENTITY);//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict=function(){//offset = 1
if(this._sectionStart+1<this._index){var entity=this._buffer.substring(this._sectionStart+1,this._index),map=this._xmlMode?xmlMap:entityMap;if(map.hasOwnProperty(entity)){this._emitPartial(map[entity]);this._sectionStart=this._index+1;}}};//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity=function(){var start=this._sectionStart+1,limit=this._index-start;if(limit>6)limit=6;//the max length of legacy entities is 6
while(limit>=2){//the min length of legacy entities is 2
var entity=this._buffer.substr(start,limit);if(legacyMap.hasOwnProperty(entity)){this._emitPartial(legacyMap[entity]);this._sectionStart+=limit+1;return;}else{limit--;}}};Tokenizer.prototype._stateInNamedEntity=function(c){if(c===";"){this._parseNamedEntityStrict();if(this._sectionStart+1<this._index&&!this._xmlMode){this._parseLegacyEntity();}this._state=this._baseState;}else if((c<"a"||c>"z")&&(c<"A"||c>"Z")&&(c<"0"||c>"9")){if(this._xmlMode);else if(this._sectionStart+1===this._index);else if(this._baseState!==TEXT){if(c!=="="){this._parseNamedEntityStrict();}}else{this._parseLegacyEntity();}this._state=this._baseState;this._index--;}};Tokenizer.prototype._decodeNumericEntity=function(offset,base){var sectionStart=this._sectionStart+offset;if(sectionStart!==this._index){//parse entity
var entity=this._buffer.substring(sectionStart,this._index);var parsed=parseInt(entity,base);this._emitPartial(decodeCodePoint(parsed));this._sectionStart=this._index;}else{this._sectionStart--;}this._state=this._baseState;};Tokenizer.prototype._stateInNumericEntity=function(c){if(c===";"){this._decodeNumericEntity(2,10);this._sectionStart++;}else if(c<"0"||c>"9"){if(!this._xmlMode){this._decodeNumericEntity(2,10);}else{this._state=this._baseState;}this._index--;}};Tokenizer.prototype._stateInHexEntity=function(c){if(c===";"){this._decodeNumericEntity(3,16);this._sectionStart++;}else if((c<"a"||c>"f")&&(c<"A"||c>"F")&&(c<"0"||c>"9")){if(!this._xmlMode){this._decodeNumericEntity(3,16);}else{this._state=this._baseState;}this._index--;}};Tokenizer.prototype._cleanup=function(){if(this._sectionStart<0){this._buffer="";this._bufferOffset+=this._index;this._index=0;}else if(this._running){if(this._state===TEXT){if(this._sectionStart!==this._index){this._cbs.ontext(this._buffer.substr(this._sectionStart));}this._buffer="";this._bufferOffset+=this._index;this._index=0;}else if(this._sectionStart===this._index){//the section just started
this._buffer="";this._bufferOffset+=this._index;this._index=0;}else{//remove everything unnecessary
this._buffer=this._buffer.substr(this._sectionStart);this._index-=this._sectionStart;this._bufferOffset+=this._sectionStart;}this._sectionStart=0;}};//TODO make events conditional
Tokenizer.prototype.write=function(chunk){if(this._ended)this._cbs.onerror(Error(".write() after done!"));this._buffer+=chunk;this._parse();};Tokenizer.prototype._parse=function(){while(this._index<this._buffer.length&&this._running){var c=this._buffer.charAt(this._index);if(this._state===TEXT){this._stateText(c);}else if(this._state===BEFORE_TAG_NAME){this._stateBeforeTagName(c);}else if(this._state===IN_TAG_NAME){this._stateInTagName(c);}else if(this._state===BEFORE_CLOSING_TAG_NAME){this._stateBeforeCloseingTagName(c);}else if(this._state===IN_CLOSING_TAG_NAME){this._stateInCloseingTagName(c);}else if(this._state===AFTER_CLOSING_TAG_NAME){this._stateAfterCloseingTagName(c);}else if(this._state===IN_SELF_CLOSING_TAG){this._stateInSelfClosingTag(c);}else if(this._state===BEFORE_ATTRIBUTE_NAME){/*
		*	attributes
		*/this._stateBeforeAttributeName(c);}else if(this._state===IN_ATTRIBUTE_NAME){this._stateInAttributeName(c);}else if(this._state===AFTER_ATTRIBUTE_NAME){this._stateAfterAttributeName(c);}else if(this._state===BEFORE_ATTRIBUTE_VALUE){this._stateBeforeAttributeValue(c);}else if(this._state===IN_ATTRIBUTE_VALUE_DQ){this._stateInAttributeValueDoubleQuotes(c);}else if(this._state===IN_ATTRIBUTE_VALUE_SQ){this._stateInAttributeValueSingleQuotes(c);}else if(this._state===IN_ATTRIBUTE_VALUE_NQ){this._stateInAttributeValueNoQuotes(c);}else if(this._state===BEFORE_DECLARATION){/*
		*	declarations
		*/this._stateBeforeDeclaration(c);}else if(this._state===IN_DECLARATION){this._stateInDeclaration(c);}else if(this._state===IN_PROCESSING_INSTRUCTION){/*
		*	processing instructions
		*/this._stateInProcessingInstruction(c);}else if(this._state===BEFORE_COMMENT){/*
		*	comments
		*/this._stateBeforeComment(c);}else if(this._state===IN_COMMENT){this._stateInComment(c);}else if(this._state===AFTER_COMMENT_1){this._stateAfterComment1(c);}else if(this._state===AFTER_COMMENT_2){this._stateAfterComment2(c);}else if(this._state===BEFORE_CDATA_1){/*
		*	cdata
		*/this._stateBeforeCdata1(c);}else if(this._state===BEFORE_CDATA_2){this._stateBeforeCdata2(c);}else if(this._state===BEFORE_CDATA_3){this._stateBeforeCdata3(c);}else if(this._state===BEFORE_CDATA_4){this._stateBeforeCdata4(c);}else if(this._state===BEFORE_CDATA_5){this._stateBeforeCdata5(c);}else if(this._state===BEFORE_CDATA_6){this._stateBeforeCdata6(c);}else if(this._state===IN_CDATA){this._stateInCdata(c);}else if(this._state===AFTER_CDATA_1){this._stateAfterCdata1(c);}else if(this._state===AFTER_CDATA_2){this._stateAfterCdata2(c);}else if(this._state===BEFORE_SPECIAL){/*
		* special tags
		*/this._stateBeforeSpecial(c);}else if(this._state===BEFORE_SPECIAL_END){this._stateBeforeSpecialEnd(c);}else if(this._state===BEFORE_SCRIPT_1){/*
		* script
		*/this._stateBeforeScript1(c);}else if(this._state===BEFORE_SCRIPT_2){this._stateBeforeScript2(c);}else if(this._state===BEFORE_SCRIPT_3){this._stateBeforeScript3(c);}else if(this._state===BEFORE_SCRIPT_4){this._stateBeforeScript4(c);}else if(this._state===BEFORE_SCRIPT_5){this._stateBeforeScript5(c);}else if(this._state===AFTER_SCRIPT_1){this._stateAfterScript1(c);}else if(this._state===AFTER_SCRIPT_2){this._stateAfterScript2(c);}else if(this._state===AFTER_SCRIPT_3){this._stateAfterScript3(c);}else if(this._state===AFTER_SCRIPT_4){this._stateAfterScript4(c);}else if(this._state===AFTER_SCRIPT_5){this._stateAfterScript5(c);}else if(this._state===BEFORE_STYLE_1){/*
		* style
		*/this._stateBeforeStyle1(c);}else if(this._state===BEFORE_STYLE_2){this._stateBeforeStyle2(c);}else if(this._state===BEFORE_STYLE_3){this._stateBeforeStyle3(c);}else if(this._state===BEFORE_STYLE_4){this._stateBeforeStyle4(c);}else if(this._state===AFTER_STYLE_1){this._stateAfterStyle1(c);}else if(this._state===AFTER_STYLE_2){this._stateAfterStyle2(c);}else if(this._state===AFTER_STYLE_3){this._stateAfterStyle3(c);}else if(this._state===AFTER_STYLE_4){this._stateAfterStyle4(c);}else if(this._state===BEFORE_ENTITY){/*
		* entities
		*/this._stateBeforeEntity(c);}else if(this._state===BEFORE_NUMERIC_ENTITY){this._stateBeforeNumericEntity(c);}else if(this._state===IN_NAMED_ENTITY){this._stateInNamedEntity(c);}else if(this._state===IN_NUMERIC_ENTITY){this._stateInNumericEntity(c);}else if(this._state===IN_HEX_ENTITY){this._stateInHexEntity(c);}else{this._cbs.onerror(Error("unknown _state"),this._state);}this._index++;}this._cleanup();};Tokenizer.prototype.pause=function(){this._running=false;};Tokenizer.prototype.resume=function(){this._running=true;if(this._index<this._buffer.length){this._parse();}if(this._ended){this._finish();}};Tokenizer.prototype.end=function(chunk){if(this._ended)this._cbs.onerror(Error(".end() after done!"));if(chunk)this.write(chunk);this._ended=true;if(this._running)this._finish();};Tokenizer.prototype._finish=function(){//if there is remaining data, emit it in a reasonable way
if(this._sectionStart<this._index){this._handleTrailingData();}this._cbs.onend();};Tokenizer.prototype._handleTrailingData=function(){var data=this._buffer.substr(this._sectionStart);if(this._state===IN_CDATA||this._state===AFTER_CDATA_1||this._state===AFTER_CDATA_2){this._cbs.oncdata(data);}else if(this._state===IN_COMMENT||this._state===AFTER_COMMENT_1||this._state===AFTER_COMMENT_2){this._cbs.oncomment(data);}else if(this._state===IN_NAMED_ENTITY&&!this._xmlMode){this._parseLegacyEntity();if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData();}}else if(this._state===IN_NUMERIC_ENTITY&&!this._xmlMode){this._decodeNumericEntity(2,10);if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData();}}else if(this._state===IN_HEX_ENTITY&&!this._xmlMode){this._decodeNumericEntity(3,16);if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData();}}else if(this._state!==IN_TAG_NAME&&this._state!==BEFORE_ATTRIBUTE_NAME&&this._state!==BEFORE_ATTRIBUTE_VALUE&&this._state!==AFTER_ATTRIBUTE_NAME&&this._state!==IN_ATTRIBUTE_NAME&&this._state!==IN_ATTRIBUTE_VALUE_SQ&&this._state!==IN_ATTRIBUTE_VALUE_DQ&&this._state!==IN_ATTRIBUTE_VALUE_NQ&&this._state!==IN_CLOSING_TAG_NAME){this._cbs.ontext(data);}//else, ignore remaining data
//TODO add a way to remove current tag
};Tokenizer.prototype.reset=function(){Tokenizer.call(this,{xmlMode:this._xmlMode,decodeEntities:this._decodeEntities},this._cbs);};Tokenizer.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index;};Tokenizer.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index);};Tokenizer.prototype._emitToken=function(name){this._cbs[name](this._getSection());this._sectionStart=-1;};Tokenizer.prototype._emitPartial=function(value){if(this._baseState!==TEXT){this._cbs.onattribdata(value);//TODO implement the new event
}else{this._cbs.ontext(value);}};},{"entities/lib/decode_codepoint.js":20,"entities/maps/entities.json":23,"entities/maps/legacy.json":24,"entities/maps/xml.json":25}],33:[function(require,module,exports){module.exports=Stream;var Parser=require("./Parser.js");var WritableStream=require("readable-stream").Writable;var StringDecoder=require("string_decoder").StringDecoder;var Buffer=require("buffer").Buffer;function Stream(cbs,options){var parser=this._parser=new Parser(cbs,options);var decoder=this._decoder=new StringDecoder();WritableStream.call(this,{decodeStrings:false});this.once("finish",function(){parser.end(decoder.end());});}dereq_inherits(Stream,WritableStream);Stream.prototype._write=function(chunk,encoding,cb){if(chunk instanceof Buffer)chunk=this._decoder.write(chunk);this._parser.write(chunk);cb();};},{"./Parser.js":29,"buffer":5,"inherits":36,"readable-stream":4,"string_decoder":86}],34:[function(require,module,exports){var Parser=require("./Parser.js");var DomHandler=require("domhandler");function defineProp(name,value){delete module.exports[name];module.exports[name]=value;return value;}module.exports={Parser:Parser,Tokenizer:require("./Tokenizer.js"),ElementType:require("domelementtype"),DomHandler:DomHandler,get FeedHandler(){return defineProp("FeedHandler",require("./FeedHandler.js"));},get Stream(){return defineProp("Stream",require("./Stream.js"));},get WritableStream(){return defineProp("WritableStream",require("./WritableStream.js"));},get ProxyHandler(){return defineProp("ProxyHandler",require("./ProxyHandler.js"));},get DomUtils(){return defineProp("DomUtils",require("domutils"));},get CollectingHandler(){return defineProp("CollectingHandler",require("./CollectingHandler.js"));},// For legacy support
DefaultHandler:DomHandler,get RssHandler(){return defineProp("RssHandler",this.FeedHandler);},//helper methods
parseDOM:function(data,options){var handler=new DomHandler(options);new Parser(handler,options).end(data);return handler.dom;},parseFeed:function(feed,options){var handler=new module.exports.FeedHandler(options);new Parser(handler,options).end(feed);return handler.dom;},createDomStream:function(cb,options,elementCb){var handler=new DomHandler(cb,options,elementCb);return new Parser(handler,options);},// List of all events that the parser emits
EVENTS:{/* Format: eventname: number of arguments */attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0}};},{"./CollectingHandler.js":27,"./FeedHandler.js":28,"./Parser.js":29,"./ProxyHandler.js":30,"./Stream.js":31,"./Tokenizer.js":32,"./WritableStream.js":33,"domelementtype":7,"domhandler":8,"domutils":11}],35:[function(require,module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};},{}],36:[function(require,module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}},{}],37:[function(require,module,exports){(function(global){/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',promiseTag='[object Promise]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */function addMapEntry(map,pair){// Don't return `map.set` because it's not chainable in IE 11.
map.set(pair[0],pair[1]);return map;}/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */function addSetEntry(set,value){// Don't return `set.add` because it's not chainable in IE 11.
set.add(value);return set;}/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */function arrayEach(array,iteratee){var index=-1,length=array?array.length:0;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array?array.length:0;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */function getValue(object,key){return object==null?undefined:object[key];}/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */function isHostObject(value){// Many host objects are `Object` objects that can coerce to strings
// despite having improperly defined `toString` methods.
var result=false;if(value!=null&&typeof value.toString!='function'){try{result=!!(value+'');}catch(e){}}return result;}/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=root['__core-js_shared__'];/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var objectToString=objectProto.toString;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?root.Buffer:undefined,Symbol=root.Symbol,Uint8Array=root.Uint8Array,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeKeys=overArg(Object.keys,Object);/* Built-in method references that are verified to be native. */var DataView=getNative(root,'DataView'),Map=getNative(root,'Map'),Promise=getNative(root,'Promise'),Set=getNative(root,'Set'),WeakMap=getNative(root,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined;/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Hash(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};}/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function hashDelete(key){return this.has(key)&&delete this.__data__[key];}/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */function hashSet(key,value){var data=this.__data__;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function ListCache(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */function listCacheClear(){this.__data__=[];}/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}return true;}/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function MapCache(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */function mapCacheClear(){this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function mapCacheDelete(key){return getMapData(this,key)['delete'](key);}/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */function mapCacheSet(key,value){getMapData(this,key).set(key,value);return this;}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Stack(entries){this.__data__=new ListCache(entries);}/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */function stackClear(){this.__data__=new ListCache();}/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function stackDelete(key){return this.__data__['delete'](key);}/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function stackGet(key){return this.__data__.get(key);}/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function stackHas(key){return this.__data__.has(key);}/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */function stackSet(key,value){var cache=this.__data__;if(cache instanceof ListCache){var pairs=cache.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);return this;}cache=this.__data__=new MapCache(pairs);}cache.set(key,value);return this;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */function arrayLikeKeys(value,inherited){// Safari 8.1 makes `arguments.callee` enumerable in strict mode.
// Safari 9 makes `arguments.length` enumerable in strict mode.
var result=isArray(value)||isArguments(value)?baseTimes(value.length,String):[];var length=result.length,skipIndexes=!!length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(key=='length'||isIndex(key,length)))){result.push(key);}}return result;}/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){object[key]=value;}}/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */function baseClone(value,isDeep,isFull,customizer,key,object,stack){var result;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){if(isHostObject(value)){return object?value:{};}result=initCloneObject(isFunc?{}:value);if(!isDeep){return copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,baseClone,isDeep);}}// Check for circular references and return its corresponding clone.
stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(!isArr){var props=isFull?getAllKeys(value):keys(value);}arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
assignValue(result,key,baseClone(subValue,isDeep,isFull,customizer,key,value,stack));});return result;}/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */function baseCreate(proto){return isObject(proto)?objectCreate(proto):{};}/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */function baseGetTag(value){return objectToString.call(value);}/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)||isHostObject(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var result=new buffer.constructor(buffer.length);buffer.copy(result);return result;}/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */function cloneMap(map,isDeep,cloneFunc){var array=isDeep?cloneFunc(mapToArray(map),true):mapToArray(map);return arrayReduce(array,addMapEntry,new map.constructor());}/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */function cloneSet(set,isDeep,cloneFunc){var array=isDeep?cloneFunc(setToArray(set),true):setToArray(set);return arrayReduce(array,addSetEntry,new set.constructor());}/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */function copyObject(source,props,object,customizer){object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;assignValue(object,key,newValue===undefined?source[key]:newValue);}return object;}/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */var getSymbols=nativeGetSymbols?overArg(nativeGetSymbols,Object):stubArray;/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function(value){var result=objectToString.call(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):undefined;if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */function initCloneArray(array){var length=array.length,result=array.constructor(length);// Add properties assigned by `RegExp#exec`.
if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */function initCloneByTag(object,tag,cloneFunc,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object,isDeep,cloneFunc);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object,isDeep,cloneFunc);case symbolTag:return cloneSymbol(object);}}/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */function isKeyable(value){var type=typeof value;return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */function cloneDeep(value){return baseClone(value,true,true);}/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */function eq(value,other){return value===other||value!==value&&other!==other;}/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */function isArguments(value){// Safari 8.1 makes `arguments.callee` enumerable in strict mode.
return isArrayLikeObject(value)&&hasOwnProperty.call(value,'callee')&&(!propertyIsEnumerable.call(value,'callee')||objectToString.call(value)==argsTag);}/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */var isArray=Array.isArray;/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */var isBuffer=nativeIsBuffer||stubFalse;/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */function isFunction(value){// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 8-9 which returns 'object' for typed array and other constructors.
var tag=isObject(value)?objectToString.call(value):'';return tag==funcTag||tag==genTag;}/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */function isObject(value){var type=typeof value;return!!value&&(type=='object'||type=='function');}/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return!!value&&typeof value=='object';}/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */function stubArray(){return[];}/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */function stubFalse(){return false;}module.exports=cloneDeep;}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],38:[function(require,module,exports){(function(global){/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */var INFINITY=1/0;/** `Object#toString` result references. */var symbolTag='[object Symbol]';/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
 */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Used for built-in method references. */var objectProto=Object.prototype;/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */var objectToString=objectProto.toString;/** Built-in value references. */var Symbol=root.Symbol;/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){return value;}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return!!value&&typeof value=='object';}/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&objectToString.call(value)==symbolTag;}/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */function toString(value){return value==null?'':baseToString(value);}/**
 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}module.exports=escapeRegExp;}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],39:[function(require,module,exports){/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** `Object#toString` result references. */var objectTag='[object Object]';/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */function isHostObject(value){// Many host objects are `Object` objects that can coerce to strings
// despite having improperly defined `toString` methods.
var result=false;if(value!=null&&typeof value.toString!='function'){try{result=!!(value+'');}catch(e){}}return result;}/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */function overArg(func,transform){return function(arg){return func(transform(arg));};}/** Used for built-in method references. */var funcProto=Function.prototype,objectProto=Object.prototype;/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var objectToString=objectProto.toString;/** Built-in value references. */var getPrototype=overArg(Object.getPrototypeOf,Object);/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return!!value&&typeof value=='object';}/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */function isPlainObject(value){if(!isObjectLike(value)||objectToString.call(value)!=objectTag||isHostObject(value)){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}module.exports=isPlainObject;},{}],40:[function(require,module,exports){/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /** `Object#toString` result references. */var stringTag='[object String]';/** Used for built-in method references. */var objectProto=Object.prototype;/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */var objectToString=objectProto.toString;/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */var isArray=Array.isArray;/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return!!value&&typeof value=='object';}/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&objectToString.call(value)==stringTag;}module.exports=isString;},{}],41:[function(require,module,exports){(function(global){/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */function baseUnary(func){return function(value){return func(value);};}/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */function getValue(object,key){return object==null?undefined:object[key];}/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
 * Gets the value at `key`, unless `key` is "__proto__".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */function safeGet(object,key){return key=='__proto__'?undefined:object[key];}/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=root['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?root.Buffer:undefined,Symbol=root.Symbol,Uint8Array=root.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,symToStringTag=Symbol?Symbol.toStringTag:undefined;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/* Built-in method references for those with the same name as other `lodash` methods. */var nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeMax=Math.max,nativeNow=Date.now;/* Built-in method references that are verified to be native. */var Map=getNative(root,'Map'),nativeCreate=getNative(Object,'create');/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return{};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined;return result;};}();/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */function listCacheClear(){this.__data__=[];this.size=0;}/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function stackGet(key){return this.__data__.get(key);}/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function stackHas(key){return this.__data__.has(key);}/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */function assignMergeValue(object,key,value){if(value!==undefined&&!eq(object[key],value)||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{object[key]=value;}}/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */var baseFor=createBaseFor();/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){if(isObject(srcValue)){stack||(stack=new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined;if(newValue===undefined){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined;var isCommon=newValue===undefined;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else{newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||srcIndex&&isFunction(objValue)){newValue=initCloneObject(srcValue);}}else{isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;if(newValue===undefined){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else{assignValue(object,key,newValue);}}return object;}/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined,guard=length>2?sources[2]:undefined;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */function isIndex(value,length){var type=typeof value;length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index;if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */function isKeyable(value){var type=typeof value;return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */function objectToString(value){return nativeObjectToString.call(value);}/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */function overRest(func,start,transform){start=nativeMax(start===undefined?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */var setToString=shortOut(baseSetToString);/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else{count=0;}return func.apply(undefined,arguments);};}/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */function eq(value,other){return value===other||value!==value&&other!==other;}/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */var isArray=Array.isArray;/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */var isBuffer=nativeIsBuffer||stubFalse;/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return value!=null&&typeof value=='object';}/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */function constant(value){return function(){return value;};}/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */function identity(value){return value;}/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */function stubFalse(){return false;}module.exports=mergeWith;}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],42:[function(require,module,exports){'use strict';module.exports=Number.isNaN||function(x){return x!==x;};},{}],43:[function(require,module,exports){(function(process){// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts,allowAboveRoot){// if the path tries to go above the root, `up` ends up > 0
var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==='.'){parts.splice(i,1);}else if(last==='..'){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}// if the path is allowed to go above the root, restore leading ..s
if(allowAboveRoot){for(;up--;up){parts.unshift('..');}}return parts;}// path.resolve([from ...], to)
// posix version
exports.resolve=function(){var resolvedPath='',resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();// Skip empty and invalid entries
if(typeof path!=='string'){throw new TypeError('Arguments to path.resolve must be strings');}else if(!path){continue;}resolvedPath=path+'/'+resolvedPath;resolvedAbsolute=path.charAt(0)==='/';}// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)
// Normalize the path
resolvedPath=normalizeArray(filter(resolvedPath.split('/'),function(p){return!!p;}),!resolvedAbsolute).join('/');return(resolvedAbsolute?'/':'')+resolvedPath||'.';};// path.normalize(path)
// posix version
exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==='/';// Normalize the path
path=normalizeArray(filter(path.split('/'),function(p){return!!p;}),!isAbsolute).join('/');if(!path&&!isAbsolute){path='.';}if(path&&trailingSlash){path+='/';}return(isAbsolute?'/':'')+path;};// posix version
exports.isAbsolute=function(path){return path.charAt(0)==='/';};// posix version
exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=='string'){throw new TypeError('Arguments to path.join must be strings');}return p;}).join('/'));};// path.relative(from, to)
// posix version
exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=='')break;}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=='')break;}if(start>end)return[];return arr.slice(start,end-start+1);}var fromParts=trim(from.split('/'));var toParts=trim(to.split('/'));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break;}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push('..');}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join('/');};exports.sep='/';exports.delimiter=':';exports.dirname=function(path){if(typeof path!=='string')path=path+'';if(path.length===0)return'.';var code=path.charCodeAt(0);var hasRoot=code===47/*/*/;var end=-1;var matchedSlash=true;for(var i=path.length-1;i>=1;--i){code=path.charCodeAt(i);if(code===47/*/*/){if(!matchedSlash){end=i;break;}}else{// We saw the first non-path separator
matchedSlash=false;}}if(end===-1)return hasRoot?'/':'.';if(hasRoot&&end===1){// return '//';
// Backwards-compat fix:
return'/';}return path.slice(0,end);};function basename(path){if(typeof path!=='string')path=path+'';var start=0;var end=-1;var matchedSlash=true;var i;for(i=path.length-1;i>=0;--i){if(path.charCodeAt(i)===47/*/*/){// If we reached a path separator that was not part of a set of path
// separators at the end of the string, stop now
if(!matchedSlash){start=i+1;break;}}else if(end===-1){// We saw the first non-path separator, mark this as the end of our
// path component
matchedSlash=false;end=i+1;}}if(end===-1)return'';return path.slice(start,end);}// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename=function(path,ext){var f=basename(path);if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length);}return f;};exports.extname=function(path){if(typeof path!=='string')path=path+'';var startDot=-1;var startPart=0;var end=-1;var matchedSlash=true;// Track the state of characters (if any) we see before our first dot and
// after any path separator we find
var preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47/*/*/){// If we reached a path separator that was not part of a set of path
// separators at the end of the string, stop now
if(!matchedSlash){startPart=i+1;break;}continue;}if(end===-1){// We saw the first non-path separator, mark this as the end of our
// extension
matchedSlash=false;end=i+1;}if(code===46/*.*/){// If this is our first dot, mark it as the start of our extension
if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1;}else if(startDot!==-1){// We saw a non-dot and non-path separator before our dot, so we should
// have a good chance at having a non-empty extension
preDotState=-1;}}if(startDot===-1||end===-1||// We saw a non-dot character immediately before the dot
preDotState===0||// The (right-most) trimmed path component is exactly '..'
preDotState===1&&startDot===end-1&&startDot===startPart+1){return'';}return path.slice(startDot,end);};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i]);}return res;}// String.prototype.substr - negative index don't work in IE8
var substr='ab'.substr(-1)==='b'?function(str,start,len){return str.substr(start,len);}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len);};}).call(this,require('_process'));},{"_process":68}],44:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _container=_interopRequireDefault(require("./container"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}/**
 * Represents an at-rule.
 *
 * If it’s followed in the CSS by a {} block, this node will have
 * a nodes property representing its children.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('@charset "UTF-8"; @media print {}')
 *
 * const charset = root.first
 * charset.type  //=> 'atrule'
 * charset.nodes //=> undefined
 *
 * const media = root.last
 * media.nodes   //=> []
 */var AtRule=/*#__PURE__*/function(_Container){_inheritsLoose(AtRule,_Container);function AtRule(defaults){var _this;_this=_Container.call(this,defaults)||this;_this.type='atrule';return _this;}var _proto=AtRule.prototype;_proto.append=function append(){var _Container$prototype$;if(!this.nodes)this.nodes=[];for(var _len=arguments.length,children=new Array(_len),_key=0;_key<_len;_key++){children[_key]=arguments[_key];}return(_Container$prototype$=_Container.prototype.append).call.apply(_Container$prototype$,[this].concat(children));};_proto.prepend=function prepend(){var _Container$prototype$2;if(!this.nodes)this.nodes=[];for(var _len2=arguments.length,children=new Array(_len2),_key2=0;_key2<_len2;_key2++){children[_key2]=arguments[_key2];}return(_Container$prototype$2=_Container.prototype.prepend).call.apply(_Container$prototype$2,[this].concat(children));}/**
   * @memberof AtRule#
   * @member {string} name The at-rule’s name immediately follows the `@`.
   *
   * @example
   * const root  = postcss.parse('@media print {}')
   * media.name //=> 'media'
   * const media = root.first
   */ /**
   * @memberof AtRule#
   * @member {string} params The at-rule’s parameters, the values
   *                         that follow the at-rule’s name but precede
   *                         any {} block.
   *
   * @example
   * const root  = postcss.parse('@media print, screen {}')
   * const media = root.first
   * media.params //=> 'print, screen'
   */ /**
   * @memberof AtRule#
   * @member {object} raws Information to generate byte-to-byte equal
   *                        node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node. It also stores `*`
   *   and `_` symbols before the declaration (IE hack).
   * * `after`: the space symbols after the last child of the node
   *   to the end of the node.
   * * `between`: the symbols between the property and value
   *   for declarations, selector and `{` for rules, or last parameter
   *   and `{` for at-rules.
   * * `semicolon`: contains true if the last child has
   *   an (optional) semicolon.
   * * `afterName`: the space between the at-rule name and its parameters.
   *
   * PostCSS cleans at-rule parameters from comments and extra spaces,
   * but it stores origin content in raws properties.
   * As such, if you don’t change a declaration’s value,
   * PostCSS will use the raw value with comments.
   *
   * @example
   * const root = postcss.parse('  @media\nprint {\n}')
   * root.first.first.raws //=> { before: '  ',
   *                       //     between: ' ',
   *                       //     afterName: '\n',
   *                       //     after: '\n' }
   */;return AtRule;}(_container.default);var _default=AtRule;exports.default=_default;module.exports=exports.default;},{"./container":46}],45:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _node=_interopRequireDefault(require("./node"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}/**
 * Represents a comment between declarations or statements (rule and at-rules).
 *
 * Comments inside selectors, at-rule parameters, or declaration values
 * will be stored in the `raws` properties explained above.
 *
 * @extends Node
 */var Comment=/*#__PURE__*/function(_Node){_inheritsLoose(Comment,_Node);function Comment(defaults){var _this;_this=_Node.call(this,defaults)||this;_this.type='comment';return _this;}/**
   * @memberof Comment#
   * @member {string} text The comment’s text.
   */ /**
   * @memberof Comment#
   * @member {object} raws Information to generate byte-to-byte equal
   *                       node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node.
   * * `left`: the space symbols between `/*` and the comment’s text.
   * * `right`: the space symbols between the comment’s text.
   */return Comment;}(_node.default);var _default=Comment;exports.default=_default;module.exports=exports.default;},{"./node":53}],46:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _declaration=_interopRequireDefault(require("./declaration"));var _comment=_interopRequireDefault(require("./comment"));var _node=_interopRequireDefault(require("./node"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}function cleanSource(nodes){return nodes.map(function(i){if(i.nodes)i.nodes=cleanSource(i.nodes);delete i.source;return i;});}/**
 * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes
 * inherit some common methods to help work with their children.
 *
 * Note that all containers can store any content. If you write a rule inside
 * a rule, PostCSS will parse it.
 *
 * @extends Node
 * @abstract
 */var Container=/*#__PURE__*/function(_Node){_inheritsLoose(Container,_Node);function Container(){return _Node.apply(this,arguments)||this;}var _proto=Container.prototype;_proto.push=function push(child){child.parent=this;this.nodes.push(child);return this;}/**
   * Iterates through the container’s immediate children,
   * calling `callback` for each child.
   *
   * Returning `false` in the callback will break iteration.
   *
   * This method only iterates through the container’s immediate children.
   * If you need to recursively iterate through all the container’s descendant
   * nodes, use {@link Container#walk}.
   *
   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe
   * if you are mutating the array of child nodes during iteration.
   * PostCSS will adjust the current index to match the mutations.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * const root = postcss.parse('a { color: black; z-index: 1 }')
   * const rule = root.first
   *
   * for (const decl of rule.nodes) {
   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
   *   // Cycle will be infinite, because cloneBefore moves the current node
   *   // to the next index
   * }
   *
   * rule.each(decl => {
   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
   *   // Will be executed only for color and z-index
   * })
   */;_proto.each=function each(callback){if(!this.lastEach)this.lastEach=0;if(!this.indexes)this.indexes={};this.lastEach+=1;var id=this.lastEach;this.indexes[id]=0;if(!this.nodes)return undefined;var index,result;while(this.indexes[id]<this.nodes.length){index=this.indexes[id];result=callback(this.nodes[index],index);if(result===false)break;this.indexes[id]+=1;}delete this.indexes[id];return result;}/**
   * Traverses the container’s descendant nodes, calling callback
   * for each node.
   *
   * Like container.each(), this method is safe to use
   * if you are mutating arrays during iteration.
   *
   * If you only need to iterate through the container’s immediate children,
   * use {@link Container#each}.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walk(node => {
   *   // Traverses all descendant nodes.
   * })
   */;_proto.walk=function walk(callback){return this.each(function(child,i){var result;try{result=callback(child,i);}catch(e){e.postcssNode=child;if(e.stack&&child.source&&/\n\s{4}at /.test(e.stack)){var s=child.source;e.stack=e.stack.replace(/\n\s{4}at /,"$&"+s.input.from+":"+s.start.line+":"+s.start.column+"$&");}throw e;}if(result!==false&&child.walk){result=child.walk(callback);}return result;});}/**
   * Traverses the container’s descendant nodes, calling callback
   * for each declaration node.
   *
   * If you pass a filter, iteration will only happen over declarations
   * with matching properties.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [prop]   String or regular expression
   *                                 to filter declarations by property name.
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkDecls(decl => {
   *   checkPropertySupport(decl.prop)
   * })
   *
   * root.walkDecls('border-radius', decl => {
   *   decl.remove()
   * })
   *
   * root.walkDecls(/^background/, decl => {
   *   decl.value = takeFirstColorFromGradient(decl.value)
   * })
   */;_proto.walkDecls=function walkDecls(prop,callback){if(!callback){callback=prop;return this.walk(function(child,i){if(child.type==='decl'){return callback(child,i);}});}if(prop instanceof RegExp){return this.walk(function(child,i){if(child.type==='decl'&&prop.test(child.prop)){return callback(child,i);}});}return this.walk(function(child,i){if(child.type==='decl'&&child.prop===prop){return callback(child,i);}});}/**
   * Traverses the container’s descendant nodes, calling callback
   * for each rule node.
   *
   * If you pass a filter, iteration will only happen over rules
   * with matching selectors.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [selector] String or regular expression
   *                                   to filter rules by selector.
   * @param {childIterator} callback   Iterator receives each node and index.
   *
   * @return {false|undefined} returns `false` if iteration was broke.
   *
   * @example
   * const selectors = []
   * root.walkRules(rule => {
   *   selectors.push(rule.selector)
   * })
   * console.log(`Your CSS uses ${ selectors.length } selectors`)
   */;_proto.walkRules=function walkRules(selector,callback){if(!callback){callback=selector;return this.walk(function(child,i){if(child.type==='rule'){return callback(child,i);}});}if(selector instanceof RegExp){return this.walk(function(child,i){if(child.type==='rule'&&selector.test(child.selector)){return callback(child,i);}});}return this.walk(function(child,i){if(child.type==='rule'&&child.selector===selector){return callback(child,i);}});}/**
   * Traverses the container’s descendant nodes, calling callback
   * for each at-rule node.
   *
   * If you pass a filter, iteration will only happen over at-rules
   * that have matching names.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [name]   String or regular expression
   *                                 to filter at-rules by name.
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkAtRules(rule => {
   *   if (isOld(rule.name)) rule.remove()
   * })
   *
   * let first = false
   * root.walkAtRules('charset', rule => {
   *   if (!first) {
   *     first = true
   *   } else {
   *     rule.remove()
   *   }
   * })
   */;_proto.walkAtRules=function walkAtRules(name,callback){if(!callback){callback=name;return this.walk(function(child,i){if(child.type==='atrule'){return callback(child,i);}});}if(name instanceof RegExp){return this.walk(function(child,i){if(child.type==='atrule'&&name.test(child.name)){return callback(child,i);}});}return this.walk(function(child,i){if(child.type==='atrule'&&child.name===name){return callback(child,i);}});}/**
   * Traverses the container’s descendant nodes, calling callback
   * for each comment node.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkComments(comment => {
   *   comment.remove()
   * })
   */;_proto.walkComments=function walkComments(callback){return this.walk(function(child,i){if(child.type==='comment'){return callback(child,i);}});}/**
   * Inserts new nodes to the end of the container.
   *
   * @param {...(Node|object|string|Node[])} children New nodes.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
   * rule.append(decl1, decl2)
   *
   * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
   * root.append({ selector: 'a' })                       // rule
   * rule.append({ prop: 'color', value: 'black' })       // declaration
   * rule.append({ text: 'Comment' })                     // comment
   *
   * root.append('a {}')
   * root.first.append('color: black; z-index: 1')
   */;_proto.append=function append(){for(var _len=arguments.length,children=new Array(_len),_key=0;_key<_len;_key++){children[_key]=arguments[_key];}for(var _i=0;_i<children.length;_i++){var child=children[_i];var nodes=this.normalize(child,this.last);for(var _iterator=nodes,_isArray=Array.isArray(_iterator),_i2=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i2>=_iterator.length)break;_ref=_iterator[_i2++];}else{_i2=_iterator.next();if(_i2.done)break;_ref=_i2.value;}var node=_ref;this.nodes.push(node);}}return this;}/**
   * Inserts new nodes to the start of the container.
   *
   * @param {...(Node|object|string|Node[])} children New nodes.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
   * rule.prepend(decl1, decl2)
   *
   * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
   * root.append({ selector: 'a' })                       // rule
   * rule.append({ prop: 'color', value: 'black' })       // declaration
   * rule.append({ text: 'Comment' })                     // comment
   *
   * root.append('a {}')
   * root.first.append('color: black; z-index: 1')
   */;_proto.prepend=function prepend(){for(var _len2=arguments.length,children=new Array(_len2),_key2=0;_key2<_len2;_key2++){children[_key2]=arguments[_key2];}children=children.reverse();for(var _iterator2=children,_isArray2=Array.isArray(_iterator2),_i3=0,_iterator2=_isArray2?_iterator2:_iterator2[Symbol.iterator]();;){var _ref2;if(_isArray2){if(_i3>=_iterator2.length)break;_ref2=_iterator2[_i3++];}else{_i3=_iterator2.next();if(_i3.done)break;_ref2=_i3.value;}var child=_ref2;var nodes=this.normalize(child,this.first,'prepend').reverse();for(var _iterator3=nodes,_isArray3=Array.isArray(_iterator3),_i4=0,_iterator3=_isArray3?_iterator3:_iterator3[Symbol.iterator]();;){var _ref3;if(_isArray3){if(_i4>=_iterator3.length)break;_ref3=_iterator3[_i4++];}else{_i4=_iterator3.next();if(_i4.done)break;_ref3=_i4.value;}var node=_ref3;this.nodes.unshift(node);}for(var id in this.indexes){this.indexes[id]=this.indexes[id]+nodes.length;}}return this;};_proto.cleanRaws=function cleanRaws(keepBetween){_Node.prototype.cleanRaws.call(this,keepBetween);if(this.nodes){for(var _iterator4=this.nodes,_isArray4=Array.isArray(_iterator4),_i5=0,_iterator4=_isArray4?_iterator4:_iterator4[Symbol.iterator]();;){var _ref4;if(_isArray4){if(_i5>=_iterator4.length)break;_ref4=_iterator4[_i5++];}else{_i5=_iterator4.next();if(_i5.done)break;_ref4=_i5.value;}var node=_ref4;node.cleanRaws(keepBetween);}}}/**
   * Insert new node before old node within the container.
   *
   * @param {Node|number} exist             Child or child’s index.
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))
   */;_proto.insertBefore=function insertBefore(exist,add){exist=this.index(exist);var type=exist===0?'prepend':false;var nodes=this.normalize(add,this.nodes[exist],type).reverse();for(var _iterator5=nodes,_isArray5=Array.isArray(_iterator5),_i6=0,_iterator5=_isArray5?_iterator5:_iterator5[Symbol.iterator]();;){var _ref5;if(_isArray5){if(_i6>=_iterator5.length)break;_ref5=_iterator5[_i6++];}else{_i6=_iterator5.next();if(_i6.done)break;_ref5=_i6.value;}var node=_ref5;this.nodes.splice(exist,0,node);}var index;for(var id in this.indexes){index=this.indexes[id];if(exist<=index){this.indexes[id]=index+nodes.length;}}return this;}/**
   * Insert new node after old node within the container.
   *
   * @param {Node|number} exist             Child or child’s index.
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   */;_proto.insertAfter=function insertAfter(exist,add){exist=this.index(exist);var nodes=this.normalize(add,this.nodes[exist]).reverse();for(var _iterator6=nodes,_isArray6=Array.isArray(_iterator6),_i7=0,_iterator6=_isArray6?_iterator6:_iterator6[Symbol.iterator]();;){var _ref6;if(_isArray6){if(_i7>=_iterator6.length)break;_ref6=_iterator6[_i7++];}else{_i7=_iterator6.next();if(_i7.done)break;_ref6=_i7.value;}var node=_ref6;this.nodes.splice(exist+1,0,node);}var index;for(var id in this.indexes){index=this.indexes[id];if(exist<index){this.indexes[id]=index+nodes.length;}}return this;}/**
   * Removes node from the container and cleans the parent properties
   * from the node and its children.
   *
   * @param {Node|number} child Child or child’s index.
   *
   * @return {Node} This node for methods chain
   *
   * @example
   * rule.nodes.length  //=> 5
   * rule.removeChild(decl)
   * rule.nodes.length  //=> 4
   * decl.parent        //=> undefined
   */;_proto.removeChild=function removeChild(child){child=this.index(child);this.nodes[child].parent=undefined;this.nodes.splice(child,1);var index;for(var id in this.indexes){index=this.indexes[id];if(index>=child){this.indexes[id]=index-1;}}return this;}/**
   * Removes all children from the container
   * and cleans their parent properties.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * rule.removeAll()
   * rule.nodes.length //=> 0
   */;_proto.removeAll=function removeAll(){for(var _iterator7=this.nodes,_isArray7=Array.isArray(_iterator7),_i8=0,_iterator7=_isArray7?_iterator7:_iterator7[Symbol.iterator]();;){var _ref7;if(_isArray7){if(_i8>=_iterator7.length)break;_ref7=_iterator7[_i8++];}else{_i8=_iterator7.next();if(_i8.done)break;_ref7=_i8.value;}var node=_ref7;node.parent=undefined;}this.nodes=[];return this;}/**
   * Passes all declaration values within the container that match pattern
   * through callback, replacing those values with the returned result
   * of callback.
   *
   * This method is useful if you are using a custom unit or function
   * and need to iterate through all values.
   *
   * @param {string|RegExp} pattern      Replace pattern.
   * @param {object} opts                Options to speed up the search.
   * @param {string|string[]} opts.props An array of property names.
   * @param {string} opts.fast           String that’s used to narrow down
   *                                     values and speed up the regexp search.
   * @param {function|string} callback   String to replace pattern or callback
   *                                     that returns a new value. The callback
   *                                     will receive the same arguments
   *                                     as those passed to a function parameter
   *                                     of `String#replace`.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * root.replaceValues(/\d+rem/, { fast: 'rem' }, string => {
   *   return 15 * parseInt(string) + 'px'
   * })
   */;_proto.replaceValues=function replaceValues(pattern,opts,callback){if(!callback){callback=opts;opts={};}this.walkDecls(function(decl){if(opts.props&&opts.props.indexOf(decl.prop)===-1)return;if(opts.fast&&decl.value.indexOf(opts.fast)===-1)return;decl.value=decl.value.replace(pattern,callback);});return this;}/**
   * Returns `true` if callback returns `true`
   * for all of the container’s children.
   *
   * @param {childCondition} condition Iterator returns true or false.
   *
   * @return {boolean} Is every child pass condition.
   *
   * @example
   * const noPrefixes = rule.every(i => i.prop[0] !== '-')
   */;_proto.every=function every(condition){return this.nodes.every(condition);}/**
   * Returns `true` if callback returns `true` for (at least) one
   * of the container’s children.
   *
   * @param {childCondition} condition Iterator returns true or false.
   *
   * @return {boolean} Is some child pass condition.
   *
   * @example
   * const hasPrefix = rule.some(i => i.prop[0] === '-')
   */;_proto.some=function some(condition){return this.nodes.some(condition);}/**
   * Returns a `child`’s index within the {@link Container#nodes} array.
   *
   * @param {Node} child Child of the current container.
   *
   * @return {number} Child index.
   *
   * @example
   * rule.index( rule.nodes[2] ) //=> 2
   */;_proto.index=function index(child){if(typeof child==='number'){return child;}return this.nodes.indexOf(child);}/**
   * The container’s first child.
   *
   * @type {Node}
   *
   * @example
   * rule.first === rules.nodes[0]
   */;_proto.normalize=function normalize(nodes,sample){var _this=this;if(typeof nodes==='string'){var parse=require('./parse');nodes=cleanSource(parse(nodes).nodes);}else if(Array.isArray(nodes)){nodes=nodes.slice(0);for(var _iterator8=nodes,_isArray8=Array.isArray(_iterator8),_i9=0,_iterator8=_isArray8?_iterator8:_iterator8[Symbol.iterator]();;){var _ref8;if(_isArray8){if(_i9>=_iterator8.length)break;_ref8=_iterator8[_i9++];}else{_i9=_iterator8.next();if(_i9.done)break;_ref8=_i9.value;}var i=_ref8;if(i.parent)i.parent.removeChild(i,'ignore');}}else if(nodes.type==='root'){nodes=nodes.nodes.slice(0);for(var _iterator9=nodes,_isArray9=Array.isArray(_iterator9),_i10=0,_iterator9=_isArray9?_iterator9:_iterator9[Symbol.iterator]();;){var _ref9;if(_isArray9){if(_i10>=_iterator9.length)break;_ref9=_iterator9[_i10++];}else{_i10=_iterator9.next();if(_i10.done)break;_ref9=_i10.value;}var _i11=_ref9;if(_i11.parent)_i11.parent.removeChild(_i11,'ignore');}}else if(nodes.type){nodes=[nodes];}else if(nodes.prop){if(typeof nodes.value==='undefined'){throw new Error('Value field is missed in node creation');}else if(typeof nodes.value!=='string'){nodes.value=String(nodes.value);}nodes=[new _declaration.default(nodes)];}else if(nodes.selector){var Rule=require('./rule');nodes=[new Rule(nodes)];}else if(nodes.name){var AtRule=require('./at-rule');nodes=[new AtRule(nodes)];}else if(nodes.text){nodes=[new _comment.default(nodes)];}else{throw new Error('Unknown node type in node creation');}var processed=nodes.map(function(i){if(i.parent)i.parent.removeChild(i);if(typeof i.raws.before==='undefined'){if(sample&&typeof sample.raws.before!=='undefined'){i.raws.before=sample.raws.before.replace(/[^\s]/g,'');}}i.parent=_this;return i;});return processed;}/**
   * @memberof Container#
   * @member {Node[]} nodes An array containing the container’s children.
   *
   * @example
   * const root = postcss.parse('a { color: black }')
   * root.nodes.length           //=> 1
   * root.nodes[0].selector      //=> 'a'
   * root.nodes[0].nodes[0].prop //=> 'color'
   */;_createClass(Container,[{key:"first",get:function get(){if(!this.nodes)return undefined;return this.nodes[0];}/**
     * The container’s last child.
     *
     * @type {Node}
     *
     * @example
     * rule.last === rule.nodes[rule.nodes.length - 1]
     */},{key:"last",get:function get(){if(!this.nodes)return undefined;return this.nodes[this.nodes.length-1];}}]);return Container;}(_node.default);var _default=Container;/**
 * @callback childCondition
 * @param {Node} node    Container child.
 * @param {number} index Child index.
 * @param {Node[]} nodes All container children.
 * @return {boolean}
 */ /**
 * @callback childIterator
 * @param {Node} node    Container child.
 * @param {number} index Child index.
 * @return {false|undefined} Returning `false` will break iteration.
 */exports.default=_default;module.exports=exports.default;},{"./at-rule":44,"./comment":45,"./declaration":48,"./node":53,"./parse":54,"./rule":61}],47:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _supportsColor=_interopRequireDefault(require("supports-color"));var _chalk=_interopRequireDefault(require("chalk"));var _terminalHighlight=_interopRequireDefault(require("./terminal-highlight"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class);};return _wrapNativeSuper(Class);}function isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _construct(Parent,args,Class){if(isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}/**
 * The CSS parser throws this error for broken CSS.
 *
 * Custom parsers can throw this error for broken custom syntax using
 * the {@link Node#error} method.
 *
 * PostCSS will use the input source map to detect the original error location.
 * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,
 * PostCSS will show the original position in the Sass file.
 *
 * If you need the position in the PostCSS input
 * (e.g., to debug the previous compiler), use `error.input.file`.
 *
 * @example
 * // Catching and checking syntax error
 * try {
 *   postcss.parse('a{')
 * } catch (error) {
 *   if (error.name === 'CssSyntaxError') {
 *     error //=> CssSyntaxError
 *   }
 * }
 *
 * @example
 * // Raising error from plugin
 * throw node.error('Unknown variable', { plugin: 'postcss-vars' })
 */var CssSyntaxError=/*#__PURE__*/function(_Error){_inheritsLoose(CssSyntaxError,_Error);/**
   * @param {string} message  Error message.
   * @param {number} [line]   Source line of the error.
   * @param {number} [column] Source column of the error.
   * @param {string} [source] Source code of the broken file.
   * @param {string} [file]   Absolute path to the broken file.
   * @param {string} [plugin] PostCSS plugin name, if error came from plugin.
   */function CssSyntaxError(message,line,column,source,file,plugin){var _this;_this=_Error.call(this,message)||this;/**
     * Always equal to `'CssSyntaxError'`. You should always check error type
     * by `error.name === 'CssSyntaxError'`
     * instead of `error instanceof CssSyntaxError`,
     * because npm could have several PostCSS versions.
     *
     * @type {string}
     *
     * @example
     * if (error.name === 'CssSyntaxError') {
     *   error //=> CssSyntaxError
     * }
     */_this.name='CssSyntaxError';/**
     * Error message.
     *
     * @type {string}
     *
     * @example
     * error.message //=> 'Unclosed block'
     */_this.reason=message;if(file){/**
       * Absolute path to the broken file.
       *
       * @type {string}
       *
       * @example
       * error.file       //=> 'a.sass'
       * error.input.file //=> 'a.css'
       */_this.file=file;}if(source){/**
       * Source code of the broken file.
       *
       * @type {string}
       *
       * @example
       * error.source       //=> 'a { b {} }'
       * error.input.column //=> 'a b { }'
       */_this.source=source;}if(plugin){/**
       * Plugin name, if error came from plugin.
       *
       * @type {string}
       *
       * @example
       * error.plugin //=> 'postcss-vars'
       */_this.plugin=plugin;}if(typeof line!=='undefined'&&typeof column!=='undefined'){/**
       * Source line of the error.
       *
       * @type {number}
       *
       * @example
       * error.line       //=> 2
       * error.input.line //=> 4
       */_this.line=line;/**
       * Source column of the error.
       *
       * @type {number}
       *
       * @example
       * error.column       //=> 1
       * error.input.column //=> 4
       */_this.column=column;}_this.setMessage();if(Error.captureStackTrace){Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)),CssSyntaxError);}return _this;}var _proto=CssSyntaxError.prototype;_proto.setMessage=function setMessage(){/**
     * Full error text in the GNU error format
     * with plugin, file, line and column.
     *
     * @type {string}
     *
     * @example
     * error.message //=> 'a.css:1:1: Unclosed block'
     */this.message=this.plugin?this.plugin+': ':'';this.message+=this.file?this.file:'<css input>';if(typeof this.line!=='undefined'){this.message+=':'+this.line+':'+this.column;}this.message+=': '+this.reason;}/**
   * Returns a few lines of CSS source that caused the error.
   *
   * If the CSS has an input source map without `sourceContent`,
   * this method will return an empty string.
   *
   * @param {boolean} [color] Whether arrow will be colored red by terminal
   *                          color codes. By default, PostCSS will detect
   *                          color support by `process.stdout.isTTY`
   *                          and `process.env.NODE_DISABLE_COLORS`.
   *
   * @example
   * error.showSourceCode() //=> "  4 | }
   *                        //      5 | a {
   *                        //    > 6 |   bad
   *                        //        |   ^
   *                        //      7 | }
   *                        //      8 | b {"
   *
   * @return {string} Few lines of CSS source that caused the error.
   */;_proto.showSourceCode=function showSourceCode(color){var _this2=this;if(!this.source)return'';var css=this.source;if(_terminalHighlight.default){if(typeof color==='undefined')color=_supportsColor.default.stdout;if(color)css=(0,_terminalHighlight.default)(css);}var lines=css.split(/\r?\n/);var start=Math.max(this.line-3,0);var end=Math.min(this.line+2,lines.length);var maxWidth=String(end).length;function mark(text){if(color&&_chalk.default.red){return _chalk.default.red.bold(text);}return text;}function aside(text){if(color&&_chalk.default.gray){return _chalk.default.gray(text);}return text;}return lines.slice(start,end).map(function(line,index){var number=start+1+index;var gutter=' '+(' '+number).slice(-maxWidth)+' | ';if(number===_this2.line){var spacing=aside(gutter.replace(/\d/g,' '))+line.slice(0,_this2.column-1).replace(/[^\t]/g,' ');return mark('>')+aside(gutter)+line+'\n '+spacing+mark('^');}return' '+aside(gutter)+line;}).join('\n');}/**
   * Returns error position, message and source code of the broken part.
   *
   * @example
   * error.toString() //=> "CssSyntaxError: app.css:1:1: Unclosed block
   *                  //    > 1 | a {
   *                  //        | ^"
   *
   * @return {string} Error position, message and source code.
   */;_proto.toString=function toString(){var code=this.showSourceCode();if(code){code='\n\n'+code+'\n';}return this.name+': '+this.message+code;}/**
   * @memberof CssSyntaxError#
   * @member {Input} input Input object with PostCSS internal information
   *                       about input file. If input has source map
   *                       from previous tool, PostCSS will use origin
   *                       (for example, Sass) source. You can use this
   *                       object to get PostCSS input source.
   *
   * @example
   * error.input.file //=> 'a.css'
   * error.file       //=> 'a.sass'
   */;return CssSyntaxError;}(_wrapNativeSuper(Error));var _default=CssSyntaxError;exports.default=_default;module.exports=exports.default;},{"./terminal-highlight":4,"chalk":4,"supports-color":4}],48:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _node=_interopRequireDefault(require("./node"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}/**
 * Represents a CSS declaration.
 *
 * @extends Node
 *
 * @example
 * const root = postcss.parse('a { color: black }')
 * const decl = root.first.first
 * decl.type       //=> 'decl'
 * decl.toString() //=> ' color: black'
 */var Declaration=/*#__PURE__*/function(_Node){_inheritsLoose(Declaration,_Node);function Declaration(defaults){var _this;_this=_Node.call(this,defaults)||this;_this.type='decl';return _this;}/**
   * @memberof Declaration#
   * @member {string} prop The declaration’s property name.
   *
   * @example
   * const root = postcss.parse('a { color: black }')
   * const decl = root.first.first
   * decl.prop //=> 'color'
   */ /**
   * @memberof Declaration#
   * @member {string} value The declaration’s value.
   *
   * @example
   * const root = postcss.parse('a { color: black }')
   * const decl = root.first.first
   * decl.value //=> 'black'
   */ /**
   * @memberof Declaration#
   * @member {boolean} important `true` if the declaration
   *                             has an !important annotation.
   *
   * @example
   * const root = postcss.parse('a { color: black !important; color: red }')
   * root.first.first.important //=> true
   * root.first.last.important  //=> undefined
   */ /**
   * @memberof Declaration#
   * @member {object} raws Information to generate byte-to-byte equal
   *                       node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node. It also stores `*`
   *   and `_` symbols before the declaration (IE hack).
   * * `between`: the symbols between the property and value
   *   for declarations.
   * * `important`: the content of the important statement,
   *   if it is not just `!important`.
   *
   * PostCSS cleans declaration from comments and extra spaces,
   * but it stores origin content in raws properties.
   * As such, if you don’t change a declaration’s value,
   * PostCSS will use the raw value with comments.
   *
   * @example
   * const root = postcss.parse('a {\n  color:black\n}')
   * root.first.first.raws //=> { before: '\n  ', between: ':' }
   */return Declaration;}(_node.default);var _default=Declaration;exports.default=_default;module.exports=exports.default;},{"./node":53}],49:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _cssSyntaxError=_interopRequireDefault(require("./css-syntax-error"));var _previousMap=_interopRequireDefault(require("./previous-map"));var _path=_interopRequireDefault(require("path"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}var sequence=0;/**
 * Represents the source CSS.
 *
 * @example
 * const root  = postcss.parse(css, { from: file })
 * const input = root.source.input
 */var Input=/*#__PURE__*/function(){/**
   * @param {string} css    Input CSS source.
   * @param {object} [opts] {@link Processor#process} options.
   */function Input(css,opts){if(opts===void 0){opts={};}if(css===null||typeof css==='object'&&!css.toString){throw new Error("PostCSS received "+css+" instead of CSS string");}/**
     * Input CSS source
     *
     * @type {string}
     *
     * @example
     * const input = postcss.parse('a{}', { from: file }).input
     * input.css //=> "a{}"
     */this.css=css.toString();if(this.css[0]==="\uFEFF"||this.css[0]==="\uFFFE"){this.hasBOM=true;this.css=this.css.slice(1);}else{this.hasBOM=false;}if(opts.from){if(/^\w+:\/\//.test(opts.from)){/**
         * The absolute path to the CSS source file defined
         * with the `from` option.
         *
         * @type {string}
         *
         * @example
         * const root = postcss.parse(css, { from: 'a.css' })
         * root.source.input.file //=> '/home/ai/a.css'
         */this.file=opts.from;}else{this.file=_path.default.resolve(opts.from);}}var map=new _previousMap.default(this.css,opts);if(map.text){/**
       * The input source map passed from a compilation step before PostCSS
       * (for example, from Sass compiler).
       *
       * @type {PreviousMap}
       *
       * @example
       * root.source.input.map.consumer().sources //=> ['a.sass']
       */this.map=map;var file=map.consumer().file;if(!this.file&&file)this.file=this.mapResolve(file);}if(!this.file){sequence+=1;/**
       * The unique ID of the CSS source. It will be created if `from` option
       * is not provided (because PostCSS does not know the file path).
       *
       * @type {string}
       *
       * @example
       * const root = postcss.parse(css)
       * root.source.input.file //=> undefined
       * root.source.input.id   //=> "<input css 1>"
       */this.id='<input css '+sequence+'>';}if(this.map)this.map.file=this.from;}var _proto=Input.prototype;_proto.error=function error(message,line,column,opts){if(opts===void 0){opts={};}var result;var origin=this.origin(line,column);if(origin){result=new _cssSyntaxError.default(message,origin.line,origin.column,origin.source,origin.file,opts.plugin);}else{result=new _cssSyntaxError.default(message,line,column,this.css,this.file,opts.plugin);}result.input={line:line,column:column,source:this.css};if(this.file)result.input.file=this.file;return result;}/**
   * Reads the input source map and returns a symbol position
   * in the input source (e.g., in a Sass file that was compiled
   * to CSS before being passed to PostCSS).
   *
   * @param {number} line   Line in input CSS.
   * @param {number} column Column in input CSS.
   *
   * @return {filePosition} Position in input source.
   *
   * @example
   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }
   */;_proto.origin=function origin(line,column){if(!this.map)return false;var consumer=this.map.consumer();var from=consumer.originalPositionFor({line:line,column:column});if(!from.source)return false;var result={file:this.mapResolve(from.source),line:from.line,column:from.column};var source=consumer.sourceContentFor(from.source);if(source)result.source=source;return result;};_proto.mapResolve=function mapResolve(file){if(/^\w+:\/\//.test(file)){return file;}return _path.default.resolve(this.map.consumer().sourceRoot||'.',file);}/**
   * The CSS source identifier. Contains {@link Input#file} if the user
   * set the `from` option, or {@link Input#id} if they did not.
   *
   * @type {string}
   *
   * @example
   * const root = postcss.parse(css, { from: 'a.css' })
   * root.source.input.from //=> "/home/ai/a.css"
   *
   * const root = postcss.parse(css)
   * root.source.input.from //=> "<input css 1>"
   */;_createClass(Input,[{key:"from",get:function get(){return this.file||this.id;}}]);return Input;}();var _default=Input;/**
 * @typedef  {object} filePosition
 * @property {string} file   Path to file.
 * @property {number} line   Source line in file.
 * @property {number} column Source column in file.
 */exports.default=_default;module.exports=exports.default;},{"./css-syntax-error":47,"./previous-map":57,"path":43}],50:[function(require,module,exports){(function(process){"use strict";exports.__esModule=true;exports.default=void 0;var _mapGenerator=_interopRequireDefault(require("./map-generator"));var _stringify2=_interopRequireDefault(require("./stringify"));var _warnOnce=_interopRequireDefault(require("./warn-once"));var _result=_interopRequireDefault(require("./result"));var _parse=_interopRequireDefault(require("./parse"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function isPromise(obj){return typeof obj==='object'&&typeof obj.then==='function';}/**
 * A Promise proxy for the result of PostCSS transformations.
 *
 * A `LazyResult` instance is returned by {@link Processor#process}.
 *
 * @example
 * const lazy = postcss([autoprefixer]).process(css)
 */var LazyResult=/*#__PURE__*/function(){function LazyResult(processor,css,opts){this.stringified=false;this.processed=false;var root;if(typeof css==='object'&&css!==null&&css.type==='root'){root=css;}else if(css instanceof LazyResult||css instanceof _result.default){root=css.root;if(css.map){if(typeof opts.map==='undefined')opts.map={};if(!opts.map.inline)opts.map.inline=false;opts.map.prev=css.map;}}else{var parser=_parse.default;if(opts.syntax)parser=opts.syntax.parse;if(opts.parser)parser=opts.parser;if(parser.parse)parser=parser.parse;try{root=parser(css,opts);}catch(error){this.error=error;}}this.result=new _result.default(processor,root,opts);}/**
   * Returns a {@link Processor} instance, which will be used
   * for CSS transformations.
   *
   * @type {Processor}
   */var _proto=LazyResult.prototype;/**
   * Processes input CSS through synchronous plugins
   * and calls {@link Result#warnings()}.
   *
   * @return {Warning[]} Warnings from plugins.
   */_proto.warnings=function warnings(){return this.sync().warnings();}/**
   * Alias for the {@link LazyResult#css} property.
   *
   * @example
   * lazy + '' === lazy.css
   *
   * @return {string} Output CSS.
   */;_proto.toString=function toString(){return this.css;}/**
   * Processes input CSS through synchronous and asynchronous plugins
   * and calls `onFulfilled` with a Result instance. If a plugin throws
   * an error, the `onRejected` callback will be executed.
   *
   * It implements standard Promise API.
   *
   * @param {onFulfilled} onFulfilled Callback will be executed
   *                                  when all plugins will finish work.
   * @param {onRejected}  onRejected  Callback will be executed on any error.
   *
   * @return {Promise} Promise API to make queue.
   *
   * @example
   * postcss([autoprefixer]).process(css, { from: cssPath }).then(result => {
   *   console.log(result.css)
   * })
   */;_proto.then=function then(onFulfilled,onRejected){if(process.env.NODE_ENV!=='production'){if(!('from'in this.opts)){(0,_warnOnce.default)('Without `from` option PostCSS could generate wrong source map '+'and will not find Browserslist config. Set it to CSS file path '+'or to `undefined` to prevent this warning.');}}return this.async().then(onFulfilled,onRejected);}/**
   * Processes input CSS through synchronous and asynchronous plugins
   * and calls onRejected for each error thrown in any plugin.
   *
   * It implements standard Promise API.
   *
   * @param {onRejected} onRejected Callback will be executed on any error.
   *
   * @return {Promise} Promise API to make queue.
   *
   * @example
   * postcss([autoprefixer]).process(css).then(result => {
   *   console.log(result.css)
   * }).catch(error => {
   *   console.error(error)
   * })
   */;_proto.catch=function _catch(onRejected){return this.async().catch(onRejected);}/**
   * Processes input CSS through synchronous and asynchronous plugins
   * and calls onFinally on any error or when all plugins will finish work.
   *
   * It implements standard Promise API.
   *
   * @param {onFinally} onFinally Callback will be executed on any error or
   *                              when all plugins will finish work.
   *
   * @return {Promise} Promise API to make queue.
   *
   * @example
   * postcss([autoprefixer]).process(css).finally(() => {
   *   console.log('processing ended')
   * })
   */;_proto.finally=function _finally(onFinally){return this.async().then(onFinally,onFinally);};_proto.handleError=function handleError(error,plugin){try{this.error=error;if(error.name==='CssSyntaxError'&&!error.plugin){error.plugin=plugin.postcssPlugin;error.setMessage();}else if(plugin.postcssVersion){if(process.env.NODE_ENV!=='production'){var pluginName=plugin.postcssPlugin;var pluginVer=plugin.postcssVersion;var runtimeVer=this.result.processor.version;var a=pluginVer.split('.');var b=runtimeVer.split('.');if(a[0]!==b[0]||parseInt(a[1])>parseInt(b[1])){console.error('Unknown error from PostCSS plugin. Your current PostCSS '+'version is '+runtimeVer+', but '+pluginName+' uses '+pluginVer+'. Perhaps this is the source of the error below.');}}}}catch(err){if(console&&console.error)console.error(err);}};_proto.asyncTick=function asyncTick(resolve,reject){var _this=this;if(this.plugin>=this.processor.plugins.length){this.processed=true;return resolve();}try{var plugin=this.processor.plugins[this.plugin];var promise=this.run(plugin);this.plugin+=1;if(isPromise(promise)){promise.then(function(){_this.asyncTick(resolve,reject);}).catch(function(error){_this.handleError(error,plugin);_this.processed=true;reject(error);});}else{this.asyncTick(resolve,reject);}}catch(error){this.processed=true;reject(error);}};_proto.async=function async(){var _this2=this;if(this.processed){return new Promise(function(resolve,reject){if(_this2.error){reject(_this2.error);}else{resolve(_this2.stringify());}});}if(this.processing){return this.processing;}this.processing=new Promise(function(resolve,reject){if(_this2.error)return reject(_this2.error);_this2.plugin=0;_this2.asyncTick(resolve,reject);}).then(function(){_this2.processed=true;return _this2.stringify();});return this.processing;};_proto.sync=function sync(){if(this.processed)return this.result;this.processed=true;if(this.processing){throw new Error('Use process(css).then(cb) to work with async plugins');}if(this.error)throw this.error;for(var _iterator=this.result.processor.plugins,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var plugin=_ref;var promise=this.run(plugin);if(isPromise(promise)){throw new Error('Use process(css).then(cb) to work with async plugins');}}return this.result;};_proto.run=function run(plugin){this.result.lastPlugin=plugin;try{return plugin(this.result.root,this.result);}catch(error){this.handleError(error,plugin);throw error;}};_proto.stringify=function stringify(){if(this.stringified)return this.result;this.stringified=true;this.sync();var opts=this.result.opts;var str=_stringify2.default;if(opts.syntax)str=opts.syntax.stringify;if(opts.stringifier)str=opts.stringifier;if(str.stringify)str=str.stringify;var map=new _mapGenerator.default(str,this.result.root,this.result.opts);var data=map.generate();this.result.css=data[0];this.result.map=data[1];return this.result;};_createClass(LazyResult,[{key:"processor",get:function get(){return this.result.processor;}/**
     * Options from the {@link Processor#process} call.
     *
     * @type {processOptions}
     */},{key:"opts",get:function get(){return this.result.opts;}/**
     * Processes input CSS through synchronous plugins, converts `Root`
     * to a CSS string and returns {@link Result#css}.
     *
     * This property will only work with synchronous plugins.
     * If the processor contains any asynchronous plugins
     * it will throw an error. This is why this method is only
     * for debug purpose, you should always use {@link LazyResult#then}.
     *
     * @type {string}
     * @see Result#css
     */},{key:"css",get:function get(){return this.stringify().css;}/**
     * An alias for the `css` property. Use it with syntaxes
     * that generate non-CSS output.
     *
     * This property will only work with synchronous plugins.
     * If the processor contains any asynchronous plugins
     * it will throw an error. This is why this method is only
     * for debug purpose, you should always use {@link LazyResult#then}.
     *
     * @type {string}
     * @see Result#content
     */},{key:"content",get:function get(){return this.stringify().content;}/**
     * Processes input CSS through synchronous plugins
     * and returns {@link Result#map}.
     *
     * This property will only work with synchronous plugins.
     * If the processor contains any asynchronous plugins
     * it will throw an error. This is why this method is only
     * for debug purpose, you should always use {@link LazyResult#then}.
     *
     * @type {SourceMapGenerator}
     * @see Result#map
     */},{key:"map",get:function get(){return this.stringify().map;}/**
     * Processes input CSS through synchronous plugins
     * and returns {@link Result#root}.
     *
     * This property will only work with synchronous plugins. If the processor
     * contains any asynchronous plugins it will throw an error.
     *
     * This is why this method is only for debug purpose,
     * you should always use {@link LazyResult#then}.
     *
     * @type {Root}
     * @see Result#root
     */},{key:"root",get:function get(){return this.sync().root;}/**
     * Processes input CSS through synchronous plugins
     * and returns {@link Result#messages}.
     *
     * This property will only work with synchronous plugins. If the processor
     * contains any asynchronous plugins it will throw an error.
     *
     * This is why this method is only for debug purpose,
     * you should always use {@link LazyResult#then}.
     *
     * @type {Message[]}
     * @see Result#messages
     */},{key:"messages",get:function get(){return this.sync().messages;}}]);return LazyResult;}();var _default=LazyResult;/**
 * @callback onFulfilled
 * @param {Result} result
 */ /**
 * @callback onRejected
 * @param {Error} error
 */exports.default=_default;module.exports=exports.default;}).call(this,require('_process'));},{"./map-generator":52,"./parse":54,"./result":59,"./stringify":63,"./warn-once":66,"_process":68}],51:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;/**
 * Contains helpers for safely splitting lists of CSS values,
 * preserving parentheses and quotes.
 *
 * @example
 * const list = postcss.list
 *
 * @namespace list
 */var list={split:function split(string,separators,last){var array=[];var current='';var split=false;var func=0;var quote=false;var escape=false;for(var i=0;i<string.length;i++){var letter=string[i];if(quote){if(escape){escape=false;}else if(letter==='\\'){escape=true;}else if(letter===quote){quote=false;}}else if(letter==='"'||letter==='\''){quote=letter;}else if(letter==='('){func+=1;}else if(letter===')'){if(func>0)func-=1;}else if(func===0){if(separators.indexOf(letter)!==-1)split=true;}if(split){if(current!=='')array.push(current.trim());current='';split=false;}else{current+=letter;}}if(last||current!=='')array.push(current.trim());return array;},/**
   * Safely splits space-separated values (such as those for `background`,
   * `border-radius`, and other shorthand properties).
   *
   * @param {string} string Space-separated values.
   *
   * @return {string[]} Split values.
   *
   * @example
   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']
   */space:function space(string){var spaces=[' ','\n','\t'];return list.split(string,spaces);},/**
   * Safely splits comma-separated values (such as those for `transition-*`
   * and `background` properties).
   *
   * @param {string} string Comma-separated values.
   *
   * @return {string[]} Split values.
   *
   * @example
   * postcss.list.comma('black, linear-gradient(white, black)')
   * //=> ['black', 'linear-gradient(white, black)']
   */comma:function comma(string){return list.split(string,[','],true);}};var _default=list;exports.default=_default;module.exports=exports.default;},{}],52:[function(require,module,exports){(function(Buffer){"use strict";exports.__esModule=true;exports.default=void 0;var _sourceMap=_interopRequireDefault(require("source-map"));var _path=_interopRequireDefault(require("path"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var MapGenerator=/*#__PURE__*/function(){function MapGenerator(stringify,root,opts){this.stringify=stringify;this.mapOpts=opts.map||{};this.root=root;this.opts=opts;}var _proto=MapGenerator.prototype;_proto.isMap=function isMap(){if(typeof this.opts.map!=='undefined'){return!!this.opts.map;}return this.previous().length>0;};_proto.previous=function previous(){var _this=this;if(!this.previousMaps){this.previousMaps=[];this.root.walk(function(node){if(node.source&&node.source.input.map){var map=node.source.input.map;if(_this.previousMaps.indexOf(map)===-1){_this.previousMaps.push(map);}}});}return this.previousMaps;};_proto.isInline=function isInline(){if(typeof this.mapOpts.inline!=='undefined'){return this.mapOpts.inline;}var annotation=this.mapOpts.annotation;if(typeof annotation!=='undefined'&&annotation!==true){return false;}if(this.previous().length){return this.previous().some(function(i){return i.inline;});}return true;};_proto.isSourcesContent=function isSourcesContent(){if(typeof this.mapOpts.sourcesContent!=='undefined'){return this.mapOpts.sourcesContent;}if(this.previous().length){return this.previous().some(function(i){return i.withContent();});}return true;};_proto.clearAnnotation=function clearAnnotation(){if(this.mapOpts.annotation===false)return;var node;for(var i=this.root.nodes.length-1;i>=0;i--){node=this.root.nodes[i];if(node.type!=='comment')continue;if(node.text.indexOf('# sourceMappingURL=')===0){this.root.removeChild(i);}}};_proto.setSourcesContent=function setSourcesContent(){var _this2=this;var already={};this.root.walk(function(node){if(node.source){var from=node.source.input.from;if(from&&!already[from]){already[from]=true;var relative=_this2.relative(from);_this2.map.setSourceContent(relative,node.source.input.css);}}});};_proto.applyPrevMaps=function applyPrevMaps(){for(var _iterator=this.previous(),_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var prev=_ref;var from=this.relative(prev.file);var root=prev.root||_path.default.dirname(prev.file);var map=void 0;if(this.mapOpts.sourcesContent===false){map=new _sourceMap.default.SourceMapConsumer(prev.text);if(map.sourcesContent){map.sourcesContent=map.sourcesContent.map(function(){return null;});}}else{map=prev.consumer();}this.map.applySourceMap(map,from,this.relative(root));}};_proto.isAnnotation=function isAnnotation(){if(this.isInline()){return true;}if(typeof this.mapOpts.annotation!=='undefined'){return this.mapOpts.annotation;}if(this.previous().length){return this.previous().some(function(i){return i.annotation;});}return true;};_proto.toBase64=function toBase64(str){if(Buffer){return Buffer.from(str).toString('base64');}return window.btoa(unescape(encodeURIComponent(str)));};_proto.addAnnotation=function addAnnotation(){var content;if(this.isInline()){content='data:application/json;base64,'+this.toBase64(this.map.toString());}else if(typeof this.mapOpts.annotation==='string'){content=this.mapOpts.annotation;}else{content=this.outputFile()+'.map';}var eol='\n';if(this.css.indexOf('\r\n')!==-1)eol='\r\n';this.css+=eol+'/*# sourceMappingURL='+content+' */';};_proto.outputFile=function outputFile(){if(this.opts.to){return this.relative(this.opts.to);}if(this.opts.from){return this.relative(this.opts.from);}return'to.css';};_proto.generateMap=function generateMap(){this.generateString();if(this.isSourcesContent())this.setSourcesContent();if(this.previous().length>0)this.applyPrevMaps();if(this.isAnnotation())this.addAnnotation();if(this.isInline()){return[this.css];}return[this.css,this.map];};_proto.relative=function relative(file){if(file.indexOf('<')===0)return file;if(/^\w+:\/\//.test(file))return file;var from=this.opts.to?_path.default.dirname(this.opts.to):'.';if(typeof this.mapOpts.annotation==='string'){from=_path.default.dirname(_path.default.resolve(from,this.mapOpts.annotation));}file=_path.default.relative(from,file);if(_path.default.sep==='\\'){return file.replace(/\\/g,'/');}return file;};_proto.sourcePath=function sourcePath(node){if(this.mapOpts.from){return this.mapOpts.from;}return this.relative(node.source.input.from);};_proto.generateString=function generateString(){var _this3=this;this.css='';this.map=new _sourceMap.default.SourceMapGenerator({file:this.outputFile()});var line=1;var column=1;var lines,last;this.stringify(this.root,function(str,node,type){_this3.css+=str;if(node&&type!=='end'){if(node.source&&node.source.start){_this3.map.addMapping({source:_this3.sourcePath(node),generated:{line:line,column:column-1},original:{line:node.source.start.line,column:node.source.start.column-1}});}else{_this3.map.addMapping({source:'<no source>',original:{line:1,column:0},generated:{line:line,column:column-1}});}}lines=str.match(/\n/g);if(lines){line+=lines.length;last=str.lastIndexOf('\n');column=str.length-last;}else{column+=str.length;}if(node&&type!=='start'){var p=node.parent||{raws:{}};if(node.type!=='decl'||node!==p.last||p.raws.semicolon){if(node.source&&node.source.end){_this3.map.addMapping({source:_this3.sourcePath(node),generated:{line:line,column:column-2},original:{line:node.source.end.line,column:node.source.end.column-1}});}else{_this3.map.addMapping({source:'<no source>',original:{line:1,column:0},generated:{line:line,column:column-1}});}}}});};_proto.generate=function generate(){this.clearAnnotation();if(this.isMap()){return this.generateMap();}var result='';this.stringify(this.root,function(i){result+=i;});return[result];};return MapGenerator;}();var _default=MapGenerator;exports.default=_default;module.exports=exports.default;}).call(this,require("buffer").Buffer);},{"buffer":5,"path":43,"source-map":84}],53:[function(require,module,exports){(function(process){"use strict";exports.__esModule=true;exports.default=void 0;var _cssSyntaxError=_interopRequireDefault(require("./css-syntax-error"));var _stringifier=_interopRequireDefault(require("./stringifier"));var _stringify=_interopRequireDefault(require("./stringify"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function cloneNode(obj,parent){var cloned=new obj.constructor();for(var i in obj){if(!obj.hasOwnProperty(i))continue;var value=obj[i];var type=typeof value;if(i==='parent'&&type==='object'){if(parent)cloned[i]=parent;}else if(i==='source'){cloned[i]=value;}else if(value instanceof Array){cloned[i]=value.map(function(j){return cloneNode(j,cloned);});}else{if(type==='object'&&value!==null)value=cloneNode(value);cloned[i]=value;}}return cloned;}/**
 * All node classes inherit the following common methods.
 *
 * @abstract
 */var Node=/*#__PURE__*/function(){/**
   * @param {object} [defaults] Value for node properties.
   */function Node(defaults){if(defaults===void 0){defaults={};}this.raws={};if(process.env.NODE_ENV!=='production'){if(typeof defaults!=='object'&&typeof defaults!=='undefined'){throw new Error('PostCSS nodes constructor accepts object, not '+JSON.stringify(defaults));}}for(var name in defaults){this[name]=defaults[name];}}/**
   * Returns a `CssSyntaxError` instance containing the original position
   * of the node in the source, showing line and column numbers and also
   * a small excerpt to facilitate debugging.
   *
   * If present, an input source map will be used to get the original position
   * of the source, even from a previous compilation step
   * (e.g., from Sass compilation).
   *
   * This method produces very useful error messages.
   *
   * @param {string} message     Error description.
   * @param {object} [opts]      Options.
   * @param {string} opts.plugin Plugin name that created this error.
   *                             PostCSS will set it automatically.
   * @param {string} opts.word   A word inside a node’s string that should
   *                             be highlighted as the source of the error.
   * @param {number} opts.index  An index inside a node’s string that should
   *                             be highlighted as the source of the error.
   *
   * @return {CssSyntaxError} Error object to throw it.
   *
   * @example
   * if (!variables[name]) {
   *   throw decl.error('Unknown variable ' + name, { word: name })
   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black
   *   //   color: $black
   *   // a
   *   //          ^
   *   //   background: white
   * }
   */var _proto=Node.prototype;_proto.error=function error(message,opts){if(opts===void 0){opts={};}if(this.source){var pos=this.positionBy(opts);return this.source.input.error(message,pos.line,pos.column,opts);}return new _cssSyntaxError.default(message);}/**
   * This method is provided as a convenience wrapper for {@link Result#warn}.
   *
   * @param {Result} result      The {@link Result} instance
   *                             that will receive the warning.
   * @param {string} text        Warning message.
   * @param {object} [opts]      Options
   * @param {string} opts.plugin Plugin name that created this warning.
   *                             PostCSS will set it automatically.
   * @param {string} opts.word   A word inside a node’s string that should
   *                             be highlighted as the source of the warning.
   * @param {number} opts.index  An index inside a node’s string that should
   *                             be highlighted as the source of the warning.
   *
   * @return {Warning} Created warning object.
   *
   * @example
   * const plugin = postcss.plugin('postcss-deprecated', () => {
   *   return (root, result) => {
   *     root.walkDecls('bad', decl => {
   *       decl.warn(result, 'Deprecated property bad')
   *     })
   *   }
   * })
   */;_proto.warn=function warn(result,text,opts){var data={node:this};for(var i in opts){data[i]=opts[i];}return result.warn(text,data);}/**
   * Removes the node from its parent and cleans the parent properties
   * from the node and its children.
   *
   * @example
   * if (decl.prop.match(/^-webkit-/)) {
   *   decl.remove()
   * }
   *
   * @return {Node} Node to make calls chain.
   */;_proto.remove=function remove(){if(this.parent){this.parent.removeChild(this);}this.parent=undefined;return this;}/**
   * Returns a CSS string representing the node.
   *
   * @param {stringifier|syntax} [stringifier] A syntax to use
   *                                           in string generation.
   *
   * @return {string} CSS string of this node.
   *
   * @example
   * postcss.rule({ selector: 'a' }).toString() //=> "a {}"
   */;_proto.toString=function toString(stringifier){if(stringifier===void 0){stringifier=_stringify.default;}if(stringifier.stringify)stringifier=stringifier.stringify;var result='';stringifier(this,function(i){result+=i;});return result;}/**
   * Returns an exact clone of the node.
   *
   * The resulting cloned node and its (cloned) children will retain
   * code style properties.
   *
   * @param {object} [overrides] New properties to override in the clone.
   *
   * @example
   * decl.raws.before    //=> "\n  "
   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })
   * cloned.raws.before  //=> "\n  "
   * cloned.toString()   //=> -moz-transform: scale(0)
   *
   * @return {Node} Clone of the node.
   */;_proto.clone=function clone(overrides){if(overrides===void 0){overrides={};}var cloned=cloneNode(this);for(var name in overrides){cloned[name]=overrides[name];}return cloned;}/**
   * Shortcut to clone the node and insert the resulting cloned node
   * before the current node.
   *
   * @param {object} [overrides] Mew properties to override in the clone.
   *
   * @example
   * decl.cloneBefore({ prop: '-moz-' + decl.prop })
   *
   * @return {Node} New node
   */;_proto.cloneBefore=function cloneBefore(overrides){if(overrides===void 0){overrides={};}var cloned=this.clone(overrides);this.parent.insertBefore(this,cloned);return cloned;}/**
   * Shortcut to clone the node and insert the resulting cloned node
   * after the current node.
   *
   * @param {object} [overrides] New properties to override in the clone.
   *
   * @return {Node} New node.
   */;_proto.cloneAfter=function cloneAfter(overrides){if(overrides===void 0){overrides={};}var cloned=this.clone(overrides);this.parent.insertAfter(this,cloned);return cloned;}/**
   * Inserts node(s) before the current node and removes the current node.
   *
   * @param {...Node} nodes Mode(s) to replace current one.
   *
   * @example
   * if (atrule.name === 'mixin') {
   *   atrule.replaceWith(mixinRules[atrule.params])
   * }
   *
   * @return {Node} Current node to methods chain.
   */;_proto.replaceWith=function replaceWith(){if(this.parent){for(var _len=arguments.length,nodes=new Array(_len),_key=0;_key<_len;_key++){nodes[_key]=arguments[_key];}for(var _i=0;_i<nodes.length;_i++){var node=nodes[_i];this.parent.insertBefore(this,node);}this.remove();}return this;}/**
   * Returns the next child of the node’s parent.
   * Returns `undefined` if the current node is the last child.
   *
   * @return {Node|undefined} Next node.
   *
   * @example
   * if (comment.text === 'delete next') {
   *   const next = comment.next()
   *   if (next) {
   *     next.remove()
   *   }
   * }
   */;_proto.next=function next(){if(!this.parent)return undefined;var index=this.parent.index(this);return this.parent.nodes[index+1];}/**
   * Returns the previous child of the node’s parent.
   * Returns `undefined` if the current node is the first child.
   *
   * @return {Node|undefined} Previous node.
   *
   * @example
   * const annotation = decl.prev()
   * if (annotation.type === 'comment') {
   *   readAnnotation(annotation.text)
   * }
   */;_proto.prev=function prev(){if(!this.parent)return undefined;var index=this.parent.index(this);return this.parent.nodes[index-1];}/**
   * Insert new node before current node to current node’s parent.
   *
   * Just alias for `node.parent.insertBefore(node, add)`.
   *
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * decl.before('content: ""')
   */;_proto.before=function before(add){this.parent.insertBefore(this,add);return this;}/**
   * Insert new node after current node to current node’s parent.
   *
   * Just alias for `node.parent.insertAfter(node, add)`.
   *
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * decl.after('color: black')
   */;_proto.after=function after(add){this.parent.insertAfter(this,add);return this;};_proto.toJSON=function toJSON(){var fixed={};for(var name in this){if(!this.hasOwnProperty(name))continue;if(name==='parent')continue;var value=this[name];if(value instanceof Array){fixed[name]=value.map(function(i){if(typeof i==='object'&&i.toJSON){return i.toJSON();}else{return i;}});}else if(typeof value==='object'&&value.toJSON){fixed[name]=value.toJSON();}else{fixed[name]=value;}}return fixed;}/**
   * Returns a {@link Node#raws} value. If the node is missing
   * the code style property (because the node was manually built or cloned),
   * PostCSS will try to autodetect the code style property by looking
   * at other nodes in the tree.
   *
   * @param {string} prop          Name of code style property.
   * @param {string} [defaultType] Name of default value, it can be missed
   *                               if the value is the same as prop.
   *
   * @example
   * const root = postcss.parse('a { background: white }')
   * root.nodes[0].append({ prop: 'color', value: 'black' })
   * root.nodes[0].nodes[1].raws.before   //=> undefined
   * root.nodes[0].nodes[1].raw('before') //=> ' '
   *
   * @return {string} Code style value.
   */;_proto.raw=function raw(prop,defaultType){var str=new _stringifier.default();return str.raw(this,prop,defaultType);}/**
   * Finds the Root instance of the node’s tree.
   *
   * @example
   * root.nodes[0].nodes[0].root() === root
   *
   * @return {Root} Root parent.
   */;_proto.root=function root(){var result=this;while(result.parent){result=result.parent;}return result;}/**
   * Clear the code style properties for the node and its children.
   *
   * @param {boolean} [keepBetween] Keep the raws.between symbols.
   *
   * @return {undefined}
   *
   * @example
   * node.raws.before  //=> ' '
   * node.cleanRaws()
   * node.raws.before  //=> undefined
   */;_proto.cleanRaws=function cleanRaws(keepBetween){delete this.raws.before;delete this.raws.after;if(!keepBetween)delete this.raws.between;};_proto.positionInside=function positionInside(index){var string=this.toString();var column=this.source.start.column;var line=this.source.start.line;for(var i=0;i<index;i++){if(string[i]==='\n'){column=1;line+=1;}else{column+=1;}}return{line:line,column:column};};_proto.positionBy=function positionBy(opts){var pos=this.source.start;if(opts.index){pos=this.positionInside(opts.index);}else if(opts.word){var index=this.toString().indexOf(opts.word);if(index!==-1)pos=this.positionInside(index);}return pos;}/**
   * @memberof Node#
   * @member {string} type String representing the node’s type.
   *                       Possible values are `root`, `atrule`, `rule`,
   *                       `decl`, or `comment`.
   *
   * @example
   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'
   */ /**
   * @memberof Node#
   * @member {Container} parent The node’s parent node.
   *
   * @example
   * root.nodes[0].parent === root
   */ /**
   * @memberof Node#
   * @member {source} source The input source of the node.
   *
   * The property is used in source map generation.
   *
   * If you create a node manually (e.g., with `postcss.decl()`),
   * that node will not have a `source` property and will be absent
   * from the source map. For this reason, the plugin developer should
   * consider cloning nodes to create new ones (in which case the new node’s
   * source will reference the original, cloned node) or setting
   * the `source` property manually.
   *
   * ```js
   * // Bad
   * const prefixed = postcss.decl({
   *   prop: '-moz-' + decl.prop,
   *   value: decl.value
   * })
   *
   * // Good
   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })
   * ```
   *
   * ```js
   * if (atrule.name === 'add-link') {
   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })
   *   atrule.parent.insertBefore(atrule, rule)
   * }
   * ```
   *
   * @example
   * decl.source.input.from //=> '/home/ai/a.sass'
   * decl.source.start      //=> { line: 10, column: 2 }
   * decl.source.end        //=> { line: 10, column: 12 }
   */ /**
   * @memberof Node#
   * @member {object} raws Information to generate byte-to-byte equal
   *                       node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `before`: the space symbols before the node. It also stores `*`
   *   and `_` symbols before the declaration (IE hack).
   * * `after`: the space symbols after the last child of the node
   *   to the end of the node.
   * * `between`: the symbols between the property and value
   *   for declarations, selector and `{` for rules, or last parameter
   *   and `{` for at-rules.
   * * `semicolon`: contains true if the last child has
   *   an (optional) semicolon.
   * * `afterName`: the space between the at-rule name and its parameters.
   * * `left`: the space symbols between `/*` and the comment’s text.
   * * `right`: the space symbols between the comment’s text
   *   and <code>*&#47;</code>.
   * * `important`: the content of the important statement,
   *   if it is not just `!important`.
   *
   * PostCSS cleans selectors, declaration values and at-rule parameters
   * from comments and extra spaces, but it stores origin content in raws
   * properties. As such, if you don’t change a declaration’s value,
   * PostCSS will use the raw value with comments.
   *
   * @example
   * const root = postcss.parse('a {\n  color:black\n}')
   * root.first.first.raws //=> { before: '\n  ', between: ':' }
   */;return Node;}();var _default=Node;/**
 * @typedef {object} position
 * @property {number} line   Source line in file.
 * @property {number} column Source column in file.
 */ /**
 * @typedef {object} source
 * @property {Input} input    {@link Input} with input file
 * @property {position} start The starting position of the node’s source.
 * @property {position} end   The ending position of the node’s source.
 */exports.default=_default;module.exports=exports.default;}).call(this,require('_process'));},{"./css-syntax-error":47,"./stringifier":62,"./stringify":63,"_process":68}],54:[function(require,module,exports){(function(process){"use strict";exports.__esModule=true;exports.default=void 0;var _parser=_interopRequireDefault(require("./parser"));var _input=_interopRequireDefault(require("./input"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function parse(css,opts){var input=new _input.default(css,opts);var parser=new _parser.default(input);try{parser.parse();}catch(e){if(process.env.NODE_ENV!=='production'){if(e.name==='CssSyntaxError'&&opts&&opts.from){if(/\.scss$/i.test(opts.from)){e.message+='\nYou tried to parse SCSS with '+'the standard CSS parser; '+'try again with the postcss-scss parser';}else if(/\.sass/i.test(opts.from)){e.message+='\nYou tried to parse Sass with '+'the standard CSS parser; '+'try again with the postcss-sass parser';}else if(/\.less$/i.test(opts.from)){e.message+='\nYou tried to parse Less with '+'the standard CSS parser; '+'try again with the postcss-less parser';}}}throw e;}return parser.root;}var _default=parse;exports.default=_default;module.exports=exports.default;}).call(this,require('_process'));},{"./input":49,"./parser":55,"_process":68}],55:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _declaration=_interopRequireDefault(require("./declaration"));var _tokenize=_interopRequireDefault(require("./tokenize"));var _comment=_interopRequireDefault(require("./comment"));var _atRule=_interopRequireDefault(require("./at-rule"));var _root=_interopRequireDefault(require("./root"));var _rule=_interopRequireDefault(require("./rule"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Parser=/*#__PURE__*/function(){function Parser(input){this.input=input;this.root=new _root.default();this.current=this.root;this.spaces='';this.semicolon=false;this.createTokenizer();this.root.source={input:input,start:{line:1,column:1}};}var _proto=Parser.prototype;_proto.createTokenizer=function createTokenizer(){this.tokenizer=(0,_tokenize.default)(this.input);};_proto.parse=function parse(){var token;while(!this.tokenizer.endOfFile()){token=this.tokenizer.nextToken();switch(token[0]){case'space':this.spaces+=token[1];break;case';':this.freeSemicolon(token);break;case'}':this.end(token);break;case'comment':this.comment(token);break;case'at-word':this.atrule(token);break;case'{':this.emptyRule(token);break;default:this.other(token);break;}}this.endFile();};_proto.comment=function comment(token){var node=new _comment.default();this.init(node,token[2],token[3]);node.source.end={line:token[4],column:token[5]};var text=token[1].slice(2,-2);if(/^\s*$/.test(text)){node.text='';node.raws.left=text;node.raws.right='';}else{var match=text.match(/^(\s*)([^]*[^\s])(\s*)$/);node.text=match[2];node.raws.left=match[1];node.raws.right=match[3];}};_proto.emptyRule=function emptyRule(token){var node=new _rule.default();this.init(node,token[2],token[3]);node.selector='';node.raws.between='';this.current=node;};_proto.other=function other(start){var end=false;var type=null;var colon=false;var bracket=null;var brackets=[];var tokens=[];var token=start;while(token){type=token[0];tokens.push(token);if(type==='('||type==='['){if(!bracket)bracket=token;brackets.push(type==='('?')':']');}else if(brackets.length===0){if(type===';'){if(colon){this.decl(tokens);return;}else{break;}}else if(type==='{'){this.rule(tokens);return;}else if(type==='}'){this.tokenizer.back(tokens.pop());end=true;break;}else if(type===':'){colon=true;}}else if(type===brackets[brackets.length-1]){brackets.pop();if(brackets.length===0)bracket=null;}token=this.tokenizer.nextToken();}if(this.tokenizer.endOfFile())end=true;if(brackets.length>0)this.unclosedBracket(bracket);if(end&&colon){while(tokens.length){token=tokens[tokens.length-1][0];if(token!=='space'&&token!=='comment')break;this.tokenizer.back(tokens.pop());}this.decl(tokens);}else{this.unknownWord(tokens);}};_proto.rule=function rule(tokens){tokens.pop();var node=new _rule.default();this.init(node,tokens[0][2],tokens[0][3]);node.raws.between=this.spacesAndCommentsFromEnd(tokens);this.raw(node,'selector',tokens);this.current=node;};_proto.decl=function decl(tokens){var node=new _declaration.default();this.init(node);var last=tokens[tokens.length-1];if(last[0]===';'){this.semicolon=true;tokens.pop();}if(last[4]){node.source.end={line:last[4],column:last[5]};}else{node.source.end={line:last[2],column:last[3]};}while(tokens[0][0]!=='word'){if(tokens.length===1)this.unknownWord(tokens);node.raws.before+=tokens.shift()[1];}node.source.start={line:tokens[0][2],column:tokens[0][3]};node.prop='';while(tokens.length){var type=tokens[0][0];if(type===':'||type==='space'||type==='comment'){break;}node.prop+=tokens.shift()[1];}node.raws.between='';var token;while(tokens.length){token=tokens.shift();if(token[0]===':'){node.raws.between+=token[1];break;}else{if(token[0]==='word'&&/\w/.test(token[1])){this.unknownWord([token]);}node.raws.between+=token[1];}}if(node.prop[0]==='_'||node.prop[0]==='*'){node.raws.before+=node.prop[0];node.prop=node.prop.slice(1);}node.raws.between+=this.spacesAndCommentsFromStart(tokens);this.precheckMissedSemicolon(tokens);for(var i=tokens.length-1;i>0;i--){token=tokens[i];if(token[1].toLowerCase()==='!important'){node.important=true;var string=this.stringFrom(tokens,i);string=this.spacesFromEnd(tokens)+string;if(string!==' !important')node.raws.important=string;break;}else if(token[1].toLowerCase()==='important'){var cache=tokens.slice(0);var str='';for(var j=i;j>0;j--){var _type=cache[j][0];if(str.trim().indexOf('!')===0&&_type!=='space'){break;}str=cache.pop()[1]+str;}if(str.trim().indexOf('!')===0){node.important=true;node.raws.important=str;tokens=cache;}}if(token[0]!=='space'&&token[0]!=='comment'){break;}}this.raw(node,'value',tokens);if(node.value.indexOf(':')!==-1)this.checkMissedSemicolon(tokens);};_proto.atrule=function atrule(token){var node=new _atRule.default();node.name=token[1].slice(1);if(node.name===''){this.unnamedAtrule(node,token);}this.init(node,token[2],token[3]);var prev;var shift;var last=false;var open=false;var params=[];while(!this.tokenizer.endOfFile()){token=this.tokenizer.nextToken();if(token[0]===';'){node.source.end={line:token[2],column:token[3]};this.semicolon=true;break;}else if(token[0]==='{'){open=true;break;}else if(token[0]==='}'){if(params.length>0){shift=params.length-1;prev=params[shift];while(prev&&prev[0]==='space'){prev=params[--shift];}if(prev){node.source.end={line:prev[4],column:prev[5]};}}this.end(token);break;}else{params.push(token);}if(this.tokenizer.endOfFile()){last=true;break;}}node.raws.between=this.spacesAndCommentsFromEnd(params);if(params.length){node.raws.afterName=this.spacesAndCommentsFromStart(params);this.raw(node,'params',params);if(last){token=params[params.length-1];node.source.end={line:token[4],column:token[5]};this.spaces=node.raws.between;node.raws.between='';}}else{node.raws.afterName='';node.params='';}if(open){node.nodes=[];this.current=node;}};_proto.end=function end(token){if(this.current.nodes&&this.current.nodes.length){this.current.raws.semicolon=this.semicolon;}this.semicolon=false;this.current.raws.after=(this.current.raws.after||'')+this.spaces;this.spaces='';if(this.current.parent){this.current.source.end={line:token[2],column:token[3]};this.current=this.current.parent;}else{this.unexpectedClose(token);}};_proto.endFile=function endFile(){if(this.current.parent)this.unclosedBlock();if(this.current.nodes&&this.current.nodes.length){this.current.raws.semicolon=this.semicolon;}this.current.raws.after=(this.current.raws.after||'')+this.spaces;};_proto.freeSemicolon=function freeSemicolon(token){this.spaces+=token[1];if(this.current.nodes){var prev=this.current.nodes[this.current.nodes.length-1];if(prev&&prev.type==='rule'&&!prev.raws.ownSemicolon){prev.raws.ownSemicolon=this.spaces;this.spaces='';}}}// Helpers
;_proto.init=function init(node,line,column){this.current.push(node);node.source={start:{line:line,column:column},input:this.input};node.raws.before=this.spaces;this.spaces='';if(node.type!=='comment')this.semicolon=false;};_proto.raw=function raw(node,prop,tokens){var token,type;var length=tokens.length;var value='';var clean=true;var next,prev;var pattern=/^([.|#])?([\w])+/i;for(var i=0;i<length;i+=1){token=tokens[i];type=token[0];if(type==='comment'&&node.type==='rule'){prev=tokens[i-1];next=tokens[i+1];if(prev[0]!=='space'&&next[0]!=='space'&&pattern.test(prev[1])&&pattern.test(next[1])){value+=token[1];}else{clean=false;}continue;}if(type==='comment'||type==='space'&&i===length-1){clean=false;}else{value+=token[1];}}if(!clean){var raw=tokens.reduce(function(all,i){return all+i[1];},'');node.raws[prop]={value:value,raw:raw};}node[prop]=value;};_proto.spacesAndCommentsFromEnd=function spacesAndCommentsFromEnd(tokens){var lastTokenType;var spaces='';while(tokens.length){lastTokenType=tokens[tokens.length-1][0];if(lastTokenType!=='space'&&lastTokenType!=='comment')break;spaces=tokens.pop()[1]+spaces;}return spaces;};_proto.spacesAndCommentsFromStart=function spacesAndCommentsFromStart(tokens){var next;var spaces='';while(tokens.length){next=tokens[0][0];if(next!=='space'&&next!=='comment')break;spaces+=tokens.shift()[1];}return spaces;};_proto.spacesFromEnd=function spacesFromEnd(tokens){var lastTokenType;var spaces='';while(tokens.length){lastTokenType=tokens[tokens.length-1][0];if(lastTokenType!=='space')break;spaces=tokens.pop()[1]+spaces;}return spaces;};_proto.stringFrom=function stringFrom(tokens,from){var result='';for(var i=from;i<tokens.length;i++){result+=tokens[i][1];}tokens.splice(from,tokens.length-from);return result;};_proto.colon=function colon(tokens){var brackets=0;var token,type,prev;for(var i=0;i<tokens.length;i++){token=tokens[i];type=token[0];if(type==='('){brackets+=1;}if(type===')'){brackets-=1;}if(brackets===0&&type===':'){if(!prev){this.doubleColon(token);}else if(prev[0]==='word'&&prev[1]==='progid'){continue;}else{return i;}}prev=token;}return false;}// Errors
;_proto.unclosedBracket=function unclosedBracket(bracket){throw this.input.error('Unclosed bracket',bracket[2],bracket[3]);};_proto.unknownWord=function unknownWord(tokens){throw this.input.error('Unknown word',tokens[0][2],tokens[0][3]);};_proto.unexpectedClose=function unexpectedClose(token){throw this.input.error('Unexpected }',token[2],token[3]);};_proto.unclosedBlock=function unclosedBlock(){var pos=this.current.source.start;throw this.input.error('Unclosed block',pos.line,pos.column);};_proto.doubleColon=function doubleColon(token){throw this.input.error('Double colon',token[2],token[3]);};_proto.unnamedAtrule=function unnamedAtrule(node,token){throw this.input.error('At-rule without name',token[2],token[3]);};_proto.precheckMissedSemicolon=function precheckMissedSemicolon()/* tokens */{// Hook for Safe Parser
};_proto.checkMissedSemicolon=function checkMissedSemicolon(tokens){var colon=this.colon(tokens);if(colon===false)return;var founded=0;var token;for(var j=colon-1;j>=0;j--){token=tokens[j];if(token[0]!=='space'){founded+=1;if(founded===2)break;}}throw this.input.error('Missed semicolon',token[2],token[3]);};return Parser;}();exports.default=Parser;module.exports=exports.default;},{"./at-rule":44,"./comment":45,"./declaration":48,"./root":60,"./rule":61,"./tokenize":64}],56:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _declaration=_interopRequireDefault(require("./declaration"));var _processor=_interopRequireDefault(require("./processor"));var _stringify=_interopRequireDefault(require("./stringify"));var _comment=_interopRequireDefault(require("./comment"));var _atRule=_interopRequireDefault(require("./at-rule"));var _vendor=_interopRequireDefault(require("./vendor"));var _parse=_interopRequireDefault(require("./parse"));var _list=_interopRequireDefault(require("./list"));var _rule=_interopRequireDefault(require("./rule"));var _root=_interopRequireDefault(require("./root"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Create a new {@link Processor} instance that will apply `plugins`
 * as CSS processors.
 *
 * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.
 *        See {@link Processor#use} for plugin format.
 *
 * @return {Processor} Processor to process multiple CSS.
 *
 * @example
 * import postcss from 'postcss'
 *
 * postcss(plugins).process(css, { from, to }).then(result => {
 *   console.log(result.css)
 * })
 *
 * @namespace postcss
 */function postcss(){for(var _len=arguments.length,plugins=new Array(_len),_key=0;_key<_len;_key++){plugins[_key]=arguments[_key];}if(plugins.length===1&&Array.isArray(plugins[0])){plugins=plugins[0];}return new _processor.default(plugins);}/**
 * Creates a PostCSS plugin with a standard API.
 *
 * The newly-wrapped function will provide both the name and PostCSS
 * version of the plugin.
 *
 * ```js
 * const processor = postcss([replace])
 * processor.plugins[0].postcssPlugin  //=> 'postcss-replace'
 * processor.plugins[0].postcssVersion //=> '6.0.0'
 * ```
 *
 * The plugin function receives 2 arguments: {@link Root}
 * and {@link Result} instance. The function should mutate the provided
 * `Root` node. Alternatively, you can create a new `Root` node
 * and override the `result.root` property.
 *
 * ```js
 * const cleaner = postcss.plugin('postcss-cleaner', () => {
 *   return (root, result) => {
 *     result.root = postcss.root()
 *   }
 * })
 * ```
 *
 * As a convenience, plugins also expose a `process` method so that you can use
 * them as standalone tools.
 *
 * ```js
 * cleaner.process(css, processOpts, pluginOpts)
 * // This is equivalent to:
 * postcss([ cleaner(pluginOpts) ]).process(css, processOpts)
 * ```
 *
 * Asynchronous plugins should return a `Promise` instance.
 *
 * ```js
 * postcss.plugin('postcss-import', () => {
 *   return (root, result) => {
 *     return new Promise( (resolve, reject) => {
 *       fs.readFile('base.css', (base) => {
 *         root.prepend(base)
 *         resolve()
 *       })
 *     })
 *   }
 * })
 * ```
 *
 * Add warnings using the {@link Node#warn} method.
 * Send data to other plugins using the {@link Result#messages} array.
 *
 * ```js
 * postcss.plugin('postcss-caniuse-test', () => {
 *   return (root, result) => {
 *     root.walkDecls(decl => {
 *       if (!caniuse.support(decl.prop)) {
 *         decl.warn(result, 'Some browsers do not support ' + decl.prop)
 *       }
 *     })
 *   }
 * })
 * ```
 *
 * @param {string} name          PostCSS plugin name. Same as in `name`
 *                               property in `package.json`. It will be saved
 *                               in `plugin.postcssPlugin` property.
 * @param {function} initializer Will receive plugin options
 *                               and should return {@link pluginFunction}
 *
 * @return {Plugin} PostCSS plugin.
 */postcss.plugin=function plugin(name,initializer){function creator(){var transformer=initializer.apply(void 0,arguments);transformer.postcssPlugin=name;transformer.postcssVersion=new _processor.default().version;return transformer;}var cache;Object.defineProperty(creator,'postcss',{get:function get(){if(!cache)cache=creator();return cache;}});creator.process=function(css,processOpts,pluginOpts){return postcss([creator(pluginOpts)]).process(css,processOpts);};return creator;};/**
 * Default function to convert a node tree into a CSS string.
 *
 * @param {Node} node       Start node for stringifing. Usually {@link Root}.
 * @param {builder} builder Function to concatenate CSS from node’s parts
 *                          or generate string and source map.
 *
 * @return {void}
 *
 * @function
 */postcss.stringify=_stringify.default;/**
 * Parses source css and returns a new {@link Root} node,
 * which contains the source CSS nodes.
 *
 * @param {string|toString} css   String with input CSS or any object
 *                                with toString() method, like a Buffer
 * @param {processOptions} [opts] Options with only `from` and `map` keys.
 *
 * @return {Root} PostCSS AST.
 *
 * @example
 * // Simple CSS concatenation with source map support
 * const root1 = postcss.parse(css1, { from: file1 })
 * const root2 = postcss.parse(css2, { from: file2 })
 * root1.append(root2).toResult().css
 *
 * @function
 */postcss.parse=_parse.default;/**
 * Contains the {@link vendor} module.
 *
 * @type {vendor}
 *
 * @example
 * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']
 */postcss.vendor=_vendor.default;/**
 * Contains the {@link list} module.
 *
 * @member {list}
 *
 * @example
 * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']
 */postcss.list=_list.default;/**
 * Creates a new {@link Comment} node.
 *
 * @param {object} [defaults] Properties for the new node.
 *
 * @return {Comment} New comment node
 *
 * @example
 * postcss.comment({ text: 'test' })
 */postcss.comment=function(defaults){return new _comment.default(defaults);};/**
 * Creates a new {@link AtRule} node.
 *
 * @param {object} [defaults] Properties for the new node.
 *
 * @return {AtRule} new at-rule node
 *
 * @example
 * postcss.atRule({ name: 'charset' }).toString() //=> "@charset"
 */postcss.atRule=function(defaults){return new _atRule.default(defaults);};/**
 * Creates a new {@link Declaration} node.
 *
 * @param {object} [defaults] Properties for the new node.
 *
 * @return {Declaration} new declaration node
 *
 * @example
 * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> "color: red"
 */postcss.decl=function(defaults){return new _declaration.default(defaults);};/**
 * Creates a new {@link Rule} node.
 *
 * @param {object} [defaults] Properties for the new node.
 *
 * @return {Rule} new rule node
 *
 * @example
 * postcss.rule({ selector: 'a' }).toString() //=> "a {\n}"
 */postcss.rule=function(defaults){return new _rule.default(defaults);};/**
 * Creates a new {@link Root} node.
 *
 * @param {object} [defaults] Properties for the new node.
 *
 * @return {Root} new root node.
 *
 * @example
 * postcss.root({ after: '\n' }).toString() //=> "\n"
 */postcss.root=function(defaults){return new _root.default(defaults);};var _default=postcss;exports.default=_default;module.exports=exports.default;},{"./at-rule":44,"./comment":45,"./declaration":48,"./list":51,"./parse":54,"./processor":58,"./root":60,"./rule":61,"./stringify":63,"./vendor":65}],57:[function(require,module,exports){(function(Buffer){"use strict";exports.__esModule=true;exports.default=void 0;var _sourceMap=_interopRequireDefault(require("source-map"));var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function fromBase64(str){if(Buffer){return Buffer.from(str,'base64').toString();}else{return window.atob(str);}}/**
 * Source map information from input CSS.
 * For example, source map after Sass compiler.
 *
 * This class will automatically find source map in input CSS or in file system
 * near input file (according `from` option).
 *
 * @example
 * const root = postcss.parse(css, { from: 'a.sass.css' })
 * root.input.map //=> PreviousMap
 */var PreviousMap=/*#__PURE__*/function(){/**
   * @param {string}         css    Input CSS source.
   * @param {processOptions} [opts] {@link Processor#process} options.
   */function PreviousMap(css,opts){this.loadAnnotation(css);/**
     * Was source map inlined by data-uri to input CSS.
     *
     * @type {boolean}
     */this.inline=this.startWith(this.annotation,'data:');var prev=opts.map?opts.map.prev:undefined;var text=this.loadMap(opts.from,prev);if(text)this.text=text;}/**
   * Create a instance of `SourceMapGenerator` class
   * from the `source-map` library to work with source map information.
   *
   * It is lazy method, so it will create object only on first call
   * and then it will use cache.
   *
   * @return {SourceMapGenerator} Object with source map information.
   */var _proto=PreviousMap.prototype;_proto.consumer=function consumer(){if(!this.consumerCache){this.consumerCache=new _sourceMap.default.SourceMapConsumer(this.text);}return this.consumerCache;}/**
   * Does source map contains `sourcesContent` with input source text.
   *
   * @return {boolean} Is `sourcesContent` present.
   */;_proto.withContent=function withContent(){return!!(this.consumer().sourcesContent&&this.consumer().sourcesContent.length>0);};_proto.startWith=function startWith(string,start){if(!string)return false;return string.substr(0,start.length)===start;};_proto.loadAnnotation=function loadAnnotation(css){var match=css.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//);if(match)this.annotation=match[1].trim();};_proto.decodeInline=function decodeInline(text){var baseCharsetUri=/^data:application\/json;charset=utf-?8;base64,/;var baseUri=/^data:application\/json;base64,/;var uri='data:application/json,';if(this.startWith(text,uri)){return decodeURIComponent(text.substr(uri.length));}if(baseCharsetUri.test(text)||baseUri.test(text)){return fromBase64(text.substr(RegExp.lastMatch.length));}var encoding=text.match(/data:application\/json;([^,]+),/)[1];throw new Error('Unsupported source map encoding '+encoding);};_proto.loadMap=function loadMap(file,prev){if(prev===false)return false;if(prev){if(typeof prev==='string'){return prev;}else if(typeof prev==='function'){var prevPath=prev(file);if(prevPath&&_fs.default.existsSync&&_fs.default.existsSync(prevPath)){return _fs.default.readFileSync(prevPath,'utf-8').toString().trim();}else{throw new Error('Unable to load previous source map: '+prevPath.toString());}}else if(prev instanceof _sourceMap.default.SourceMapConsumer){return _sourceMap.default.SourceMapGenerator.fromSourceMap(prev).toString();}else if(prev instanceof _sourceMap.default.SourceMapGenerator){return prev.toString();}else if(this.isMap(prev)){return JSON.stringify(prev);}else{throw new Error('Unsupported previous source map format: '+prev.toString());}}else if(this.inline){return this.decodeInline(this.annotation);}else if(this.annotation){var map=this.annotation;if(file)map=_path.default.join(_path.default.dirname(file),map);this.root=_path.default.dirname(map);if(_fs.default.existsSync&&_fs.default.existsSync(map)){return _fs.default.readFileSync(map,'utf-8').toString().trim();}else{return false;}}};_proto.isMap=function isMap(map){if(typeof map!=='object')return false;return typeof map.mappings==='string'||typeof map._mappings==='string';};return PreviousMap;}();var _default=PreviousMap;exports.default=_default;module.exports=exports.default;}).call(this,require("buffer").Buffer);},{"buffer":5,"fs":4,"path":43,"source-map":84}],58:[function(require,module,exports){(function(process){"use strict";exports.__esModule=true;exports.default=void 0;var _lazyResult=_interopRequireDefault(require("./lazy-result"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Contains plugins to process CSS. Create one `Processor` instance,
 * initialize its plugins, and then use that instance on numerous CSS files.
 *
 * @example
 * const processor = postcss([autoprefixer, precss])
 * processor.process(css1).then(result => console.log(result.css))
 * processor.process(css2).then(result => console.log(result.css))
 */var Processor=/*#__PURE__*/function(){/**
   * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.
   *        See {@link Processor#use} for plugin format.
   */function Processor(plugins){if(plugins===void 0){plugins=[];}/**
     * Current PostCSS version.
     *
     * @type {string}
     *
     * @example
     * if (result.processor.version.split('.')[0] !== '6') {
     *   throw new Error('This plugin works only with PostCSS 6')
     * }
     */this.version='7.0.14';/**
     * Plugins added to this processor.
     *
     * @type {pluginFunction[]}
     *
     * @example
     * const processor = postcss([autoprefixer, precss])
     * processor.plugins.length //=> 2
     */this.plugins=this.normalize(plugins);}/**
   * Adds a plugin to be used as a CSS processor.
   *
   * PostCSS plugin can be in 4 formats:
   * * A plugin created by {@link postcss.plugin} method.
   * * A function. PostCSS will pass the function a @{link Root}
   *   as the first argument and current {@link Result} instance
   *   as the second.
   * * An object with a `postcss` method. PostCSS will use that method
   *   as described in #2.
   * * Another {@link Processor} instance. PostCSS will copy plugins
   *   from that instance into this one.
   *
   * Plugins can also be added by passing them as arguments when creating
   * a `postcss` instance (see [`postcss(plugins)`]).
   *
   * Asynchronous plugins should return a `Promise` instance.
   *
   * @param {Plugin|pluginFunction|Processor} plugin PostCSS plugin
   *                                                 or {@link Processor}
   *                                                 with plugins.
   *
   * @example
   * const processor = postcss()
   *   .use(autoprefixer)
   *   .use(precss)
   *
   * @return {Processes} Current processor to make methods chain.
   */var _proto=Processor.prototype;_proto.use=function use(plugin){this.plugins=this.plugins.concat(this.normalize([plugin]));return this;}/**
   * Parses source CSS and returns a {@link LazyResult} Promise proxy.
   * Because some plugins can be asynchronous it doesn’t make
   * any transformations. Transformations will be applied
   * in the {@link LazyResult} methods.
   *
   * @param {string|toString|Result} css String with input CSS or any object
   *                                     with a `toString()` method,
   *                                     like a Buffer. Optionally, send
   *                                     a {@link Result} instance
   *                                     and the processor will take
   *                                     the {@link Root} from it.
   * @param {processOptions} [opts]      Options.
   *
   * @return {LazyResult} Promise proxy.
   *
   * @example
   * processor.process(css, { from: 'a.css', to: 'a.out.css' })
   *   .then(result => {
   *      console.log(result.css)
   *   })
   */;_proto.process=function(_process){function process(_x){return _process.apply(this,arguments);}process.toString=function(){return _process.toString();};return process;}(function(css,opts){if(opts===void 0){opts={};}if(this.plugins.length===0&&opts.parser===opts.stringifier){if(process.env.NODE_ENV!=='production'){if(typeof console!=='undefined'&&console.warn){console.warn('You did not set any plugins, parser, or stringifier. '+'Right now, PostCSS does nothing. Pick plugins for your case '+'on https://www.postcss.parts/ and use them in postcss.config.js.');}}}return new _lazyResult.default(this,css,opts);});_proto.normalize=function normalize(plugins){var normalized=[];for(var _iterator=plugins,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var i=_ref;if(i.postcss)i=i.postcss;if(typeof i==='object'&&Array.isArray(i.plugins)){normalized=normalized.concat(i.plugins);}else if(typeof i==='function'){normalized.push(i);}else if(typeof i==='object'&&(i.parse||i.stringify)){if(process.env.NODE_ENV!=='production'){throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use '+'one of the syntax/parser/stringifier options as outlined '+'in your PostCSS runner documentation.');}}else{throw new Error(i+' is not a PostCSS plugin');}}return normalized;};return Processor;}();var _default=Processor;/**
 * @callback builder
 * @param {string} part          Part of generated CSS connected to this node.
 * @param {Node}   node          AST node.
 * @param {"start"|"end"} [type] Node’s part type.
 */ /**
 * @callback parser
 *
 * @param {string|toString} css   String with input CSS or any object
 *                                with toString() method, like a Buffer.
 * @param {processOptions} [opts] Options with only `from` and `map` keys.
 *
 * @return {Root} PostCSS AST
 */ /**
 * @callback stringifier
 *
 * @param {Node} node       Start node for stringifing. Usually {@link Root}.
 * @param {builder} builder Function to concatenate CSS from node’s parts
 *                          or generate string and source map.
 *
 * @return {void}
 */ /**
 * @typedef {object} syntax
 * @property {parser} parse          Function to generate AST by string.
 * @property {stringifier} stringify Function to generate string by AST.
 */ /**
 * @typedef {object} toString
 * @property {function} toString
 */ /**
 * @callback pluginFunction
 * @param {Root} root     Parsed input CSS.
 * @param {Result} result Result to set warnings or check other plugins.
 */ /**
 * @typedef {object} Plugin
 * @property {function} postcss PostCSS plugin function.
 */ /**
 * @typedef {object} processOptions
 * @property {string} from             The path of the CSS source file.
 *                                     You should always set `from`,
 *                                     because it is used in source map
 *                                     generation and syntax error messages.
 * @property {string} to               The path where you’ll put the output
 *                                     CSS file. You should always set `to`
 *                                     to generate correct source maps.
 * @property {parser} parser           Function to generate AST by string.
 * @property {stringifier} stringifier Class to generate string by AST.
 * @property {syntax} syntax           Object with `parse` and `stringify`.
 * @property {object} map              Source map options.
 * @property {boolean} map.inline                    Does source map should
 *                                                   be embedded in the output
 *                                                   CSS as a base64-encoded
 *                                                   comment.
 * @property {string|object|false|function} map.prev Source map content
 *                                                   from a previous
 *                                                   processing step
 *                                                   (for example, Sass).
 *                                                   PostCSS will try to find
 *                                                   previous map automatically,
 *                                                   so you could disable it by
 *                                                   `false` value.
 * @property {boolean} map.sourcesContent            Does PostCSS should set
 *                                                   the origin content to map.
 * @property {string|false} map.annotation           Does PostCSS should set
 *                                                   annotation comment to map.
 * @property {string} map.from                       Override `from` in map’s
 *                                                   sources`.
 */exports.default=_default;module.exports=exports.default;}).call(this,require('_process'));},{"./lazy-result":50,"_process":68}],59:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _warning=_interopRequireDefault(require("./warning"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}/**
 * Provides the result of the PostCSS transformations.
 *
 * A Result instance is returned by {@link LazyResult#then}
 * or {@link Root#toResult} methods.
 *
 * @example
 * postcss([autoprefixer]).process(css).then(result => {
 *  console.log(result.css)
 * })
 *
 * @example
 * const result2 = postcss.parse(css).toResult()
 */var Result=/*#__PURE__*/function(){/**
   * @param {Processor} processor Processor used for this transformation.
   * @param {Root}      root      Root node after all transformations.
   * @param {processOptions} opts Options from the {@link Processor#process}
   *                              or {@link Root#toResult}.
   */function Result(processor,root,opts){/**
     * The Processor instance used for this transformation.
     *
     * @type {Processor}
     *
     * @example
     * for (const plugin of result.processor.plugins) {
     *   if (plugin.postcssPlugin === 'postcss-bad') {
     *     throw 'postcss-good is incompatible with postcss-bad'
     *   }
     * })
     */this.processor=processor;/**
     * Contains messages from plugins (e.g., warnings or custom messages).
     * Each message should have type and plugin properties.
     *
     * @type {Message[]}
     *
     * @example
     * postcss.plugin('postcss-min-browser', () => {
     *   return (root, result) => {
     *     const browsers = detectMinBrowsersByCanIUse(root)
     *     result.messages.push({
     *       type: 'min-browser',
     *       plugin: 'postcss-min-browser',
     *       browsers
     *     })
     *   }
     * })
     */this.messages=[];/**
     * Root node after all transformations.
     *
     * @type {Root}
     *
     * @example
     * root.toResult().root === root
     */this.root=root;/**
     * Options from the {@link Processor#process} or {@link Root#toResult} call
     * that produced this Result instance.
     *
     * @type {processOptions}
     *
     * @example
     * root.toResult(opts).opts === opts
     */this.opts=opts;/**
     * A CSS string representing of {@link Result#root}.
     *
     * @type {string}
     *
     * @example
     * postcss.parse('a{}').toResult().css //=> "a{}"
     */this.css=undefined;/**
     * An instance of `SourceMapGenerator` class from the `source-map` library,
     * representing changes to the {@link Result#root} instance.
     *
     * @type {SourceMapGenerator}
     *
     * @example
     * result.map.toJSON() //=> { version: 3, file: 'a.css', … }
     *
     * @example
     * if (result.map) {
     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())
     * }
     */this.map=undefined;}/**
   * Returns for @{link Result#css} content.
   *
   * @example
   * result + '' === result.css
   *
   * @return {string} String representing of {@link Result#root}.
   */var _proto=Result.prototype;_proto.toString=function toString(){return this.css;}/**
   * Creates an instance of {@link Warning} and adds it
   * to {@link Result#messages}.
   *
   * @param {string} text        Warning message.
   * @param {Object} [opts]      Warning options.
   * @param {Node}   opts.node   CSS node that caused the warning.
   * @param {string} opts.word   Word in CSS source that caused the warning.
   * @param {number} opts.index  Index in CSS node string that caused
   *                             the warning.
   * @param {string} opts.plugin Name of the plugin that created
   *                             this warning. {@link Result#warn} fills
   *                             this property automatically.
   *
   * @return {Warning} Created warning.
   */;_proto.warn=function warn(text,opts){if(opts===void 0){opts={};}if(!opts.plugin){if(this.lastPlugin&&this.lastPlugin.postcssPlugin){opts.plugin=this.lastPlugin.postcssPlugin;}}var warning=new _warning.default(text,opts);this.messages.push(warning);return warning;}/**
     * Returns warnings from plugins. Filters {@link Warning} instances
     * from {@link Result#messages}.
     *
     * @example
     * result.warnings().forEach(warn => {
     *   console.warn(warn.toString())
     * })
     *
     * @return {Warning[]} Warnings from plugins.
     */;_proto.warnings=function warnings(){return this.messages.filter(function(i){return i.type==='warning';});}/**
   * An alias for the {@link Result#css} property.
   * Use it with syntaxes that generate non-CSS output.
   *
   * @type {string}
   *
   * @example
   * result.css === result.content
   */;_createClass(Result,[{key:"content",get:function get(){return this.css;}}]);return Result;}();var _default=Result;/**
 * @typedef  {object} Message
 * @property {string} type   Message type.
 * @property {string} plugin Source PostCSS plugin name.
 */exports.default=_default;module.exports=exports.default;},{"./warning":67}],60:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _container=_interopRequireDefault(require("./container"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}/**
 * Represents a CSS file and contains all its parsed nodes.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('a{color:black} b{z-index:2}')
 * root.type         //=> 'root'
 * root.nodes.length //=> 2
 */var Root=/*#__PURE__*/function(_Container){_inheritsLoose(Root,_Container);function Root(defaults){var _this;_this=_Container.call(this,defaults)||this;_this.type='root';if(!_this.nodes)_this.nodes=[];return _this;}var _proto=Root.prototype;_proto.removeChild=function removeChild(child,ignore){var index=this.index(child);if(!ignore&&index===0&&this.nodes.length>1){this.nodes[1].raws.before=this.nodes[index].raws.before;}return _Container.prototype.removeChild.call(this,child);};_proto.normalize=function normalize(child,sample,type){var nodes=_Container.prototype.normalize.call(this,child);if(sample){if(type==='prepend'){if(this.nodes.length>1){sample.raws.before=this.nodes[1].raws.before;}else{delete sample.raws.before;}}else if(this.first!==sample){for(var _iterator=nodes,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var node=_ref;node.raws.before=sample.raws.before;}}}return nodes;}/**
   * Returns a {@link Result} instance representing the root’s CSS.
   *
   * @param {processOptions} [opts] Options with only `to` and `map` keys.
   *
   * @return {Result} Result with current root’s CSS.
   *
   * @example
   * const root1 = postcss.parse(css1, { from: 'a.css' })
   * const root2 = postcss.parse(css2, { from: 'b.css' })
   * root1.append(root2)
   * const result = root1.toResult({ to: 'all.css', map: true })
   */;_proto.toResult=function toResult(opts){if(opts===void 0){opts={};}var LazyResult=require('./lazy-result');var Processor=require('./processor');var lazy=new LazyResult(new Processor(),this,opts);return lazy.stringify();}/**
   * @memberof Root#
   * @member {object} raws Information to generate byte-to-byte equal
   *                       node string as it was in the origin input.
   *
   * Every parser saves its own properties,
   * but the default CSS parser uses:
   *
   * * `after`: the space symbols after the last child to the end of file.
   * * `semicolon`: is the last child has an (optional) semicolon.
   *
   * @example
   * postcss.parse('a {}\n').raws //=> { after: '\n' }
   * postcss.parse('a {}').raws   //=> { after: '' }
   */;return Root;}(_container.default);var _default=Root;exports.default=_default;module.exports=exports.default;},{"./container":46,"./lazy-result":50,"./processor":58}],61:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _container=_interopRequireDefault(require("./container"));var _list=_interopRequireDefault(require("./list"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}/**
 * Represents a CSS rule: a selector followed by a declaration block.
 *
 * @extends Container
 *
 * @example
 * const root = postcss.parse('a{}')
 * const rule = root.first
 * rule.type       //=> 'rule'
 * rule.toString() //=> 'a{}'
 */var Rule=/*#__PURE__*/function(_Container){_inheritsLoose(Rule,_Container);function Rule(defaults){var _this;_this=_Container.call(this,defaults)||this;_this.type='rule';if(!_this.nodes)_this.nodes=[];return _this;}/**
   * An array containing the rule’s individual selectors.
   * Groups of selectors are split at commas.
   *
   * @type {string[]}
   *
   * @example
   * const root = postcss.parse('a, b { }')
   * const rule = root.first
   *
   * rule.selector  //=> 'a, b'
   * rule.selectors //=> ['a', 'b']
   *
   * rule.selectors = ['a', 'strong']
   * rule.selector //=> 'a, strong'
   */_createClass(Rule,[{key:"selectors",get:function get(){return _list.default.comma(this.selector);},set:function set(values){var match=this.selector?this.selector.match(/,\s*/):null;var sep=match?match[0]:','+this.raw('between','beforeOpen');this.selector=values.join(sep);}/**
     * @memberof Rule#
     * @member {string} selector The rule’s full selector represented
     *                           as a string.
     *
     * @example
     * const root = postcss.parse('a, b { }')
     * const rule = root.first
     * rule.selector //=> 'a, b'
     */ /**
     * @memberof Rule#
     * @member {object} raws Information to generate byte-to-byte equal
     *                       node string as it was in the origin input.
     *
     * Every parser saves its own properties,
     * but the default CSS parser uses:
     *
     * * `before`: the space symbols before the node. It also stores `*`
     *   and `_` symbols before the declaration (IE hack).
     * * `after`: the space symbols after the last child of the node
     *   to the end of the node.
     * * `between`: the symbols between the property and value
     *   for declarations, selector and `{` for rules, or last parameter
     *   and `{` for at-rules.
     * * `semicolon`: contains `true` if the last child has
     *   an (optional) semicolon.
     * * `ownSemicolon`: contains `true` if there is semicolon after rule.
     *
     * PostCSS cleans selectors from comments and extra spaces,
     * but it stores origin content in raws properties.
     * As such, if you don’t change a declaration’s value,
     * PostCSS will use the raw value with comments.
     *
     * @example
     * const root = postcss.parse('a {\n  color:black\n}')
     * root.first.first.raws //=> { before: '', between: ' ', after: '\n' }
     */}]);return Rule;}(_container.default);var _default=Rule;exports.default=_default;module.exports=exports.default;},{"./container":46,"./list":51}],62:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var DEFAULT_RAW={colon:': ',indent:'    ',beforeDecl:'\n',beforeRule:'\n',beforeOpen:' ',beforeClose:'\n',beforeComment:'\n',after:'\n',emptyBody:'',commentLeft:' ',commentRight:' ',semicolon:false};function capitalize(str){return str[0].toUpperCase()+str.slice(1);}var Stringifier=/*#__PURE__*/function(){function Stringifier(builder){this.builder=builder;}var _proto=Stringifier.prototype;_proto.stringify=function stringify(node,semicolon){this[node.type](node,semicolon);};_proto.root=function root(node){this.body(node);if(node.raws.after)this.builder(node.raws.after);};_proto.comment=function comment(node){var left=this.raw(node,'left','commentLeft');var right=this.raw(node,'right','commentRight');this.builder('/*'+left+node.text+right+'*/',node);};_proto.decl=function decl(node,semicolon){var between=this.raw(node,'between','colon');var string=node.prop+between+this.rawValue(node,'value');if(node.important){string+=node.raws.important||' !important';}if(semicolon)string+=';';this.builder(string,node);};_proto.rule=function rule(node){this.block(node,this.rawValue(node,'selector'));if(node.raws.ownSemicolon){this.builder(node.raws.ownSemicolon,node,'end');}};_proto.atrule=function atrule(node,semicolon){var name='@'+node.name;var params=node.params?this.rawValue(node,'params'):'';if(typeof node.raws.afterName!=='undefined'){name+=node.raws.afterName;}else if(params){name+=' ';}if(node.nodes){this.block(node,name+params);}else{var end=(node.raws.between||'')+(semicolon?';':'');this.builder(name+params+end,node);}};_proto.body=function body(node){var last=node.nodes.length-1;while(last>0){if(node.nodes[last].type!=='comment')break;last-=1;}var semicolon=this.raw(node,'semicolon');for(var i=0;i<node.nodes.length;i++){var child=node.nodes[i];var before=this.raw(child,'before');if(before)this.builder(before);this.stringify(child,last!==i||semicolon);}};_proto.block=function block(node,start){var between=this.raw(node,'between','beforeOpen');this.builder(start+between+'{',node,'start');var after;if(node.nodes&&node.nodes.length){this.body(node);after=this.raw(node,'after');}else{after=this.raw(node,'after','emptyBody');}if(after)this.builder(after);this.builder('}',node,'end');};_proto.raw=function raw(node,own,detect){var value;if(!detect)detect=own;// Already had
if(own){value=node.raws[own];if(typeof value!=='undefined')return value;}var parent=node.parent;// Hack for first rule in CSS
if(detect==='before'){if(!parent||parent.type==='root'&&parent.first===node){return'';}}// Floating child without parent
if(!parent)return DEFAULT_RAW[detect];// Detect style by other nodes
var root=node.root();if(!root.rawCache)root.rawCache={};if(typeof root.rawCache[detect]!=='undefined'){return root.rawCache[detect];}if(detect==='before'||detect==='after'){return this.beforeAfter(node,detect);}else{var method='raw'+capitalize(detect);if(this[method]){value=this[method](root,node);}else{root.walk(function(i){value=i.raws[own];if(typeof value!=='undefined')return false;});}}if(typeof value==='undefined')value=DEFAULT_RAW[detect];root.rawCache[detect]=value;return value;};_proto.rawSemicolon=function rawSemicolon(root){var value;root.walk(function(i){if(i.nodes&&i.nodes.length&&i.last.type==='decl'){value=i.raws.semicolon;if(typeof value!=='undefined')return false;}});return value;};_proto.rawEmptyBody=function rawEmptyBody(root){var value;root.walk(function(i){if(i.nodes&&i.nodes.length===0){value=i.raws.after;if(typeof value!=='undefined')return false;}});return value;};_proto.rawIndent=function rawIndent(root){if(root.raws.indent)return root.raws.indent;var value;root.walk(function(i){var p=i.parent;if(p&&p!==root&&p.parent&&p.parent===root){if(typeof i.raws.before!=='undefined'){var parts=i.raws.before.split('\n');value=parts[parts.length-1];value=value.replace(/[^\s]/g,'');return false;}}});return value;};_proto.rawBeforeComment=function rawBeforeComment(root,node){var value;root.walkComments(function(i){if(typeof i.raws.before!=='undefined'){value=i.raws.before;if(value.indexOf('\n')!==-1){value=value.replace(/[^\n]+$/,'');}return false;}});if(typeof value==='undefined'){value=this.raw(node,null,'beforeDecl');}else if(value){value=value.replace(/[^\s]/g,'');}return value;};_proto.rawBeforeDecl=function rawBeforeDecl(root,node){var value;root.walkDecls(function(i){if(typeof i.raws.before!=='undefined'){value=i.raws.before;if(value.indexOf('\n')!==-1){value=value.replace(/[^\n]+$/,'');}return false;}});if(typeof value==='undefined'){value=this.raw(node,null,'beforeRule');}else if(value){value=value.replace(/[^\s]/g,'');}return value;};_proto.rawBeforeRule=function rawBeforeRule(root){var value;root.walk(function(i){if(i.nodes&&(i.parent!==root||root.first!==i)){if(typeof i.raws.before!=='undefined'){value=i.raws.before;if(value.indexOf('\n')!==-1){value=value.replace(/[^\n]+$/,'');}return false;}}});if(value)value=value.replace(/[^\s]/g,'');return value;};_proto.rawBeforeClose=function rawBeforeClose(root){var value;root.walk(function(i){if(i.nodes&&i.nodes.length>0){if(typeof i.raws.after!=='undefined'){value=i.raws.after;if(value.indexOf('\n')!==-1){value=value.replace(/[^\n]+$/,'');}return false;}}});if(value)value=value.replace(/[^\s]/g,'');return value;};_proto.rawBeforeOpen=function rawBeforeOpen(root){var value;root.walk(function(i){if(i.type!=='decl'){value=i.raws.between;if(typeof value!=='undefined')return false;}});return value;};_proto.rawColon=function rawColon(root){var value;root.walkDecls(function(i){if(typeof i.raws.between!=='undefined'){value=i.raws.between.replace(/[^\s:]/g,'');return false;}});return value;};_proto.beforeAfter=function beforeAfter(node,detect){var value;if(node.type==='decl'){value=this.raw(node,null,'beforeDecl');}else if(node.type==='comment'){value=this.raw(node,null,'beforeComment');}else if(detect==='before'){value=this.raw(node,null,'beforeRule');}else{value=this.raw(node,null,'beforeClose');}var buf=node.parent;var depth=0;while(buf&&buf.type!=='root'){depth+=1;buf=buf.parent;}if(value.indexOf('\n')!==-1){var indent=this.raw(node,null,'indent');if(indent.length){for(var step=0;step<depth;step++){value+=indent;}}}return value;};_proto.rawValue=function rawValue(node,prop){var value=node[prop];var raw=node.raws[prop];if(raw&&raw.value===value){return raw.raw;}return value;};return Stringifier;}();var _default=Stringifier;exports.default=_default;module.exports=exports.default;},{}],63:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;var _stringifier=_interopRequireDefault(require("./stringifier"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function stringify(node,builder){var str=new _stringifier.default(builder);str.stringify(node);}var _default=stringify;exports.default=_default;module.exports=exports.default;},{"./stringifier":62}],64:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=tokenizer;var SINGLE_QUOTE='\''.charCodeAt(0);var DOUBLE_QUOTE='"'.charCodeAt(0);var BACKSLASH='\\'.charCodeAt(0);var SLASH='/'.charCodeAt(0);var NEWLINE='\n'.charCodeAt(0);var SPACE=' '.charCodeAt(0);var FEED='\f'.charCodeAt(0);var TAB='\t'.charCodeAt(0);var CR='\r'.charCodeAt(0);var OPEN_SQUARE='['.charCodeAt(0);var CLOSE_SQUARE=']'.charCodeAt(0);var OPEN_PARENTHESES='('.charCodeAt(0);var CLOSE_PARENTHESES=')'.charCodeAt(0);var OPEN_CURLY='{'.charCodeAt(0);var CLOSE_CURLY='}'.charCodeAt(0);var SEMICOLON=';'.charCodeAt(0);var ASTERISK='*'.charCodeAt(0);var COLON=':'.charCodeAt(0);var AT='@'.charCodeAt(0);var RE_AT_END=/[ \n\t\r\f{}()'"\\;/[\]#]/g;var RE_WORD_END=/[ \n\t\r\f(){}:;@!'"\\\][#]|\/(?=\*)/g;var RE_BAD_BRACKET=/.[\\/("'\n]/;var RE_HEX_ESCAPE=/[a-f0-9]/i;function tokenizer(input,options){if(options===void 0){options={};}var css=input.css.valueOf();var ignore=options.ignoreErrors;var code,next,quote,lines,last,content,escape;var nextLine,nextOffset,escaped,escapePos,prev,n,currentToken;var length=css.length;var offset=-1;var line=1;var pos=0;var buffer=[];var returned=[];function position(){return pos;}function unclosed(what){throw input.error('Unclosed '+what,line,pos-offset);}function endOfFile(){return returned.length===0&&pos>=length;}function nextToken(opts){if(returned.length)return returned.pop();if(pos>=length)return;var ignoreUnclosed=opts?opts.ignoreUnclosed:false;code=css.charCodeAt(pos);if(code===NEWLINE||code===FEED||code===CR&&css.charCodeAt(pos+1)!==NEWLINE){offset=pos;line+=1;}switch(code){case NEWLINE:case SPACE:case TAB:case CR:case FEED:next=pos;do{next+=1;code=css.charCodeAt(next);if(code===NEWLINE){offset=next;line+=1;}}while(code===SPACE||code===NEWLINE||code===TAB||code===CR||code===FEED);currentToken=['space',css.slice(pos,next)];pos=next-1;break;case OPEN_SQUARE:case CLOSE_SQUARE:case OPEN_CURLY:case CLOSE_CURLY:case COLON:case SEMICOLON:case CLOSE_PARENTHESES:var controlChar=String.fromCharCode(code);currentToken=[controlChar,controlChar,line,pos-offset];break;case OPEN_PARENTHESES:prev=buffer.length?buffer.pop()[1]:'';n=css.charCodeAt(pos+1);if(prev==='url'&&n!==SINGLE_QUOTE&&n!==DOUBLE_QUOTE&&n!==SPACE&&n!==NEWLINE&&n!==TAB&&n!==FEED&&n!==CR){next=pos;do{escaped=false;next=css.indexOf(')',next+1);if(next===-1){if(ignore||ignoreUnclosed){next=pos;break;}else{unclosed('bracket');}}escapePos=next;while(css.charCodeAt(escapePos-1)===BACKSLASH){escapePos-=1;escaped=!escaped;}}while(escaped);currentToken=['brackets',css.slice(pos,next+1),line,pos-offset,line,next-offset];pos=next;}else{next=css.indexOf(')',pos+1);content=css.slice(pos,next+1);if(next===-1||RE_BAD_BRACKET.test(content)){currentToken=['(','(',line,pos-offset];}else{currentToken=['brackets',content,line,pos-offset,line,next-offset];pos=next;}}break;case SINGLE_QUOTE:case DOUBLE_QUOTE:quote=code===SINGLE_QUOTE?'\'':'"';next=pos;do{escaped=false;next=css.indexOf(quote,next+1);if(next===-1){if(ignore||ignoreUnclosed){next=pos+1;break;}else{unclosed('string');}}escapePos=next;while(css.charCodeAt(escapePos-1)===BACKSLASH){escapePos-=1;escaped=!escaped;}}while(escaped);content=css.slice(pos,next+1);lines=content.split('\n');last=lines.length-1;if(last>0){nextLine=line+last;nextOffset=next-lines[last].length;}else{nextLine=line;nextOffset=offset;}currentToken=['string',css.slice(pos,next+1),line,pos-offset,nextLine,next-nextOffset];offset=nextOffset;line=nextLine;pos=next;break;case AT:RE_AT_END.lastIndex=pos+1;RE_AT_END.test(css);if(RE_AT_END.lastIndex===0){next=css.length-1;}else{next=RE_AT_END.lastIndex-2;}currentToken=['at-word',css.slice(pos,next+1),line,pos-offset,line,next-offset];pos=next;break;case BACKSLASH:next=pos;escape=true;while(css.charCodeAt(next+1)===BACKSLASH){next+=1;escape=!escape;}code=css.charCodeAt(next+1);if(escape&&code!==SLASH&&code!==SPACE&&code!==NEWLINE&&code!==TAB&&code!==CR&&code!==FEED){next+=1;if(RE_HEX_ESCAPE.test(css.charAt(next))){while(RE_HEX_ESCAPE.test(css.charAt(next+1))){next+=1;}if(css.charCodeAt(next+1)===SPACE){next+=1;}}}currentToken=['word',css.slice(pos,next+1),line,pos-offset,line,next-offset];pos=next;break;default:if(code===SLASH&&css.charCodeAt(pos+1)===ASTERISK){next=css.indexOf('*/',pos+2)+1;if(next===0){if(ignore||ignoreUnclosed){next=css.length;}else{unclosed('comment');}}content=css.slice(pos,next+1);lines=content.split('\n');last=lines.length-1;if(last>0){nextLine=line+last;nextOffset=next-lines[last].length;}else{nextLine=line;nextOffset=offset;}currentToken=['comment',content,line,pos-offset,nextLine,next-nextOffset];offset=nextOffset;line=nextLine;pos=next;}else{RE_WORD_END.lastIndex=pos+1;RE_WORD_END.test(css);if(RE_WORD_END.lastIndex===0){next=css.length-1;}else{next=RE_WORD_END.lastIndex-2;}currentToken=['word',css.slice(pos,next+1),line,pos-offset,line,next-offset];buffer.push(currentToken);pos=next;}break;}pos++;return currentToken;}function back(token){returned.push(token);}return{back:back,nextToken:nextToken,endOfFile:endOfFile,position:position};}module.exports=exports.default;},{}],65:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;/**
 * Contains helpers for working with vendor prefixes.
 *
 * @example
 * const vendor = postcss.vendor
 *
 * @namespace vendor
 */var vendor={/**
   * Returns the vendor prefix extracted from an input string.
   *
   * @param {string} prop String with or without vendor prefix.
   *
   * @return {string} vendor prefix or empty string
   *
   * @example
   * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'
   * postcss.vendor.prefix('tab-size')      //=> ''
   */prefix:function prefix(prop){var match=prop.match(/^(-\w+-)/);if(match){return match[0];}return'';},/**
     * Returns the input string stripped of its vendor prefix.
     *
     * @param {string} prop String with or without vendor prefix.
     *
     * @return {string} String name without vendor prefixes.
     *
     * @example
     * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
     */unprefixed:function unprefixed(prop){return prop.replace(/^-\w+-/,'');}};var _default=vendor;exports.default=_default;module.exports=exports.default;},{}],66:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=warnOnce;var printed={};function warnOnce(message){if(printed[message])return;printed[message]=true;if(typeof console!=='undefined'&&console.warn){console.warn(message);}}module.exports=exports.default;},{}],67:[function(require,module,exports){"use strict";exports.__esModule=true;exports.default=void 0;/**
 * Represents a plugin’s warning. It can be created using {@link Node#warn}.
 *
 * @example
 * if (decl.important) {
 *   decl.warn(result, 'Avoid !important', { word: '!important' })
 * }
 */var Warning=/*#__PURE__*/function(){/**
   * @param {string} text        Warning message.
   * @param {Object} [opts]      Warning options.
   * @param {Node}   opts.node   CSS node that caused the warning.
   * @param {string} opts.word   Word in CSS source that caused the warning.
   * @param {number} opts.index  Index in CSS node string that caused
   *                             the warning.
   * @param {string} opts.plugin Name of the plugin that created
   *                             this warning. {@link Result#warn} fills
   *                             this property automatically.
   */function Warning(text,opts){if(opts===void 0){opts={};}/**
     * Type to filter warnings from {@link Result#messages}.
     * Always equal to `"warning"`.
     *
     * @type {string}
     *
     * @example
     * const nonWarning = result.messages.filter(i => i.type !== 'warning')
     */this.type='warning';/**
     * The warning message.
     *
     * @type {string}
     *
     * @example
     * warning.text //=> 'Try to avoid !important'
     */this.text=text;if(opts.node&&opts.node.source){var pos=opts.node.positionBy(opts);/**
       * Line in the input file with this warning’s source.
       * @type {number}
       *
       * @example
       * warning.line //=> 5
       */this.line=pos.line;/**
       * Column in the input file with this warning’s source.
       *
       * @type {number}
       *
       * @example
       * warning.column //=> 6
       */this.column=pos.column;}for(var opt in opts){this[opt]=opts[opt];}}/**
   * Returns a warning position and message.
   *
   * @example
   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'
   *
   * @return {string} Warning position and message.
   */var _proto=Warning.prototype;_proto.toString=function toString(){if(this.node){return this.node.error(this.text,{plugin:this.plugin,index:this.index,word:this.word}).message;}if(this.plugin){return this.plugin+': '+this.text;}return this.text;}/**
   * @memberof Warning#
   * @member {string} plugin The name of the plugin that created
   *                         it will fill this property automatically.
   *                         this warning. When you call {@link Node#warn}
   *
   * @example
   * warning.plugin //=> 'postcss-important'
   */ /**
   * @memberof Warning#
   * @member {Node} node Contains the CSS node that caused the warning.
   *
   * @example
   * warning.node.toString() //=> 'color: white !important'
   */;return Warning;}();var _default=Warning;exports.default=_default;module.exports=exports.default;},{}],68:[function(require,module,exports){// shim for using process in browser
var process=module.exports={};// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects
function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues
process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};},{}],69:[function(require,module,exports){(function(global){/*! https://mths.be/punycode v1.4.1 by @mathias */;(function(root){/** Detect free variables */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;var freeModule=typeof module=='object'&&module&&!module.nodeType&&module;var freeGlobal=typeof global=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal||freeGlobal.self===freeGlobal){root=freeGlobal;}/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */var punycode,/** Highest positive signed 32-bit float value */maxInt=2147483647,// aka. 0x7FFFFFFF or 2^31-1
/** Bootstring parameters */base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,// 0x80
delimiter='-',// '\x2D'
/** Regular expressions */regexPunycode=/^xn--/,regexNonASCII=/[^\x20-\x7E]/,// unprintable ASCII chars + non-ASCII chars
regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,// RFC 3490 separators
/** Error messages */errors={'overflow':'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'},/** Convenience shortcuts */baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode,/** Temporary variable */key;/*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */function error(type){throw new RangeError(errors[type]);}/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */function map(array,fn){var length=array.length;var result=[];while(length--){result[length]=fn(array[length]);}return result;}/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */function mapDomain(string,fn){var parts=string.split('@');var result='';if(parts.length>1){// In email addresses, only the domain name should be punycoded. Leave
// the local part (i.e. everything up to `@`) intact.
result=parts[0]+'@';string=parts[1];}// Avoid `split(regex)` for IE8 compatibility. See #17.
string=string.replace(regexSeparators,'\x2E');var labels=string.split('.');var encoded=map(labels,fn).join('.');return result+encoded;}/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */function ucs2decode(string){var output=[],counter=0,length=string.length,value,extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){// high surrogate, and there is a next character
extra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){// low surrogate
output.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{// unmatched surrogate; only append this code unit, in case the next
// code unit is the high surrogate of a surrogate pair
output.push(value);counter--;}}else{output.push(value);}}return output;}/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */function ucs2encode(array){return map(array,function(value){var output='';if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);return output;}).join('');}/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */function basicToDigit(codePoint){if(codePoint-48<10){return codePoint-22;}if(codePoint-65<26){return codePoint-65;}if(codePoint-97<26){return codePoint-97;}return base;}/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */function digitToBasic(digit,flag){//  0..25 map to ASCII a..z or A..Z
// 26..35 map to ASCII 0..9
return digit+22+75*(digit<26)-((flag!=0)<<5);}/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */function adapt(delta,numPoints,firstTime){var k=0;delta=firstTime?floor(delta/damp):delta>>1;delta+=floor(delta/numPoints);for(;/* no initialization */delta>baseMinusTMin*tMax>>1;k+=base){delta=floor(delta/baseMinusTMin);}return floor(k+(baseMinusTMin+1)*delta/(delta+skew));}/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */function decode(input){// Don't use UCS-2
var output=[],inputLength=input.length,out,i=0,n=initialN,bias=initialBias,basic,j,index,oldi,w,k,digit,t,/** Cached calculation results */baseMinusT;// Handle the basic code points: let `basic` be the number of input code
// points before the last delimiter, or `0` if there is none, then copy
// the first basic code points to the output.
basic=input.lastIndexOf(delimiter);if(basic<0){basic=0;}for(j=0;j<basic;++j){// if it's not a basic code point
if(input.charCodeAt(j)>=0x80){error('not-basic');}output.push(input.charCodeAt(j));}// Main decoding loop: start just after the last delimiter if any basic code
// points were copied; start at the beginning otherwise.
for(index=basic>0?basic+1:0;index<inputLength;)/* no final expression */{// `index` is the index of the next character to be consumed.
// Decode a generalized variable-length integer into `delta`,
// which gets added to `i`. The overflow checking is easier
// if we increase `i` as we go, then subtract off its starting
// value at the end to obtain `delta`.
for(oldi=i,w=1,k=base;;/* no condition */k+=base){if(index>=inputLength){error('invalid-input');}digit=basicToDigit(input.charCodeAt(index++));if(digit>=base||digit>floor((maxInt-i)/w)){error('overflow');}i+=digit*w;t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(digit<t){break;}baseMinusT=base-t;if(w>floor(maxInt/baseMinusT)){error('overflow');}w*=baseMinusT;}out=output.length+1;bias=adapt(i-oldi,out,oldi==0);// `i` was supposed to wrap around from `out` to `0`,
// incrementing `n` each time, so we'll fix that now:
if(floor(i/out)>maxInt-n){error('overflow');}n+=floor(i/out);i%=out;// Insert `n` at position `i` of the output
output.splice(i++,0,n);}return ucs2encode(output);}/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */function encode(input){var n,delta,handledCPCount,basicLength,bias,j,m,q,k,t,currentValue,output=[],/** `inputLength` will hold the number of code points in `input`. */inputLength,/** Cached calculation results */handledCPCountPlusOne,baseMinusT,qMinusT;// Convert the input in UCS-2 to Unicode
input=ucs2decode(input);// Cache the length
inputLength=input.length;// Initialize the state
n=initialN;delta=0;bias=initialBias;// Handle the basic code points
for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<0x80){output.push(stringFromCharCode(currentValue));}}handledCPCount=basicLength=output.length;// `handledCPCount` is the number of code points that have been handled;
// `basicLength` is the number of basic code points.
// Finish the basic string - if it is not empty - with a delimiter
if(basicLength){output.push(delimiter);}// Main encoding loop:
while(handledCPCount<inputLength){// All non-basic code points < n have been handled already. Find the next
// larger one:
for(m=maxInt,j=0;j<inputLength;++j){currentValue=input[j];if(currentValue>=n&&currentValue<m){m=currentValue;}}// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
// but guard against overflow
handledCPCountPlusOne=handledCPCount+1;if(m-n>floor((maxInt-delta)/handledCPCountPlusOne)){error('overflow');}delta+=(m-n)*handledCPCountPlusOne;n=m;for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<n&&++delta>maxInt){error('overflow');}if(currentValue==n){// Represent delta as a generalized variable-length integer
for(q=delta,k=base;;/* no condition */k+=base){t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(q<t){break;}qMinusT=q-t;baseMinusT=base-t;output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0)));q=floor(qMinusT/baseMinusT);}output.push(stringFromCharCode(digitToBasic(q,0)));bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength);delta=0;++handledCPCount;}}++delta;++n;}return output.join('');}/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */function toUnicode(input){return mapDomain(input,function(string){return regexPunycode.test(string)?decode(string.slice(4).toLowerCase()):string;});}/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */function toASCII(input){return mapDomain(input,function(string){return regexNonASCII.test(string)?'xn--'+encode(string):string;});}/*--------------------------------------------------------------------------*/ /** Define the public API */punycode={/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */'version':'1.4.1',/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */'ucs2':{'decode':ucs2decode,'encode':ucs2encode},'decode':decode,'encode':encode,'toASCII':toASCII,'toUnicode':toUnicode};/** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
// like the following:
if(typeof define=='function'&&typeof define.amd=='object'&&define.amd){define('punycode',function(){return punycode;});}else if(freeExports&&freeModule){if(module.exports==freeExports){// in Node.js, io.js, or RingoJS v0.8.0+
freeModule.exports=punycode;}else{// in Narwhal or RingoJS v0.7.0-
for(key in punycode){punycode.hasOwnProperty(key)&&(freeExports[key]=punycode[key]);}}}else{// in Rhino or a web browser
root.punycode=punycode;}})(this);}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],70:[function(require,module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}module.exports=function(qs,sep,eq,options){sep=sep||'&';eq=eq||'=';var obj={};if(typeof qs!=='string'||qs.length===0){return obj;}var regexp=/\+/g;qs=qs.split(sep);var maxKeys=1000;if(options&&typeof options.maxKeys==='number'){maxKeys=options.maxKeys;}var len=qs.length;// maxKeys <= 0 means that we should not limit keys count
if(maxKeys>0&&len>maxKeys){len=maxKeys;}for(var i=0;i<len;++i){var x=qs[i].replace(regexp,'%20'),idx=x.indexOf(eq),kstr,vstr,k,v;if(idx>=0){kstr=x.substr(0,idx);vstr=x.substr(idx+1);}else{kstr=x;vstr='';}k=decodeURIComponent(kstr);v=decodeURIComponent(vstr);if(!hasOwnProperty(obj,k)){obj[k]=v;}else if(isArray(obj[k])){obj[k].push(v);}else{obj[k]=[obj[k],v];}}return obj;};var isArray=Array.isArray||function(xs){return Object.prototype.toString.call(xs)==='[object Array]';};},{}],71:[function(require,module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';var stringifyPrimitive=function(v){switch(typeof v){case'string':return v;case'boolean':return v?'true':'false';case'number':return isFinite(v)?v:'';default:return'';}};module.exports=function(obj,sep,eq,name){sep=sep||'&';eq=eq||'=';if(obj===null){obj=undefined;}if(typeof obj==='object'){return map(objectKeys(obj),function(k){var ks=encodeURIComponent(stringifyPrimitive(k))+eq;if(isArray(obj[k])){return map(obj[k],function(v){return ks+encodeURIComponent(stringifyPrimitive(v));}).join(sep);}else{return ks+encodeURIComponent(stringifyPrimitive(obj[k]));}}).join(sep);}if(!name)return'';return encodeURIComponent(stringifyPrimitive(name))+eq+encodeURIComponent(stringifyPrimitive(obj));};var isArray=Array.isArray||function(xs){return Object.prototype.toString.call(xs)==='[object Array]';};function map(xs,f){if(xs.map)return xs.map(f);var res=[];for(var i=0;i<xs.length;i++){res.push(f(xs[i],i));}return res;}var objectKeys=Object.keys||function(obj){var res=[];for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))res.push(key);}return res;};},{}],72:[function(require,module,exports){'use strict';exports.decode=exports.parse=require('./decode');exports.encode=exports.stringify=require('./encode');},{"./decode":70,"./encode":71}],73:[function(require,module,exports){/* eslint-disable node/no-deprecated-api */var buffer=require('buffer');var Buffer=buffer.Buffer;// alternative to using Object.keys for old browsers
function copyProps(src,dst){for(var key in src){dst[key]=src[key];}}if(Buffer.from&&Buffer.alloc&&Buffer.allocUnsafe&&Buffer.allocUnsafeSlow){module.exports=buffer;}else{// Copy properties from require('buffer')
copyProps(buffer,exports);exports.Buffer=SafeBuffer;}function SafeBuffer(arg,encodingOrOffset,length){return Buffer(arg,encodingOrOffset,length);}// Copy static methods from Buffer
copyProps(Buffer,SafeBuffer);SafeBuffer.from=function(arg,encodingOrOffset,length){if(typeof arg==='number'){throw new TypeError('Argument must not be a number');}return Buffer(arg,encodingOrOffset,length);};SafeBuffer.alloc=function(size,fill,encoding){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}var buf=Buffer(size);if(fill!==undefined){if(typeof encoding==='string'){buf.fill(fill,encoding);}else{buf.fill(fill);}}else{buf.fill(0);}return buf;};SafeBuffer.allocUnsafe=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return Buffer(size);};SafeBuffer.allocUnsafeSlow=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return buffer.SlowBuffer(size);};},{"buffer":5}],74:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var util=require('./util');var has=Object.prototype.hasOwnProperty;var hasNativeMap=typeof Map!=="undefined";/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */function ArraySet(){this._array=[];this._set=hasNativeMap?new Map():Object.create(null);}/**
 * Static method for creating ArraySet instances from an existing array.
 */ArraySet.fromArray=function ArraySet_fromArray(aArray,aAllowDuplicates){var set=new ArraySet();for(var i=0,len=aArray.length;i<len;i++){set.add(aArray[i],aAllowDuplicates);}return set;};/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */ArraySet.prototype.size=function ArraySet_size(){return hasNativeMap?this._set.size:Object.getOwnPropertyNames(this._set).length;};/**
 * Add the given string to this set.
 *
 * @param String aStr
 */ArraySet.prototype.add=function ArraySet_add(aStr,aAllowDuplicates){var sStr=hasNativeMap?aStr:util.toSetString(aStr);var isDuplicate=hasNativeMap?this.has(aStr):has.call(this._set,sStr);var idx=this._array.length;if(!isDuplicate||aAllowDuplicates){this._array.push(aStr);}if(!isDuplicate){if(hasNativeMap){this._set.set(aStr,idx);}else{this._set[sStr]=idx;}}};/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */ArraySet.prototype.has=function ArraySet_has(aStr){if(hasNativeMap){return this._set.has(aStr);}else{var sStr=util.toSetString(aStr);return has.call(this._set,sStr);}};/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */ArraySet.prototype.indexOf=function ArraySet_indexOf(aStr){if(hasNativeMap){var idx=this._set.get(aStr);if(idx>=0){return idx;}}else{var sStr=util.toSetString(aStr);if(has.call(this._set,sStr)){return this._set[sStr];}}throw new Error('"'+aStr+'" is not in the set.');};/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */ArraySet.prototype.at=function ArraySet_at(aIdx){if(aIdx>=0&&aIdx<this._array.length){return this._array[aIdx];}throw new Error('No element indexed by '+aIdx);};/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */ArraySet.prototype.toArray=function ArraySet_toArray(){return this._array.slice();};exports.ArraySet=ArraySet;},{"./util":83}],75:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */var base64=require('./base64');// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011
var VLQ_BASE_SHIFT=5;// binary: 100000
var VLQ_BASE=1<<VLQ_BASE_SHIFT;// binary: 011111
var VLQ_BASE_MASK=VLQ_BASE-1;// binary: 100000
var VLQ_CONTINUATION_BIT=VLQ_BASE;/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */function toVLQSigned(aValue){return aValue<0?(-aValue<<1)+1:(aValue<<1)+0;}/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */function fromVLQSigned(aValue){var isNegative=(aValue&1)===1;var shifted=aValue>>1;return isNegative?-shifted:shifted;}/**
 * Returns the base 64 VLQ encoded value.
 */exports.encode=function base64VLQ_encode(aValue){var encoded="";var digit;var vlq=toVLQSigned(aValue);do{digit=vlq&VLQ_BASE_MASK;vlq>>>=VLQ_BASE_SHIFT;if(vlq>0){// There are still more digits in this value, so we must make sure the
// continuation bit is marked.
digit|=VLQ_CONTINUATION_BIT;}encoded+=base64.encode(digit);}while(vlq>0);return encoded;};/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */exports.decode=function base64VLQ_decode(aStr,aIndex,aOutParam){var strLen=aStr.length;var result=0;var shift=0;var continuation,digit;do{if(aIndex>=strLen){throw new Error("Expected more digits in base 64 VLQ value.");}digit=base64.decode(aStr.charCodeAt(aIndex++));if(digit===-1){throw new Error("Invalid base64 digit: "+aStr.charAt(aIndex-1));}continuation=!!(digit&VLQ_CONTINUATION_BIT);digit&=VLQ_BASE_MASK;result=result+(digit<<shift);shift+=VLQ_BASE_SHIFT;}while(continuation);aOutParam.value=fromVLQSigned(result);aOutParam.rest=aIndex;};},{"./base64":76}],76:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var intToCharMap='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */exports.encode=function(number){if(0<=number&&number<intToCharMap.length){return intToCharMap[number];}throw new TypeError("Must be between 0 and 63: "+number);};/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */exports.decode=function(charCode){var bigA=65;// 'A'
var bigZ=90;// 'Z'
var littleA=97;// 'a'
var littleZ=122;// 'z'
var zero=48;// '0'
var nine=57;// '9'
var plus=43;// '+'
var slash=47;// '/'
var littleOffset=26;var numberOffset=52;// 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
if(bigA<=charCode&&charCode<=bigZ){return charCode-bigA;}// 26 - 51: abcdefghijklmnopqrstuvwxyz
if(littleA<=charCode&&charCode<=littleZ){return charCode-littleA+littleOffset;}// 52 - 61: 0123456789
if(zero<=charCode&&charCode<=nine){return charCode-zero+numberOffset;}// 62: +
if(charCode==plus){return 62;}// 63: /
if(charCode==slash){return 63;}// Invalid base64 digit.
return-1;};},{}],77:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */exports.GREATEST_LOWER_BOUND=1;exports.LEAST_UPPER_BOUND=2;/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */function recursiveSearch(aLow,aHigh,aNeedle,aHaystack,aCompare,aBias){// This function terminates when one of the following is true:
//
//   1. We find the exact element we are looking for.
//
//   2. We did not find the exact element, but we can return the index of
//      the next-closest element.
//
//   3. We did not find the exact element, and there is no next-closest
//      element than the one we are searching for, so we return -1.
var mid=Math.floor((aHigh-aLow)/2)+aLow;var cmp=aCompare(aNeedle,aHaystack[mid],true);if(cmp===0){// Found the element we are looking for.
return mid;}else if(cmp>0){// Our needle is greater than aHaystack[mid].
if(aHigh-mid>1){// The element is in the upper half.
return recursiveSearch(mid,aHigh,aNeedle,aHaystack,aCompare,aBias);}// The exact needle element was not found in this haystack. Determine if
// we are in termination case (3) or (2) and return the appropriate thing.
if(aBias==exports.LEAST_UPPER_BOUND){return aHigh<aHaystack.length?aHigh:-1;}else{return mid;}}else{// Our needle is less than aHaystack[mid].
if(mid-aLow>1){// The element is in the lower half.
return recursiveSearch(aLow,mid,aNeedle,aHaystack,aCompare,aBias);}// we are in termination case (3) or (2) and return the appropriate thing.
if(aBias==exports.LEAST_UPPER_BOUND){return mid;}else{return aLow<0?-1:aLow;}}}/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */exports.search=function search(aNeedle,aHaystack,aCompare,aBias){if(aHaystack.length===0){return-1;}var index=recursiveSearch(-1,aHaystack.length,aNeedle,aHaystack,aCompare,aBias||exports.GREATEST_LOWER_BOUND);if(index<0){return-1;}// We have found either the exact element, or the next-closest element than
// the one we are searching for. However, there may be more than one such
// element. Make sure we always return the smallest of these.
while(index-1>=0){if(aCompare(aHaystack[index],aHaystack[index-1],true)!==0){break;}--index;}return index;};},{}],78:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var util=require('./util');/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */function generatedPositionAfter(mappingA,mappingB){// Optimized for most common case
var lineA=mappingA.generatedLine;var lineB=mappingB.generatedLine;var columnA=mappingA.generatedColumn;var columnB=mappingB.generatedColumn;return lineB>lineA||lineB==lineA&&columnB>=columnA||util.compareByGeneratedPositionsInflated(mappingA,mappingB)<=0;}/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */function MappingList(){this._array=[];this._sorted=true;// Serves as infimum
this._last={generatedLine:-1,generatedColumn:0};}/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */MappingList.prototype.unsortedForEach=function MappingList_forEach(aCallback,aThisArg){this._array.forEach(aCallback,aThisArg);};/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */MappingList.prototype.add=function MappingList_add(aMapping){if(generatedPositionAfter(this._last,aMapping)){this._last=aMapping;this._array.push(aMapping);}else{this._sorted=false;this._array.push(aMapping);}};/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */MappingList.prototype.toArray=function MappingList_toArray(){if(!this._sorted){this._array.sort(util.compareByGeneratedPositionsInflated);this._sorted=true;}return this._array;};exports.MappingList=MappingList;},{"./util":83}],79:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ // It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.
/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */function swap(ary,x,y){var temp=ary[x];ary[x]=ary[y];ary[y]=temp;}/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */function randomIntInRange(low,high){return Math.round(low+Math.random()*(high-low));}/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */function doQuickSort(ary,comparator,p,r){// If our lower bound is less than our upper bound, we (1) partition the
// array into two pieces and (2) recurse on each half. If it is not, this is
// the empty array and our base case.
if(p<r){// (1) Partitioning.
//
// The partitioning chooses a pivot between `p` and `r` and moves all
// elements that are less than or equal to the pivot to the before it, and
// all the elements that are greater than it after it. The effect is that
// once partition is done, the pivot is in the exact place it will be when
// the array is put in sorted order, and it will not need to be moved
// again. This runs in O(n) time.
// Always choose a random pivot so that an input array which is reverse
// sorted does not cause O(n^2) running time.
var pivotIndex=randomIntInRange(p,r);var i=p-1;swap(ary,pivotIndex,r);var pivot=ary[r];// Immediately after `j` is incremented in this loop, the following hold
// true:
//
//   * Every element in `ary[p .. i]` is less than or equal to the pivot.
//
//   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
for(var j=p;j<r;j++){if(comparator(ary[j],pivot)<=0){i+=1;swap(ary,i,j);}}swap(ary,i+1,j);var q=i+1;// (2) Recurse on each half.
doQuickSort(ary,comparator,p,q-1);doQuickSort(ary,comparator,q+1,r);}}/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */exports.quickSort=function(ary,comparator){doQuickSort(ary,comparator,0,ary.length-1);};},{}],80:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var util=require('./util');var binarySearch=require('./binary-search');var ArraySet=require('./array-set').ArraySet;var base64VLQ=require('./base64-vlq');var quickSort=require('./quick-sort').quickSort;function SourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;if(typeof aSourceMap==='string'){sourceMap=util.parseSourceMapInput(aSourceMap);}return sourceMap.sections!=null?new IndexedSourceMapConsumer(sourceMap,aSourceMapURL):new BasicSourceMapConsumer(sourceMap,aSourceMapURL);}SourceMapConsumer.fromSourceMap=function(aSourceMap,aSourceMapURL){return BasicSourceMapConsumer.fromSourceMap(aSourceMap,aSourceMapURL);};/**
 * The version of the source mapping spec that we are consuming.
 */SourceMapConsumer.prototype._version=3;// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.
SourceMapConsumer.prototype.__generatedMappings=null;Object.defineProperty(SourceMapConsumer.prototype,'_generatedMappings',{configurable:true,enumerable:true,get:function(){if(!this.__generatedMappings){this._parseMappings(this._mappings,this.sourceRoot);}return this.__generatedMappings;}});SourceMapConsumer.prototype.__originalMappings=null;Object.defineProperty(SourceMapConsumer.prototype,'_originalMappings',{configurable:true,enumerable:true,get:function(){if(!this.__originalMappings){this._parseMappings(this._mappings,this.sourceRoot);}return this.__originalMappings;}});SourceMapConsumer.prototype._charIsMappingSeparator=function SourceMapConsumer_charIsMappingSeparator(aStr,index){var c=aStr.charAt(index);return c===";"||c===",";};/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */SourceMapConsumer.prototype._parseMappings=function SourceMapConsumer_parseMappings(aStr,aSourceRoot){throw new Error("Subclasses must implement _parseMappings");};SourceMapConsumer.GENERATED_ORDER=1;SourceMapConsumer.ORIGINAL_ORDER=2;SourceMapConsumer.GREATEST_LOWER_BOUND=1;SourceMapConsumer.LEAST_UPPER_BOUND=2;/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */SourceMapConsumer.prototype.eachMapping=function SourceMapConsumer_eachMapping(aCallback,aContext,aOrder){var context=aContext||null;var order=aOrder||SourceMapConsumer.GENERATED_ORDER;var mappings;switch(order){case SourceMapConsumer.GENERATED_ORDER:mappings=this._generatedMappings;break;case SourceMapConsumer.ORIGINAL_ORDER:mappings=this._originalMappings;break;default:throw new Error("Unknown order of iteration.");}var sourceRoot=this.sourceRoot;mappings.map(function(mapping){var source=mapping.source===null?null:this._sources.at(mapping.source);source=util.computeSourceURL(sourceRoot,source,this._sourceMapURL);return{source:source,generatedLine:mapping.generatedLine,generatedColumn:mapping.generatedColumn,originalLine:mapping.originalLine,originalColumn:mapping.originalColumn,name:mapping.name===null?null:this._names.at(mapping.name)};},this).forEach(aCallback,context);};/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */SourceMapConsumer.prototype.allGeneratedPositionsFor=function SourceMapConsumer_allGeneratedPositionsFor(aArgs){var line=util.getArg(aArgs,'line');// When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
// returns the index of the closest mapping less than the needle. By
// setting needle.originalColumn to 0, we thus find the last mapping for
// the given line, provided such a mapping exists.
var needle={source:util.getArg(aArgs,'source'),originalLine:line,originalColumn:util.getArg(aArgs,'column',0)};needle.source=this._findSourceIndex(needle.source);if(needle.source<0){return[];}var mappings=[];var index=this._findMapping(needle,this._originalMappings,"originalLine","originalColumn",util.compareByOriginalPositions,binarySearch.LEAST_UPPER_BOUND);if(index>=0){var mapping=this._originalMappings[index];if(aArgs.column===undefined){var originalLine=mapping.originalLine;// Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we found. Since
// mappings are sorted, this is guaranteed to find all mappings for
// the line we found.
while(mapping&&mapping.originalLine===originalLine){mappings.push({line:util.getArg(mapping,'generatedLine',null),column:util.getArg(mapping,'generatedColumn',null),lastColumn:util.getArg(mapping,'lastGeneratedColumn',null)});mapping=this._originalMappings[++index];}}else{var originalColumn=mapping.originalColumn;// Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we were searching for.
// Since mappings are sorted, this is guaranteed to find all mappings for
// the line we are searching for.
while(mapping&&mapping.originalLine===line&&mapping.originalColumn==originalColumn){mappings.push({line:util.getArg(mapping,'generatedLine',null),column:util.getArg(mapping,'generatedColumn',null),lastColumn:util.getArg(mapping,'lastGeneratedColumn',null)});mapping=this._originalMappings[++index];}}}return mappings;};exports.SourceMapConsumer=SourceMapConsumer;/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */function BasicSourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;if(typeof aSourceMap==='string'){sourceMap=util.parseSourceMapInput(aSourceMap);}var version=util.getArg(sourceMap,'version');var sources=util.getArg(sourceMap,'sources');// Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
// requires the array) to play nice here.
var names=util.getArg(sourceMap,'names',[]);var sourceRoot=util.getArg(sourceMap,'sourceRoot',null);var sourcesContent=util.getArg(sourceMap,'sourcesContent',null);var mappings=util.getArg(sourceMap,'mappings');var file=util.getArg(sourceMap,'file',null);// Once again, Sass deviates from the spec and supplies the version as a
// string rather than a number, so we use loose equality checking here.
if(version!=this._version){throw new Error('Unsupported version: '+version);}if(sourceRoot){sourceRoot=util.normalize(sourceRoot);}sources=sources.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
// "foo.js".  Normalize these first so that future comparisons will succeed.
// See bugzil.la/1090768.
.map(util.normalize)// Always ensure that absolute sources are internally stored relative to
// the source root, if the source root is absolute. Not doing this would
// be particularly problematic when the source root is a prefix of the
// source (valid, but why??). See github issue #199 and bugzil.la/1188982.
.map(function(source){return sourceRoot&&util.isAbsolute(sourceRoot)&&util.isAbsolute(source)?util.relative(sourceRoot,source):source;});// Pass `true` below to allow duplicate names and sources. While source maps
// are intended to be compressed and deduplicated, the TypeScript compiler
// sometimes generates source maps with duplicates in them. See Github issue
// #72 and bugzil.la/889492.
this._names=ArraySet.fromArray(names.map(String),true);this._sources=ArraySet.fromArray(sources,true);this._absoluteSources=this._sources.toArray().map(function(s){return util.computeSourceURL(sourceRoot,s,aSourceMapURL);});this.sourceRoot=sourceRoot;this.sourcesContent=sourcesContent;this._mappings=mappings;this._sourceMapURL=aSourceMapURL;this.file=file;}BasicSourceMapConsumer.prototype=Object.create(SourceMapConsumer.prototype);BasicSourceMapConsumer.prototype.consumer=SourceMapConsumer;/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */BasicSourceMapConsumer.prototype._findSourceIndex=function(aSource){var relativeSource=aSource;if(this.sourceRoot!=null){relativeSource=util.relative(this.sourceRoot,relativeSource);}if(this._sources.has(relativeSource)){return this._sources.indexOf(relativeSource);}// Maybe aSource is an absolute URL as returned by |sources|.  In
// this case we can't simply undo the transform.
var i;for(i=0;i<this._absoluteSources.length;++i){if(this._absoluteSources[i]==aSource){return i;}}return-1;};/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */BasicSourceMapConsumer.fromSourceMap=function SourceMapConsumer_fromSourceMap(aSourceMap,aSourceMapURL){var smc=Object.create(BasicSourceMapConsumer.prototype);var names=smc._names=ArraySet.fromArray(aSourceMap._names.toArray(),true);var sources=smc._sources=ArraySet.fromArray(aSourceMap._sources.toArray(),true);smc.sourceRoot=aSourceMap._sourceRoot;smc.sourcesContent=aSourceMap._generateSourcesContent(smc._sources.toArray(),smc.sourceRoot);smc.file=aSourceMap._file;smc._sourceMapURL=aSourceMapURL;smc._absoluteSources=smc._sources.toArray().map(function(s){return util.computeSourceURL(smc.sourceRoot,s,aSourceMapURL);});// Because we are modifying the entries (by converting string sources and
// names to indices into the sources and names ArraySets), we have to make
// a copy of the entry or else bad things happen. Shared mutable state
// strikes again! See github issue #191.
var generatedMappings=aSourceMap._mappings.toArray().slice();var destGeneratedMappings=smc.__generatedMappings=[];var destOriginalMappings=smc.__originalMappings=[];for(var i=0,length=generatedMappings.length;i<length;i++){var srcMapping=generatedMappings[i];var destMapping=new Mapping();destMapping.generatedLine=srcMapping.generatedLine;destMapping.generatedColumn=srcMapping.generatedColumn;if(srcMapping.source){destMapping.source=sources.indexOf(srcMapping.source);destMapping.originalLine=srcMapping.originalLine;destMapping.originalColumn=srcMapping.originalColumn;if(srcMapping.name){destMapping.name=names.indexOf(srcMapping.name);}destOriginalMappings.push(destMapping);}destGeneratedMappings.push(destMapping);}quickSort(smc.__originalMappings,util.compareByOriginalPositions);return smc;};/**
 * The version of the source mapping spec that we are consuming.
 */BasicSourceMapConsumer.prototype._version=3;/**
 * The list of original sources.
 */Object.defineProperty(BasicSourceMapConsumer.prototype,'sources',{get:function(){return this._absoluteSources.slice();}});/**
 * Provide the JIT with a nice shape / hidden class.
 */function Mapping(){this.generatedLine=0;this.generatedColumn=0;this.source=null;this.originalLine=null;this.originalColumn=null;this.name=null;}/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */BasicSourceMapConsumer.prototype._parseMappings=function SourceMapConsumer_parseMappings(aStr,aSourceRoot){var generatedLine=1;var previousGeneratedColumn=0;var previousOriginalLine=0;var previousOriginalColumn=0;var previousSource=0;var previousName=0;var length=aStr.length;var index=0;var cachedSegments={};var temp={};var originalMappings=[];var generatedMappings=[];var mapping,str,segment,end,value;while(index<length){if(aStr.charAt(index)===';'){generatedLine++;index++;previousGeneratedColumn=0;}else if(aStr.charAt(index)===','){index++;}else{mapping=new Mapping();mapping.generatedLine=generatedLine;// Because each offset is encoded relative to the previous one,
// many segments often have the same encoding. We can exploit this
// fact by caching the parsed variable length fields of each segment,
// allowing us to avoid a second parse if we encounter the same
// segment again.
for(end=index;end<length;end++){if(this._charIsMappingSeparator(aStr,end)){break;}}str=aStr.slice(index,end);segment=cachedSegments[str];if(segment){index+=str.length;}else{segment=[];while(index<end){base64VLQ.decode(aStr,index,temp);value=temp.value;index=temp.rest;segment.push(value);}if(segment.length===2){throw new Error('Found a source, but no line and column');}if(segment.length===3){throw new Error('Found a source and line, but no column');}cachedSegments[str]=segment;}// Generated column.
mapping.generatedColumn=previousGeneratedColumn+segment[0];previousGeneratedColumn=mapping.generatedColumn;if(segment.length>1){// Original source.
mapping.source=previousSource+segment[1];previousSource+=segment[1];// Original line.
mapping.originalLine=previousOriginalLine+segment[2];previousOriginalLine=mapping.originalLine;// Lines are stored 0-based
mapping.originalLine+=1;// Original column.
mapping.originalColumn=previousOriginalColumn+segment[3];previousOriginalColumn=mapping.originalColumn;if(segment.length>4){// Original name.
mapping.name=previousName+segment[4];previousName+=segment[4];}}generatedMappings.push(mapping);if(typeof mapping.originalLine==='number'){originalMappings.push(mapping);}}}quickSort(generatedMappings,util.compareByGeneratedPositionsDeflated);this.__generatedMappings=generatedMappings;quickSort(originalMappings,util.compareByOriginalPositions);this.__originalMappings=originalMappings;};/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */BasicSourceMapConsumer.prototype._findMapping=function SourceMapConsumer_findMapping(aNeedle,aMappings,aLineName,aColumnName,aComparator,aBias){// To return the position we are searching for, we must first find the
// mapping for the given position and then return the opposite position it
// points to. Because the mappings are sorted, we can use binary search to
// find the best mapping.
if(aNeedle[aLineName]<=0){throw new TypeError('Line must be greater than or equal to 1, got '+aNeedle[aLineName]);}if(aNeedle[aColumnName]<0){throw new TypeError('Column must be greater than or equal to 0, got '+aNeedle[aColumnName]);}return binarySearch.search(aNeedle,aMappings,aComparator,aBias);};/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */BasicSourceMapConsumer.prototype.computeColumnSpans=function SourceMapConsumer_computeColumnSpans(){for(var index=0;index<this._generatedMappings.length;++index){var mapping=this._generatedMappings[index];// Mappings do not contain a field for the last generated columnt. We
// can come up with an optimistic estimate, however, by assuming that
// mappings are contiguous (i.e. given two consecutive mappings, the
// first mapping ends where the second one starts).
if(index+1<this._generatedMappings.length){var nextMapping=this._generatedMappings[index+1];if(mapping.generatedLine===nextMapping.generatedLine){mapping.lastGeneratedColumn=nextMapping.generatedColumn-1;continue;}}// The last mapping for each line spans the entire line.
mapping.lastGeneratedColumn=Infinity;}};/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */BasicSourceMapConsumer.prototype.originalPositionFor=function SourceMapConsumer_originalPositionFor(aArgs){var needle={generatedLine:util.getArg(aArgs,'line'),generatedColumn:util.getArg(aArgs,'column')};var index=this._findMapping(needle,this._generatedMappings,"generatedLine","generatedColumn",util.compareByGeneratedPositionsDeflated,util.getArg(aArgs,'bias',SourceMapConsumer.GREATEST_LOWER_BOUND));if(index>=0){var mapping=this._generatedMappings[index];if(mapping.generatedLine===needle.generatedLine){var source=util.getArg(mapping,'source',null);if(source!==null){source=this._sources.at(source);source=util.computeSourceURL(this.sourceRoot,source,this._sourceMapURL);}var name=util.getArg(mapping,'name',null);if(name!==null){name=this._names.at(name);}return{source:source,line:util.getArg(mapping,'originalLine',null),column:util.getArg(mapping,'originalColumn',null),name:name};}}return{source:null,line:null,column:null,name:null};};/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */BasicSourceMapConsumer.prototype.hasContentsOfAllSources=function BasicSourceMapConsumer_hasContentsOfAllSources(){if(!this.sourcesContent){return false;}return this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(sc){return sc==null;});};/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */BasicSourceMapConsumer.prototype.sourceContentFor=function SourceMapConsumer_sourceContentFor(aSource,nullOnMissing){if(!this.sourcesContent){return null;}var index=this._findSourceIndex(aSource);if(index>=0){return this.sourcesContent[index];}var relativeSource=aSource;if(this.sourceRoot!=null){relativeSource=util.relative(this.sourceRoot,relativeSource);}var url;if(this.sourceRoot!=null&&(url=util.urlParse(this.sourceRoot))){// XXX: file:// URIs and absolute paths lead to unexpected behavior for
// many users. We can help them out when they expect file:// URIs to
// behave like it would if they were running a local HTTP server. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
var fileUriAbsPath=relativeSource.replace(/^file:\/\//,"");if(url.scheme=="file"&&this._sources.has(fileUriAbsPath)){return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];}if((!url.path||url.path=="/")&&this._sources.has("/"+relativeSource)){return this.sourcesContent[this._sources.indexOf("/"+relativeSource)];}}// This function is used recursively from
// IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
// don't want to throw if we can't find the source - we just want to
// return null, so we provide a flag to exit gracefully.
if(nullOnMissing){return null;}else{throw new Error('"'+relativeSource+'" is not in the SourceMap.');}};/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */BasicSourceMapConsumer.prototype.generatedPositionFor=function SourceMapConsumer_generatedPositionFor(aArgs){var source=util.getArg(aArgs,'source');source=this._findSourceIndex(source);if(source<0){return{line:null,column:null,lastColumn:null};}var needle={source:source,originalLine:util.getArg(aArgs,'line'),originalColumn:util.getArg(aArgs,'column')};var index=this._findMapping(needle,this._originalMappings,"originalLine","originalColumn",util.compareByOriginalPositions,util.getArg(aArgs,'bias',SourceMapConsumer.GREATEST_LOWER_BOUND));if(index>=0){var mapping=this._originalMappings[index];if(mapping.source===needle.source){return{line:util.getArg(mapping,'generatedLine',null),column:util.getArg(mapping,'generatedColumn',null),lastColumn:util.getArg(mapping,'lastGeneratedColumn',null)};}}return{line:null,column:null,lastColumn:null};};exports.BasicSourceMapConsumer=BasicSourceMapConsumer;/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */function IndexedSourceMapConsumer(aSourceMap,aSourceMapURL){var sourceMap=aSourceMap;if(typeof aSourceMap==='string'){sourceMap=util.parseSourceMapInput(aSourceMap);}var version=util.getArg(sourceMap,'version');var sections=util.getArg(sourceMap,'sections');if(version!=this._version){throw new Error('Unsupported version: '+version);}this._sources=new ArraySet();this._names=new ArraySet();var lastOffset={line:-1,column:0};this._sections=sections.map(function(s){if(s.url){// The url field will require support for asynchronicity.
// See https://github.com/mozilla/source-map/issues/16
throw new Error('Support for url field in sections not implemented.');}var offset=util.getArg(s,'offset');var offsetLine=util.getArg(offset,'line');var offsetColumn=util.getArg(offset,'column');if(offsetLine<lastOffset.line||offsetLine===lastOffset.line&&offsetColumn<lastOffset.column){throw new Error('Section offsets must be ordered and non-overlapping.');}lastOffset=offset;return{generatedOffset:{// The offset fields are 0-based, but we use 1-based indices when
// encoding/decoding from VLQ.
generatedLine:offsetLine+1,generatedColumn:offsetColumn+1},consumer:new SourceMapConsumer(util.getArg(s,'map'),aSourceMapURL)};});}IndexedSourceMapConsumer.prototype=Object.create(SourceMapConsumer.prototype);IndexedSourceMapConsumer.prototype.constructor=SourceMapConsumer;/**
 * The version of the source mapping spec that we are consuming.
 */IndexedSourceMapConsumer.prototype._version=3;/**
 * The list of original sources.
 */Object.defineProperty(IndexedSourceMapConsumer.prototype,'sources',{get:function(){var sources=[];for(var i=0;i<this._sections.length;i++){for(var j=0;j<this._sections[i].consumer.sources.length;j++){sources.push(this._sections[i].consumer.sources[j]);}}return sources;}});/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */IndexedSourceMapConsumer.prototype.originalPositionFor=function IndexedSourceMapConsumer_originalPositionFor(aArgs){var needle={generatedLine:util.getArg(aArgs,'line'),generatedColumn:util.getArg(aArgs,'column')};// Find the section containing the generated position we're trying to map
// to an original position.
var sectionIndex=binarySearch.search(needle,this._sections,function(needle,section){var cmp=needle.generatedLine-section.generatedOffset.generatedLine;if(cmp){return cmp;}return needle.generatedColumn-section.generatedOffset.generatedColumn;});var section=this._sections[sectionIndex];if(!section){return{source:null,line:null,column:null,name:null};}return section.consumer.originalPositionFor({line:needle.generatedLine-(section.generatedOffset.generatedLine-1),column:needle.generatedColumn-(section.generatedOffset.generatedLine===needle.generatedLine?section.generatedOffset.generatedColumn-1:0),bias:aArgs.bias});};/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */IndexedSourceMapConsumer.prototype.hasContentsOfAllSources=function IndexedSourceMapConsumer_hasContentsOfAllSources(){return this._sections.every(function(s){return s.consumer.hasContentsOfAllSources();});};/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */IndexedSourceMapConsumer.prototype.sourceContentFor=function IndexedSourceMapConsumer_sourceContentFor(aSource,nullOnMissing){for(var i=0;i<this._sections.length;i++){var section=this._sections[i];var content=section.consumer.sourceContentFor(aSource,true);if(content){return content;}}if(nullOnMissing){return null;}else{throw new Error('"'+aSource+'" is not in the SourceMap.');}};/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */IndexedSourceMapConsumer.prototype.generatedPositionFor=function IndexedSourceMapConsumer_generatedPositionFor(aArgs){for(var i=0;i<this._sections.length;i++){var section=this._sections[i];// Only consider this section if the requested source is in the list of
// sources of the consumer.
if(section.consumer._findSourceIndex(util.getArg(aArgs,'source'))===-1){continue;}var generatedPosition=section.consumer.generatedPositionFor(aArgs);if(generatedPosition){var ret={line:generatedPosition.line+(section.generatedOffset.generatedLine-1),column:generatedPosition.column+(section.generatedOffset.generatedLine===generatedPosition.line?section.generatedOffset.generatedColumn-1:0)};return ret;}}return{line:null,column:null};};/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */IndexedSourceMapConsumer.prototype._parseMappings=function IndexedSourceMapConsumer_parseMappings(aStr,aSourceRoot){this.__generatedMappings=[];this.__originalMappings=[];for(var i=0;i<this._sections.length;i++){var section=this._sections[i];var sectionMappings=section.consumer._generatedMappings;for(var j=0;j<sectionMappings.length;j++){var mapping=sectionMappings[j];var source=section.consumer._sources.at(mapping.source);source=util.computeSourceURL(section.consumer.sourceRoot,source,this._sourceMapURL);this._sources.add(source);source=this._sources.indexOf(source);var name=null;if(mapping.name){name=section.consumer._names.at(mapping.name);this._names.add(name);name=this._names.indexOf(name);}// The mappings coming from the consumer for the section have
// generated positions relative to the start of the section, so we
// need to offset them to be relative to the start of the concatenated
// generated file.
var adjustedMapping={source:source,generatedLine:mapping.generatedLine+(section.generatedOffset.generatedLine-1),generatedColumn:mapping.generatedColumn+(section.generatedOffset.generatedLine===mapping.generatedLine?section.generatedOffset.generatedColumn-1:0),originalLine:mapping.originalLine,originalColumn:mapping.originalColumn,name:name};this.__generatedMappings.push(adjustedMapping);if(typeof adjustedMapping.originalLine==='number'){this.__originalMappings.push(adjustedMapping);}}}quickSort(this.__generatedMappings,util.compareByGeneratedPositionsDeflated);quickSort(this.__originalMappings,util.compareByOriginalPositions);};exports.IndexedSourceMapConsumer=IndexedSourceMapConsumer;},{"./array-set":74,"./base64-vlq":75,"./binary-search":77,"./quick-sort":79,"./util":83}],81:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var base64VLQ=require('./base64-vlq');var util=require('./util');var ArraySet=require('./array-set').ArraySet;var MappingList=require('./mapping-list').MappingList;/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */function SourceMapGenerator(aArgs){if(!aArgs){aArgs={};}this._file=util.getArg(aArgs,'file',null);this._sourceRoot=util.getArg(aArgs,'sourceRoot',null);this._skipValidation=util.getArg(aArgs,'skipValidation',false);this._sources=new ArraySet();this._names=new ArraySet();this._mappings=new MappingList();this._sourcesContents=null;}SourceMapGenerator.prototype._version=3;/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */SourceMapGenerator.fromSourceMap=function SourceMapGenerator_fromSourceMap(aSourceMapConsumer){var sourceRoot=aSourceMapConsumer.sourceRoot;var generator=new SourceMapGenerator({file:aSourceMapConsumer.file,sourceRoot:sourceRoot});aSourceMapConsumer.eachMapping(function(mapping){var newMapping={generated:{line:mapping.generatedLine,column:mapping.generatedColumn}};if(mapping.source!=null){newMapping.source=mapping.source;if(sourceRoot!=null){newMapping.source=util.relative(sourceRoot,newMapping.source);}newMapping.original={line:mapping.originalLine,column:mapping.originalColumn};if(mapping.name!=null){newMapping.name=mapping.name;}}generator.addMapping(newMapping);});aSourceMapConsumer.sources.forEach(function(sourceFile){var sourceRelative=sourceFile;if(sourceRoot!==null){sourceRelative=util.relative(sourceRoot,sourceFile);}if(!generator._sources.has(sourceRelative)){generator._sources.add(sourceRelative);}var content=aSourceMapConsumer.sourceContentFor(sourceFile);if(content!=null){generator.setSourceContent(sourceFile,content);}});return generator;};/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */SourceMapGenerator.prototype.addMapping=function SourceMapGenerator_addMapping(aArgs){var generated=util.getArg(aArgs,'generated');var original=util.getArg(aArgs,'original',null);var source=util.getArg(aArgs,'source',null);var name=util.getArg(aArgs,'name',null);if(!this._skipValidation){this._validateMapping(generated,original,source,name);}if(source!=null){source=String(source);if(!this._sources.has(source)){this._sources.add(source);}}if(name!=null){name=String(name);if(!this._names.has(name)){this._names.add(name);}}this._mappings.add({generatedLine:generated.line,generatedColumn:generated.column,originalLine:original!=null&&original.line,originalColumn:original!=null&&original.column,source:source,name:name});};/**
 * Set the source content for a source file.
 */SourceMapGenerator.prototype.setSourceContent=function SourceMapGenerator_setSourceContent(aSourceFile,aSourceContent){var source=aSourceFile;if(this._sourceRoot!=null){source=util.relative(this._sourceRoot,source);}if(aSourceContent!=null){// Add the source content to the _sourcesContents map.
// Create a new _sourcesContents map if the property is null.
if(!this._sourcesContents){this._sourcesContents=Object.create(null);}this._sourcesContents[util.toSetString(source)]=aSourceContent;}else if(this._sourcesContents){// Remove the source file from the _sourcesContents map.
// If the _sourcesContents map is empty, set the property to null.
delete this._sourcesContents[util.toSetString(source)];if(Object.keys(this._sourcesContents).length===0){this._sourcesContents=null;}}};/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */SourceMapGenerator.prototype.applySourceMap=function SourceMapGenerator_applySourceMap(aSourceMapConsumer,aSourceFile,aSourceMapPath){var sourceFile=aSourceFile;// If aSourceFile is omitted, we will use the file property of the SourceMap
if(aSourceFile==null){if(aSourceMapConsumer.file==null){throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, '+'or the source map\'s "file" property. Both were omitted.');}sourceFile=aSourceMapConsumer.file;}var sourceRoot=this._sourceRoot;// Make "sourceFile" relative if an absolute Url is passed.
if(sourceRoot!=null){sourceFile=util.relative(sourceRoot,sourceFile);}// Applying the SourceMap can add and remove items from the sources and
// the names array.
var newSources=new ArraySet();var newNames=new ArraySet();// Find mappings for the "sourceFile"
this._mappings.unsortedForEach(function(mapping){if(mapping.source===sourceFile&&mapping.originalLine!=null){// Check if it can be mapped by the source map, then update the mapping.
var original=aSourceMapConsumer.originalPositionFor({line:mapping.originalLine,column:mapping.originalColumn});if(original.source!=null){// Copy mapping
mapping.source=original.source;if(aSourceMapPath!=null){mapping.source=util.join(aSourceMapPath,mapping.source);}if(sourceRoot!=null){mapping.source=util.relative(sourceRoot,mapping.source);}mapping.originalLine=original.line;mapping.originalColumn=original.column;if(original.name!=null){mapping.name=original.name;}}}var source=mapping.source;if(source!=null&&!newSources.has(source)){newSources.add(source);}var name=mapping.name;if(name!=null&&!newNames.has(name)){newNames.add(name);}},this);this._sources=newSources;this._names=newNames;// Copy sourcesContents of applied map.
aSourceMapConsumer.sources.forEach(function(sourceFile){var content=aSourceMapConsumer.sourceContentFor(sourceFile);if(content!=null){if(aSourceMapPath!=null){sourceFile=util.join(aSourceMapPath,sourceFile);}if(sourceRoot!=null){sourceFile=util.relative(sourceRoot,sourceFile);}this.setSourceContent(sourceFile,content);}},this);};/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */SourceMapGenerator.prototype._validateMapping=function SourceMapGenerator_validateMapping(aGenerated,aOriginal,aSource,aName){// When aOriginal is truthy but has empty values for .line and .column,
// it is most likely a programmer error. In this case we throw a very
// specific error message to try to guide them the right way.
// For example: https://github.com/Polymer/polymer-bundler/pull/519
if(aOriginal&&typeof aOriginal.line!=='number'&&typeof aOriginal.column!=='number'){throw new Error('original.line and original.column are not numbers -- you probably meant to omit '+'the original mapping entirely and only map the generated position. If so, pass '+'null for the original mapping instead of an object with empty or null values.');}if(aGenerated&&'line'in aGenerated&&'column'in aGenerated&&aGenerated.line>0&&aGenerated.column>=0&&!aOriginal&&!aSource&&!aName){// Case 1.
return;}else if(aGenerated&&'line'in aGenerated&&'column'in aGenerated&&aOriginal&&'line'in aOriginal&&'column'in aOriginal&&aGenerated.line>0&&aGenerated.column>=0&&aOriginal.line>0&&aOriginal.column>=0&&aSource){// Cases 2 and 3.
return;}else{throw new Error('Invalid mapping: '+JSON.stringify({generated:aGenerated,source:aSource,original:aOriginal,name:aName}));}};/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */SourceMapGenerator.prototype._serializeMappings=function SourceMapGenerator_serializeMappings(){var previousGeneratedColumn=0;var previousGeneratedLine=1;var previousOriginalColumn=0;var previousOriginalLine=0;var previousName=0;var previousSource=0;var result='';var next;var mapping;var nameIdx;var sourceIdx;var mappings=this._mappings.toArray();for(var i=0,len=mappings.length;i<len;i++){mapping=mappings[i];next='';if(mapping.generatedLine!==previousGeneratedLine){previousGeneratedColumn=0;while(mapping.generatedLine!==previousGeneratedLine){next+=';';previousGeneratedLine++;}}else{if(i>0){if(!util.compareByGeneratedPositionsInflated(mapping,mappings[i-1])){continue;}next+=',';}}next+=base64VLQ.encode(mapping.generatedColumn-previousGeneratedColumn);previousGeneratedColumn=mapping.generatedColumn;if(mapping.source!=null){sourceIdx=this._sources.indexOf(mapping.source);next+=base64VLQ.encode(sourceIdx-previousSource);previousSource=sourceIdx;// lines are stored 0-based in SourceMap spec version 3
next+=base64VLQ.encode(mapping.originalLine-1-previousOriginalLine);previousOriginalLine=mapping.originalLine-1;next+=base64VLQ.encode(mapping.originalColumn-previousOriginalColumn);previousOriginalColumn=mapping.originalColumn;if(mapping.name!=null){nameIdx=this._names.indexOf(mapping.name);next+=base64VLQ.encode(nameIdx-previousName);previousName=nameIdx;}}result+=next;}return result;};SourceMapGenerator.prototype._generateSourcesContent=function SourceMapGenerator_generateSourcesContent(aSources,aSourceRoot){return aSources.map(function(source){if(!this._sourcesContents){return null;}if(aSourceRoot!=null){source=util.relative(aSourceRoot,source);}var key=util.toSetString(source);return Object.prototype.hasOwnProperty.call(this._sourcesContents,key)?this._sourcesContents[key]:null;},this);};/**
 * Externalize the source map.
 */SourceMapGenerator.prototype.toJSON=function SourceMapGenerator_toJSON(){var map={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};if(this._file!=null){map.file=this._file;}if(this._sourceRoot!=null){map.sourceRoot=this._sourceRoot;}if(this._sourcesContents){map.sourcesContent=this._generateSourcesContent(map.sources,map.sourceRoot);}return map;};/**
 * Render the source map being generated to a string.
 */SourceMapGenerator.prototype.toString=function SourceMapGenerator_toString(){return JSON.stringify(this.toJSON());};exports.SourceMapGenerator=SourceMapGenerator;},{"./array-set":74,"./base64-vlq":75,"./mapping-list":78,"./util":83}],82:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */var SourceMapGenerator=require('./source-map-generator').SourceMapGenerator;var util=require('./util');// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE=/(\r?\n)/;// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE=10;// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode="$$$isSourceNode$$$";/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */function SourceNode(aLine,aColumn,aSource,aChunks,aName){this.children=[];this.sourceContents={};this.line=aLine==null?null:aLine;this.column=aColumn==null?null:aColumn;this.source=aSource==null?null:aSource;this.name=aName==null?null:aName;this[isSourceNode]=true;if(aChunks!=null)this.add(aChunks);}/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */SourceNode.fromStringWithSourceMap=function SourceNode_fromStringWithSourceMap(aGeneratedCode,aSourceMapConsumer,aRelativePath){// The SourceNode we want to fill with the generated code
// and the SourceMap
var node=new SourceNode();// All even indices of this array are one line of the generated code,
// while all odd indices are the newlines between two adjacent lines
// (since `REGEX_NEWLINE` captures its match).
// Processed fragments are accessed by calling `shiftNextLine`.
var remainingLines=aGeneratedCode.split(REGEX_NEWLINE);var remainingLinesIndex=0;var shiftNextLine=function(){var lineContents=getNextLine();// The last line of a file might not have a newline.
var newLine=getNextLine()||"";return lineContents+newLine;function getNextLine(){return remainingLinesIndex<remainingLines.length?remainingLines[remainingLinesIndex++]:undefined;}};// We need to remember the position of "remainingLines"
var lastGeneratedLine=1,lastGeneratedColumn=0;// The generate SourceNodes we need a code range.
// To extract it current and last mapping is used.
// Here we store the last mapping.
var lastMapping=null;aSourceMapConsumer.eachMapping(function(mapping){if(lastMapping!==null){// We add the code from "lastMapping" to "mapping":
// First check if there is a new line in between.
if(lastGeneratedLine<mapping.generatedLine){// Associate first line with "lastMapping"
addMappingWithCode(lastMapping,shiftNextLine());lastGeneratedLine++;lastGeneratedColumn=0;// The remaining code is added without mapping
}else{// There is no new line in between.
// Associate the code between "lastGeneratedColumn" and
// "mapping.generatedColumn" with "lastMapping"
var nextLine=remainingLines[remainingLinesIndex]||'';var code=nextLine.substr(0,mapping.generatedColumn-lastGeneratedColumn);remainingLines[remainingLinesIndex]=nextLine.substr(mapping.generatedColumn-lastGeneratedColumn);lastGeneratedColumn=mapping.generatedColumn;addMappingWithCode(lastMapping,code);// No more remaining code, continue
lastMapping=mapping;return;}}// We add the generated code until the first mapping
// to the SourceNode without any mapping.
// Each line is added as separate string.
while(lastGeneratedLine<mapping.generatedLine){node.add(shiftNextLine());lastGeneratedLine++;}if(lastGeneratedColumn<mapping.generatedColumn){var nextLine=remainingLines[remainingLinesIndex]||'';node.add(nextLine.substr(0,mapping.generatedColumn));remainingLines[remainingLinesIndex]=nextLine.substr(mapping.generatedColumn);lastGeneratedColumn=mapping.generatedColumn;}lastMapping=mapping;},this);// We have processed all mappings.
if(remainingLinesIndex<remainingLines.length){if(lastMapping){// Associate the remaining code in the current line with "lastMapping"
addMappingWithCode(lastMapping,shiftNextLine());}// and add the remaining lines without any mapping
node.add(remainingLines.splice(remainingLinesIndex).join(""));}// Copy sourcesContent into SourceNode
aSourceMapConsumer.sources.forEach(function(sourceFile){var content=aSourceMapConsumer.sourceContentFor(sourceFile);if(content!=null){if(aRelativePath!=null){sourceFile=util.join(aRelativePath,sourceFile);}node.setSourceContent(sourceFile,content);}});return node;function addMappingWithCode(mapping,code){if(mapping===null||mapping.source===undefined){node.add(code);}else{var source=aRelativePath?util.join(aRelativePath,mapping.source):mapping.source;node.add(new SourceNode(mapping.originalLine,mapping.originalColumn,source,code,mapping.name));}}};/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */SourceNode.prototype.add=function SourceNode_add(aChunk){if(Array.isArray(aChunk)){aChunk.forEach(function(chunk){this.add(chunk);},this);}else if(aChunk[isSourceNode]||typeof aChunk==="string"){if(aChunk){this.children.push(aChunk);}}else{throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+aChunk);}return this;};/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */SourceNode.prototype.prepend=function SourceNode_prepend(aChunk){if(Array.isArray(aChunk)){for(var i=aChunk.length-1;i>=0;i--){this.prepend(aChunk[i]);}}else if(aChunk[isSourceNode]||typeof aChunk==="string"){this.children.unshift(aChunk);}else{throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+aChunk);}return this;};/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */SourceNode.prototype.walk=function SourceNode_walk(aFn){var chunk;for(var i=0,len=this.children.length;i<len;i++){chunk=this.children[i];if(chunk[isSourceNode]){chunk.walk(aFn);}else{if(chunk!==''){aFn(chunk,{source:this.source,line:this.line,column:this.column,name:this.name});}}}};/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */SourceNode.prototype.join=function SourceNode_join(aSep){var newChildren;var i;var len=this.children.length;if(len>0){newChildren=[];for(i=0;i<len-1;i++){newChildren.push(this.children[i]);newChildren.push(aSep);}newChildren.push(this.children[i]);this.children=newChildren;}return this;};/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */SourceNode.prototype.replaceRight=function SourceNode_replaceRight(aPattern,aReplacement){var lastChild=this.children[this.children.length-1];if(lastChild[isSourceNode]){lastChild.replaceRight(aPattern,aReplacement);}else if(typeof lastChild==='string'){this.children[this.children.length-1]=lastChild.replace(aPattern,aReplacement);}else{this.children.push(''.replace(aPattern,aReplacement));}return this;};/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */SourceNode.prototype.setSourceContent=function SourceNode_setSourceContent(aSourceFile,aSourceContent){this.sourceContents[util.toSetString(aSourceFile)]=aSourceContent;};/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */SourceNode.prototype.walkSourceContents=function SourceNode_walkSourceContents(aFn){for(var i=0,len=this.children.length;i<len;i++){if(this.children[i][isSourceNode]){this.children[i].walkSourceContents(aFn);}}var sources=Object.keys(this.sourceContents);for(var i=0,len=sources.length;i<len;i++){aFn(util.fromSetString(sources[i]),this.sourceContents[sources[i]]);}};/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */SourceNode.prototype.toString=function SourceNode_toString(){var str="";this.walk(function(chunk){str+=chunk;});return str;};/**
 * Returns the string representation of this source node along with a source
 * map.
 */SourceNode.prototype.toStringWithSourceMap=function SourceNode_toStringWithSourceMap(aArgs){var generated={code:"",line:1,column:0};var map=new SourceMapGenerator(aArgs);var sourceMappingActive=false;var lastOriginalSource=null;var lastOriginalLine=null;var lastOriginalColumn=null;var lastOriginalName=null;this.walk(function(chunk,original){generated.code+=chunk;if(original.source!==null&&original.line!==null&&original.column!==null){if(lastOriginalSource!==original.source||lastOriginalLine!==original.line||lastOriginalColumn!==original.column||lastOriginalName!==original.name){map.addMapping({source:original.source,original:{line:original.line,column:original.column},generated:{line:generated.line,column:generated.column},name:original.name});}lastOriginalSource=original.source;lastOriginalLine=original.line;lastOriginalColumn=original.column;lastOriginalName=original.name;sourceMappingActive=true;}else if(sourceMappingActive){map.addMapping({generated:{line:generated.line,column:generated.column}});lastOriginalSource=null;sourceMappingActive=false;}for(var idx=0,length=chunk.length;idx<length;idx++){if(chunk.charCodeAt(idx)===NEWLINE_CODE){generated.line++;generated.column=0;// Mappings end at eol
if(idx+1===length){lastOriginalSource=null;sourceMappingActive=false;}else if(sourceMappingActive){map.addMapping({source:original.source,original:{line:original.line,column:original.column},generated:{line:generated.line,column:generated.column},name:original.name});}}else{generated.column++;}}});this.walkSourceContents(function(sourceFile,sourceContent){map.setSourceContent(sourceFile,sourceContent);});return{code:generated.code,map:map};};exports.SourceNode=SourceNode;},{"./source-map-generator":81,"./util":83}],83:[function(require,module,exports){/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ /**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */function getArg(aArgs,aName,aDefaultValue){if(aName in aArgs){return aArgs[aName];}else if(arguments.length===3){return aDefaultValue;}else{throw new Error('"'+aName+'" is a required argument.');}}exports.getArg=getArg;var urlRegexp=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;var dataUrlRegexp=/^data:.+\,.+$/;function urlParse(aUrl){var match=aUrl.match(urlRegexp);if(!match){return null;}return{scheme:match[1],auth:match[2],host:match[3],port:match[4],path:match[5]};}exports.urlParse=urlParse;function urlGenerate(aParsedUrl){var url='';if(aParsedUrl.scheme){url+=aParsedUrl.scheme+':';}url+='//';if(aParsedUrl.auth){url+=aParsedUrl.auth+'@';}if(aParsedUrl.host){url+=aParsedUrl.host;}if(aParsedUrl.port){url+=":"+aParsedUrl.port;}if(aParsedUrl.path){url+=aParsedUrl.path;}return url;}exports.urlGenerate=urlGenerate;/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */function normalize(aPath){var path=aPath;var url=urlParse(aPath);if(url){if(!url.path){return aPath;}path=url.path;}var isAbsolute=exports.isAbsolute(path);var parts=path.split(/\/+/);for(var part,up=0,i=parts.length-1;i>=0;i--){part=parts[i];if(part==='.'){parts.splice(i,1);}else if(part==='..'){up++;}else if(up>0){if(part===''){// The first part is blank if the path is absolute. Trying to go
// above the root is a no-op. Therefore we can remove all '..' parts
// directly after the root.
parts.splice(i+1,up);up=0;}else{parts.splice(i,2);up--;}}}path=parts.join('/');if(path===''){path=isAbsolute?'/':'.';}if(url){url.path=path;return urlGenerate(url);}return path;}exports.normalize=normalize;/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */function join(aRoot,aPath){if(aRoot===""){aRoot=".";}if(aPath===""){aPath=".";}var aPathUrl=urlParse(aPath);var aRootUrl=urlParse(aRoot);if(aRootUrl){aRoot=aRootUrl.path||'/';}// `join(foo, '//www.example.org')`
if(aPathUrl&&!aPathUrl.scheme){if(aRootUrl){aPathUrl.scheme=aRootUrl.scheme;}return urlGenerate(aPathUrl);}if(aPathUrl||aPath.match(dataUrlRegexp)){return aPath;}// `join('http://', 'www.example.com')`
if(aRootUrl&&!aRootUrl.host&&!aRootUrl.path){aRootUrl.host=aPath;return urlGenerate(aRootUrl);}var joined=aPath.charAt(0)==='/'?aPath:normalize(aRoot.replace(/\/+$/,'')+'/'+aPath);if(aRootUrl){aRootUrl.path=joined;return urlGenerate(aRootUrl);}return joined;}exports.join=join;exports.isAbsolute=function(aPath){return aPath.charAt(0)==='/'||urlRegexp.test(aPath);};/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */function relative(aRoot,aPath){if(aRoot===""){aRoot=".";}aRoot=aRoot.replace(/\/$/,'');// It is possible for the path to be above the root. In this case, simply
// checking whether the root is a prefix of the path won't work. Instead, we
// need to remove components from the root one by one, until either we find
// a prefix that fits, or we run out of components to remove.
var level=0;while(aPath.indexOf(aRoot+'/')!==0){var index=aRoot.lastIndexOf("/");if(index<0){return aPath;}// If the only part of the root that is left is the scheme (i.e. http://,
// file:///, etc.), one or more slashes (/), or simply nothing at all, we
// have exhausted all components, so the path is not relative to the root.
aRoot=aRoot.slice(0,index);if(aRoot.match(/^([^\/]+:\/)?\/*$/)){return aPath;}++level;}// Make sure we add a "../" for each component we removed from the root.
return Array(level+1).join("../")+aPath.substr(aRoot.length+1);}exports.relative=relative;var supportsNullProto=function(){var obj=Object.create(null);return!('__proto__'in obj);}();function identity(s){return s;}/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */function toSetString(aStr){if(isProtoString(aStr)){return'$'+aStr;}return aStr;}exports.toSetString=supportsNullProto?identity:toSetString;function fromSetString(aStr){if(isProtoString(aStr)){return aStr.slice(1);}return aStr;}exports.fromSetString=supportsNullProto?identity:fromSetString;function isProtoString(s){if(!s){return false;}var length=s.length;if(length<9/* "__proto__".length */){return false;}if(s.charCodeAt(length-1)!==95/* '_' */||s.charCodeAt(length-2)!==95/* '_' */||s.charCodeAt(length-3)!==111/* 'o' */||s.charCodeAt(length-4)!==116/* 't' */||s.charCodeAt(length-5)!==111/* 'o' */||s.charCodeAt(length-6)!==114/* 'r' */||s.charCodeAt(length-7)!==112/* 'p' */||s.charCodeAt(length-8)!==95/* '_' */||s.charCodeAt(length-9)!==95/* '_' */){return false;}for(var i=length-10;i>=0;i--){if(s.charCodeAt(i)!==36/* '$' */){return false;}}return true;}/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */function compareByOriginalPositions(mappingA,mappingB,onlyCompareOriginal){var cmp=strcmp(mappingA.source,mappingB.source);if(cmp!==0){return cmp;}cmp=mappingA.originalLine-mappingB.originalLine;if(cmp!==0){return cmp;}cmp=mappingA.originalColumn-mappingB.originalColumn;if(cmp!==0||onlyCompareOriginal){return cmp;}cmp=mappingA.generatedColumn-mappingB.generatedColumn;if(cmp!==0){return cmp;}cmp=mappingA.generatedLine-mappingB.generatedLine;if(cmp!==0){return cmp;}return strcmp(mappingA.name,mappingB.name);}exports.compareByOriginalPositions=compareByOriginalPositions;/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */function compareByGeneratedPositionsDeflated(mappingA,mappingB,onlyCompareGenerated){var cmp=mappingA.generatedLine-mappingB.generatedLine;if(cmp!==0){return cmp;}cmp=mappingA.generatedColumn-mappingB.generatedColumn;if(cmp!==0||onlyCompareGenerated){return cmp;}cmp=strcmp(mappingA.source,mappingB.source);if(cmp!==0){return cmp;}cmp=mappingA.originalLine-mappingB.originalLine;if(cmp!==0){return cmp;}cmp=mappingA.originalColumn-mappingB.originalColumn;if(cmp!==0){return cmp;}return strcmp(mappingA.name,mappingB.name);}exports.compareByGeneratedPositionsDeflated=compareByGeneratedPositionsDeflated;function strcmp(aStr1,aStr2){if(aStr1===aStr2){return 0;}if(aStr1===null){return 1;// aStr2 !== null
}if(aStr2===null){return-1;// aStr1 !== null
}if(aStr1>aStr2){return 1;}return-1;}/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */function compareByGeneratedPositionsInflated(mappingA,mappingB){var cmp=mappingA.generatedLine-mappingB.generatedLine;if(cmp!==0){return cmp;}cmp=mappingA.generatedColumn-mappingB.generatedColumn;if(cmp!==0){return cmp;}cmp=strcmp(mappingA.source,mappingB.source);if(cmp!==0){return cmp;}cmp=mappingA.originalLine-mappingB.originalLine;if(cmp!==0){return cmp;}cmp=mappingA.originalColumn-mappingB.originalColumn;if(cmp!==0){return cmp;}return strcmp(mappingA.name,mappingB.name);}exports.compareByGeneratedPositionsInflated=compareByGeneratedPositionsInflated;/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */function parseSourceMapInput(str){return JSON.parse(str.replace(/^\)]}'[^\n]*\n/,''));}exports.parseSourceMapInput=parseSourceMapInput;/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */function computeSourceURL(sourceRoot,sourceURL,sourceMapURL){sourceURL=sourceURL||'';if(sourceRoot){// This follows what Chrome does.
if(sourceRoot[sourceRoot.length-1]!=='/'&&sourceURL[0]!=='/'){sourceRoot+='/';}// The spec says:
//   Line 4: An optional source root, useful for relocating source
//   files on a server or removing repeated values in the
//   “sources” entry.  This value is prepended to the individual
//   entries in the “source” field.
sourceURL=sourceRoot+sourceURL;}// Historically, SourceMapConsumer did not take the sourceMapURL as
// a parameter.  This mode is still somewhat supported, which is why
// this code block is conditional.  However, it's preferable to pass
// the source map URL to SourceMapConsumer, so that this function
// can implement the source URL resolution algorithm as outlined in
// the spec.  This block is basically the equivalent of:
//    new URL(sourceURL, sourceMapURL).toString()
// ... except it avoids using URL, which wasn't available in the
// older releases of node still supported by this library.
//
// The spec says:
//   If the sources are not absolute URLs after prepending of the
//   “sourceRoot”, the sources are resolved relative to the
//   SourceMap (like resolving script src in a html document).
if(sourceMapURL){var parsed=urlParse(sourceMapURL);if(!parsed){throw new Error("sourceMapURL could not be parsed");}if(parsed.path){// Strip the last path component, but keep the "/".
var index=parsed.path.lastIndexOf('/');if(index>=0){parsed.path=parsed.path.substring(0,index+1);}}sourceURL=join(urlGenerate(parsed),sourceURL);}return normalize(sourceURL);}exports.computeSourceURL=computeSourceURL;},{}],84:[function(require,module,exports){/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */exports.SourceMapGenerator=require('./lib/source-map-generator').SourceMapGenerator;exports.SourceMapConsumer=require('./lib/source-map-consumer').SourceMapConsumer;exports.SourceNode=require('./lib/source-node').SourceNode;},{"./lib/source-map-consumer":80,"./lib/source-map-generator":81,"./lib/source-node":82}],85:[function(require,module,exports){'use strict';var numberIsNan=require('number-is-nan');var arrayUniq=require('array-uniq');var reInt=/^\d+$/;function deepUnique(arr){return arr.sort().filter(function(el,i){return JSON.stringify(el)!==JSON.stringify(arr[i-1]);});}exports.parse=function(str){return deepUnique(str.split(',').map(function(el){var ret={};el.trim().split(/\s+/).forEach(function(el,i){if(i===0){return ret.url=el;}var value=el.substring(0,el.length-1);var postfix=el[el.length-1];var intVal=parseInt(value,10);var floatVal=parseFloat(value);if(postfix==='w'&&reInt.test(value)){ret.width=intVal;}else if(postfix==='h'&&reInt.test(value)){ret.height=intVal;}else if(postfix==='x'&&!numberIsNan(floatVal)){ret.density=floatVal;}else{throw new Error('Invalid srcset descriptor: '+el+'.');}});return ret;}));};exports.stringify=function(arr){return arrayUniq(arr.map(function(el){if(!el.url){throw new Error('URL is required.');}var ret=[el.url];if(el.width){ret.push(el.width+'w');}if(el.height){ret.push(el.height+'h');}if(el.density){ret.push(el.density+'x');}return ret.join(' ');})).join(', ');};},{"array-uniq":2,"number-is-nan":42}],86:[function(require,module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';/*<replacement>*/var Buffer=require('safe-buffer').Buffer;/*</replacement>*/var isEncoding=Buffer.isEncoding||function(encoding){encoding=''+encoding;switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function _normalizeEncoding(enc){if(!enc)return'utf8';var retried;while(true){switch(enc){case'utf8':case'utf-8':return'utf8';case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return'utf16le';case'latin1':case'binary':return'latin1';case'base64':case'ascii':case'hex':return enc;default:if(retried)return;// undefined
enc=(''+enc).toLowerCase();retried=true;}}};// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc){var nenc=_normalizeEncoding(enc);if(typeof nenc!=='string'&&(Buffer.isEncoding===isEncoding||!isEncoding(enc)))throw new Error('Unknown encoding: '+enc);return nenc||enc;}// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder=StringDecoder;function StringDecoder(encoding){this.encoding=normalizeEncoding(encoding);var nb;switch(this.encoding){case'utf16le':this.text=utf16Text;this.end=utf16End;nb=4;break;case'utf8':this.fillLast=utf8FillLast;nb=4;break;case'base64':this.text=base64Text;this.end=base64End;nb=3;break;default:this.write=simpleWrite;this.end=simpleEnd;return;}this.lastNeed=0;this.lastTotal=0;this.lastChar=Buffer.allocUnsafe(nb);}StringDecoder.prototype.write=function(buf){if(buf.length===0)return'';var r;var i;if(this.lastNeed){r=this.fillLast(buf);if(r===undefined)return'';i=this.lastNeed;this.lastNeed=0;}else{i=0;}if(i<buf.length)return r?r+this.text(buf,i):this.text(buf,i);return r||'';};StringDecoder.prototype.end=utf8End;// Returns only complete characters in a Buffer
StringDecoder.prototype.text=utf8Text;// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast=function(buf){if(this.lastNeed<=buf.length){buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal);}buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,buf.length);this.lastNeed-=buf.length;};// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte){if(byte<=0x7F)return 0;else if(byte>>5===0x06)return 2;else if(byte>>4===0x0E)return 3;else if(byte>>3===0x1E)return 4;return byte>>6===0x02?-1:-2;}// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self,buf,i){var j=buf.length-1;if(j<i)return 0;var nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0)self.lastNeed=nb-1;return nb;}if(--j<i||nb===-2)return 0;nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0)self.lastNeed=nb-2;return nb;}if(--j<i||nb===-2)return 0;nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0){if(nb===2)nb=0;else self.lastNeed=nb-3;}return nb;}return 0;}// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self,buf,p){if((buf[0]&0xC0)!==0x80){self.lastNeed=0;return'\ufffd';}if(self.lastNeed>1&&buf.length>1){if((buf[1]&0xC0)!==0x80){self.lastNeed=1;return'\ufffd';}if(self.lastNeed>2&&buf.length>2){if((buf[2]&0xC0)!==0x80){self.lastNeed=2;return'\ufffd';}}}}// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf){var p=this.lastTotal-this.lastNeed;var r=utf8CheckExtraBytes(this,buf,p);if(r!==undefined)return r;if(this.lastNeed<=buf.length){buf.copy(this.lastChar,p,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal);}buf.copy(this.lastChar,p,0,buf.length);this.lastNeed-=buf.length;}// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf,i){var total=utf8CheckIncomplete(this,buf,i);if(!this.lastNeed)return buf.toString('utf8',i);this.lastTotal=total;var end=buf.length-(total-this.lastNeed);buf.copy(this.lastChar,0,end);return buf.toString('utf8',i,end);}// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf){var r=buf&&buf.length?this.write(buf):'';if(this.lastNeed)return r+'\ufffd';return r;}// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf,i){if((buf.length-i)%2===0){var r=buf.toString('utf16le',i);if(r){var c=r.charCodeAt(r.length-1);if(c>=0xD800&&c<=0xDBFF){this.lastNeed=2;this.lastTotal=4;this.lastChar[0]=buf[buf.length-2];this.lastChar[1]=buf[buf.length-1];return r.slice(0,-1);}}return r;}this.lastNeed=1;this.lastTotal=2;this.lastChar[0]=buf[buf.length-1];return buf.toString('utf16le',i,buf.length-1);}// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf){var r=buf&&buf.length?this.write(buf):'';if(this.lastNeed){var end=this.lastTotal-this.lastNeed;return r+this.lastChar.toString('utf16le',0,end);}return r;}function base64Text(buf,i){var n=(buf.length-i)%3;if(n===0)return buf.toString('base64',i);this.lastNeed=3-n;this.lastTotal=3;if(n===1){this.lastChar[0]=buf[buf.length-1];}else{this.lastChar[0]=buf[buf.length-2];this.lastChar[1]=buf[buf.length-1];}return buf.toString('base64',i,buf.length-n);}function base64End(buf){var r=buf&&buf.length?this.write(buf):'';if(this.lastNeed)return r+this.lastChar.toString('base64',0,3-this.lastNeed);return r;}// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf){return buf.toString(this.encoding);}function simpleEnd(buf){return buf&&buf.length?this.write(buf):'';}},{"safe-buffer":73}],87:[function(require,module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';var punycode=require('punycode');var util=require('./util');exports.parse=urlParse;exports.resolve=urlResolve;exports.resolveObject=urlResolveObject;exports.format=urlFormat;exports.Url=Url;function Url(){this.protocol=null;this.slashes=null;this.auth=null;this.host=null;this.port=null;this.hostname=null;this.hash=null;this.search=null;this.query=null;this.pathname=null;this.path=null;this.href=null;}// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,// Special case for a simple path URL
simplePathPattern=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims=['<','>','"','`',' ','\r','\n','\t'],// RFC 2396: characters not allowed for various reasons.
unwise=['{','}','|','\\','^','`'].concat(delims),// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape=['\''].concat(unwise),// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars=['%','/','?',';','#'].concat(autoEscape),hostEndingChars=['/','?','#'],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,// protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol={'javascript':true,'javascript:':true},// protocols that never have a hostname.
hostlessProtocol={'javascript':true,'javascript:':true},// protocols that always contain a // bit.
slashedProtocol={'http':true,'https':true,'ftp':true,'gopher':true,'file':true,'http:':true,'https:':true,'ftp:':true,'gopher:':true,'file:':true},querystring=require('querystring');function urlParse(url,parseQueryString,slashesDenoteHost){if(url&&util.isObject(url)&&url instanceof Url)return url;var u=new Url();u.parse(url,parseQueryString,slashesDenoteHost);return u;}Url.prototype.parse=function(url,parseQueryString,slashesDenoteHost){if(!util.isString(url)){throw new TypeError("Parameter 'url' must be a string, not "+typeof url);}// Copy chrome, IE, opera backslash-handling behavior.
// Back slashes before the query string get converted to forward slashes
// See: https://code.google.com/p/chromium/issues/detail?id=25916
var queryIndex=url.indexOf('?'),splitter=queryIndex!==-1&&queryIndex<url.indexOf('#')?'?':'#',uSplit=url.split(splitter),slashRegex=/\\/g;uSplit[0]=uSplit[0].replace(slashRegex,'/');url=uSplit.join(splitter);var rest=url;// trim before proceeding.
// This is to support parse stuff like "  http://foo.com  \n"
rest=rest.trim();if(!slashesDenoteHost&&url.split('#').length===1){// Try fast path regexp
var simplePath=simplePathPattern.exec(rest);if(simplePath){this.path=rest;this.href=rest;this.pathname=simplePath[1];if(simplePath[2]){this.search=simplePath[2];if(parseQueryString){this.query=querystring.parse(this.search.substr(1));}else{this.query=this.search.substr(1);}}else if(parseQueryString){this.search='';this.query={};}return this;}}var proto=protocolPattern.exec(rest);if(proto){proto=proto[0];var lowerProto=proto.toLowerCase();this.protocol=lowerProto;rest=rest.substr(proto.length);}// figure out if it's got a host
// user@server is *always* interpreted as a hostname, and url
// resolution will treat //foo/bar as host=foo,path=bar because that's
// how the browser resolves relative URLs.
if(slashesDenoteHost||proto||rest.match(/^\/\/[^@\/]+@[^@\/]+/)){var slashes=rest.substr(0,2)==='//';if(slashes&&!(proto&&hostlessProtocol[proto])){rest=rest.substr(2);this.slashes=true;}}if(!hostlessProtocol[proto]&&(slashes||proto&&!slashedProtocol[proto])){// there's a hostname.
// the first instance of /, ?, ;, or # ends the host.
//
// If there is an @ in the hostname, then non-host chars *are* allowed
// to the left of the last @ sign, unless some host-ending character
// comes *before* the @-sign.
// URLs are obnoxious.
//
// ex:
// http://a@b@c/ => user:a@b host:c
// http://a@b?@c => user:a host:c path:/?@c
// v0.12 TODO(isaacs): This is not quite how Chrome does things.
// Review our test case against browsers more comprehensively.
// find the first instance of any hostEndingChars
var hostEnd=-1;for(var i=0;i<hostEndingChars.length;i++){var hec=rest.indexOf(hostEndingChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// at this point, either we have an explicit point where the
// auth portion cannot go past, or the last @ char is the decider.
var auth,atSign;if(hostEnd===-1){// atSign can be anywhere.
atSign=rest.lastIndexOf('@');}else{// atSign must be in auth portion.
// http://a@b/c@d => host:b auth:a path:/c@d
atSign=rest.lastIndexOf('@',hostEnd);}// Now we have a portion which is definitely the auth.
// Pull that off.
if(atSign!==-1){auth=rest.slice(0,atSign);rest=rest.slice(atSign+1);this.auth=decodeURIComponent(auth);}// the host is the remaining to the left of the first non-host char
hostEnd=-1;for(var i=0;i<nonHostChars.length;i++){var hec=rest.indexOf(nonHostChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// if we still have not hit it, then the entire thing is a host.
if(hostEnd===-1)hostEnd=rest.length;this.host=rest.slice(0,hostEnd);rest=rest.slice(hostEnd);// pull out port.
this.parseHost();// we've indicated that there is a hostname,
// so even if it's empty, it has to be present.
this.hostname=this.hostname||'';// if hostname begins with [ and ends with ]
// assume that it's an IPv6 address.
var ipv6Hostname=this.hostname[0]==='['&&this.hostname[this.hostname.length-1]===']';// validate a little.
if(!ipv6Hostname){var hostparts=this.hostname.split(/\./);for(var i=0,l=hostparts.length;i<l;i++){var part=hostparts[i];if(!part)continue;if(!part.match(hostnamePartPattern)){var newpart='';for(var j=0,k=part.length;j<k;j++){if(part.charCodeAt(j)>127){// we replace non-ASCII char with a temporary placeholder
// we need this to make sure size of hostname is not
// broken by replacing non-ASCII by nothing
newpart+='x';}else{newpart+=part[j];}}// we test again with ASCII char only
if(!newpart.match(hostnamePartPattern)){var validParts=hostparts.slice(0,i);var notHost=hostparts.slice(i+1);var bit=part.match(hostnamePartStart);if(bit){validParts.push(bit[1]);notHost.unshift(bit[2]);}if(notHost.length){rest='/'+notHost.join('.')+rest;}this.hostname=validParts.join('.');break;}}}}if(this.hostname.length>hostnameMaxLen){this.hostname='';}else{// hostnames are always lower case.
this.hostname=this.hostname.toLowerCase();}if(!ipv6Hostname){// IDNA Support: Returns a punycoded representation of "domain".
// It only converts parts of the domain name that
// have non-ASCII characters, i.e. it doesn't matter if
// you call it with a domain that already is ASCII-only.
this.hostname=punycode.toASCII(this.hostname);}var p=this.port?':'+this.port:'';var h=this.hostname||'';this.host=h+p;this.href+=this.host;// strip [ and ] from the hostname
// the host field still retains them, though
if(ipv6Hostname){this.hostname=this.hostname.substr(1,this.hostname.length-2);if(rest[0]!=='/'){rest='/'+rest;}}}// now rest is set to the post-host stuff.
// chop off any delim chars.
if(!unsafeProtocol[lowerProto]){// First, make 100% sure that any "autoEscape" chars get
// escaped, even if encodeURIComponent doesn't think they
// need to be.
for(var i=0,l=autoEscape.length;i<l;i++){var ae=autoEscape[i];if(rest.indexOf(ae)===-1)continue;var esc=encodeURIComponent(ae);if(esc===ae){esc=escape(ae);}rest=rest.split(ae).join(esc);}}// chop off from the tail first.
var hash=rest.indexOf('#');if(hash!==-1){// got a fragment string.
this.hash=rest.substr(hash);rest=rest.slice(0,hash);}var qm=rest.indexOf('?');if(qm!==-1){this.search=rest.substr(qm);this.query=rest.substr(qm+1);if(parseQueryString){this.query=querystring.parse(this.query);}rest=rest.slice(0,qm);}else if(parseQueryString){// no query string, but parseQueryString still requested
this.search='';this.query={};}if(rest)this.pathname=rest;if(slashedProtocol[lowerProto]&&this.hostname&&!this.pathname){this.pathname='/';}//to support http.request
if(this.pathname||this.search){var p=this.pathname||'';var s=this.search||'';this.path=p+s;}// finally, reconstruct the href based on what has been validated.
this.href=this.format();return this;};// format a parsed object into a url string
function urlFormat(obj){// ensure it's an object, and not a string url.
// If it's an obj, this is a no-op.
// this way, you can call url_format() on strings
// to clean up potentially wonky urls.
if(util.isString(obj))obj=urlParse(obj);if(!(obj instanceof Url))return Url.prototype.format.call(obj);return obj.format();}Url.prototype.format=function(){var auth=this.auth||'';if(auth){auth=encodeURIComponent(auth);auth=auth.replace(/%3A/i,':');auth+='@';}var protocol=this.protocol||'',pathname=this.pathname||'',hash=this.hash||'',host=false,query='';if(this.host){host=auth+this.host;}else if(this.hostname){host=auth+(this.hostname.indexOf(':')===-1?this.hostname:'['+this.hostname+']');if(this.port){host+=':'+this.port;}}if(this.query&&util.isObject(this.query)&&Object.keys(this.query).length){query=querystring.stringify(this.query);}var search=this.search||query&&'?'+query||'';if(protocol&&protocol.substr(-1)!==':')protocol+=':';// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
// unless they had them to begin with.
if(this.slashes||(!protocol||slashedProtocol[protocol])&&host!==false){host='//'+(host||'');if(pathname&&pathname.charAt(0)!=='/')pathname='/'+pathname;}else if(!host){host='';}if(hash&&hash.charAt(0)!=='#')hash='#'+hash;if(search&&search.charAt(0)!=='?')search='?'+search;pathname=pathname.replace(/[?#]/g,function(match){return encodeURIComponent(match);});search=search.replace('#','%23');return protocol+host+pathname+search+hash;};function urlResolve(source,relative){return urlParse(source,false,true).resolve(relative);}Url.prototype.resolve=function(relative){return this.resolveObject(urlParse(relative,false,true)).format();};function urlResolveObject(source,relative){if(!source)return relative;return urlParse(source,false,true).resolveObject(relative);}Url.prototype.resolveObject=function(relative){if(util.isString(relative)){var rel=new Url();rel.parse(relative,false,true);relative=rel;}var result=new Url();var tkeys=Object.keys(this);for(var tk=0;tk<tkeys.length;tk++){var tkey=tkeys[tk];result[tkey]=this[tkey];}// hash is always overridden, no matter what.
// even href="" will remove it.
result.hash=relative.hash;// if the relative url is empty, then there's nothing left to do here.
if(relative.href===''){result.href=result.format();return result;}// hrefs like //foo/bar always cut to the protocol.
if(relative.slashes&&!relative.protocol){// take everything except the protocol from relative
var rkeys=Object.keys(relative);for(var rk=0;rk<rkeys.length;rk++){var rkey=rkeys[rk];if(rkey!=='protocol')result[rkey]=relative[rkey];}//urlParse appends trailing / to urls like http://www.example.com
if(slashedProtocol[result.protocol]&&result.hostname&&!result.pathname){result.path=result.pathname='/';}result.href=result.format();return result;}if(relative.protocol&&relative.protocol!==result.protocol){// if it's a known url protocol, then changing
// the protocol does weird things
// first, if it's not file:, then we MUST have a host,
// and if there was a path
// to begin with, then we MUST have a path.
// if it is file:, then the host is dropped,
// because that's known to be hostless.
// anything else is assumed to be absolute.
if(!slashedProtocol[relative.protocol]){var keys=Object.keys(relative);for(var v=0;v<keys.length;v++){var k=keys[v];result[k]=relative[k];}result.href=result.format();return result;}result.protocol=relative.protocol;if(!relative.host&&!hostlessProtocol[relative.protocol]){var relPath=(relative.pathname||'').split('/');while(relPath.length&&!(relative.host=relPath.shift()));if(!relative.host)relative.host='';if(!relative.hostname)relative.hostname='';if(relPath[0]!=='')relPath.unshift('');if(relPath.length<2)relPath.unshift('');result.pathname=relPath.join('/');}else{result.pathname=relative.pathname;}result.search=relative.search;result.query=relative.query;result.host=relative.host||'';result.auth=relative.auth;result.hostname=relative.hostname||relative.host;result.port=relative.port;// to support http.request
if(result.pathname||result.search){var p=result.pathname||'';var s=result.search||'';result.path=p+s;}result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;}var isSourceAbs=result.pathname&&result.pathname.charAt(0)==='/',isRelAbs=relative.host||relative.pathname&&relative.pathname.charAt(0)==='/',mustEndAbs=isRelAbs||isSourceAbs||result.host&&relative.pathname,removeAllDots=mustEndAbs,srcPath=result.pathname&&result.pathname.split('/')||[],relPath=relative.pathname&&relative.pathname.split('/')||[],psychotic=result.protocol&&!slashedProtocol[result.protocol];// if the url is a non-slashed url, then relative
// links like ../.. should be able
// to crawl up to the hostname, as well.  This is strange.
// result.protocol has already been set by now.
// Later on, put the first path part into the host field.
if(psychotic){result.hostname='';result.port=null;if(result.host){if(srcPath[0]==='')srcPath[0]=result.host;else srcPath.unshift(result.host);}result.host='';if(relative.protocol){relative.hostname=null;relative.port=null;if(relative.host){if(relPath[0]==='')relPath[0]=relative.host;else relPath.unshift(relative.host);}relative.host=null;}mustEndAbs=mustEndAbs&&(relPath[0]===''||srcPath[0]==='');}if(isRelAbs){// it's absolute.
result.host=relative.host||relative.host===''?relative.host:result.host;result.hostname=relative.hostname||relative.hostname===''?relative.hostname:result.hostname;result.search=relative.search;result.query=relative.query;srcPath=relPath;// fall through to the dot-handling below.
}else if(relPath.length){// it's relative
// throw away the existing file, and take the new path instead.
if(!srcPath)srcPath=[];srcPath.pop();srcPath=srcPath.concat(relPath);result.search=relative.search;result.query=relative.query;}else if(!util.isNullOrUndefined(relative.search)){// just pull out the search.
// like href='?foo'.
// Put this after the other two cases because it simplifies the booleans
if(psychotic){result.hostname=result.host=srcPath.shift();//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
var authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}result.search=relative.search;result.query=relative.query;//to support http.request
if(!util.isNull(result.pathname)||!util.isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.href=result.format();return result;}if(!srcPath.length){// no path at all.  easy.
// we've already handled the other stuff above.
result.pathname=null;//to support http.request
if(result.search){result.path='/'+result.search;}else{result.path=null;}result.href=result.format();return result;}// if a url ENDs in . or .., then it must get a trailing slash.
// however, if it ends in anything else non-slashy,
// then it must NOT get a trailing slash.
var last=srcPath.slice(-1)[0];var hasTrailingSlash=(result.host||relative.host||srcPath.length>1)&&(last==='.'||last==='..')||last==='';// strip single dots, resolve double dots to parent dir
// if the path tries to go above the root, `up` ends up > 0
var up=0;for(var i=srcPath.length;i>=0;i--){last=srcPath[i];if(last==='.'){srcPath.splice(i,1);}else if(last==='..'){srcPath.splice(i,1);up++;}else if(up){srcPath.splice(i,1);up--;}}// if the path is allowed to go above the root, restore leading ..s
if(!mustEndAbs&&!removeAllDots){for(;up--;up){srcPath.unshift('..');}}if(mustEndAbs&&srcPath[0]!==''&&(!srcPath[0]||srcPath[0].charAt(0)!=='/')){srcPath.unshift('');}if(hasTrailingSlash&&srcPath.join('/').substr(-1)!=='/'){srcPath.push('');}var isAbsolute=srcPath[0]===''||srcPath[0]&&srcPath[0].charAt(0)==='/';// put the host back
if(psychotic){result.hostname=result.host=isAbsolute?'':srcPath.length?srcPath.shift():'';//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
var authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}mustEndAbs=mustEndAbs||result.host&&srcPath.length;if(mustEndAbs&&!isAbsolute){srcPath.unshift('');}if(!srcPath.length){result.pathname=null;result.path=null;}else{result.pathname=srcPath.join('/');}//to support request.http
if(!util.isNull(result.pathname)||!util.isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.auth=relative.auth||result.auth;result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;};Url.prototype.parseHost=function(){var host=this.host;var port=portPattern.exec(host);if(port){port=port[0];if(port!==':'){this.port=port.substr(1);}host=host.substr(0,host.length-port.length);}if(host)this.hostname=host;};},{"./util":88,"punycode":69,"querystring":72}],88:[function(require,module,exports){'use strict';module.exports={isString:function(arg){return typeof arg==='string';},isObject:function(arg){return typeof arg==='object'&&arg!==null;},isNull:function(arg){return arg===null;},isNullOrUndefined:function(arg){return arg==null;}};},{}],89:[function(require,module,exports){module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;function extend(){var target={};for(var i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;}},{}]},{},[1])(1);});

/***/ })

/******/ });
(function(){
// begin emailjs
/*! https://mths.be/iso-8859-2 v0.1.2 by @mathias | MIT license */
;(function(root) {

	// Detect free variables `exports`.
	var freeExports = false && exports;

	// Detect free variable `module`.
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js/io.js or Browserified code,
	// and use it as `root`.
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	var stringFromCharCode = String.fromCharCode;

	var INDEX_BY_CODE_POINT = {'128':0,'129':1,'130':2,'131':3,'132':4,'133':5,'134':6,'135':7,'136':8,'137':9,'138':10,'139':11,'140':12,'141':13,'142':14,'143':15,'144':16,'145':17,'146':18,'147':19,'148':20,'149':21,'150':22,'151':23,'152':24,'153':25,'154':26,'155':27,'156':28,'157':29,'158':30,'159':31,'160':32,'164':36,'167':39,'168':40,'173':45,'176':48,'180':52,'184':56,'193':65,'194':66,'196':68,'199':71,'201':73,'203':75,'205':77,'206':78,'211':83,'212':84,'214':86,'215':87,'218':90,'220':92,'221':93,'223':95,'225':97,'226':98,'228':100,'231':103,'233':105,'235':107,'237':109,'238':110,'243':115,'244':116,'246':118,'247':119,'250':122,'252':124,'253':125,'258':67,'259':99,'260':33,'261':49,'262':70,'263':102,'268':72,'269':104,'270':79,'271':111,'272':80,'273':112,'280':74,'281':106,'282':76,'283':108,'313':69,'314':101,'317':37,'318':53,'321':35,'322':51,'323':81,'324':113,'327':82,'328':114,'336':85,'337':117,'340':64,'341':96,'344':88,'345':120,'346':38,'347':54,'350':42,'351':58,'352':41,'353':57,'354':94,'355':126,'356':43,'357':59,'366':89,'367':121,'368':91,'369':123,'377':44,'378':60,'379':47,'380':63,'381':46,'382':62,'711':55,'728':34,'729':127,'731':50,'733':61};
	var INDEX_BY_POINTER = {'0':'\x80','1':'\x81','2':'\x82','3':'\x83','4':'\x84','5':'\x85','6':'\x86','7':'\x87','8':'\x88','9':'\x89','10':'\x8A','11':'\x8B','12':'\x8C','13':'\x8D','14':'\x8E','15':'\x8F','16':'\x90','17':'\x91','18':'\x92','19':'\x93','20':'\x94','21':'\x95','22':'\x96','23':'\x97','24':'\x98','25':'\x99','26':'\x9A','27':'\x9B','28':'\x9C','29':'\x9D','30':'\x9E','31':'\x9F','32':'\xA0','33':'\u0104','34':'\u02D8','35':'\u0141','36':'\xA4','37':'\u013D','38':'\u015A','39':'\xA7','40':'\xA8','41':'\u0160','42':'\u015E','43':'\u0164','44':'\u0179','45':'\xAD','46':'\u017D','47':'\u017B','48':'\xB0','49':'\u0105','50':'\u02DB','51':'\u0142','52':'\xB4','53':'\u013E','54':'\u015B','55':'\u02C7','56':'\xB8','57':'\u0161','58':'\u015F','59':'\u0165','60':'\u017A','61':'\u02DD','62':'\u017E','63':'\u017C','64':'\u0154','65':'\xC1','66':'\xC2','67':'\u0102','68':'\xC4','69':'\u0139','70':'\u0106','71':'\xC7','72':'\u010C','73':'\xC9','74':'\u0118','75':'\xCB','76':'\u011A','77':'\xCD','78':'\xCE','79':'\u010E','80':'\u0110','81':'\u0143','82':'\u0147','83':'\xD3','84':'\xD4','85':'\u0150','86':'\xD6','87':'\xD7','88':'\u0158','89':'\u016E','90':'\xDA','91':'\u0170','92':'\xDC','93':'\xDD','94':'\u0162','95':'\xDF','96':'\u0155','97':'\xE1','98':'\xE2','99':'\u0103','100':'\xE4','101':'\u013A','102':'\u0107','103':'\xE7','104':'\u010D','105':'\xE9','106':'\u0119','107':'\xEB','108':'\u011B','109':'\xED','110':'\xEE','111':'\u010F','112':'\u0111','113':'\u0144','114':'\u0148','115':'\xF3','116':'\xF4','117':'\u0151','118':'\xF6','119':'\xF7','120':'\u0159','121':'\u016F','122':'\xFA','123':'\u0171','124':'\xFC','125':'\xFD','126':'\u0163','127':'\u02D9'};

	// https://encoding.spec.whatwg.org/#error-mode
	var error = function(codePoint, mode) {
		if (mode == 'replacement') {
			return '\uFFFD';
		}
		if (codePoint != null && mode == 'html') {
			return '&#' + codePoint + ';';
		}
		// Else, `mode == 'fatal'`.
		throw Error();
	};

	// https://encoding.spec.whatwg.org/#single-byte-decoder
	var decode = function(input, options) {
		var mode;
		if (options && options.mode) {
			mode = options.mode.toLowerCase();
		}
		// “An error mode […] is either `replacement` (default) or `fatal` for a
		// decoder.”
		if (mode != 'replacement' && mode != 'fatal') {
			mode = 'replacement';
		}
		var length = input.length;
		var index = -1;
		var byteValue;
		var pointer;
		var result = '';
		while (++index < length) {
			byteValue = input.charCodeAt(index);
			// “If `byte` is in the range `0x00` to `0x7F`, return a code point whose
			// value is `byte`.”
			if (byteValue >= 0x00 && byteValue <= 0x7F) {
				result += stringFromCharCode(byteValue);
				continue;
			}
			// “Let `code point` be the index code point for `byte − 0x80` in index
			// `single-byte`.”
			pointer = byteValue - 0x80;
			if (hasOwnProperty.call(INDEX_BY_POINTER, pointer)) {
				// “Return a code point whose value is `code point`.”
				result += INDEX_BY_POINTER[pointer];
			} else {
				// “If `code point` is `null`, return `error`.”
				result += error(null, mode);
			}
		}
		return result;
	};

	// https://encoding.spec.whatwg.org/#single-byte-encoder
	var encode = function(input, options) {
		var mode;
		if (options && options.mode) {
			mode = options.mode.toLowerCase();
		}
		// “An error mode […] is either `fatal` (default) or `HTML` for an
		// encoder.”
		if (mode != 'fatal' && mode != 'html') {
			mode = 'fatal';
		}
		var length = input.length;
		var index = -1;
		var codePoint;
		var pointer;
		var result = '';
		while (++index < length) {
			codePoint = input.charCodeAt(index);
			// “If `code point` is in the range U+0000 to U+007F, return a byte whose
			// value is `code point`.”
			if (codePoint >= 0x00 && codePoint <= 0x7F) {
				result += stringFromCharCode(codePoint);
				continue;
			}
			// “Let `pointer` be the index pointer for `code point` in index
			// `single-byte`.”
			if (hasOwnProperty.call(INDEX_BY_CODE_POINT, codePoint)) {
				pointer = INDEX_BY_CODE_POINT[codePoint];
				// “Return a byte whose value is `pointer + 0x80`.”
				result += stringFromCharCode(pointer + 0x80);
			} else {
				// “If `pointer` is `null`, return `error` with `code point`.”
				result += error(codePoint, mode);
			}
		}
		return result;
	};

	var iso88592 = {
		'encode': encode,
		'decode': decode,
		'labels': [
			'csisolatin2',
			'iso-8859-2',
			'iso-ir-101',
			'iso8859-2',
			'iso88592',
			'iso_8859-2',
			'iso_8859-2:1987',
			'l2',
			'latin2'
		],
		'version': '0.1.2'
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return iso88592;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js, io.js or RingoJS v0.8.0+
			freeModule.exports = iso88592;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (var key in iso88592) {
				iso88592.hasOwnProperty(key) && (freeExports[key] = iso88592[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.iso88592 = iso88592;
	}

}(this));

/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = false && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

// un-licensed as public domain https://github.com/inexorabletash/text-encoding/blob/master/LICENSE.md
(function(root, factory) {
    'use strict';

    if (false) {
        define(factory);
    } else if (false) {
        module.exports = factory();
    } else {
        var stringencoding = factory();
        root.TextEncoder = stringencoding.TextEncoder;
        root.TextDecoder = stringencoding.TextDecoder;
    }

}(this, function() {
    'use strict';

    var ENCODING_INDEXES = {
        "big5": [null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 17392, 19506,
            17923, 17830, 17784, 160359, 19831, 17843, 162993,
            19682, 163013, 15253, 18230, 18244, 19527, 19520,
            148159, 144919, 160594, 159371, 159954, 19543,
            172881, 18255, 17882, 19589, 162924, 19719, 19108,
            18081, 158499, 29221, 154196, 137827, 146950,
            147297, 26189, 22267, null, 32149, 22813, 166841,
            15860, 38708, 162799, 23515, 138590, 23204, 13861,
            171696, 23249, 23479, 23804, 26478, 34195, 170309,
            29793, 29853, 14453, 138579, 145054, 155681, 16108,
            153822, 15093, 31484, 40855, 147809, 166157, 143850,
            133770, 143966, 17162, 33924, 40854, 37935, 18736,
            34323, 22678, 38730, 37400, 31184, 31282, 26208,
            27177, 34973, 29772, 31685, 26498, 31276, 21071,
            36934, 13542, 29636, 155065, 29894, 40903, 22451,
            18735, 21580, 16689, 145038, 22552, 31346, 162661,
            35727, 18094, 159368, 16769, 155033, 31662, 140476,
            40904, 140481, 140489, 140492, 40905, 34052, 144827,
            16564, 40906, 17633, 175615, 25281, 28782, 40907,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 12736,
            12737, 12738, 12739, 12740, 131340, 12741, 131281,
            131277, 12742, 12743, 131275, 139240, 12744, 131274,
            12745, 12746, 12747, 12748, 131342, 12749, 12750,
            256, 193, 461, 192, 274, 201, 282, 200, 332, 211,
            465, 210, null, 7870, null, 7872, 202, 257, 225,
            462, 224, 593, 275, 233, 283, 232, 299, 237, 464,
            236, 333, 243, 466, 242, 363, 250, 468, 249, 470,
            472, 474, 476, 252, null, 7871, null, 7873, 234,
            609, 9178, 9179, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 172969, 135493,
            null, 25866, null, null, 20029, 28381, 40270, 37343,
            null, null, 161589, 25745, 20250, 20264, 20392,
            20822, 20852, 20892, 20964, 21153, 21160, 21307,
            21326, 21457, 21464, 22242, 22768, 22788, 22791,
            22834, 22836, 23398, 23454, 23455, 23706, 24198,
            24635, 25993, 26622, 26628, 26725, 27982, 28860,
            30005, 32420, 32428, 32442, 32455, 32463, 32479,
            32518, 32567, 33402, 33487, 33647, 35270, 35774,
            35810, 36710, 36711, 36718, 29713, 31996, 32205,
            26950, 31433, 21031, null, null, null, null, 37260,
            30904, 37214, 32956, null, 36107, 33014, 133607,
            null, null, 32927, 40647, 19661, 40393, 40460,
            19518, 171510, 159758, 40458, 172339, 13761, null,
            28314, 33342, 29977, null, 18705, 39532, 39567,
            40857, 31111, 164972, 138698, 132560, 142054, 20004,
            20097, 20096, 20103, 20159, 20203, 20279, 13388,
            20413, 15944, 20483, 20616, 13437, 13459, 13477,
            20870, 22789, 20955, 20988, 20997, 20105, 21113,
            21136, 21287, 13767, 21417, 13649, 21424, 13651,
            21442, 21539, 13677, 13682, 13953, 21651, 21667,
            21684, 21689, 21712, 21743, 21784, 21795, 21800,
            13720, 21823, 13733, 13759, 21975, 13765, 163204,
            21797, null, 134210, 134421, 151851, 21904, 142534,
            14828, 131905, 36422, 150968, 169189, 16467, 164030,
            30586, 142392, 14900, 18389, 164189, 158194, 151018,
            25821, 134524, 135092, 134357, 135412, 25741, 36478,
            134806, 134155, 135012, 142505, 164438, 148691,
            null, 134470, 170573, 164073, 18420, 151207, 142530,
            39602, 14951, 169460, 16365, 13574, 152263, 169940,
            161992, 142660, 40302, 38933, null, 17369, 155813,
            25780, 21731, 142668, 142282, 135287, 14843, 135279,
            157402, 157462, 162208, 25834, 151634, 134211,
            36456, 139681, 166732, 132913, null, 18443, 131497,
            16378, 22643, 142733, null, 148936, 132348, 155799,
            134988, 134550, 21881, 16571, 17338, null, 19124,
            141926, 135325, 33194, 39157, 134556, 25465, 14846,
            141173, 36288, 22177, 25724, 15939, null, 173569,
            134665, 142031, 142537, null, 135368, 145858, 14738,
            14854, 164507, 13688, 155209, 139463, 22098, 134961,
            142514, 169760, 13500, 27709, 151099, null, null,
            161140, 142987, 139784, 173659, 167117, 134778,
            134196, 157724, 32659, 135375, 141315, 141625,
            13819, 152035, 134796, 135053, 134826, 16275,
            134960, 134471, 135503, 134732, null, 134827,
            134057, 134472, 135360, 135485, 16377, 140950,
            25650, 135085, 144372, 161337, 142286, 134526,
            134527, 142417, 142421, 14872, 134808, 135367,
            134958, 173618, 158544, 167122, 167321, 167114,
            38314, 21708, 33476, 21945, null, 171715, 39974,
            39606, 161630, 142830, 28992, 33133, 33004, 23580,
            157042, 33076, 14231, 21343, 164029, 37302, 134906,
            134671, 134775, 134907, 13789, 151019, 13833,
            134358, 22191, 141237, 135369, 134672, 134776,
            135288, 135496, 164359, 136277, 134777, 151120,
            142756, 23124, 135197, 135198, 135413, 135414,
            22428, 134673, 161428, 164557, 135093, 134779,
            151934, 14083, 135094, 135552, 152280, 172733,
            149978, 137274, 147831, 164476, 22681, 21096, 13850,
            153405, 31666, 23400, 18432, 19244, 40743, 18919,
            39967, 39821, 154484, 143677, 22011, 13810, 22153,
            20008, 22786, 138177, 194680, 38737, 131206, 20059,
            20155, 13630, 23587, 24401, 24516, 14586, 25164,
            25909, 27514, 27701, 27706, 28780, 29227, 20012,
            29357, 149737, 32594, 31035, 31993, 32595, 156266,
            13505, null, 156491, 32770, 32896, 157202, 158033,
            21341, 34916, 35265, 161970, 35744, 36125, 38021,
            38264, 38271, 38376, 167439, 38886, 39029, 39118,
            39134, 39267, 170000, 40060, 40479, 40644, 27503,
            63751, 20023, 131207, 38429, 25143, 38050, null,
            20539, 28158, 171123, 40870, 15817, 34959, 147790,
            28791, 23797, 19232, 152013, 13657, 154928, 24866,
            166450, 36775, 37366, 29073, 26393, 29626, 144001,
            172295, 15499, 137600, 19216, 30948, 29698, 20910,
            165647, 16393, 27235, 172730, 16931, 34319, 133743,
            31274, 170311, 166634, 38741, 28749, 21284, 139390,
            37876, 30425, 166371, 40871, 30685, 20131, 20464,
            20668, 20015, 20247, 40872, 21556, 32139, 22674,
            22736, 138678, 24210, 24217, 24514, 141074, 25995,
            144377, 26905, 27203, 146531, 27903, null, 29184,
            148741, 29580, 16091, 150035, 23317, 29881, 35715,
            154788, 153237, 31379, 31724, 31939, 32364, 33528,
            34199, 40873, 34960, 40874, 36537, 40875, 36815,
            34143, 39392, 37409, 40876, 167353, 136255, 16497,
            17058, 23066, null, null, null, 39016, 26475, 17014,
            22333, null, 34262, 149883, 33471, 160013, 19585,
            159092, 23931, 158485, 159678, 40877, 40878, 23446,
            40879, 26343, 32347, 28247, 31178, 15752, 17603,
            143958, 141206, 17306, 17718, null, 23765, 146202,
            35577, 23672, 15634, 144721, 23928, 40882, 29015,
            17752, 147692, 138787, 19575, 14712, 13386, 131492,
            158785, 35532, 20404, 131641, 22975, 33132, 38998,
            170234, 24379, 134047, null, 139713, 166253, 16642,
            18107, 168057, 16135, 40883, 172469, 16632, 14294,
            18167, 158790, 16764, 165554, 160767, 17773, 14548,
            152730, 17761, 17691, 19849, 19579, 19830, 17898,
            16328, 150287, 13921, 17630, 17597, 16877, 23870,
            23880, 23894, 15868, 14351, 23972, 23993, 14368,
            14392, 24130, 24253, 24357, 24451, 14600, 14612,
            14655, 14669, 24791, 24893, 23781, 14729, 25015,
            25017, 25039, 14776, 25132, 25232, 25317, 25368,
            14840, 22193, 14851, 25570, 25595, 25607, 25690,
            14923, 25792, 23829, 22049, 40863, 14999, 25990,
            15037, 26111, 26195, 15090, 26258, 15138, 26390,
            15170, 26532, 26624, 15192, 26698, 26756, 15218,
            15217, 15227, 26889, 26947, 29276, 26980, 27039,
            27013, 15292, 27094, 15325, 27237, 27252, 27249,
            27266, 15340, 27289, 15346, 27307, 27317, 27348,
            27382, 27521, 27585, 27626, 27765, 27818, 15563,
            27906, 27910, 27942, 28033, 15599, 28068, 28081,
            28181, 28184, 28201, 28294, 166336, 28347, 28386,
            28378, 40831, 28392, 28393, 28452, 28468, 15686,
            147265, 28545, 28606, 15722, 15733, 29111, 23705,
            15754, 28716, 15761, 28752, 28756, 28783, 28799,
            28809, 131877, 17345, 13809, 134872, 147159, 22462,
            159443, 28990, 153568, 13902, 27042, 166889, 23412,
            31305, 153825, 169177, 31333, 31357, 154028, 31419,
            31408, 31426, 31427, 29137, 156813, 16842, 31450,
            31453, 31466, 16879, 21682, 154625, 31499, 31573,
            31529, 152334, 154878, 31650, 31599, 33692, 154548,
            158847, 31696, 33825, 31634, 31672, 154912, 15789,
            154725, 33938, 31738, 31750, 31797, 154817, 31812,
            31875, 149634, 31910, 26237, 148856, 31945, 31943,
            31974, 31860, 31987, 31989, 31950, 32359, 17693,
            159300, 32093, 159446, 29837, 32137, 32171, 28981,
            32179, 32210, 147543, 155689, 32228, 15635, 32245,
            137209, 32229, 164717, 32285, 155937, 155994, 32366,
            32402, 17195, 37996, 32295, 32576, 32577, 32583,
            31030, 156368, 39393, 32663, 156497, 32675, 136801,
            131176, 17756, 145254, 17667, 164666, 32762, 156809,
            32773, 32776, 32797, 32808, 32815, 172167, 158915,
            32827, 32828, 32865, 141076, 18825, 157222, 146915,
            157416, 26405, 32935, 166472, 33031, 33050, 22704,
            141046, 27775, 156824, 151480, 25831, 136330, 33304,
            137310, 27219, 150117, 150165, 17530, 33321, 133901,
            158290, 146814, 20473, 136445, 34018, 33634, 158474,
            149927, 144688, 137075, 146936, 33450, 26907,
            194964, 16859, 34123, 33488, 33562, 134678, 137140,
            14017, 143741, 144730, 33403, 33506, 33560, 147083,
            159139, 158469, 158615, 144846, 15807, 33565, 21996,
            33669, 17675, 159141, 33708, 33729, 33747, 13438,
            159444, 27223, 34138, 13462, 159298, 143087, 33880,
            154596, 33905, 15827, 17636, 27303, 33866, 146613,
            31064, 33960, 158614, 159351, 159299, 34014, 33807,
            33681, 17568, 33939, 34020, 154769, 16960, 154816,
            17731, 34100, 23282, 159385, 17703, 34163, 17686,
            26559, 34326, 165413, 165435, 34241, 159880, 34306,
            136578, 159949, 194994, 17770, 34344, 13896, 137378,
            21495, 160666, 34430, 34673, 172280, 34798, 142375,
            34737, 34778, 34831, 22113, 34412, 26710, 17935,
            34885, 34886, 161248, 146873, 161252, 34910, 34972,
            18011, 34996, 34997, 25537, 35013, 30583, 161551,
            35207, 35210, 35238, 35241, 35239, 35260, 166437,
            35303, 162084, 162493, 35484, 30611, 37374, 35472,
            162393, 31465, 162618, 147343, 18195, 162616, 29052,
            35596, 35615, 152624, 152933, 35647, 35660, 35661,
            35497, 150138, 35728, 35739, 35503, 136927, 17941,
            34895, 35995, 163156, 163215, 195028, 14117, 163155,
            36054, 163224, 163261, 36114, 36099, 137488, 36059,
            28764, 36113, 150729, 16080, 36215, 36265, 163842,
            135188, 149898, 15228, 164284, 160012, 31463, 36525,
            36534, 36547, 37588, 36633, 36653, 164709, 164882,
            36773, 37635, 172703, 133712, 36787, 18730, 166366,
            165181, 146875, 24312, 143970, 36857, 172052,
            165564, 165121, 140069, 14720, 159447, 36919,
            165180, 162494, 36961, 165228, 165387, 37032,
            165651, 37060, 165606, 37038, 37117, 37223, 15088,
            37289, 37316, 31916, 166195, 138889, 37390, 27807,
            37441, 37474, 153017, 37561, 166598, 146587, 166668,
            153051, 134449, 37676, 37739, 166625, 166891, 28815,
            23235, 166626, 166629, 18789, 37444, 166892, 166969,
            166911, 37747, 37979, 36540, 38277, 38310, 37926,
            38304, 28662, 17081, 140922, 165592, 135804, 146990,
            18911, 27676, 38523, 38550, 16748, 38563, 159445,
            25050, 38582, 30965, 166624, 38589, 21452, 18849,
            158904, 131700, 156688, 168111, 168165, 150225,
            137493, 144138, 38705, 34370, 38710, 18959, 17725,
            17797, 150249, 28789, 23361, 38683, 38748, 168405,
            38743, 23370, 168427, 38751, 37925, 20688, 143543,
            143548, 38793, 38815, 38833, 38846, 38848, 38866,
            38880, 152684, 38894, 29724, 169011, 38911, 38901,
            168989, 162170, 19153, 38964, 38963, 38987, 39014,
            15118, 160117, 15697, 132656, 147804, 153350, 39114,
            39095, 39112, 39111, 19199, 159015, 136915, 21936,
            39137, 39142, 39148, 37752, 39225, 150057, 19314,
            170071, 170245, 39413, 39436, 39483, 39440, 39512,
            153381, 14020, 168113, 170965, 39648, 39650, 170757,
            39668, 19470, 39700, 39725, 165376, 20532, 39732,
            158120, 14531, 143485, 39760, 39744, 171326, 23109,
            137315, 39822, 148043, 39938, 39935, 39948, 171624,
            40404, 171959, 172434, 172459, 172257, 172323,
            172511, 40318, 40323, 172340, 40462, 26760, 40388,
            139611, 172435, 172576, 137531, 172595, 40249,
            172217, 172724, 40592, 40597, 40606, 40610, 19764,
            40618, 40623, 148324, 40641, 15200, 14821, 15645,
            20274, 14270, 166955, 40706, 40712, 19350, 37924,
            159138, 40727, 40726, 40761, 22175, 22154, 40773,
            39352, 168075, 38898, 33919, 40802, 40809, 31452,
            40846, 29206, 19390, 149877, 149947, 29047, 150008,
            148296, 150097, 29598, 166874, 137466, 31135,
            166270, 167478, 37737, 37875, 166468, 37612, 37761,
            37835, 166252, 148665, 29207, 16107, 30578, 31299,
            28880, 148595, 148472, 29054, 137199, 28835, 137406,
            144793, 16071, 137349, 152623, 137208, 14114,
            136955, 137273, 14049, 137076, 137425, 155467,
            14115, 136896, 22363, 150053, 136190, 135848,
            136134, 136374, 34051, 145062, 34051, 33877, 149908,
            160101, 146993, 152924, 147195, 159826, 17652,
            145134, 170397, 159526, 26617, 14131, 15381, 15847,
            22636, 137506, 26640, 16471, 145215, 147681, 147595,
            147727, 158753, 21707, 22174, 157361, 22162, 135135,
            134056, 134669, 37830, 166675, 37788, 20216, 20779,
            14361, 148534, 20156, 132197, 131967, 20299, 20362,
            153169, 23144, 131499, 132043, 14745, 131850,
            132116, 13365, 20265, 131776, 167603, 131701, 35546,
            131596, 20120, 20685, 20749, 20386, 20227, 150030,
            147082, 20290, 20526, 20588, 20609, 20428, 20453,
            20568, 20732, 20825, 20827, 20829, 20830, 28278,
            144789, 147001, 147135, 28018, 137348, 147081,
            20904, 20931, 132576, 17629, 132259, 132242, 132241,
            36218, 166556, 132878, 21081, 21156, 133235, 21217,
            37742, 18042, 29068, 148364, 134176, 149932, 135396,
            27089, 134685, 29817, 16094, 29849, 29716, 29782,
            29592, 19342, 150204, 147597, 21456, 13700, 29199,
            147657, 21940, 131909, 21709, 134086, 22301, 37469,
            38644, 37734, 22493, 22413, 22399, 13886, 22731,
            23193, 166470, 136954, 137071, 136976, 23084, 22968,
            37519, 23166, 23247, 23058, 153926, 137715, 137313,
            148117, 14069, 27909, 29763, 23073, 155267, 23169,
            166871, 132115, 37856, 29836, 135939, 28933, 18802,
            37896, 166395, 37821, 14240, 23582, 23710, 24158,
            24136, 137622, 137596, 146158, 24269, 23375, 137475,
            137476, 14081, 137376, 14045, 136958, 14035, 33066,
            166471, 138682, 144498, 166312, 24332, 24334,
            137511, 137131, 23147, 137019, 23364, 34324, 161277,
            34912, 24702, 141408, 140843, 24539, 16056, 140719,
            140734, 168072, 159603, 25024, 131134, 131142,
            140827, 24985, 24984, 24693, 142491, 142599, 149204,
            168269, 25713, 149093, 142186, 14889, 142114,
            144464, 170218, 142968, 25399, 173147, 25782, 25393,
            25553, 149987, 142695, 25252, 142497, 25659, 25963,
            26994, 15348, 143502, 144045, 149897, 144043, 21773,
            144096, 137433, 169023, 26318, 144009, 143795,
            15072, 16784, 152964, 166690, 152975, 136956,
            152923, 152613, 30958, 143619, 137258, 143924,
            13412, 143887, 143746, 148169, 26254, 159012, 26219,
            19347, 26160, 161904, 138731, 26211, 144082, 144097,
            26142, 153714, 14545, 145466, 145340, 15257, 145314,
            144382, 29904, 15254, 26511, 149034, 26806, 26654,
            15300, 27326, 14435, 145365, 148615, 27187, 27218,
            27337, 27397, 137490, 25873, 26776, 27212, 15319,
            27258, 27479, 147392, 146586, 37792, 37618, 166890,
            166603, 37513, 163870, 166364, 37991, 28069, 28427,
            149996, 28007, 147327, 15759, 28164, 147516, 23101,
            28170, 22599, 27940, 30786, 28987, 148250, 148086,
            28913, 29264, 29319, 29332, 149391, 149285, 20857,
            150180, 132587, 29818, 147192, 144991, 150090,
            149783, 155617, 16134, 16049, 150239, 166947,
            147253, 24743, 16115, 29900, 29756, 37767, 29751,
            17567, 159210, 17745, 30083, 16227, 150745, 150790,
            16216, 30037, 30323, 173510, 15129, 29800, 166604,
            149931, 149902, 15099, 15821, 150094, 16127, 149957,
            149747, 37370, 22322, 37698, 166627, 137316, 20703,
            152097, 152039, 30584, 143922, 30478, 30479, 30587,
            149143, 145281, 14942, 149744, 29752, 29851, 16063,
            150202, 150215, 16584, 150166, 156078, 37639,
            152961, 30750, 30861, 30856, 30930, 29648, 31065,
            161601, 153315, 16654, 31131, 33942, 31141, 27181,
            147194, 31290, 31220, 16750, 136934, 16690, 37429,
            31217, 134476, 149900, 131737, 146874, 137070,
            13719, 21867, 13680, 13994, 131540, 134157, 31458,
            23129, 141045, 154287, 154268, 23053, 131675, 30960,
            23082, 154566, 31486, 16889, 31837, 31853, 16913,
            154547, 155324, 155302, 31949, 150009, 137136,
            31886, 31868, 31918, 27314, 32220, 32263, 32211,
            32590, 156257, 155996, 162632, 32151, 155266, 17002,
            158581, 133398, 26582, 131150, 144847, 22468,
            156690, 156664, 149858, 32733, 31527, 133164,
            154345, 154947, 31500, 155150, 39398, 34373, 39523,
            27164, 144447, 14818, 150007, 157101, 39455, 157088,
            33920, 160039, 158929, 17642, 33079, 17410, 32966,
            33033, 33090, 157620, 39107, 158274, 33378, 33381,
            158289, 33875, 159143, 34320, 160283, 23174, 16767,
            137280, 23339, 137377, 23268, 137432, 34464, 195004,
            146831, 34861, 160802, 23042, 34926, 20293, 34951,
            35007, 35046, 35173, 35149, 153219, 35156, 161669,
            161668, 166901, 166873, 166812, 166393, 16045,
            33955, 18165, 18127, 14322, 35389, 35356, 169032,
            24397, 37419, 148100, 26068, 28969, 28868, 137285,
            40301, 35999, 36073, 163292, 22938, 30659, 23024,
            17262, 14036, 36394, 36519, 150537, 36656, 36682,
            17140, 27736, 28603, 140065, 18587, 28537, 28299,
            137178, 39913, 14005, 149807, 37051, 37015, 21873,
            18694, 37307, 37892, 166475, 16482, 166652, 37927,
            166941, 166971, 34021, 35371, 38297, 38311, 38295,
            38294, 167220, 29765, 16066, 149759, 150082, 148458,
            16103, 143909, 38543, 167655, 167526, 167525, 16076,
            149997, 150136, 147438, 29714, 29803, 16124, 38721,
            168112, 26695, 18973, 168083, 153567, 38749, 37736,
            166281, 166950, 166703, 156606, 37562, 23313, 35689,
            18748, 29689, 147995, 38811, 38769, 39224, 134950,
            24001, 166853, 150194, 38943, 169178, 37622, 169431,
            37349, 17600, 166736, 150119, 166756, 39132, 166469,
            16128, 37418, 18725, 33812, 39227, 39245, 162566,
            15869, 39323, 19311, 39338, 39516, 166757, 153800,
            27279, 39457, 23294, 39471, 170225, 19344, 170312,
            39356, 19389, 19351, 37757, 22642, 135938, 22562,
            149944, 136424, 30788, 141087, 146872, 26821, 15741,
            37976, 14631, 24912, 141185, 141675, 24839, 40015,
            40019, 40059, 39989, 39952, 39807, 39887, 171565,
            39839, 172533, 172286, 40225, 19630, 147716, 40472,
            19632, 40204, 172468, 172269, 172275, 170287, 40357,
            33981, 159250, 159711, 158594, 34300, 17715, 159140,
            159364, 159216, 33824, 34286, 159232, 145367,
            155748, 31202, 144796, 144960, 18733, 149982, 15714,
            37851, 37566, 37704, 131775, 30905, 37495, 37965,
            20452, 13376, 36964, 152925, 30781, 30804, 30902,
            30795, 137047, 143817, 149825, 13978, 20338, 28634,
            28633, 28702, 28702, 21524, 147893, 22459, 22771,
            22410, 40214, 22487, 28980, 13487, 147884, 29163,
            158784, 151447, 23336, 137141, 166473, 24844, 23246,
            23051, 17084, 148616, 14124, 19323, 166396, 37819,
            37816, 137430, 134941, 33906, 158912, 136211,
            148218, 142374, 148417, 22932, 146871, 157505,
            32168, 155995, 155812, 149945, 149899, 166394,
            37605, 29666, 16105, 29876, 166755, 137375, 16097,
            150195, 27352, 29683, 29691, 16086, 150078, 150164,
            137177, 150118, 132007, 136228, 149989, 29768,
            149782, 28837, 149878, 37508, 29670, 37727, 132350,
            37681, 166606, 166422, 37766, 166887, 153045, 18741,
            166530, 29035, 149827, 134399, 22180, 132634,
            134123, 134328, 21762, 31172, 137210, 32254, 136898,
            150096, 137298, 17710, 37889, 14090, 166592, 149933,
            22960, 137407, 137347, 160900, 23201, 14050, 146779,
            14000, 37471, 23161, 166529, 137314, 37748, 15565,
            133812, 19094, 14730, 20724, 15721, 15692, 136092,
            29045, 17147, 164376, 28175, 168164, 17643, 27991,
            163407, 28775, 27823, 15574, 147437, 146989, 28162,
            28428, 15727, 132085, 30033, 14012, 13512, 18048,
            16090, 18545, 22980, 37486, 18750, 36673, 166940,
            158656, 22546, 22472, 14038, 136274, 28926, 148322,
            150129, 143331, 135856, 140221, 26809, 26983,
            136088, 144613, 162804, 145119, 166531, 145366,
            144378, 150687, 27162, 145069, 158903, 33854, 17631,
            17614, 159014, 159057, 158850, 159710, 28439,
            160009, 33597, 137018, 33773, 158848, 159827,
            137179, 22921, 23170, 137139, 23137, 23153, 137477,
            147964, 14125, 23023, 137020, 14023, 29070, 37776,
            26266, 148133, 23150, 23083, 148115, 27179, 147193,
            161590, 148571, 148170, 28957, 148057, 166369,
            20400, 159016, 23746, 148686, 163405, 148413, 27148,
            148054, 135940, 28838, 28979, 148457, 15781, 27871,
            194597, 150095, 32357, 23019, 23855, 15859, 24412,
            150109, 137183, 32164, 33830, 21637, 146170, 144128,
            131604, 22398, 133333, 132633, 16357, 139166,
            172726, 28675, 168283, 23920, 29583, 31955, 166489,
            168992, 20424, 32743, 29389, 29456, 162548, 29496,
            29497, 153334, 29505, 29512, 16041, 162584, 36972,
            29173, 149746, 29665, 33270, 16074, 30476, 16081,
            27810, 22269, 29721, 29726, 29727, 16098, 16112,
            16116, 16122, 29907, 16142, 16211, 30018, 30061,
            30066, 30093, 16252, 30152, 30172, 16320, 30285,
            16343, 30324, 16348, 30330, 151388, 29064, 22051,
            35200, 22633, 16413, 30531, 16441, 26465, 16453,
            13787, 30616, 16490, 16495, 23646, 30654, 30667,
            22770, 30744, 28857, 30748, 16552, 30777, 30791,
            30801, 30822, 33864, 152885, 31027, 26627, 31026,
            16643, 16649, 31121, 31129, 36795, 31238, 36796,
            16743, 31377, 16818, 31420, 33401, 16836, 31439,
            31451, 16847, 20001, 31586, 31596, 31611, 31762,
            31771, 16992, 17018, 31867, 31900, 17036, 31928,
            17044, 31981, 36755, 28864, 134351, 32207, 32212,
            32208, 32253, 32686, 32692, 29343, 17303, 32800,
            32805, 31545, 32814, 32817, 32852, 15820, 22452,
            28832, 32951, 33001, 17389, 33036, 29482, 33038,
            33042, 30048, 33044, 17409, 15161, 33110, 33113,
            33114, 17427, 22586, 33148, 33156, 17445, 33171,
            17453, 33189, 22511, 33217, 33252, 33364, 17551,
            33446, 33398, 33482, 33496, 33535, 17584, 33623,
            38505, 27018, 33797, 28917, 33892, 24803, 33928,
            17668, 33982, 34017, 34040, 34064, 34104, 34130,
            17723, 34159, 34160, 34272, 17783, 34418, 34450,
            34482, 34543, 38469, 34699, 17926, 17943, 34990,
            35071, 35108, 35143, 35217, 162151, 35369, 35384,
            35476, 35508, 35921, 36052, 36082, 36124, 18328,
            22623, 36291, 18413, 20206, 36410, 21976, 22356,
            36465, 22005, 36528, 18487, 36558, 36578, 36580,
            36589, 36594, 36791, 36801, 36810, 36812, 36915,
            39364, 18605, 39136, 37395, 18718, 37416, 37464,
            37483, 37553, 37550, 37567, 37603, 37611, 37619,
            37620, 37629, 37699, 37764, 37805, 18757, 18769,
            40639, 37911, 21249, 37917, 37933, 37950, 18794,
            37972, 38009, 38189, 38306, 18855, 38388, 38451,
            18917, 26528, 18980, 38720, 18997, 38834, 38850,
            22100, 19172, 24808, 39097, 19225, 39153, 22596,
            39182, 39193, 20916, 39196, 39223, 39234, 39261,
            39266, 19312, 39365, 19357, 39484, 39695, 31363,
            39785, 39809, 39901, 39921, 39924, 19565, 39968,
            14191, 138178, 40265, 39994, 40702, 22096, 40339,
            40381, 40384, 40444, 38134, 36790, 40571, 40620,
            40625, 40637, 40646, 38108, 40674, 40689, 40696,
            31432, 40772, 131220, 131767, 132000, 26906, 38083,
            22956, 132311, 22592, 38081, 14265, 132565, 132629,
            132726, 136890, 22359, 29043, 133826, 133837,
            134079, 21610, 194619, 134091, 21662, 134139,
            134203, 134227, 134245, 134268, 24807, 134285,
            22138, 134325, 134365, 134381, 134511, 134578,
            134600, 26965, 39983, 34725, 134660, 134670, 134871,
            135056, 134957, 134771, 23584, 135100, 24075,
            135260, 135247, 135286, 26398, 135291, 135304,
            135318, 13895, 135359, 135379, 135471, 135483,
            21348, 33965, 135907, 136053, 135990, 35713, 136567,
            136729, 137155, 137159, 20088, 28859, 137261,
            137578, 137773, 137797, 138282, 138352, 138412,
            138952, 25283, 138965, 139029, 29080, 26709, 139333,
            27113, 14024, 139900, 140247, 140282, 141098,
            141425, 141647, 33533, 141671, 141715, 142037,
            35237, 142056, 36768, 142094, 38840, 142143, 38983,
            39613, 142412, null, 142472, 142519, 154600, 142600,
            142610, 142775, 142741, 142914, 143220, 143308,
            143411, 143462, 144159, 144350, 24497, 26184, 26303,
            162425, 144743, 144883, 29185, 149946, 30679,
            144922, 145174, 32391, 131910, 22709, 26382, 26904,
            146087, 161367, 155618, 146961, 147129, 161278,
            139418, 18640, 19128, 147737, 166554, 148206,
            148237, 147515, 148276, 148374, 150085, 132554,
            20946, 132625, 22943, 138920, 15294, 146687, 148484,
            148694, 22408, 149108, 14747, 149295, 165352,
            170441, 14178, 139715, 35678, 166734, 39382, 149522,
            149755, 150037, 29193, 150208, 134264, 22885,
            151205, 151430, 132985, 36570, 151596, 21135, 22335,
            29041, 152217, 152601, 147274, 150183, 21948,
            152646, 152686, 158546, 37332, 13427, 152895,
            161330, 152926, 18200, 152930, 152934, 153543,
            149823, 153693, 20582, 13563, 144332, 24798, 153859,
            18300, 166216, 154286, 154505, 154630, 138640,
            22433, 29009, 28598, 155906, 162834, 36950, 156082,
            151450, 35682, 156674, 156746, 23899, 158711, 36662,
            156804, 137500, 35562, 150006, 156808, 147439,
            156946, 19392, 157119, 157365, 141083, 37989,
            153569, 24981, 23079, 194765, 20411, 22201, 148769,
            157436, 20074, 149812, 38486, 28047, 158909, 13848,
            35191, 157593, 157806, 156689, 157790, 29151,
            157895, 31554, 168128, 133649, 157990, 37124,
            158009, 31301, 40432, 158202, 39462, 158253, 13919,
            156777, 131105, 31107, 158260, 158555, 23852,
            144665, 33743, 158621, 18128, 158884, 30011, 34917,
            159150, 22710, 14108, 140685, 159819, 160205, 15444,
            160384, 160389, 37505, 139642, 160395, 37680,
            160486, 149968, 27705, 38047, 160848, 134904, 34855,
            35061, 141606, 164979, 137137, 28344, 150058,
            137248, 14756, 14009, 23568, 31203, 17727, 26294,
            171181, 170148, 35139, 161740, 161880, 22230, 16607,
            136714, 14753, 145199, 164072, 136133, 29101, 33638,
            162269, 168360, 23143, 19639, 159919, 166315,
            162301, 162314, 162571, 163174, 147834, 31555,
            31102, 163849, 28597, 172767, 27139, 164632, 21410,
            159239, 37823, 26678, 38749, 164207, 163875, 158133,
            136173, 143919, 163912, 23941, 166960, 163971,
            22293, 38947, 166217, 23979, 149896, 26046, 27093,
            21458, 150181, 147329, 15377, 26422, 163984, 164084,
            164142, 139169, 164175, 164233, 164271, 164378,
            164614, 164655, 164746, 13770, 164968, 165546,
            18682, 25574, 166230, 30728, 37461, 166328, 17394,
            166375, 17375, 166376, 166726, 166868, 23032,
            166921, 36619, 167877, 168172, 31569, 168208,
            168252, 15863, 168286, 150218, 36816, 29327, 22155,
            169191, 169449, 169392, 169400, 169778, 170193,
            170313, 170346, 170435, 170536, 170766, 171354,
            171419, 32415, 171768, 171811, 19620, 38215, 172691,
            29090, 172799, 19857, 36882, 173515, 19868, 134300,
            36798, 21953, 36794, 140464, 36793, 150163, 17673,
            32383, 28502, 27313, 20202, 13540, 166700, 161949,
            14138, 36480, 137205, 163876, 166764, 166809,
            162366, 157359, 15851, 161365, 146615, 153141,
            153942, 20122, 155265, 156248, 22207, 134765, 36366,
            23405, 147080, 150686, 25566, 25296, 137206, 137339,
            25904, 22061, 154698, 21530, 152337, 15814, 171416,
            19581, 22050, 22046, 32585, 155352, 22901, 146752,
            34672, 19996, 135146, 134473, 145082, 33047, 40286,
            36120, 30267, 40005, 30286, 30649, 37701, 21554,
            33096, 33527, 22053, 33074, 33816, 32957, 21994,
            31074, 22083, 21526, 134813, 13774, 22021, 22001,
            26353, 164578, 13869, 30004, 22000, 21946, 21655,
            21874, 134209, 134294, 24272, 151880, 134774,
            142434, 134818, 40619, 32090, 21982, 135285, 25245,
            38765, 21652, 36045, 29174, 37238, 25596, 25529,
            25598, 21865, 142147, 40050, 143027, 20890, 13535,
            134567, 20903, 21581, 21790, 21779, 30310, 36397,
            157834, 30129, 32950, 34820, 34694, 35015, 33206,
            33820, 135361, 17644, 29444, 149254, 23440, 33547,
            157843, 22139, 141044, 163119, 147875, 163187,
            159440, 160438, 37232, 135641, 37384, 146684,
            173737, 134828, 134905, 29286, 138402, 18254,
            151490, 163833, 135147, 16634, 40029, 25887, 142752,
            18675, 149472, 171388, 135148, 134666, 24674,
            161187, 135149, null, 155720, 135559, 29091, 32398,
            40272, 19994, 19972, 13687, 23309, 27826, 21351,
            13996, 14812, 21373, 13989, 149016, 22682, 150382,
            33325, 21579, 22442, 154261, 133497, null, 14930,
            140389, 29556, 171692, 19721, 39917, 146686, 171824,
            19547, 151465, 169374, 171998, 33884, 146870,
            160434, 157619, 145184, 25390, 32037, 147191,
            146988, 14890, 36872, 21196, 15988, 13946, 17897,
            132238, 30272, 23280, 134838, 30842, 163630, 22695,
            16575, 22140, 39819, 23924, 30292, 173108, 40581,
            19681, 30201, 14331, 24857, 143578, 148466, null,
            22109, 135849, 22439, 149859, 171526, 21044, 159918,
            13741, 27722, 40316, 31830, 39737, 22494, 137068,
            23635, 25811, 169168, 156469, 160100, 34477, 134440,
            159010, 150242, 134513, null, 20990, 139023, 23950,
            38659, 138705, 40577, 36940, 31519, 39682, 23761,
            31651, 25192, 25397, 39679, 31695, 39722, 31870,
            39726, 31810, 31878, 39957, 31740, 39689, 40727,
            39963, 149822, 40794, 21875, 23491, 20477, 40600,
            20466, 21088, 15878, 21201, 22375, 20566, 22967,
            24082, 38856, 40363, 36700, 21609, 38836, 39232,
            38842, 21292, 24880, 26924, 21466, 39946, 40194,
            19515, 38465, 27008, 20646, 30022, 137069, 39386,
            21107, null, 37209, 38529, 37212, null, 37201,
            167575, 25471, 159011, 27338, 22033, 37262, 30074,
            25221, 132092, 29519, 31856, 154657, 146685, null,
            149785, 30422, 39837, 20010, 134356, 33726, 34882,
            null, 23626, 27072, 20717, 22394, 21023, 24053,
            20174, 27697, 131570, 20281, 21660, 21722, 21146,
            36226, 13822, 24332, 13811, null, 27474, 37244,
            40869, 39831, 38958, 39092, 39610, 40616, 40580,
            29050, 31508, null, 27642, 34840, 32632, null,
            22048, 173642, 36471, 40787, null, 36308, 36431,
            40476, 36353, 25218, 164733, 36392, 36469, 31443,
            150135, 31294, 30936, 27882, 35431, 30215, 166490,
            40742, 27854, 34774, 30147, 172722, 30803, 194624,
            36108, 29410, 29553, 35629, 29442, 29937, 36075,
            150203, 34351, 24506, 34976, 17591, null, 137275,
            159237, null, 35454, 140571, null, 24829, 30311,
            39639, 40260, 37742, 39823, 34805, null, 34831,
            36087, 29484, 38689, 39856, 13782, 29362, 19463,
            31825, 39242, 155993, 24921, 19460, 40598, 24957,
            null, 22367, 24943, 25254, 25145, 25294, 14940,
            25058, 21418, 144373, 25444, 26626, 13778, 23895,
            166850, 36826, 167481, null, 20697, 138566, 30982,
            21298, 38456, 134971, 16485, null, 30718, null,
            31938, 155418, 31962, 31277, 32870, 32867, 32077,
            29957, 29938, 35220, 33306, 26380, 32866, 160902,
            32859, 29936, 33027, 30500, 35209, 157644, 30035,
            159441, 34729, 34766, 33224, 34700, 35401, 36013,
            35651, 30507, 29944, 34010, 13877, 27058, 36262,
            null, 35241, 29800, 28089, 34753, 147473, 29927,
            15835, 29046, 24740, 24988, 15569, 29026, 24695,
            null, 32625, 166701, 29264, 24809, 19326, 21024,
            15384, 146631, 155351, 161366, 152881, 137540,
            135934, 170243, 159196, 159917, 23745, 156077,
            166415, 145015, 131310, 157766, 151310, 17762,
            23327, 156492, 40784, 40614, 156267, 12288, 65292,
            12289, 12290, 65294, 8231, 65307, 65306, 65311,
            65281, 65072, 8230, 8229, 65104, 65105, 65106, 183,
            65108, 65109, 65110, 65111, 65372, 8211, 65073,
            8212, 65075, 9588, 65076, 65103, 65288, 65289,
            65077, 65078, 65371, 65373, 65079, 65080, 12308,
            12309, 65081, 65082, 12304, 12305, 65083, 65084,
            12298, 12299, 65085, 65086, 12296, 12297, 65087,
            65088, 12300, 12301, 65089, 65090, 12302, 12303,
            65091, 65092, 65113, 65114, 65115, 65116, 65117,
            65118, 8216, 8217, 8220, 8221, 12317, 12318, 8245,
            8242, 65283, 65286, 65290, 8251, 167, 12291, 9675,
            9679, 9651, 9650, 9678, 9734, 9733, 9671, 9670,
            9633, 9632, 9661, 9660, 12963, 8453, 175, 65507,
            65343, 717, 65097, 65098, 65101, 65102, 65099,
            65100, 65119, 65120, 65121, 65291, 65293, 215, 247,
            177, 8730, 65308, 65310, 65309, 8806, 8807, 8800,
            8734, 8786, 8801, 65122, 65123, 65124, 65125, 65126,
            65374, 8745, 8746, 8869, 8736, 8735, 8895, 13266,
            13265, 8747, 8750, 8757, 8756, 9792, 9794, 8853,
            8857, 8593, 8595, 8592, 8594, 8598, 8599, 8601,
            8600, 8741, 8739, 65295, 65340, 8725, 65128, 65284,
            65509, 12306, 65504, 65505, 65285, 65312, 8451,
            8457, 65129, 65130, 65131, 13269, 13212, 13213,
            13214, 13262, 13217, 13198, 13199, 13252, 176,
            20825, 20827, 20830, 20829, 20833, 20835, 21991,
            29929, 31950, 9601, 9602, 9603, 9604, 9605, 9606,
            9607, 9608, 9615, 9614, 9613, 9612, 9611, 9610,
            9609, 9532, 9524, 9516, 9508, 9500, 9620, 9472,
            9474, 9621, 9484, 9488, 9492, 9496, 9581, 9582,
            9584, 9583, 9552, 9566, 9578, 9569, 9698, 9699,
            9701, 9700, 9585, 9586, 9587, 65296, 65297, 65298,
            65299, 65300, 65301, 65302, 65303, 65304, 65305,
            8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551,
            8552, 8553, 12321, 12322, 12323, 12324, 12325,
            12326, 12327, 12328, 12329, 21313, 21316, 21317,
            65313, 65314, 65315, 65316, 65317, 65318, 65319,
            65320, 65321, 65322, 65323, 65324, 65325, 65326,
            65327, 65328, 65329, 65330, 65331, 65332, 65333,
            65334, 65335, 65336, 65337, 65338, 65345, 65346,
            65347, 65348, 65349, 65350, 65351, 65352, 65353,
            65354, 65355, 65356, 65357, 65358, 65359, 65360,
            65361, 65362, 65363, 65364, 65365, 65366, 65367,
            65368, 65369, 65370, 913, 914, 915, 916, 917, 918,
            919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
            929, 931, 932, 933, 934, 935, 936, 937, 945, 946,
            947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
            957, 958, 959, 960, 961, 963, 964, 965, 966, 967,
            968, 969, 12549, 12550, 12551, 12552, 12553, 12554,
            12555, 12556, 12557, 12558, 12559, 12560, 12561,
            12562, 12563, 12564, 12565, 12566, 12567, 12568,
            12569, 12570, 12571, 12572, 12573, 12574, 12575,
            12576, 12577, 12578, 12579, 12580, 12581, 12582,
            12583, 12584, 12585, 729, 713, 714, 711, 715, 9216,
            9217, 9218, 9219, 9220, 9221, 9222, 9223, 9224,
            9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232,
            9233, 9234, 9235, 9236, 9237, 9238, 9239, 9240,
            9241, 9242, 9243, 9244, 9245, 9246, 9247, 9249,
            8364, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 19968, 20057,
            19969, 19971, 20035, 20061, 20102, 20108, 20154,
            20799, 20837, 20843, 20960, 20992, 20993, 21147,
            21269, 21313, 21340, 21448, 19977, 19979, 19976,
            19978, 20011, 20024, 20961, 20037, 20040, 20063,
            20062, 20110, 20129, 20800, 20995, 21242, 21315,
            21449, 21475, 22303, 22763, 22805, 22823, 22899,
            23376, 23377, 23379, 23544, 23567, 23586, 23608,
            23665, 24029, 24037, 24049, 24050, 24051, 24062,
            24178, 24318, 24331, 24339, 25165, 19985, 19984,
            19981, 20013, 20016, 20025, 20043, 23609, 20104,
            20113, 20117, 20114, 20116, 20130, 20161, 20160,
            20163, 20166, 20167, 20173, 20170, 20171, 20164,
            20803, 20801, 20839, 20845, 20846, 20844, 20887,
            20982, 20998, 20999, 21000, 21243, 21246, 21247,
            21270, 21305, 21320, 21319, 21317, 21342, 21380,
            21451, 21450, 21453, 22764, 22825, 22827, 22826,
            22829, 23380, 23569, 23588, 23610, 23663, 24052,
            24187, 24319, 24340, 24341, 24515, 25096, 25142,
            25163, 25166, 25903, 25991, 26007, 26020, 26041,
            26085, 26352, 26376, 26408, 27424, 27490, 27513,
            27595, 27604, 27611, 27663, 27700, 28779, 29226,
            29238, 29243, 29255, 29273, 29275, 29356, 29579,
            19993, 19990, 19989, 19988, 19992, 20027, 20045,
            20047, 20046, 20197, 20184, 20180, 20181, 20182,
            20183, 20195, 20196, 20185, 20190, 20805, 20804,
            20873, 20874, 20908, 20985, 20986, 20984, 21002,
            21152, 21151, 21253, 21254, 21271, 21277, 20191,
            21322, 21321, 21345, 21344, 21359, 21358, 21435,
            21487, 21476, 21491, 21484, 21486, 21481, 21480,
            21500, 21496, 21493, 21483, 21478, 21482, 21490,
            21489, 21488, 21477, 21485, 21499, 22235, 22234,
            22806, 22830, 22833, 22900, 22902, 23381, 23427,
            23612, 24040, 24039, 24038, 24066, 24067, 24179,
            24188, 24321, 24344, 24343, 24517, 25098, 25171,
            25172, 25170, 25169, 26021, 26086, 26414, 26412,
            26410, 26411, 26413, 27491, 27597, 27665, 27664,
            27704, 27713, 27712, 27710, 29359, 29572, 29577,
            29916, 29926, 29976, 29983, 29992, 29993, 30000,
            30001, 30002, 30003, 30091, 30333, 30382, 30399,
            30446, 30683, 30690, 30707, 31034, 31166, 31348,
            31435, 19998, 19999, 20050, 20051, 20073, 20121,
            20132, 20134, 20133, 20223, 20233, 20249, 20234,
            20245, 20237, 20240, 20241, 20239, 20210, 20214,
            20219, 20208, 20211, 20221, 20225, 20235, 20809,
            20807, 20806, 20808, 20840, 20849, 20877, 20912,
            21015, 21009, 21010, 21006, 21014, 21155, 21256,
            21281, 21280, 21360, 21361, 21513, 21519, 21516,
            21514, 21520, 21505, 21515, 21508, 21521, 21517,
            21512, 21507, 21518, 21510, 21522, 22240, 22238,
            22237, 22323, 22320, 22312, 22317, 22316, 22319,
            22313, 22809, 22810, 22839, 22840, 22916, 22904,
            22915, 22909, 22905, 22914, 22913, 23383, 23384,
            23431, 23432, 23429, 23433, 23546, 23574, 23673,
            24030, 24070, 24182, 24180, 24335, 24347, 24537,
            24534, 25102, 25100, 25101, 25104, 25187, 25179,
            25176, 25910, 26089, 26088, 26092, 26093, 26354,
            26355, 26377, 26429, 26420, 26417, 26421, 27425,
            27492, 27515, 27670, 27741, 27735, 27737, 27743,
            27744, 27728, 27733, 27745, 27739, 27725, 27726,
            28784, 29279, 29277, 30334, 31481, 31859, 31992,
            32566, 32650, 32701, 32769, 32771, 32780, 32786,
            32819, 32895, 32905, 32907, 32908, 33251, 33258,
            33267, 33276, 33292, 33307, 33311, 33390, 33394,
            33406, 34411, 34880, 34892, 34915, 35199, 38433,
            20018, 20136, 20301, 20303, 20295, 20311, 20318,
            20276, 20315, 20309, 20272, 20304, 20305, 20285,
            20282, 20280, 20291, 20308, 20284, 20294, 20323,
            20316, 20320, 20271, 20302, 20278, 20313, 20317,
            20296, 20314, 20812, 20811, 20813, 20853, 20918,
            20919, 21029, 21028, 21033, 21034, 21032, 21163,
            21161, 21162, 21164, 21283, 21363, 21365, 21533,
            21549, 21534, 21566, 21542, 21582, 21543, 21574,
            21571, 21555, 21576, 21570, 21531, 21545, 21578,
            21561, 21563, 21560, 21550, 21557, 21558, 21536,
            21564, 21568, 21553, 21547, 21535, 21548, 22250,
            22256, 22244, 22251, 22346, 22353, 22336, 22349,
            22343, 22350, 22334, 22352, 22351, 22331, 22767,
            22846, 22941, 22930, 22952, 22942, 22947, 22937,
            22934, 22925, 22948, 22931, 22922, 22949, 23389,
            23388, 23386, 23387, 23436, 23435, 23439, 23596,
            23616, 23617, 23615, 23614, 23696, 23697, 23700,
            23692, 24043, 24076, 24207, 24199, 24202, 24311,
            24324, 24351, 24420, 24418, 24439, 24441, 24536,
            24524, 24535, 24525, 24561, 24555, 24568, 24554,
            25106, 25105, 25220, 25239, 25238, 25216, 25206,
            25225, 25197, 25226, 25212, 25214, 25209, 25203,
            25234, 25199, 25240, 25198, 25237, 25235, 25233,
            25222, 25913, 25915, 25912, 26097, 26356, 26463,
            26446, 26447, 26448, 26449, 26460, 26454, 26462,
            26441, 26438, 26464, 26451, 26455, 27493, 27599,
            27714, 27742, 27801, 27777, 27784, 27785, 27781,
            27803, 27754, 27770, 27792, 27760, 27788, 27752,
            27798, 27794, 27773, 27779, 27762, 27774, 27764,
            27782, 27766, 27789, 27796, 27800, 27778, 28790,
            28796, 28797, 28792, 29282, 29281, 29280, 29380,
            29378, 29590, 29996, 29995, 30007, 30008, 30338,
            30447, 30691, 31169, 31168, 31167, 31350, 31995,
            32597, 32918, 32915, 32925, 32920, 32923, 32922,
            32946, 33391, 33426, 33419, 33421, 35211, 35282,
            35328, 35895, 35910, 35925, 35997, 36196, 36208,
            36275, 36523, 36554, 36763, 36784, 36802, 36806,
            36805, 36804, 24033, 37009, 37026, 37034, 37030,
            37027, 37193, 37318, 37324, 38450, 38446, 38449,
            38442, 38444, 20006, 20054, 20083, 20107, 20123,
            20126, 20139, 20140, 20335, 20381, 20365, 20339,
            20351, 20332, 20379, 20363, 20358, 20355, 20336,
            20341, 20360, 20329, 20347, 20374, 20350, 20367,
            20369, 20346, 20820, 20818, 20821, 20841, 20855,
            20854, 20856, 20925, 20989, 21051, 21048, 21047,
            21050, 21040, 21038, 21046, 21057, 21182, 21179,
            21330, 21332, 21331, 21329, 21350, 21367, 21368,
            21369, 21462, 21460, 21463, 21619, 21621, 21654,
            21624, 21653, 21632, 21627, 21623, 21636, 21650,
            21638, 21628, 21648, 21617, 21622, 21644, 21658,
            21602, 21608, 21643, 21629, 21646, 22266, 22403,
            22391, 22378, 22377, 22369, 22374, 22372, 22396,
            22812, 22857, 22855, 22856, 22852, 22868, 22974,
            22971, 22996, 22969, 22958, 22993, 22982, 22992,
            22989, 22987, 22995, 22986, 22959, 22963, 22994,
            22981, 23391, 23396, 23395, 23447, 23450, 23448,
            23452, 23449, 23451, 23578, 23624, 23621, 23622,
            23735, 23713, 23736, 23721, 23723, 23729, 23731,
            24088, 24090, 24086, 24085, 24091, 24081, 24184,
            24218, 24215, 24220, 24213, 24214, 24310, 24358,
            24359, 24361, 24448, 24449, 24447, 24444, 24541,
            24544, 24573, 24565, 24575, 24591, 24596, 24623,
            24629, 24598, 24618, 24597, 24609, 24615, 24617,
            24619, 24603, 25110, 25109, 25151, 25150, 25152,
            25215, 25289, 25292, 25284, 25279, 25282, 25273,
            25298, 25307, 25259, 25299, 25300, 25291, 25288,
            25256, 25277, 25276, 25296, 25305, 25287, 25293,
            25269, 25306, 25265, 25304, 25302, 25303, 25286,
            25260, 25294, 25918, 26023, 26044, 26106, 26132,
            26131, 26124, 26118, 26114, 26126, 26112, 26127,
            26133, 26122, 26119, 26381, 26379, 26477, 26507,
            26517, 26481, 26524, 26483, 26487, 26503, 26525,
            26519, 26479, 26480, 26495, 26505, 26494, 26512,
            26485, 26522, 26515, 26492, 26474, 26482, 27427,
            27494, 27495, 27519, 27667, 27675, 27875, 27880,
            27891, 27825, 27852, 27877, 27827, 27837, 27838,
            27836, 27874, 27819, 27861, 27859, 27832, 27844,
            27833, 27841, 27822, 27863, 27845, 27889, 27839,
            27835, 27873, 27867, 27850, 27820, 27887, 27868,
            27862, 27872, 28821, 28814, 28818, 28810, 28825,
            29228, 29229, 29240, 29256, 29287, 29289, 29376,
            29390, 29401, 29399, 29392, 29609, 29608, 29599,
            29611, 29605, 30013, 30109, 30105, 30106, 30340,
            30402, 30450, 30452, 30693, 30717, 31038, 31040,
            31041, 31177, 31176, 31354, 31353, 31482, 31998,
            32596, 32652, 32651, 32773, 32954, 32933, 32930,
            32945, 32929, 32939, 32937, 32948, 32938, 32943,
            33253, 33278, 33293, 33459, 33437, 33433, 33453,
            33469, 33439, 33465, 33457, 33452, 33445, 33455,
            33464, 33443, 33456, 33470, 33463, 34382, 34417,
            21021, 34920, 36555, 36814, 36820, 36817, 37045,
            37048, 37041, 37046, 37319, 37329, 38263, 38272,
            38428, 38464, 38463, 38459, 38468, 38466, 38585,
            38632, 38738, 38750, 20127, 20141, 20142, 20449,
            20405, 20399, 20415, 20448, 20433, 20431, 20445,
            20419, 20406, 20440, 20447, 20426, 20439, 20398,
            20432, 20420, 20418, 20442, 20430, 20446, 20407,
            20823, 20882, 20881, 20896, 21070, 21059, 21066,
            21069, 21068, 21067, 21063, 21191, 21193, 21187,
            21185, 21261, 21335, 21371, 21402, 21467, 21676,
            21696, 21672, 21710, 21705, 21688, 21670, 21683,
            21703, 21698, 21693, 21674, 21697, 21700, 21704,
            21679, 21675, 21681, 21691, 21673, 21671, 21695,
            22271, 22402, 22411, 22432, 22435, 22434, 22478,
            22446, 22419, 22869, 22865, 22863, 22862, 22864,
            23004, 23000, 23039, 23011, 23016, 23043, 23013,
            23018, 23002, 23014, 23041, 23035, 23401, 23459,
            23462, 23460, 23458, 23461, 23553, 23630, 23631,
            23629, 23627, 23769, 23762, 24055, 24093, 24101,
            24095, 24189, 24224, 24230, 24314, 24328, 24365,
            24421, 24456, 24453, 24458, 24459, 24455, 24460,
            24457, 24594, 24605, 24608, 24613, 24590, 24616,
            24653, 24688, 24680, 24674, 24646, 24643, 24684,
            24683, 24682, 24676, 25153, 25308, 25366, 25353,
            25340, 25325, 25345, 25326, 25341, 25351, 25329,
            25335, 25327, 25324, 25342, 25332, 25361, 25346,
            25919, 25925, 26027, 26045, 26082, 26149, 26157,
            26144, 26151, 26159, 26143, 26152, 26161, 26148,
            26359, 26623, 26579, 26609, 26580, 26576, 26604,
            26550, 26543, 26613, 26601, 26607, 26564, 26577,
            26548, 26586, 26597, 26552, 26575, 26590, 26611,
            26544, 26585, 26594, 26589, 26578, 27498, 27523,
            27526, 27573, 27602, 27607, 27679, 27849, 27915,
            27954, 27946, 27969, 27941, 27916, 27953, 27934,
            27927, 27963, 27965, 27966, 27958, 27931, 27893,
            27961, 27943, 27960, 27945, 27950, 27957, 27918,
            27947, 28843, 28858, 28851, 28844, 28847, 28845,
            28856, 28846, 28836, 29232, 29298, 29295, 29300,
            29417, 29408, 29409, 29623, 29642, 29627, 29618,
            29645, 29632, 29619, 29978, 29997, 30031, 30028,
            30030, 30027, 30123, 30116, 30117, 30114, 30115,
            30328, 30342, 30343, 30344, 30408, 30406, 30403,
            30405, 30465, 30457, 30456, 30473, 30475, 30462,
            30460, 30471, 30684, 30722, 30740, 30732, 30733,
            31046, 31049, 31048, 31047, 31161, 31162, 31185,
            31186, 31179, 31359, 31361, 31487, 31485, 31869,
            32002, 32005, 32000, 32009, 32007, 32004, 32006,
            32568, 32654, 32703, 32772, 32784, 32781, 32785,
            32822, 32982, 32997, 32986, 32963, 32964, 32972,
            32993, 32987, 32974, 32990, 32996, 32989, 33268,
            33314, 33511, 33539, 33541, 33507, 33499, 33510,
            33540, 33509, 33538, 33545, 33490, 33495, 33521,
            33537, 33500, 33492, 33489, 33502, 33491, 33503,
            33519, 33542, 34384, 34425, 34427, 34426, 34893,
            34923, 35201, 35284, 35336, 35330, 35331, 35998,
            36000, 36212, 36211, 36276, 36557, 36556, 36848,
            36838, 36834, 36842, 36837, 36845, 36843, 36836,
            36840, 37066, 37070, 37057, 37059, 37195, 37194,
            37325, 38274, 38480, 38475, 38476, 38477, 38754,
            38761, 38859, 38893, 38899, 38913, 39080, 39131,
            39135, 39318, 39321, 20056, 20147, 20492, 20493,
            20515, 20463, 20518, 20517, 20472, 20521, 20502,
            20486, 20540, 20511, 20506, 20498, 20497, 20474,
            20480, 20500, 20520, 20465, 20513, 20491, 20505,
            20504, 20467, 20462, 20525, 20522, 20478, 20523,
            20489, 20860, 20900, 20901, 20898, 20941, 20940,
            20934, 20939, 21078, 21084, 21076, 21083, 21085,
            21290, 21375, 21407, 21405, 21471, 21736, 21776,
            21761, 21815, 21756, 21733, 21746, 21766, 21754,
            21780, 21737, 21741, 21729, 21769, 21742, 21738,
            21734, 21799, 21767, 21757, 21775, 22275, 22276,
            22466, 22484, 22475, 22467, 22537, 22799, 22871,
            22872, 22874, 23057, 23064, 23068, 23071, 23067,
            23059, 23020, 23072, 23075, 23081, 23077, 23052,
            23049, 23403, 23640, 23472, 23475, 23478, 23476,
            23470, 23477, 23481, 23480, 23556, 23633, 23637,
            23632, 23789, 23805, 23803, 23786, 23784, 23792,
            23798, 23809, 23796, 24046, 24109, 24107, 24235,
            24237, 24231, 24369, 24466, 24465, 24464, 24665,
            24675, 24677, 24656, 24661, 24685, 24681, 24687,
            24708, 24735, 24730, 24717, 24724, 24716, 24709,
            24726, 25159, 25331, 25352, 25343, 25422, 25406,
            25391, 25429, 25410, 25414, 25423, 25417, 25402,
            25424, 25405, 25386, 25387, 25384, 25421, 25420,
            25928, 25929, 26009, 26049, 26053, 26178, 26185,
            26191, 26179, 26194, 26188, 26181, 26177, 26360,
            26388, 26389, 26391, 26657, 26680, 26696, 26694,
            26707, 26681, 26690, 26708, 26665, 26803, 26647,
            26700, 26705, 26685, 26612, 26704, 26688, 26684,
            26691, 26666, 26693, 26643, 26648, 26689, 27530,
            27529, 27575, 27683, 27687, 27688, 27686, 27684,
            27888, 28010, 28053, 28040, 28039, 28006, 28024,
            28023, 27993, 28051, 28012, 28041, 28014, 27994,
            28020, 28009, 28044, 28042, 28025, 28037, 28005,
            28052, 28874, 28888, 28900, 28889, 28872, 28879,
            29241, 29305, 29436, 29433, 29437, 29432, 29431,
            29574, 29677, 29705, 29678, 29664, 29674, 29662,
            30036, 30045, 30044, 30042, 30041, 30142, 30149,
            30151, 30130, 30131, 30141, 30140, 30137, 30146,
            30136, 30347, 30384, 30410, 30413, 30414, 30505,
            30495, 30496, 30504, 30697, 30768, 30759, 30776,
            30749, 30772, 30775, 30757, 30765, 30752, 30751,
            30770, 31061, 31056, 31072, 31071, 31062, 31070,
            31069, 31063, 31066, 31204, 31203, 31207, 31199,
            31206, 31209, 31192, 31364, 31368, 31449, 31494,
            31505, 31881, 32033, 32023, 32011, 32010, 32032,
            32034, 32020, 32016, 32021, 32026, 32028, 32013,
            32025, 32027, 32570, 32607, 32660, 32709, 32705,
            32774, 32792, 32789, 32793, 32791, 32829, 32831,
            33009, 33026, 33008, 33029, 33005, 33012, 33030,
            33016, 33011, 33032, 33021, 33034, 33020, 33007,
            33261, 33260, 33280, 33296, 33322, 33323, 33320,
            33324, 33467, 33579, 33618, 33620, 33610, 33592,
            33616, 33609, 33589, 33588, 33615, 33586, 33593,
            33590, 33559, 33600, 33585, 33576, 33603, 34388,
            34442, 34474, 34451, 34468, 34473, 34444, 34467,
            34460, 34928, 34935, 34945, 34946, 34941, 34937,
            35352, 35344, 35342, 35340, 35349, 35338, 35351,
            35347, 35350, 35343, 35345, 35912, 35962, 35961,
            36001, 36002, 36215, 36524, 36562, 36564, 36559,
            36785, 36865, 36870, 36855, 36864, 36858, 36852,
            36867, 36861, 36869, 36856, 37013, 37089, 37085,
            37090, 37202, 37197, 37196, 37336, 37341, 37335,
            37340, 37337, 38275, 38498, 38499, 38497, 38491,
            38493, 38500, 38488, 38494, 38587, 39138, 39340,
            39592, 39640, 39717, 39730, 39740, 20094, 20602,
            20605, 20572, 20551, 20547, 20556, 20570, 20553,
            20581, 20598, 20558, 20565, 20597, 20596, 20599,
            20559, 20495, 20591, 20589, 20828, 20885, 20976,
            21098, 21103, 21202, 21209, 21208, 21205, 21264,
            21263, 21273, 21311, 21312, 21310, 21443, 26364,
            21830, 21866, 21862, 21828, 21854, 21857, 21827,
            21834, 21809, 21846, 21839, 21845, 21807, 21860,
            21816, 21806, 21852, 21804, 21859, 21811, 21825,
            21847, 22280, 22283, 22281, 22495, 22533, 22538,
            22534, 22496, 22500, 22522, 22530, 22581, 22519,
            22521, 22816, 22882, 23094, 23105, 23113, 23142,
            23146, 23104, 23100, 23138, 23130, 23110, 23114,
            23408, 23495, 23493, 23492, 23490, 23487, 23494,
            23561, 23560, 23559, 23648, 23644, 23645, 23815,
            23814, 23822, 23835, 23830, 23842, 23825, 23849,
            23828, 23833, 23844, 23847, 23831, 24034, 24120,
            24118, 24115, 24119, 24247, 24248, 24246, 24245,
            24254, 24373, 24375, 24407, 24428, 24425, 24427,
            24471, 24473, 24478, 24472, 24481, 24480, 24476,
            24703, 24739, 24713, 24736, 24744, 24779, 24756,
            24806, 24765, 24773, 24763, 24757, 24796, 24764,
            24792, 24789, 24774, 24799, 24760, 24794, 24775,
            25114, 25115, 25160, 25504, 25511, 25458, 25494,
            25506, 25509, 25463, 25447, 25496, 25514, 25457,
            25513, 25481, 25475, 25499, 25451, 25512, 25476,
            25480, 25497, 25505, 25516, 25490, 25487, 25472,
            25467, 25449, 25448, 25466, 25949, 25942, 25937,
            25945, 25943, 21855, 25935, 25944, 25941, 25940,
            26012, 26011, 26028, 26063, 26059, 26060, 26062,
            26205, 26202, 26212, 26216, 26214, 26206, 26361,
            21207, 26395, 26753, 26799, 26786, 26771, 26805,
            26751, 26742, 26801, 26791, 26775, 26800, 26755,
            26820, 26797, 26758, 26757, 26772, 26781, 26792,
            26783, 26785, 26754, 27442, 27578, 27627, 27628,
            27691, 28046, 28092, 28147, 28121, 28082, 28129,
            28108, 28132, 28155, 28154, 28165, 28103, 28107,
            28079, 28113, 28078, 28126, 28153, 28088, 28151,
            28149, 28101, 28114, 28186, 28085, 28122, 28139,
            28120, 28138, 28145, 28142, 28136, 28102, 28100,
            28074, 28140, 28095, 28134, 28921, 28937, 28938,
            28925, 28911, 29245, 29309, 29313, 29468, 29467,
            29462, 29459, 29465, 29575, 29701, 29706, 29699,
            29702, 29694, 29709, 29920, 29942, 29943, 29980,
            29986, 30053, 30054, 30050, 30064, 30095, 30164,
            30165, 30133, 30154, 30157, 30350, 30420, 30418,
            30427, 30519, 30526, 30524, 30518, 30520, 30522,
            30827, 30787, 30798, 31077, 31080, 31085, 31227,
            31378, 31381, 31520, 31528, 31515, 31532, 31526,
            31513, 31518, 31534, 31890, 31895, 31893, 32070,
            32067, 32113, 32046, 32057, 32060, 32064, 32048,
            32051, 32068, 32047, 32066, 32050, 32049, 32573,
            32670, 32666, 32716, 32718, 32722, 32796, 32842,
            32838, 33071, 33046, 33059, 33067, 33065, 33072,
            33060, 33282, 33333, 33335, 33334, 33337, 33678,
            33694, 33688, 33656, 33698, 33686, 33725, 33707,
            33682, 33674, 33683, 33673, 33696, 33655, 33659,
            33660, 33670, 33703, 34389, 24426, 34503, 34496,
            34486, 34500, 34485, 34502, 34507, 34481, 34479,
            34505, 34899, 34974, 34952, 34987, 34962, 34966,
            34957, 34955, 35219, 35215, 35370, 35357, 35363,
            35365, 35377, 35373, 35359, 35355, 35362, 35913,
            35930, 36009, 36012, 36011, 36008, 36010, 36007,
            36199, 36198, 36286, 36282, 36571, 36575, 36889,
            36877, 36890, 36887, 36899, 36895, 36893, 36880,
            36885, 36894, 36896, 36879, 36898, 36886, 36891,
            36884, 37096, 37101, 37117, 37207, 37326, 37365,
            37350, 37347, 37351, 37357, 37353, 38281, 38506,
            38517, 38515, 38520, 38512, 38516, 38518, 38519,
            38508, 38592, 38634, 38633, 31456, 31455, 38914,
            38915, 39770, 40165, 40565, 40575, 40613, 40635,
            20642, 20621, 20613, 20633, 20625, 20608, 20630,
            20632, 20634, 26368, 20977, 21106, 21108, 21109,
            21097, 21214, 21213, 21211, 21338, 21413, 21883,
            21888, 21927, 21884, 21898, 21917, 21912, 21890,
            21916, 21930, 21908, 21895, 21899, 21891, 21939,
            21934, 21919, 21822, 21938, 21914, 21947, 21932,
            21937, 21886, 21897, 21931, 21913, 22285, 22575,
            22570, 22580, 22564, 22576, 22577, 22561, 22557,
            22560, 22777, 22778, 22880, 23159, 23194, 23167,
            23186, 23195, 23207, 23411, 23409, 23506, 23500,
            23507, 23504, 23562, 23563, 23601, 23884, 23888,
            23860, 23879, 24061, 24133, 24125, 24128, 24131,
            24190, 24266, 24257, 24258, 24260, 24380, 24429,
            24489, 24490, 24488, 24785, 24801, 24754, 24758,
            24800, 24860, 24867, 24826, 24853, 24816, 24827,
            24820, 24936, 24817, 24846, 24822, 24841, 24832,
            24850, 25119, 25161, 25507, 25484, 25551, 25536,
            25577, 25545, 25542, 25549, 25554, 25571, 25552,
            25569, 25558, 25581, 25582, 25462, 25588, 25578,
            25563, 25682, 25562, 25593, 25950, 25958, 25954,
            25955, 26001, 26000, 26031, 26222, 26224, 26228,
            26230, 26223, 26257, 26234, 26238, 26231, 26366,
            26367, 26399, 26397, 26874, 26837, 26848, 26840,
            26839, 26885, 26847, 26869, 26862, 26855, 26873,
            26834, 26866, 26851, 26827, 26829, 26893, 26898,
            26894, 26825, 26842, 26990, 26875, 27454, 27450,
            27453, 27544, 27542, 27580, 27631, 27694, 27695,
            27692, 28207, 28216, 28244, 28193, 28210, 28263,
            28234, 28192, 28197, 28195, 28187, 28251, 28248,
            28196, 28246, 28270, 28205, 28198, 28271, 28212,
            28237, 28218, 28204, 28227, 28189, 28222, 28363,
            28297, 28185, 28238, 28259, 28228, 28274, 28265,
            28255, 28953, 28954, 28966, 28976, 28961, 28982,
            29038, 28956, 29260, 29316, 29312, 29494, 29477,
            29492, 29481, 29754, 29738, 29747, 29730, 29733,
            29749, 29750, 29748, 29743, 29723, 29734, 29736,
            29989, 29990, 30059, 30058, 30178, 30171, 30179,
            30169, 30168, 30174, 30176, 30331, 30332, 30358,
            30355, 30388, 30428, 30543, 30701, 30813, 30828,
            30831, 31245, 31240, 31243, 31237, 31232, 31384,
            31383, 31382, 31461, 31459, 31561, 31574, 31558,
            31568, 31570, 31572, 31565, 31563, 31567, 31569,
            31903, 31909, 32094, 32080, 32104, 32085, 32043,
            32110, 32114, 32097, 32102, 32098, 32112, 32115,
            21892, 32724, 32725, 32779, 32850, 32901, 33109,
            33108, 33099, 33105, 33102, 33081, 33094, 33086,
            33100, 33107, 33140, 33298, 33308, 33769, 33795,
            33784, 33805, 33760, 33733, 33803, 33729, 33775,
            33777, 33780, 33879, 33802, 33776, 33804, 33740,
            33789, 33778, 33738, 33848, 33806, 33796, 33756,
            33799, 33748, 33759, 34395, 34527, 34521, 34541,
            34516, 34523, 34532, 34512, 34526, 34903, 35009,
            35010, 34993, 35203, 35222, 35387, 35424, 35413,
            35422, 35388, 35393, 35412, 35419, 35408, 35398,
            35380, 35386, 35382, 35414, 35937, 35970, 36015,
            36028, 36019, 36029, 36033, 36027, 36032, 36020,
            36023, 36022, 36031, 36024, 36234, 36229, 36225,
            36302, 36317, 36299, 36314, 36305, 36300, 36315,
            36294, 36603, 36600, 36604, 36764, 36910, 36917,
            36913, 36920, 36914, 36918, 37122, 37109, 37129,
            37118, 37219, 37221, 37327, 37396, 37397, 37411,
            37385, 37406, 37389, 37392, 37383, 37393, 38292,
            38287, 38283, 38289, 38291, 38290, 38286, 38538,
            38542, 38539, 38525, 38533, 38534, 38541, 38514,
            38532, 38593, 38597, 38596, 38598, 38599, 38639,
            38642, 38860, 38917, 38918, 38920, 39143, 39146,
            39151, 39145, 39154, 39149, 39342, 39341, 40643,
            40653, 40657, 20098, 20653, 20661, 20658, 20659,
            20677, 20670, 20652, 20663, 20667, 20655, 20679,
            21119, 21111, 21117, 21215, 21222, 21220, 21218,
            21219, 21295, 21983, 21992, 21971, 21990, 21966,
            21980, 21959, 21969, 21987, 21988, 21999, 21978,
            21985, 21957, 21958, 21989, 21961, 22290, 22291,
            22622, 22609, 22616, 22615, 22618, 22612, 22635,
            22604, 22637, 22602, 22626, 22610, 22603, 22887,
            23233, 23241, 23244, 23230, 23229, 23228, 23219,
            23234, 23218, 23913, 23919, 24140, 24185, 24265,
            24264, 24338, 24409, 24492, 24494, 24858, 24847,
            24904, 24863, 24819, 24859, 24825, 24833, 24840,
            24910, 24908, 24900, 24909, 24894, 24884, 24871,
            24845, 24838, 24887, 25121, 25122, 25619, 25662,
            25630, 25642, 25645, 25661, 25644, 25615, 25628,
            25620, 25613, 25654, 25622, 25623, 25606, 25964,
            26015, 26032, 26263, 26249, 26247, 26248, 26262,
            26244, 26264, 26253, 26371, 27028, 26989, 26970,
            26999, 26976, 26964, 26997, 26928, 27010, 26954,
            26984, 26987, 26974, 26963, 27001, 27014, 26973,
            26979, 26971, 27463, 27506, 27584, 27583, 27603,
            27645, 28322, 28335, 28371, 28342, 28354, 28304,
            28317, 28359, 28357, 28325, 28312, 28348, 28346,
            28331, 28369, 28310, 28316, 28356, 28372, 28330,
            28327, 28340, 29006, 29017, 29033, 29028, 29001,
            29031, 29020, 29036, 29030, 29004, 29029, 29022,
            28998, 29032, 29014, 29242, 29266, 29495, 29509,
            29503, 29502, 29807, 29786, 29781, 29791, 29790,
            29761, 29759, 29785, 29787, 29788, 30070, 30072,
            30208, 30192, 30209, 30194, 30193, 30202, 30207,
            30196, 30195, 30430, 30431, 30555, 30571, 30566,
            30558, 30563, 30585, 30570, 30572, 30556, 30565,
            30568, 30562, 30702, 30862, 30896, 30871, 30872,
            30860, 30857, 30844, 30865, 30867, 30847, 31098,
            31103, 31105, 33836, 31165, 31260, 31258, 31264,
            31252, 31263, 31262, 31391, 31392, 31607, 31680,
            31584, 31598, 31591, 31921, 31923, 31925, 32147,
            32121, 32145, 32129, 32143, 32091, 32622, 32617,
            32618, 32626, 32681, 32680, 32676, 32854, 32856,
            32902, 32900, 33137, 33136, 33144, 33125, 33134,
            33139, 33131, 33145, 33146, 33126, 33285, 33351,
            33922, 33911, 33853, 33841, 33909, 33894, 33899,
            33865, 33900, 33883, 33852, 33845, 33889, 33891,
            33897, 33901, 33862, 34398, 34396, 34399, 34553,
            34579, 34568, 34567, 34560, 34558, 34555, 34562,
            34563, 34566, 34570, 34905, 35039, 35028, 35033,
            35036, 35032, 35037, 35041, 35018, 35029, 35026,
            35228, 35299, 35435, 35442, 35443, 35430, 35433,
            35440, 35463, 35452, 35427, 35488, 35441, 35461,
            35437, 35426, 35438, 35436, 35449, 35451, 35390,
            35432, 35938, 35978, 35977, 36042, 36039, 36040,
            36036, 36018, 36035, 36034, 36037, 36321, 36319,
            36328, 36335, 36339, 36346, 36330, 36324, 36326,
            36530, 36611, 36617, 36606, 36618, 36767, 36786,
            36939, 36938, 36947, 36930, 36948, 36924, 36949,
            36944, 36935, 36943, 36942, 36941, 36945, 36926,
            36929, 37138, 37143, 37228, 37226, 37225, 37321,
            37431, 37463, 37432, 37437, 37440, 37438, 37467,
            37451, 37476, 37457, 37428, 37449, 37453, 37445,
            37433, 37439, 37466, 38296, 38552, 38548, 38549,
            38605, 38603, 38601, 38602, 38647, 38651, 38649,
            38646, 38742, 38772, 38774, 38928, 38929, 38931,
            38922, 38930, 38924, 39164, 39156, 39165, 39166,
            39347, 39345, 39348, 39649, 40169, 40578, 40718,
            40723, 40736, 20711, 20718, 20709, 20694, 20717,
            20698, 20693, 20687, 20689, 20721, 20686, 20713,
            20834, 20979, 21123, 21122, 21297, 21421, 22014,
            22016, 22043, 22039, 22013, 22036, 22022, 22025,
            22029, 22030, 22007, 22038, 22047, 22024, 22032,
            22006, 22296, 22294, 22645, 22654, 22659, 22675,
            22666, 22649, 22661, 22653, 22781, 22821, 22818,
            22820, 22890, 22889, 23265, 23270, 23273, 23255,
            23254, 23256, 23267, 23413, 23518, 23527, 23521,
            23525, 23526, 23528, 23522, 23524, 23519, 23565,
            23650, 23940, 23943, 24155, 24163, 24149, 24151,
            24148, 24275, 24278, 24330, 24390, 24432, 24505,
            24903, 24895, 24907, 24951, 24930, 24931, 24927,
            24922, 24920, 24949, 25130, 25735, 25688, 25684,
            25764, 25720, 25695, 25722, 25681, 25703, 25652,
            25709, 25723, 25970, 26017, 26071, 26070, 26274,
            26280, 26269, 27036, 27048, 27029, 27073, 27054,
            27091, 27083, 27035, 27063, 27067, 27051, 27060,
            27088, 27085, 27053, 27084, 27046, 27075, 27043,
            27465, 27468, 27699, 28467, 28436, 28414, 28435,
            28404, 28457, 28478, 28448, 28460, 28431, 28418,
            28450, 28415, 28399, 28422, 28465, 28472, 28466,
            28451, 28437, 28459, 28463, 28552, 28458, 28396,
            28417, 28402, 28364, 28407, 29076, 29081, 29053,
            29066, 29060, 29074, 29246, 29330, 29334, 29508,
            29520, 29796, 29795, 29802, 29808, 29805, 29956,
            30097, 30247, 30221, 30219, 30217, 30227, 30433,
            30435, 30596, 30589, 30591, 30561, 30913, 30879,
            30887, 30899, 30889, 30883, 31118, 31119, 31117,
            31278, 31281, 31402, 31401, 31469, 31471, 31649,
            31637, 31627, 31605, 31639, 31645, 31636, 31631,
            31672, 31623, 31620, 31929, 31933, 31934, 32187,
            32176, 32156, 32189, 32190, 32160, 32202, 32180,
            32178, 32177, 32186, 32162, 32191, 32181, 32184,
            32173, 32210, 32199, 32172, 32624, 32736, 32737,
            32735, 32862, 32858, 32903, 33104, 33152, 33167,
            33160, 33162, 33151, 33154, 33255, 33274, 33287,
            33300, 33310, 33355, 33993, 33983, 33990, 33988,
            33945, 33950, 33970, 33948, 33995, 33976, 33984,
            34003, 33936, 33980, 34001, 33994, 34623, 34588,
            34619, 34594, 34597, 34612, 34584, 34645, 34615,
            34601, 35059, 35074, 35060, 35065, 35064, 35069,
            35048, 35098, 35055, 35494, 35468, 35486, 35491,
            35469, 35489, 35475, 35492, 35498, 35493, 35496,
            35480, 35473, 35482, 35495, 35946, 35981, 35980,
            36051, 36049, 36050, 36203, 36249, 36245, 36348,
            36628, 36626, 36629, 36627, 36771, 36960, 36952,
            36956, 36963, 36953, 36958, 36962, 36957, 36955,
            37145, 37144, 37150, 37237, 37240, 37239, 37236,
            37496, 37504, 37509, 37528, 37526, 37499, 37523,
            37532, 37544, 37500, 37521, 38305, 38312, 38313,
            38307, 38309, 38308, 38553, 38556, 38555, 38604,
            38610, 38656, 38780, 38789, 38902, 38935, 38936,
            39087, 39089, 39171, 39173, 39180, 39177, 39361,
            39599, 39600, 39654, 39745, 39746, 40180, 40182,
            40179, 40636, 40763, 40778, 20740, 20736, 20731,
            20725, 20729, 20738, 20744, 20745, 20741, 20956,
            21127, 21128, 21129, 21133, 21130, 21232, 21426,
            22062, 22075, 22073, 22066, 22079, 22068, 22057,
            22099, 22094, 22103, 22132, 22070, 22063, 22064,
            22656, 22687, 22686, 22707, 22684, 22702, 22697,
            22694, 22893, 23305, 23291, 23307, 23285, 23308,
            23304, 23534, 23532, 23529, 23531, 23652, 23653,
            23965, 23956, 24162, 24159, 24161, 24290, 24282,
            24287, 24285, 24291, 24288, 24392, 24433, 24503,
            24501, 24950, 24935, 24942, 24925, 24917, 24962,
            24956, 24944, 24939, 24958, 24999, 24976, 25003,
            24974, 25004, 24986, 24996, 24980, 25006, 25134,
            25705, 25711, 25721, 25758, 25778, 25736, 25744,
            25776, 25765, 25747, 25749, 25769, 25746, 25774,
            25773, 25771, 25754, 25772, 25753, 25762, 25779,
            25973, 25975, 25976, 26286, 26283, 26292, 26289,
            27171, 27167, 27112, 27137, 27166, 27161, 27133,
            27169, 27155, 27146, 27123, 27138, 27141, 27117,
            27153, 27472, 27470, 27556, 27589, 27590, 28479,
            28540, 28548, 28497, 28518, 28500, 28550, 28525,
            28507, 28536, 28526, 28558, 28538, 28528, 28516,
            28567, 28504, 28373, 28527, 28512, 28511, 29087,
            29100, 29105, 29096, 29270, 29339, 29518, 29527,
            29801, 29835, 29827, 29822, 29824, 30079, 30240,
            30249, 30239, 30244, 30246, 30241, 30242, 30362,
            30394, 30436, 30606, 30599, 30604, 30609, 30603,
            30923, 30917, 30906, 30922, 30910, 30933, 30908,
            30928, 31295, 31292, 31296, 31293, 31287, 31291,
            31407, 31406, 31661, 31665, 31684, 31668, 31686,
            31687, 31681, 31648, 31692, 31946, 32224, 32244,
            32239, 32251, 32216, 32236, 32221, 32232, 32227,
            32218, 32222, 32233, 32158, 32217, 32242, 32249,
            32629, 32631, 32687, 32745, 32806, 33179, 33180,
            33181, 33184, 33178, 33176, 34071, 34109, 34074,
            34030, 34092, 34093, 34067, 34065, 34083, 34081,
            34068, 34028, 34085, 34047, 34054, 34690, 34676,
            34678, 34656, 34662, 34680, 34664, 34649, 34647,
            34636, 34643, 34907, 34909, 35088, 35079, 35090,
            35091, 35093, 35082, 35516, 35538, 35527, 35524,
            35477, 35531, 35576, 35506, 35529, 35522, 35519,
            35504, 35542, 35533, 35510, 35513, 35547, 35916,
            35918, 35948, 36064, 36062, 36070, 36068, 36076,
            36077, 36066, 36067, 36060, 36074, 36065, 36205,
            36255, 36259, 36395, 36368, 36381, 36386, 36367,
            36393, 36383, 36385, 36382, 36538, 36637, 36635,
            36639, 36649, 36646, 36650, 36636, 36638, 36645,
            36969, 36974, 36968, 36973, 36983, 37168, 37165,
            37159, 37169, 37255, 37257, 37259, 37251, 37573,
            37563, 37559, 37610, 37548, 37604, 37569, 37555,
            37564, 37586, 37575, 37616, 37554, 38317, 38321,
            38660, 38662, 38663, 38665, 38752, 38797, 38795,
            38799, 38945, 38955, 38940, 39091, 39178, 39187,
            39186, 39192, 39389, 39376, 39391, 39387, 39377,
            39381, 39378, 39385, 39607, 39662, 39663, 39719,
            39749, 39748, 39799, 39791, 40198, 40201, 40195,
            40617, 40638, 40654, 22696, 40786, 20754, 20760,
            20756, 20752, 20757, 20864, 20906, 20957, 21137,
            21139, 21235, 22105, 22123, 22137, 22121, 22116,
            22136, 22122, 22120, 22117, 22129, 22127, 22124,
            22114, 22134, 22721, 22718, 22727, 22725, 22894,
            23325, 23348, 23416, 23536, 23566, 24394, 25010,
            24977, 25001, 24970, 25037, 25014, 25022, 25034,
            25032, 25136, 25797, 25793, 25803, 25787, 25788,
            25818, 25796, 25799, 25794, 25805, 25791, 25810,
            25812, 25790, 25972, 26310, 26313, 26297, 26308,
            26311, 26296, 27197, 27192, 27194, 27225, 27243,
            27224, 27193, 27204, 27234, 27233, 27211, 27207,
            27189, 27231, 27208, 27481, 27511, 27653, 28610,
            28593, 28577, 28611, 28580, 28609, 28583, 28595,
            28608, 28601, 28598, 28582, 28576, 28596, 29118,
            29129, 29136, 29138, 29128, 29141, 29113, 29134,
            29145, 29148, 29123, 29124, 29544, 29852, 29859,
            29848, 29855, 29854, 29922, 29964, 29965, 30260,
            30264, 30266, 30439, 30437, 30624, 30622, 30623,
            30629, 30952, 30938, 30956, 30951, 31142, 31309,
            31310, 31302, 31308, 31307, 31418, 31705, 31761,
            31689, 31716, 31707, 31713, 31721, 31718, 31957,
            31958, 32266, 32273, 32264, 32283, 32291, 32286,
            32285, 32265, 32272, 32633, 32690, 32752, 32753,
            32750, 32808, 33203, 33193, 33192, 33275, 33288,
            33368, 33369, 34122, 34137, 34120, 34152, 34153,
            34115, 34121, 34157, 34154, 34142, 34691, 34719,
            34718, 34722, 34701, 34913, 35114, 35122, 35109,
            35115, 35105, 35242, 35238, 35558, 35578, 35563,
            35569, 35584, 35548, 35559, 35566, 35582, 35585,
            35586, 35575, 35565, 35571, 35574, 35580, 35947,
            35949, 35987, 36084, 36420, 36401, 36404, 36418,
            36409, 36405, 36667, 36655, 36664, 36659, 36776,
            36774, 36981, 36980, 36984, 36978, 36988, 36986,
            37172, 37266, 37664, 37686, 37624, 37683, 37679,
            37666, 37628, 37675, 37636, 37658, 37648, 37670,
            37665, 37653, 37678, 37657, 38331, 38567, 38568,
            38570, 38613, 38670, 38673, 38678, 38669, 38675,
            38671, 38747, 38748, 38758, 38808, 38960, 38968,
            38971, 38967, 38957, 38969, 38948, 39184, 39208,
            39198, 39195, 39201, 39194, 39405, 39394, 39409,
            39608, 39612, 39675, 39661, 39720, 39825, 40213,
            40227, 40230, 40232, 40210, 40219, 40664, 40660,
            40845, 40860, 20778, 20767, 20769, 20786, 21237,
            22158, 22144, 22160, 22149, 22151, 22159, 22741,
            22739, 22737, 22734, 23344, 23338, 23332, 23418,
            23607, 23656, 23996, 23994, 23997, 23992, 24171,
            24396, 24509, 25033, 25026, 25031, 25062, 25035,
            25138, 25140, 25806, 25802, 25816, 25824, 25840,
            25830, 25836, 25841, 25826, 25837, 25986, 25987,
            26329, 26326, 27264, 27284, 27268, 27298, 27292,
            27355, 27299, 27262, 27287, 27280, 27296, 27484,
            27566, 27610, 27656, 28632, 28657, 28639, 28640,
            28635, 28644, 28651, 28655, 28544, 28652, 28641,
            28649, 28629, 28654, 28656, 29159, 29151, 29166,
            29158, 29157, 29165, 29164, 29172, 29152, 29237,
            29254, 29552, 29554, 29865, 29872, 29862, 29864,
            30278, 30274, 30284, 30442, 30643, 30634, 30640,
            30636, 30631, 30637, 30703, 30967, 30970, 30964,
            30959, 30977, 31143, 31146, 31319, 31423, 31751,
            31757, 31742, 31735, 31756, 31712, 31968, 31964,
            31966, 31970, 31967, 31961, 31965, 32302, 32318,
            32326, 32311, 32306, 32323, 32299, 32317, 32305,
            32325, 32321, 32308, 32313, 32328, 32309, 32319,
            32303, 32580, 32755, 32764, 32881, 32882, 32880,
            32879, 32883, 33222, 33219, 33210, 33218, 33216,
            33215, 33213, 33225, 33214, 33256, 33289, 33393,
            34218, 34180, 34174, 34204, 34193, 34196, 34223,
            34203, 34183, 34216, 34186, 34407, 34752, 34769,
            34739, 34770, 34758, 34731, 34747, 34746, 34760,
            34763, 35131, 35126, 35140, 35128, 35133, 35244,
            35598, 35607, 35609, 35611, 35594, 35616, 35613,
            35588, 35600, 35905, 35903, 35955, 36090, 36093,
            36092, 36088, 36091, 36264, 36425, 36427, 36424,
            36426, 36676, 36670, 36674, 36677, 36671, 36991,
            36989, 36996, 36993, 36994, 36992, 37177, 37283,
            37278, 37276, 37709, 37762, 37672, 37749, 37706,
            37733, 37707, 37656, 37758, 37740, 37723, 37744,
            37722, 37716, 38346, 38347, 38348, 38344, 38342,
            38577, 38584, 38614, 38684, 38686, 38816, 38867,
            38982, 39094, 39221, 39425, 39423, 39854, 39851,
            39850, 39853, 40251, 40255, 40587, 40655, 40670,
            40668, 40669, 40667, 40766, 40779, 21474, 22165,
            22190, 22745, 22744, 23352, 24413, 25059, 25139,
            25844, 25842, 25854, 25862, 25850, 25851, 25847,
            26039, 26332, 26406, 27315, 27308, 27331, 27323,
            27320, 27330, 27310, 27311, 27487, 27512, 27567,
            28681, 28683, 28670, 28678, 28666, 28689, 28687,
            29179, 29180, 29182, 29176, 29559, 29557, 29863,
            29887, 29973, 30294, 30296, 30290, 30653, 30655,
            30651, 30652, 30990, 31150, 31329, 31330, 31328,
            31428, 31429, 31787, 31783, 31786, 31774, 31779,
            31777, 31975, 32340, 32341, 32350, 32346, 32353,
            32338, 32345, 32584, 32761, 32763, 32887, 32886,
            33229, 33231, 33290, 34255, 34217, 34253, 34256,
            34249, 34224, 34234, 34233, 34214, 34799, 34796,
            34802, 34784, 35206, 35250, 35316, 35624, 35641,
            35628, 35627, 35920, 36101, 36441, 36451, 36454,
            36452, 36447, 36437, 36544, 36681, 36685, 36999,
            36995, 37000, 37291, 37292, 37328, 37780, 37770,
            37782, 37794, 37811, 37806, 37804, 37808, 37784,
            37786, 37783, 38356, 38358, 38352, 38357, 38626,
            38620, 38617, 38619, 38622, 38692, 38819, 38822,
            38829, 38905, 38989, 38991, 38988, 38990, 38995,
            39098, 39230, 39231, 39229, 39214, 39333, 39438,
            39617, 39683, 39686, 39759, 39758, 39757, 39882,
            39881, 39933, 39880, 39872, 40273, 40285, 40288,
            40672, 40725, 40748, 20787, 22181, 22750, 22751,
            22754, 23541, 40848, 24300, 25074, 25079, 25078,
            25077, 25856, 25871, 26336, 26333, 27365, 27357,
            27354, 27347, 28699, 28703, 28712, 28698, 28701,
            28693, 28696, 29190, 29197, 29272, 29346, 29560,
            29562, 29885, 29898, 29923, 30087, 30086, 30303,
            30305, 30663, 31001, 31153, 31339, 31337, 31806,
            31807, 31800, 31805, 31799, 31808, 32363, 32365,
            32377, 32361, 32362, 32645, 32371, 32694, 32697,
            32696, 33240, 34281, 34269, 34282, 34261, 34276,
            34277, 34295, 34811, 34821, 34829, 34809, 34814,
            35168, 35167, 35158, 35166, 35649, 35676, 35672,
            35657, 35674, 35662, 35663, 35654, 35673, 36104,
            36106, 36476, 36466, 36487, 36470, 36460, 36474,
            36468, 36692, 36686, 36781, 37002, 37003, 37297,
            37294, 37857, 37841, 37855, 37827, 37832, 37852,
            37853, 37846, 37858, 37837, 37848, 37860, 37847,
            37864, 38364, 38580, 38627, 38698, 38695, 38753,
            38876, 38907, 39006, 39000, 39003, 39100, 39237,
            39241, 39446, 39449, 39693, 39912, 39911, 39894,
            39899, 40329, 40289, 40306, 40298, 40300, 40594,
            40599, 40595, 40628, 21240, 22184, 22199, 22198,
            22196, 22204, 22756, 23360, 23363, 23421, 23542,
            24009, 25080, 25082, 25880, 25876, 25881, 26342,
            26407, 27372, 28734, 28720, 28722, 29200, 29563,
            29903, 30306, 30309, 31014, 31018, 31020, 31019,
            31431, 31478, 31820, 31811, 31821, 31983, 31984,
            36782, 32381, 32380, 32386, 32588, 32768, 33242,
            33382, 34299, 34297, 34321, 34298, 34310, 34315,
            34311, 34314, 34836, 34837, 35172, 35258, 35320,
            35696, 35692, 35686, 35695, 35679, 35691, 36111,
            36109, 36489, 36481, 36485, 36482, 37300, 37323,
            37912, 37891, 37885, 38369, 38704, 39108, 39250,
            39249, 39336, 39467, 39472, 39479, 39477, 39955,
            39949, 40569, 40629, 40680, 40751, 40799, 40803,
            40801, 20791, 20792, 22209, 22208, 22210, 22804,
            23660, 24013, 25084, 25086, 25885, 25884, 26005,
            26345, 27387, 27396, 27386, 27570, 28748, 29211,
            29351, 29910, 29908, 30313, 30675, 31824, 32399,
            32396, 32700, 34327, 34349, 34330, 34851, 34850,
            34849, 34847, 35178, 35180, 35261, 35700, 35703,
            35709, 36115, 36490, 36493, 36491, 36703, 36783,
            37306, 37934, 37939, 37941, 37946, 37944, 37938,
            37931, 38370, 38712, 38713, 38706, 38911, 39015,
            39013, 39255, 39493, 39491, 39488, 39486, 39631,
            39764, 39761, 39981, 39973, 40367, 40372, 40386,
            40376, 40605, 40687, 40729, 40796, 40806, 40807,
            20796, 20795, 22216, 22218, 22217, 23423, 24020,
            24018, 24398, 25087, 25892, 27402, 27489, 28753,
            28760, 29568, 29924, 30090, 30318, 30316, 31155,
            31840, 31839, 32894, 32893, 33247, 35186, 35183,
            35324, 35712, 36118, 36119, 36497, 36499, 36705,
            37192, 37956, 37969, 37970, 38717, 38718, 38851,
            38849, 39019, 39253, 39509, 39501, 39634, 39706,
            40009, 39985, 39998, 39995, 40403, 40407, 40756,
            40812, 40810, 40852, 22220, 24022, 25088, 25891,
            25899, 25898, 26348, 27408, 29914, 31434, 31844,
            31843, 31845, 32403, 32406, 32404, 33250, 34360,
            34367, 34865, 35722, 37008, 37007, 37987, 37984,
            37988, 38760, 39023, 39260, 39514, 39515, 39511,
            39635, 39636, 39633, 40020, 40023, 40022, 40421,
            40607, 40692, 22225, 22761, 25900, 28766, 30321,
            30322, 30679, 32592, 32648, 34870, 34873, 34914,
            35731, 35730, 35734, 33399, 36123, 37312, 37994,
            38722, 38728, 38724, 38854, 39024, 39519, 39714,
            39768, 40031, 40441, 40442, 40572, 40573, 40711,
            40823, 40818, 24307, 27414, 28771, 31852, 31854,
            34875, 35264, 36513, 37313, 38002, 38000, 39025,
            39262, 39638, 39715, 40652, 28772, 30682, 35738,
            38007, 38857, 39522, 39525, 32412, 35740, 36522,
            37317, 38013, 38014, 38012, 40055, 40056, 40695,
            35924, 38015, 40474, 29224, 39530, 39729, 40475,
            40478, 31858, 9312, 9313, 9314, 9315, 9316, 9317,
            9318, 9319, 9320, 9321, 9332, 9333, 9334, 9335,
            9336, 9337, 9338, 9339, 9340, 9341, 8560, 8561,
            8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569,
            20022, 20031, 20101, 20128, 20866, 20886, 20907,
            21241, 21304, 21353, 21430, 22794, 23424, 24027,
            12083, 24191, 24308, 24400, 24417, 25908, 26080,
            30098, 30326, 36789, 38582, 168, 710, 12541, 12542,
            12445, 12446, 12291, 20189, 12293, 12294, 12295,
            12540, 65339, 65341, 10045, 12353, 12354, 12355,
            12356, 12357, 12358, 12359, 12360, 12361, 12362,
            12363, 12364, 12365, 12366, 12367, 12368, 12369,
            12370, 12371, 12372, 12373, 12374, 12375, 12376,
            12377, 12378, 12379, 12380, 12381, 12382, 12383,
            12384, 12385, 12386, 12387, 12388, 12389, 12390,
            12391, 12392, 12393, 12394, 12395, 12396, 12397,
            12398, 12399, 12400, 12401, 12402, 12403, 12404,
            12405, 12406, 12407, 12408, 12409, 12410, 12411,
            12412, 12413, 12414, 12415, 12416, 12417, 12418,
            12419, 12420, 12421, 12422, 12423, 12424, 12425,
            12426, 12427, 12428, 12429, 12430, 12431, 12432,
            12433, 12434, 12435, 12449, 12450, 12451, 12452,
            12453, 12454, 12455, 12456, 12457, 12458, 12459,
            12460, 12461, 12462, 12463, 12464, 12465, 12466,
            12467, 12468, 12469, 12470, 12471, 12472, 12473,
            12474, 12475, 12476, 12477, 12478, 12479, 12480,
            12481, 12482, 12483, 12484, 12485, 12486, 12487,
            12488, 12489, 12490, 12491, 12492, 12493, 12494,
            12495, 12496, 12497, 12498, 12499, 12500, 12501,
            12502, 12503, 12504, 12505, 12506, 12507, 12508,
            12509, 12510, 12511, 12512, 12513, 12514, 12515,
            12516, 12517, 12518, 12519, 12520, 12521, 12522,
            12523, 12524, 12525, 12526, 12527, 12528, 12529,
            12530, 12531, 12532, 12533, 12534, 1040, 1041, 1042,
            1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049,
            1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
            1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
            1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
            1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
            1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
            1097, 1098, 1099, 1100, 1101, 1102, 1103, 8679,
            8632, 8633, 12751, 131276, 20058, 131210, 20994,
            17553, 40880, 20872, 40881, 161287, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 65506, 65508,
            65287, 65282, 12849, 8470, 8481, 12443, 12444,
            11904, 11908, 11910, 11911, 11912, 11914, 11916,
            11917, 11925, 11932, 11933, 11941, 11943, 11946,
            11948, 11950, 11958, 11964, 11966, 11974, 11978,
            11980, 11981, 11983, 11990, 11991, 11998, 12003,
            null, null, null, 643, 592, 603, 596, 629, 339, 248,
            331, 650, 618, 20034, 20060, 20981, 21274, 21378,
            19975, 19980, 20039, 20109, 22231, 64012, 23662,
            24435, 19983, 20871, 19982, 20014, 20115, 20162,
            20169, 20168, 20888, 21244, 21356, 21433, 22304,
            22787, 22828, 23568, 24063, 26081, 27571, 27596,
            27668, 29247, 20017, 20028, 20200, 20188, 20201,
            20193, 20189, 20186, 21004, 21276, 21324, 22306,
            22307, 22807, 22831, 23425, 23428, 23570, 23611,
            23668, 23667, 24068, 24192, 24194, 24521, 25097,
            25168, 27669, 27702, 27715, 27711, 27707, 29358,
            29360, 29578, 31160, 32906, 38430, 20238, 20248,
            20268, 20213, 20244, 20209, 20224, 20215, 20232,
            20253, 20226, 20229, 20258, 20243, 20228, 20212,
            20242, 20913, 21011, 21001, 21008, 21158, 21282,
            21279, 21325, 21386, 21511, 22241, 22239, 22318,
            22314, 22324, 22844, 22912, 22908, 22917, 22907,
            22910, 22903, 22911, 23382, 23573, 23589, 23676,
            23674, 23675, 23678, 24031, 24181, 24196, 24322,
            24346, 24436, 24533, 24532, 24527, 25180, 25182,
            25188, 25185, 25190, 25186, 25177, 25184, 25178,
            25189, 26095, 26094, 26430, 26425, 26424, 26427,
            26426, 26431, 26428, 26419, 27672, 27718, 27730,
            27740, 27727, 27722, 27732, 27723, 27724, 28785,
            29278, 29364, 29365, 29582, 29994, 30335, 31349,
            32593, 33400, 33404, 33408, 33405, 33407, 34381,
            35198, 37017, 37015, 37016, 37019, 37012, 38434,
            38436, 38432, 38435, 20310, 20283, 20322, 20297,
            20307, 20324, 20286, 20327, 20306, 20319, 20289,
            20312, 20269, 20275, 20287, 20321, 20879, 20921,
            21020, 21022, 21025, 21165, 21166, 21257, 21347,
            21362, 21390, 21391, 21552, 21559, 21546, 21588,
            21573, 21529, 21532, 21541, 21528, 21565, 21583,
            21569, 21544, 21540, 21575, 22254, 22247, 22245,
            22337, 22341, 22348, 22345, 22347, 22354, 22790,
            22848, 22950, 22936, 22944, 22935, 22926, 22946,
            22928, 22927, 22951, 22945, 23438, 23442, 23592,
            23594, 23693, 23695, 23688, 23691, 23689, 23698,
            23690, 23686, 23699, 23701, 24032, 24074, 24078,
            24203, 24201, 24204, 24200, 24205, 24325, 24349,
            24440, 24438, 24530, 24529, 24528, 24557, 24552,
            24558, 24563, 24545, 24548, 24547, 24570, 24559,
            24567, 24571, 24576, 24564, 25146, 25219, 25228,
            25230, 25231, 25236, 25223, 25201, 25211, 25210,
            25200, 25217, 25224, 25207, 25213, 25202, 25204,
            25911, 26096, 26100, 26099, 26098, 26101, 26437,
            26439, 26457, 26453, 26444, 26440, 26461, 26445,
            26458, 26443, 27600, 27673, 27674, 27768, 27751,
            27755, 27780, 27787, 27791, 27761, 27759, 27753,
            27802, 27757, 27783, 27797, 27804, 27750, 27763,
            27749, 27771, 27790, 28788, 28794, 29283, 29375,
            29373, 29379, 29382, 29377, 29370, 29381, 29589,
            29591, 29587, 29588, 29586, 30010, 30009, 30100,
            30101, 30337, 31037, 32820, 32917, 32921, 32912,
            32914, 32924, 33424, 33423, 33413, 33422, 33425,
            33427, 33418, 33411, 33412, 35960, 36809, 36799,
            37023, 37025, 37029, 37022, 37031, 37024, 38448,
            38440, 38447, 38445, 20019, 20376, 20348, 20357,
            20349, 20352, 20359, 20342, 20340, 20361, 20356,
            20343, 20300, 20375, 20330, 20378, 20345, 20353,
            20344, 20368, 20380, 20372, 20382, 20370, 20354,
            20373, 20331, 20334, 20894, 20924, 20926, 21045,
            21042, 21043, 21062, 21041, 21180, 21258, 21259,
            21308, 21394, 21396, 21639, 21631, 21633, 21649,
            21634, 21640, 21611, 21626, 21630, 21605, 21612,
            21620, 21606, 21645, 21615, 21601, 21600, 21656,
            21603, 21607, 21604, 22263, 22265, 22383, 22386,
            22381, 22379, 22385, 22384, 22390, 22400, 22389,
            22395, 22387, 22388, 22370, 22376, 22397, 22796,
            22853, 22965, 22970, 22991, 22990, 22962, 22988,
            22977, 22966, 22972, 22979, 22998, 22961, 22973,
            22976, 22984, 22964, 22983, 23394, 23397, 23443,
            23445, 23620, 23623, 23726, 23716, 23712, 23733,
            23727, 23720, 23724, 23711, 23715, 23725, 23714,
            23722, 23719, 23709, 23717, 23734, 23728, 23718,
            24087, 24084, 24089, 24360, 24354, 24355, 24356,
            24404, 24450, 24446, 24445, 24542, 24549, 24621,
            24614, 24601, 24626, 24587, 24628, 24586, 24599,
            24627, 24602, 24606, 24620, 24610, 24589, 24592,
            24622, 24595, 24593, 24588, 24585, 24604, 25108,
            25149, 25261, 25268, 25297, 25278, 25258, 25270,
            25290, 25262, 25267, 25263, 25275, 25257, 25264,
            25272, 25917, 26024, 26043, 26121, 26108, 26116,
            26130, 26120, 26107, 26115, 26123, 26125, 26117,
            26109, 26129, 26128, 26358, 26378, 26501, 26476,
            26510, 26514, 26486, 26491, 26520, 26502, 26500,
            26484, 26509, 26508, 26490, 26527, 26513, 26521,
            26499, 26493, 26497, 26488, 26489, 26516, 27429,
            27520, 27518, 27614, 27677, 27795, 27884, 27883,
            27886, 27865, 27830, 27860, 27821, 27879, 27831,
            27856, 27842, 27834, 27843, 27846, 27885, 27890,
            27858, 27869, 27828, 27786, 27805, 27776, 27870,
            27840, 27952, 27853, 27847, 27824, 27897, 27855,
            27881, 27857, 28820, 28824, 28805, 28819, 28806,
            28804, 28817, 28822, 28802, 28826, 28803, 29290,
            29398, 29387, 29400, 29385, 29404, 29394, 29396,
            29402, 29388, 29393, 29604, 29601, 29613, 29606,
            29602, 29600, 29612, 29597, 29917, 29928, 30015,
            30016, 30014, 30092, 30104, 30383, 30451, 30449,
            30448, 30453, 30712, 30716, 30713, 30715, 30714,
            30711, 31042, 31039, 31173, 31352, 31355, 31483,
            31861, 31997, 32821, 32911, 32942, 32931, 32952,
            32949, 32941, 33312, 33440, 33472, 33451, 33434,
            33432, 33435, 33461, 33447, 33454, 33468, 33438,
            33466, 33460, 33448, 33441, 33449, 33474, 33444,
            33475, 33462, 33442, 34416, 34415, 34413, 34414,
            35926, 36818, 36811, 36819, 36813, 36822, 36821,
            36823, 37042, 37044, 37039, 37043, 37040, 38457,
            38461, 38460, 38458, 38467, 20429, 20421, 20435,
            20402, 20425, 20427, 20417, 20436, 20444, 20441,
            20411, 20403, 20443, 20423, 20438, 20410, 20416,
            20409, 20460, 21060, 21065, 21184, 21186, 21309,
            21372, 21399, 21398, 21401, 21400, 21690, 21665,
            21677, 21669, 21711, 21699, 33549, 21687, 21678,
            21718, 21686, 21701, 21702, 21664, 21616, 21692,
            21666, 21694, 21618, 21726, 21680, 22453, 22430,
            22431, 22436, 22412, 22423, 22429, 22427, 22420,
            22424, 22415, 22425, 22437, 22426, 22421, 22772,
            22797, 22867, 23009, 23006, 23022, 23040, 23025,
            23005, 23034, 23037, 23036, 23030, 23012, 23026,
            23031, 23003, 23017, 23027, 23029, 23008, 23038,
            23028, 23021, 23464, 23628, 23760, 23768, 23756,
            23767, 23755, 23771, 23774, 23770, 23753, 23751,
            23754, 23766, 23763, 23764, 23759, 23752, 23750,
            23758, 23775, 23800, 24057, 24097, 24098, 24099,
            24096, 24100, 24240, 24228, 24226, 24219, 24227,
            24229, 24327, 24366, 24406, 24454, 24631, 24633,
            24660, 24690, 24670, 24645, 24659, 24647, 24649,
            24667, 24652, 24640, 24642, 24671, 24612, 24644,
            24664, 24678, 24686, 25154, 25155, 25295, 25357,
            25355, 25333, 25358, 25347, 25323, 25337, 25359,
            25356, 25336, 25334, 25344, 25363, 25364, 25338,
            25365, 25339, 25328, 25921, 25923, 26026, 26047,
            26166, 26145, 26162, 26165, 26140, 26150, 26146,
            26163, 26155, 26170, 26141, 26164, 26169, 26158,
            26383, 26384, 26561, 26610, 26568, 26554, 26588,
            26555, 26616, 26584, 26560, 26551, 26565, 26603,
            26596, 26591, 26549, 26573, 26547, 26615, 26614,
            26606, 26595, 26562, 26553, 26574, 26599, 26608,
            26546, 26620, 26566, 26605, 26572, 26542, 26598,
            26587, 26618, 26569, 26570, 26563, 26602, 26571,
            27432, 27522, 27524, 27574, 27606, 27608, 27616,
            27680, 27681, 27944, 27956, 27949, 27935, 27964,
            27967, 27922, 27914, 27866, 27955, 27908, 27929,
            27962, 27930, 27921, 27904, 27933, 27970, 27905,
            27928, 27959, 27907, 27919, 27968, 27911, 27936,
            27948, 27912, 27938, 27913, 27920, 28855, 28831,
            28862, 28849, 28848, 28833, 28852, 28853, 28841,
            29249, 29257, 29258, 29292, 29296, 29299, 29294,
            29386, 29412, 29416, 29419, 29407, 29418, 29414,
            29411, 29573, 29644, 29634, 29640, 29637, 29625,
            29622, 29621, 29620, 29675, 29631, 29639, 29630,
            29635, 29638, 29624, 29643, 29932, 29934, 29998,
            30023, 30024, 30119, 30122, 30329, 30404, 30472,
            30467, 30468, 30469, 30474, 30455, 30459, 30458,
            30695, 30696, 30726, 30737, 30738, 30725, 30736,
            30735, 30734, 30729, 30723, 30739, 31050, 31052,
            31051, 31045, 31044, 31189, 31181, 31183, 31190,
            31182, 31360, 31358, 31441, 31488, 31489, 31866,
            31864, 31865, 31871, 31872, 31873, 32003, 32008,
            32001, 32600, 32657, 32653, 32702, 32775, 32782,
            32783, 32788, 32823, 32984, 32967, 32992, 32977,
            32968, 32962, 32976, 32965, 32995, 32985, 32988,
            32970, 32981, 32969, 32975, 32983, 32998, 32973,
            33279, 33313, 33428, 33497, 33534, 33529, 33543,
            33512, 33536, 33493, 33594, 33515, 33494, 33524,
            33516, 33505, 33522, 33525, 33548, 33531, 33526,
            33520, 33514, 33508, 33504, 33530, 33523, 33517,
            34423, 34420, 34428, 34419, 34881, 34894, 34919,
            34922, 34921, 35283, 35332, 35335, 36210, 36835,
            36833, 36846, 36832, 37105, 37053, 37055, 37077,
            37061, 37054, 37063, 37067, 37064, 37332, 37331,
            38484, 38479, 38481, 38483, 38474, 38478, 20510,
            20485, 20487, 20499, 20514, 20528, 20507, 20469,
            20468, 20531, 20535, 20524, 20470, 20471, 20503,
            20508, 20512, 20519, 20533, 20527, 20529, 20494,
            20826, 20884, 20883, 20938, 20932, 20933, 20936,
            20942, 21089, 21082, 21074, 21086, 21087, 21077,
            21090, 21197, 21262, 21406, 21798, 21730, 21783,
            21778, 21735, 21747, 21732, 21786, 21759, 21764,
            21768, 21739, 21777, 21765, 21745, 21770, 21755,
            21751, 21752, 21728, 21774, 21763, 21771, 22273,
            22274, 22476, 22578, 22485, 22482, 22458, 22470,
            22461, 22460, 22456, 22454, 22463, 22471, 22480,
            22457, 22465, 22798, 22858, 23065, 23062, 23085,
            23086, 23061, 23055, 23063, 23050, 23070, 23091,
            23404, 23463, 23469, 23468, 23555, 23638, 23636,
            23788, 23807, 23790, 23793, 23799, 23808, 23801,
            24105, 24104, 24232, 24238, 24234, 24236, 24371,
            24368, 24423, 24669, 24666, 24679, 24641, 24738,
            24712, 24704, 24722, 24705, 24733, 24707, 24725,
            24731, 24727, 24711, 24732, 24718, 25113, 25158,
            25330, 25360, 25430, 25388, 25412, 25413, 25398,
            25411, 25572, 25401, 25419, 25418, 25404, 25385,
            25409, 25396, 25432, 25428, 25433, 25389, 25415,
            25395, 25434, 25425, 25400, 25431, 25408, 25416,
            25930, 25926, 26054, 26051, 26052, 26050, 26186,
            26207, 26183, 26193, 26386, 26387, 26655, 26650,
            26697, 26674, 26675, 26683, 26699, 26703, 26646,
            26673, 26652, 26677, 26667, 26669, 26671, 26702,
            26692, 26676, 26653, 26642, 26644, 26662, 26664,
            26670, 26701, 26682, 26661, 26656, 27436, 27439,
            27437, 27441, 27444, 27501, 32898, 27528, 27622,
            27620, 27624, 27619, 27618, 27623, 27685, 28026,
            28003, 28004, 28022, 27917, 28001, 28050, 27992,
            28002, 28013, 28015, 28049, 28045, 28143, 28031,
            28038, 27998, 28007, 28000, 28055, 28016, 28028,
            27999, 28034, 28056, 27951, 28008, 28043, 28030,
            28032, 28036, 27926, 28035, 28027, 28029, 28021,
            28048, 28892, 28883, 28881, 28893, 28875, 32569,
            28898, 28887, 28882, 28894, 28896, 28884, 28877,
            28869, 28870, 28871, 28890, 28878, 28897, 29250,
            29304, 29303, 29302, 29440, 29434, 29428, 29438,
            29430, 29427, 29435, 29441, 29651, 29657, 29669,
            29654, 29628, 29671, 29667, 29673, 29660, 29650,
            29659, 29652, 29661, 29658, 29655, 29656, 29672,
            29918, 29919, 29940, 29941, 29985, 30043, 30047,
            30128, 30145, 30139, 30148, 30144, 30143, 30134,
            30138, 30346, 30409, 30493, 30491, 30480, 30483,
            30482, 30499, 30481, 30485, 30489, 30490, 30498,
            30503, 30755, 30764, 30754, 30773, 30767, 30760,
            30766, 30763, 30753, 30761, 30771, 30762, 30769,
            31060, 31067, 31055, 31068, 31059, 31058, 31057,
            31211, 31212, 31200, 31214, 31213, 31210, 31196,
            31198, 31197, 31366, 31369, 31365, 31371, 31372,
            31370, 31367, 31448, 31504, 31492, 31507, 31493,
            31503, 31496, 31498, 31502, 31497, 31506, 31876,
            31889, 31882, 31884, 31880, 31885, 31877, 32030,
            32029, 32017, 32014, 32024, 32022, 32019, 32031,
            32018, 32015, 32012, 32604, 32609, 32606, 32608,
            32605, 32603, 32662, 32658, 32707, 32706, 32704,
            32790, 32830, 32825, 33018, 33010, 33017, 33013,
            33025, 33019, 33024, 33281, 33327, 33317, 33587,
            33581, 33604, 33561, 33617, 33573, 33622, 33599,
            33601, 33574, 33564, 33570, 33602, 33614, 33563,
            33578, 33544, 33596, 33613, 33558, 33572, 33568,
            33591, 33583, 33577, 33607, 33605, 33612, 33619,
            33566, 33580, 33611, 33575, 33608, 34387, 34386,
            34466, 34472, 34454, 34445, 34449, 34462, 34439,
            34455, 34438, 34443, 34458, 34437, 34469, 34457,
            34465, 34471, 34453, 34456, 34446, 34461, 34448,
            34452, 34883, 34884, 34925, 34933, 34934, 34930,
            34944, 34929, 34943, 34927, 34947, 34942, 34932,
            34940, 35346, 35911, 35927, 35963, 36004, 36003,
            36214, 36216, 36277, 36279, 36278, 36561, 36563,
            36862, 36853, 36866, 36863, 36859, 36868, 36860,
            36854, 37078, 37088, 37081, 37082, 37091, 37087,
            37093, 37080, 37083, 37079, 37084, 37092, 37200,
            37198, 37199, 37333, 37346, 37338, 38492, 38495,
            38588, 39139, 39647, 39727, 20095, 20592, 20586,
            20577, 20574, 20576, 20563, 20555, 20573, 20594,
            20552, 20557, 20545, 20571, 20554, 20578, 20501,
            20549, 20575, 20585, 20587, 20579, 20580, 20550,
            20544, 20590, 20595, 20567, 20561, 20944, 21099,
            21101, 21100, 21102, 21206, 21203, 21293, 21404,
            21877, 21878, 21820, 21837, 21840, 21812, 21802,
            21841, 21858, 21814, 21813, 21808, 21842, 21829,
            21772, 21810, 21861, 21838, 21817, 21832, 21805,
            21819, 21824, 21835, 22282, 22279, 22523, 22548,
            22498, 22518, 22492, 22516, 22528, 22509, 22525,
            22536, 22520, 22539, 22515, 22479, 22535, 22510,
            22499, 22514, 22501, 22508, 22497, 22542, 22524,
            22544, 22503, 22529, 22540, 22513, 22505, 22512,
            22541, 22532, 22876, 23136, 23128, 23125, 23143,
            23134, 23096, 23093, 23149, 23120, 23135, 23141,
            23148, 23123, 23140, 23127, 23107, 23133, 23122,
            23108, 23131, 23112, 23182, 23102, 23117, 23097,
            23116, 23152, 23145, 23111, 23121, 23126, 23106,
            23132, 23410, 23406, 23489, 23488, 23641, 23838,
            23819, 23837, 23834, 23840, 23820, 23848, 23821,
            23846, 23845, 23823, 23856, 23826, 23843, 23839,
            23854, 24126, 24116, 24241, 24244, 24249, 24242,
            24243, 24374, 24376, 24475, 24470, 24479, 24714,
            24720, 24710, 24766, 24752, 24762, 24787, 24788,
            24783, 24804, 24793, 24797, 24776, 24753, 24795,
            24759, 24778, 24767, 24771, 24781, 24768, 25394,
            25445, 25482, 25474, 25469, 25533, 25502, 25517,
            25501, 25495, 25515, 25486, 25455, 25479, 25488,
            25454, 25519, 25461, 25500, 25453, 25518, 25468,
            25508, 25403, 25503, 25464, 25477, 25473, 25489,
            25485, 25456, 25939, 26061, 26213, 26209, 26203,
            26201, 26204, 26210, 26392, 26745, 26759, 26768,
            26780, 26733, 26734, 26798, 26795, 26966, 26735,
            26787, 26796, 26793, 26741, 26740, 26802, 26767,
            26743, 26770, 26748, 26731, 26738, 26794, 26752,
            26737, 26750, 26779, 26774, 26763, 26784, 26761,
            26788, 26744, 26747, 26769, 26764, 26762, 26749,
            27446, 27443, 27447, 27448, 27537, 27535, 27533,
            27534, 27532, 27690, 28096, 28075, 28084, 28083,
            28276, 28076, 28137, 28130, 28087, 28150, 28116,
            28160, 28104, 28128, 28127, 28118, 28094, 28133,
            28124, 28125, 28123, 28148, 28106, 28093, 28141,
            28144, 28090, 28117, 28098, 28111, 28105, 28112,
            28146, 28115, 28157, 28119, 28109, 28131, 28091,
            28922, 28941, 28919, 28951, 28916, 28940, 28912,
            28932, 28915, 28944, 28924, 28927, 28934, 28947,
            28928, 28920, 28918, 28939, 28930, 28942, 29310,
            29307, 29308, 29311, 29469, 29463, 29447, 29457,
            29464, 29450, 29448, 29439, 29455, 29470, 29576,
            29686, 29688, 29685, 29700, 29697, 29693, 29703,
            29696, 29690, 29692, 29695, 29708, 29707, 29684,
            29704, 30052, 30051, 30158, 30162, 30159, 30155,
            30156, 30161, 30160, 30351, 30345, 30419, 30521,
            30511, 30509, 30513, 30514, 30516, 30515, 30525,
            30501, 30523, 30517, 30792, 30802, 30793, 30797,
            30794, 30796, 30758, 30789, 30800, 31076, 31079,
            31081, 31082, 31075, 31083, 31073, 31163, 31226,
            31224, 31222, 31223, 31375, 31380, 31376, 31541,
            31559, 31540, 31525, 31536, 31522, 31524, 31539,
            31512, 31530, 31517, 31537, 31531, 31533, 31535,
            31538, 31544, 31514, 31523, 31892, 31896, 31894,
            31907, 32053, 32061, 32056, 32054, 32058, 32069,
            32044, 32041, 32065, 32071, 32062, 32063, 32074,
            32059, 32040, 32611, 32661, 32668, 32669, 32667,
            32714, 32715, 32717, 32720, 32721, 32711, 32719,
            32713, 32799, 32798, 32795, 32839, 32835, 32840,
            33048, 33061, 33049, 33051, 33069, 33055, 33068,
            33054, 33057, 33045, 33063, 33053, 33058, 33297,
            33336, 33331, 33338, 33332, 33330, 33396, 33680,
            33699, 33704, 33677, 33658, 33651, 33700, 33652,
            33679, 33665, 33685, 33689, 33653, 33684, 33705,
            33661, 33667, 33676, 33693, 33691, 33706, 33675,
            33662, 33701, 33711, 33672, 33687, 33712, 33663,
            33702, 33671, 33710, 33654, 33690, 34393, 34390,
            34495, 34487, 34498, 34497, 34501, 34490, 34480,
            34504, 34489, 34483, 34488, 34508, 34484, 34491,
            34492, 34499, 34493, 34494, 34898, 34953, 34965,
            34984, 34978, 34986, 34970, 34961, 34977, 34975,
            34968, 34983, 34969, 34971, 34967, 34980, 34988,
            34956, 34963, 34958, 35202, 35286, 35289, 35285,
            35376, 35367, 35372, 35358, 35897, 35899, 35932,
            35933, 35965, 36005, 36221, 36219, 36217, 36284,
            36290, 36281, 36287, 36289, 36568, 36574, 36573,
            36572, 36567, 36576, 36577, 36900, 36875, 36881,
            36892, 36876, 36897, 37103, 37098, 37104, 37108,
            37106, 37107, 37076, 37099, 37100, 37097, 37206,
            37208, 37210, 37203, 37205, 37356, 37364, 37361,
            37363, 37368, 37348, 37369, 37354, 37355, 37367,
            37352, 37358, 38266, 38278, 38280, 38524, 38509,
            38507, 38513, 38511, 38591, 38762, 38916, 39141,
            39319, 20635, 20629, 20628, 20638, 20619, 20643,
            20611, 20620, 20622, 20637, 20584, 20636, 20626,
            20610, 20615, 20831, 20948, 21266, 21265, 21412,
            21415, 21905, 21928, 21925, 21933, 21879, 22085,
            21922, 21907, 21896, 21903, 21941, 21889, 21923,
            21906, 21924, 21885, 21900, 21926, 21887, 21909,
            21921, 21902, 22284, 22569, 22583, 22553, 22558,
            22567, 22563, 22568, 22517, 22600, 22565, 22556,
            22555, 22579, 22591, 22582, 22574, 22585, 22584,
            22573, 22572, 22587, 22881, 23215, 23188, 23199,
            23162, 23202, 23198, 23160, 23206, 23164, 23205,
            23212, 23189, 23214, 23095, 23172, 23178, 23191,
            23171, 23179, 23209, 23163, 23165, 23180, 23196,
            23183, 23187, 23197, 23530, 23501, 23499, 23508,
            23505, 23498, 23502, 23564, 23600, 23863, 23875,
            23915, 23873, 23883, 23871, 23861, 23889, 23886,
            23893, 23859, 23866, 23890, 23869, 23857, 23897,
            23874, 23865, 23881, 23864, 23868, 23858, 23862,
            23872, 23877, 24132, 24129, 24408, 24486, 24485,
            24491, 24777, 24761, 24780, 24802, 24782, 24772,
            24852, 24818, 24842, 24854, 24837, 24821, 24851,
            24824, 24828, 24830, 24769, 24835, 24856, 24861,
            24848, 24831, 24836, 24843, 25162, 25492, 25521,
            25520, 25550, 25573, 25576, 25583, 25539, 25757,
            25587, 25546, 25568, 25590, 25557, 25586, 25589,
            25697, 25567, 25534, 25565, 25564, 25540, 25560,
            25555, 25538, 25543, 25548, 25547, 25544, 25584,
            25559, 25561, 25906, 25959, 25962, 25956, 25948,
            25960, 25957, 25996, 26013, 26014, 26030, 26064,
            26066, 26236, 26220, 26235, 26240, 26225, 26233,
            26218, 26226, 26369, 26892, 26835, 26884, 26844,
            26922, 26860, 26858, 26865, 26895, 26838, 26871,
            26859, 26852, 26870, 26899, 26896, 26867, 26849,
            26887, 26828, 26888, 26992, 26804, 26897, 26863,
            26822, 26900, 26872, 26832, 26877, 26876, 26856,
            26891, 26890, 26903, 26830, 26824, 26845, 26846,
            26854, 26868, 26833, 26886, 26836, 26857, 26901,
            26917, 26823, 27449, 27451, 27455, 27452, 27540,
            27543, 27545, 27541, 27581, 27632, 27634, 27635,
            27696, 28156, 28230, 28231, 28191, 28233, 28296,
            28220, 28221, 28229, 28258, 28203, 28223, 28225,
            28253, 28275, 28188, 28211, 28235, 28224, 28241,
            28219, 28163, 28206, 28254, 28264, 28252, 28257,
            28209, 28200, 28256, 28273, 28267, 28217, 28194,
            28208, 28243, 28261, 28199, 28280, 28260, 28279,
            28245, 28281, 28242, 28262, 28213, 28214, 28250,
            28960, 28958, 28975, 28923, 28974, 28977, 28963,
            28965, 28962, 28978, 28959, 28968, 28986, 28955,
            29259, 29274, 29320, 29321, 29318, 29317, 29323,
            29458, 29451, 29488, 29474, 29489, 29491, 29479,
            29490, 29485, 29478, 29475, 29493, 29452, 29742,
            29740, 29744, 29739, 29718, 29722, 29729, 29741,
            29745, 29732, 29731, 29725, 29737, 29728, 29746,
            29947, 29999, 30063, 30060, 30183, 30170, 30177,
            30182, 30173, 30175, 30180, 30167, 30357, 30354,
            30426, 30534, 30535, 30532, 30541, 30533, 30538,
            30542, 30539, 30540, 30686, 30700, 30816, 30820,
            30821, 30812, 30829, 30833, 30826, 30830, 30832,
            30825, 30824, 30814, 30818, 31092, 31091, 31090,
            31088, 31234, 31242, 31235, 31244, 31236, 31385,
            31462, 31460, 31562, 31547, 31556, 31560, 31564,
            31566, 31552, 31576, 31557, 31906, 31902, 31912,
            31905, 32088, 32111, 32099, 32083, 32086, 32103,
            32106, 32079, 32109, 32092, 32107, 32082, 32084,
            32105, 32081, 32095, 32078, 32574, 32575, 32613,
            32614, 32674, 32672, 32673, 32727, 32849, 32847,
            32848, 33022, 32980, 33091, 33098, 33106, 33103,
            33095, 33085, 33101, 33082, 33254, 33262, 33271,
            33272, 33273, 33284, 33340, 33341, 33343, 33397,
            33595, 33743, 33785, 33827, 33728, 33768, 33810,
            33767, 33764, 33788, 33782, 33808, 33734, 33736,
            33771, 33763, 33727, 33793, 33757, 33765, 33752,
            33791, 33761, 33739, 33742, 33750, 33781, 33737,
            33801, 33807, 33758, 33809, 33798, 33730, 33779,
            33749, 33786, 33735, 33745, 33770, 33811, 33731,
            33772, 33774, 33732, 33787, 33751, 33762, 33819,
            33755, 33790, 34520, 34530, 34534, 34515, 34531,
            34522, 34538, 34525, 34539, 34524, 34540, 34537,
            34519, 34536, 34513, 34888, 34902, 34901, 35002,
            35031, 35001, 35000, 35008, 35006, 34998, 35004,
            34999, 35005, 34994, 35073, 35017, 35221, 35224,
            35223, 35293, 35290, 35291, 35406, 35405, 35385,
            35417, 35392, 35415, 35416, 35396, 35397, 35410,
            35400, 35409, 35402, 35404, 35407, 35935, 35969,
            35968, 36026, 36030, 36016, 36025, 36021, 36228,
            36224, 36233, 36312, 36307, 36301, 36295, 36310,
            36316, 36303, 36309, 36313, 36296, 36311, 36293,
            36591, 36599, 36602, 36601, 36582, 36590, 36581,
            36597, 36583, 36584, 36598, 36587, 36593, 36588,
            36596, 36585, 36909, 36916, 36911, 37126, 37164,
            37124, 37119, 37116, 37128, 37113, 37115, 37121,
            37120, 37127, 37125, 37123, 37217, 37220, 37215,
            37218, 37216, 37377, 37386, 37413, 37379, 37402,
            37414, 37391, 37388, 37376, 37394, 37375, 37373,
            37382, 37380, 37415, 37378, 37404, 37412, 37401,
            37399, 37381, 37398, 38267, 38285, 38284, 38288,
            38535, 38526, 38536, 38537, 38531, 38528, 38594,
            38600, 38595, 38641, 38640, 38764, 38768, 38766,
            38919, 39081, 39147, 40166, 40697, 20099, 20100,
            20150, 20669, 20671, 20678, 20654, 20676, 20682,
            20660, 20680, 20674, 20656, 20673, 20666, 20657,
            20683, 20681, 20662, 20664, 20951, 21114, 21112,
            21115, 21116, 21955, 21979, 21964, 21968, 21963,
            21962, 21981, 21952, 21972, 21956, 21993, 21951,
            21970, 21901, 21967, 21973, 21986, 21974, 21960,
            22002, 21965, 21977, 21954, 22292, 22611, 22632,
            22628, 22607, 22605, 22601, 22639, 22613, 22606,
            22621, 22617, 22629, 22619, 22589, 22627, 22641,
            22780, 23239, 23236, 23243, 23226, 23224, 23217,
            23221, 23216, 23231, 23240, 23227, 23238, 23223,
            23232, 23242, 23220, 23222, 23245, 23225, 23184,
            23510, 23512, 23513, 23583, 23603, 23921, 23907,
            23882, 23909, 23922, 23916, 23902, 23912, 23911,
            23906, 24048, 24143, 24142, 24138, 24141, 24139,
            24261, 24268, 24262, 24267, 24263, 24384, 24495,
            24493, 24823, 24905, 24906, 24875, 24901, 24886,
            24882, 24878, 24902, 24879, 24911, 24873, 24896,
            25120, 37224, 25123, 25125, 25124, 25541, 25585,
            25579, 25616, 25618, 25609, 25632, 25636, 25651,
            25667, 25631, 25621, 25624, 25657, 25655, 25634,
            25635, 25612, 25638, 25648, 25640, 25665, 25653,
            25647, 25610, 25626, 25664, 25637, 25639, 25611,
            25575, 25627, 25646, 25633, 25614, 25967, 26002,
            26067, 26246, 26252, 26261, 26256, 26251, 26250,
            26265, 26260, 26232, 26400, 26982, 26975, 26936,
            26958, 26978, 26993, 26943, 26949, 26986, 26937,
            26946, 26967, 26969, 27002, 26952, 26953, 26933,
            26988, 26931, 26941, 26981, 26864, 27000, 26932,
            26985, 26944, 26991, 26948, 26998, 26968, 26945,
            26996, 26956, 26939, 26955, 26935, 26972, 26959,
            26961, 26930, 26962, 26927, 27003, 26940, 27462,
            27461, 27459, 27458, 27464, 27457, 27547, 64013,
            27643, 27644, 27641, 27639, 27640, 28315, 28374,
            28360, 28303, 28352, 28319, 28307, 28308, 28320,
            28337, 28345, 28358, 28370, 28349, 28353, 28318,
            28361, 28343, 28336, 28365, 28326, 28367, 28338,
            28350, 28355, 28380, 28376, 28313, 28306, 28302,
            28301, 28324, 28321, 28351, 28339, 28368, 28362,
            28311, 28334, 28323, 28999, 29012, 29010, 29027,
            29024, 28993, 29021, 29026, 29042, 29048, 29034,
            29025, 28994, 29016, 28995, 29003, 29040, 29023,
            29008, 29011, 28996, 29005, 29018, 29263, 29325,
            29324, 29329, 29328, 29326, 29500, 29506, 29499,
            29498, 29504, 29514, 29513, 29764, 29770, 29771,
            29778, 29777, 29783, 29760, 29775, 29776, 29774,
            29762, 29766, 29773, 29780, 29921, 29951, 29950,
            29949, 29981, 30073, 30071, 27011, 30191, 30223,
            30211, 30199, 30206, 30204, 30201, 30200, 30224,
            30203, 30198, 30189, 30197, 30205, 30361, 30389,
            30429, 30549, 30559, 30560, 30546, 30550, 30554,
            30569, 30567, 30548, 30553, 30573, 30688, 30855,
            30874, 30868, 30863, 30852, 30869, 30853, 30854,
            30881, 30851, 30841, 30873, 30848, 30870, 30843,
            31100, 31106, 31101, 31097, 31249, 31256, 31257,
            31250, 31255, 31253, 31266, 31251, 31259, 31248,
            31395, 31394, 31390, 31467, 31590, 31588, 31597,
            31604, 31593, 31602, 31589, 31603, 31601, 31600,
            31585, 31608, 31606, 31587, 31922, 31924, 31919,
            32136, 32134, 32128, 32141, 32127, 32133, 32122,
            32142, 32123, 32131, 32124, 32140, 32148, 32132,
            32125, 32146, 32621, 32619, 32615, 32616, 32620,
            32678, 32677, 32679, 32731, 32732, 32801, 33124,
            33120, 33143, 33116, 33129, 33115, 33122, 33138,
            26401, 33118, 33142, 33127, 33135, 33092, 33121,
            33309, 33353, 33348, 33344, 33346, 33349, 34033,
            33855, 33878, 33910, 33913, 33935, 33933, 33893,
            33873, 33856, 33926, 33895, 33840, 33869, 33917,
            33882, 33881, 33908, 33907, 33885, 34055, 33886,
            33847, 33850, 33844, 33914, 33859, 33912, 33842,
            33861, 33833, 33753, 33867, 33839, 33858, 33837,
            33887, 33904, 33849, 33870, 33868, 33874, 33903,
            33989, 33934, 33851, 33863, 33846, 33843, 33896,
            33918, 33860, 33835, 33888, 33876, 33902, 33872,
            34571, 34564, 34551, 34572, 34554, 34518, 34549,
            34637, 34552, 34574, 34569, 34561, 34550, 34573,
            34565, 35030, 35019, 35021, 35022, 35038, 35035,
            35034, 35020, 35024, 35205, 35227, 35295, 35301,
            35300, 35297, 35296, 35298, 35292, 35302, 35446,
            35462, 35455, 35425, 35391, 35447, 35458, 35460,
            35445, 35459, 35457, 35444, 35450, 35900, 35915,
            35914, 35941, 35940, 35942, 35974, 35972, 35973,
            36044, 36200, 36201, 36241, 36236, 36238, 36239,
            36237, 36243, 36244, 36240, 36242, 36336, 36320,
            36332, 36337, 36334, 36304, 36329, 36323, 36322,
            36327, 36338, 36331, 36340, 36614, 36607, 36609,
            36608, 36613, 36615, 36616, 36610, 36619, 36946,
            36927, 36932, 36937, 36925, 37136, 37133, 37135,
            37137, 37142, 37140, 37131, 37134, 37230, 37231,
            37448, 37458, 37424, 37434, 37478, 37427, 37477,
            37470, 37507, 37422, 37450, 37446, 37485, 37484,
            37455, 37472, 37479, 37487, 37430, 37473, 37488,
            37425, 37460, 37475, 37456, 37490, 37454, 37459,
            37452, 37462, 37426, 38303, 38300, 38302, 38299,
            38546, 38547, 38545, 38551, 38606, 38650, 38653,
            38648, 38645, 38771, 38775, 38776, 38770, 38927,
            38925, 38926, 39084, 39158, 39161, 39343, 39346,
            39344, 39349, 39597, 39595, 39771, 40170, 40173,
            40167, 40576, 40701, 20710, 20692, 20695, 20712,
            20723, 20699, 20714, 20701, 20708, 20691, 20716,
            20720, 20719, 20707, 20704, 20952, 21120, 21121,
            21225, 21227, 21296, 21420, 22055, 22037, 22028,
            22034, 22012, 22031, 22044, 22017, 22035, 22018,
            22010, 22045, 22020, 22015, 22009, 22665, 22652,
            22672, 22680, 22662, 22657, 22655, 22644, 22667,
            22650, 22663, 22673, 22670, 22646, 22658, 22664,
            22651, 22676, 22671, 22782, 22891, 23260, 23278,
            23269, 23253, 23274, 23258, 23277, 23275, 23283,
            23266, 23264, 23259, 23276, 23262, 23261, 23257,
            23272, 23263, 23415, 23520, 23523, 23651, 23938,
            23936, 23933, 23942, 23930, 23937, 23927, 23946,
            23945, 23944, 23934, 23932, 23949, 23929, 23935,
            24152, 24153, 24147, 24280, 24273, 24279, 24270,
            24284, 24277, 24281, 24274, 24276, 24388, 24387,
            24431, 24502, 24876, 24872, 24897, 24926, 24945,
            24947, 24914, 24915, 24946, 24940, 24960, 24948,
            24916, 24954, 24923, 24933, 24891, 24938, 24929,
            24918, 25129, 25127, 25131, 25643, 25677, 25691,
            25693, 25716, 25718, 25714, 25715, 25725, 25717,
            25702, 25766, 25678, 25730, 25694, 25692, 25675,
            25683, 25696, 25680, 25727, 25663, 25708, 25707,
            25689, 25701, 25719, 25971, 26016, 26273, 26272,
            26271, 26373, 26372, 26402, 27057, 27062, 27081,
            27040, 27086, 27030, 27056, 27052, 27068, 27025,
            27033, 27022, 27047, 27021, 27049, 27070, 27055,
            27071, 27076, 27069, 27044, 27092, 27065, 27082,
            27034, 27087, 27059, 27027, 27050, 27041, 27038,
            27097, 27031, 27024, 27074, 27061, 27045, 27078,
            27466, 27469, 27467, 27550, 27551, 27552, 27587,
            27588, 27646, 28366, 28405, 28401, 28419, 28453,
            28408, 28471, 28411, 28462, 28425, 28494, 28441,
            28442, 28455, 28440, 28475, 28434, 28397, 28426,
            28470, 28531, 28409, 28398, 28461, 28480, 28464,
            28476, 28469, 28395, 28423, 28430, 28483, 28421,
            28413, 28406, 28473, 28444, 28412, 28474, 28447,
            28429, 28446, 28424, 28449, 29063, 29072, 29065,
            29056, 29061, 29058, 29071, 29051, 29062, 29057,
            29079, 29252, 29267, 29335, 29333, 29331, 29507,
            29517, 29521, 29516, 29794, 29811, 29809, 29813,
            29810, 29799, 29806, 29952, 29954, 29955, 30077,
            30096, 30230, 30216, 30220, 30229, 30225, 30218,
            30228, 30392, 30593, 30588, 30597, 30594, 30574,
            30592, 30575, 30590, 30595, 30898, 30890, 30900,
            30893, 30888, 30846, 30891, 30878, 30885, 30880,
            30892, 30882, 30884, 31128, 31114, 31115, 31126,
            31125, 31124, 31123, 31127, 31112, 31122, 31120,
            31275, 31306, 31280, 31279, 31272, 31270, 31400,
            31403, 31404, 31470, 31624, 31644, 31626, 31633,
            31632, 31638, 31629, 31628, 31643, 31630, 31621,
            31640, 21124, 31641, 31652, 31618, 31931, 31935,
            31932, 31930, 32167, 32183, 32194, 32163, 32170,
            32193, 32192, 32197, 32157, 32206, 32196, 32198,
            32203, 32204, 32175, 32185, 32150, 32188, 32159,
            32166, 32174, 32169, 32161, 32201, 32627, 32738,
            32739, 32741, 32734, 32804, 32861, 32860, 33161,
            33158, 33155, 33159, 33165, 33164, 33163, 33301,
            33943, 33956, 33953, 33951, 33978, 33998, 33986,
            33964, 33966, 33963, 33977, 33972, 33985, 33997,
            33962, 33946, 33969, 34000, 33949, 33959, 33979,
            33954, 33940, 33991, 33996, 33947, 33961, 33967,
            33960, 34006, 33944, 33974, 33999, 33952, 34007,
            34004, 34002, 34011, 33968, 33937, 34401, 34611,
            34595, 34600, 34667, 34624, 34606, 34590, 34593,
            34585, 34587, 34627, 34604, 34625, 34622, 34630,
            34592, 34610, 34602, 34605, 34620, 34578, 34618,
            34609, 34613, 34626, 34598, 34599, 34616, 34596,
            34586, 34608, 34577, 35063, 35047, 35057, 35058,
            35066, 35070, 35054, 35068, 35062, 35067, 35056,
            35052, 35051, 35229, 35233, 35231, 35230, 35305,
            35307, 35304, 35499, 35481, 35467, 35474, 35471,
            35478, 35901, 35944, 35945, 36053, 36047, 36055,
            36246, 36361, 36354, 36351, 36365, 36349, 36362,
            36355, 36359, 36358, 36357, 36350, 36352, 36356,
            36624, 36625, 36622, 36621, 37155, 37148, 37152,
            37154, 37151, 37149, 37146, 37156, 37153, 37147,
            37242, 37234, 37241, 37235, 37541, 37540, 37494,
            37531, 37498, 37536, 37524, 37546, 37517, 37542,
            37530, 37547, 37497, 37527, 37503, 37539, 37614,
            37518, 37506, 37525, 37538, 37501, 37512, 37537,
            37514, 37510, 37516, 37529, 37543, 37502, 37511,
            37545, 37533, 37515, 37421, 38558, 38561, 38655,
            38744, 38781, 38778, 38782, 38787, 38784, 38786,
            38779, 38788, 38785, 38783, 38862, 38861, 38934,
            39085, 39086, 39170, 39168, 39175, 39325, 39324,
            39363, 39353, 39355, 39354, 39362, 39357, 39367,
            39601, 39651, 39655, 39742, 39743, 39776, 39777,
            39775, 40177, 40178, 40181, 40615, 20735, 20739,
            20784, 20728, 20742, 20743, 20726, 20734, 20747,
            20748, 20733, 20746, 21131, 21132, 21233, 21231,
            22088, 22082, 22092, 22069, 22081, 22090, 22089,
            22086, 22104, 22106, 22080, 22067, 22077, 22060,
            22078, 22072, 22058, 22074, 22298, 22699, 22685,
            22705, 22688, 22691, 22703, 22700, 22693, 22689,
            22783, 23295, 23284, 23293, 23287, 23286, 23299,
            23288, 23298, 23289, 23297, 23303, 23301, 23311,
            23655, 23961, 23959, 23967, 23954, 23970, 23955,
            23957, 23968, 23964, 23969, 23962, 23966, 24169,
            24157, 24160, 24156, 32243, 24283, 24286, 24289,
            24393, 24498, 24971, 24963, 24953, 25009, 25008,
            24994, 24969, 24987, 24979, 25007, 25005, 24991,
            24978, 25002, 24993, 24973, 24934, 25011, 25133,
            25710, 25712, 25750, 25760, 25733, 25751, 25756,
            25743, 25739, 25738, 25740, 25763, 25759, 25704,
            25777, 25752, 25974, 25978, 25977, 25979, 26034,
            26035, 26293, 26288, 26281, 26290, 26295, 26282,
            26287, 27136, 27142, 27159, 27109, 27128, 27157,
            27121, 27108, 27168, 27135, 27116, 27106, 27163,
            27165, 27134, 27175, 27122, 27118, 27156, 27127,
            27111, 27200, 27144, 27110, 27131, 27149, 27132,
            27115, 27145, 27140, 27160, 27173, 27151, 27126,
            27174, 27143, 27124, 27158, 27473, 27557, 27555,
            27554, 27558, 27649, 27648, 27647, 27650, 28481,
            28454, 28542, 28551, 28614, 28562, 28557, 28553,
            28556, 28514, 28495, 28549, 28506, 28566, 28534,
            28524, 28546, 28501, 28530, 28498, 28496, 28503,
            28564, 28563, 28509, 28416, 28513, 28523, 28541,
            28519, 28560, 28499, 28555, 28521, 28543, 28565,
            28515, 28535, 28522, 28539, 29106, 29103, 29083,
            29104, 29088, 29082, 29097, 29109, 29085, 29093,
            29086, 29092, 29089, 29098, 29084, 29095, 29107,
            29336, 29338, 29528, 29522, 29534, 29535, 29536,
            29533, 29531, 29537, 29530, 29529, 29538, 29831,
            29833, 29834, 29830, 29825, 29821, 29829, 29832,
            29820, 29817, 29960, 29959, 30078, 30245, 30238,
            30233, 30237, 30236, 30243, 30234, 30248, 30235,
            30364, 30365, 30366, 30363, 30605, 30607, 30601,
            30600, 30925, 30907, 30927, 30924, 30929, 30926,
            30932, 30920, 30915, 30916, 30921, 31130, 31137,
            31136, 31132, 31138, 31131, 27510, 31289, 31410,
            31412, 31411, 31671, 31691, 31678, 31660, 31694,
            31663, 31673, 31690, 31669, 31941, 31944, 31948,
            31947, 32247, 32219, 32234, 32231, 32215, 32225,
            32259, 32250, 32230, 32246, 32241, 32240, 32238,
            32223, 32630, 32684, 32688, 32685, 32749, 32747,
            32746, 32748, 32742, 32744, 32868, 32871, 33187,
            33183, 33182, 33173, 33186, 33177, 33175, 33302,
            33359, 33363, 33362, 33360, 33358, 33361, 34084,
            34107, 34063, 34048, 34089, 34062, 34057, 34061,
            34079, 34058, 34087, 34076, 34043, 34091, 34042,
            34056, 34060, 34036, 34090, 34034, 34069, 34039,
            34027, 34035, 34044, 34066, 34026, 34025, 34070,
            34046, 34088, 34077, 34094, 34050, 34045, 34078,
            34038, 34097, 34086, 34023, 34024, 34032, 34031,
            34041, 34072, 34080, 34096, 34059, 34073, 34095,
            34402, 34646, 34659, 34660, 34679, 34785, 34675,
            34648, 34644, 34651, 34642, 34657, 34650, 34641,
            34654, 34669, 34666, 34640, 34638, 34655, 34653,
            34671, 34668, 34682, 34670, 34652, 34661, 34639,
            34683, 34677, 34658, 34663, 34665, 34906, 35077,
            35084, 35092, 35083, 35095, 35096, 35097, 35078,
            35094, 35089, 35086, 35081, 35234, 35236, 35235,
            35309, 35312, 35308, 35535, 35526, 35512, 35539,
            35537, 35540, 35541, 35515, 35543, 35518, 35520,
            35525, 35544, 35523, 35514, 35517, 35545, 35902,
            35917, 35983, 36069, 36063, 36057, 36072, 36058,
            36061, 36071, 36256, 36252, 36257, 36251, 36384,
            36387, 36389, 36388, 36398, 36373, 36379, 36374,
            36369, 36377, 36390, 36391, 36372, 36370, 36376,
            36371, 36380, 36375, 36378, 36652, 36644, 36632,
            36634, 36640, 36643, 36630, 36631, 36979, 36976,
            36975, 36967, 36971, 37167, 37163, 37161, 37162,
            37170, 37158, 37166, 37253, 37254, 37258, 37249,
            37250, 37252, 37248, 37584, 37571, 37572, 37568,
            37593, 37558, 37583, 37617, 37599, 37592, 37609,
            37591, 37597, 37580, 37615, 37570, 37608, 37578,
            37576, 37582, 37606, 37581, 37589, 37577, 37600,
            37598, 37607, 37585, 37587, 37557, 37601, 37574,
            37556, 38268, 38316, 38315, 38318, 38320, 38564,
            38562, 38611, 38661, 38664, 38658, 38746, 38794,
            38798, 38792, 38864, 38863, 38942, 38941, 38950,
            38953, 38952, 38944, 38939, 38951, 39090, 39176,
            39162, 39185, 39188, 39190, 39191, 39189, 39388,
            39373, 39375, 39379, 39380, 39374, 39369, 39382,
            39384, 39371, 39383, 39372, 39603, 39660, 39659,
            39667, 39666, 39665, 39750, 39747, 39783, 39796,
            39793, 39782, 39798, 39797, 39792, 39784, 39780,
            39788, 40188, 40186, 40189, 40191, 40183, 40199,
            40192, 40185, 40187, 40200, 40197, 40196, 40579,
            40659, 40719, 40720, 20764, 20755, 20759, 20762,
            20753, 20958, 21300, 21473, 22128, 22112, 22126,
            22131, 22118, 22115, 22125, 22130, 22110, 22135,
            22300, 22299, 22728, 22717, 22729, 22719, 22714,
            22722, 22716, 22726, 23319, 23321, 23323, 23329,
            23316, 23315, 23312, 23318, 23336, 23322, 23328,
            23326, 23535, 23980, 23985, 23977, 23975, 23989,
            23984, 23982, 23978, 23976, 23986, 23981, 23983,
            23988, 24167, 24168, 24166, 24175, 24297, 24295,
            24294, 24296, 24293, 24395, 24508, 24989, 25000,
            24982, 25029, 25012, 25030, 25025, 25036, 25018,
            25023, 25016, 24972, 25815, 25814, 25808, 25807,
            25801, 25789, 25737, 25795, 25819, 25843, 25817,
            25907, 25983, 25980, 26018, 26312, 26302, 26304,
            26314, 26315, 26319, 26301, 26299, 26298, 26316,
            26403, 27188, 27238, 27209, 27239, 27186, 27240,
            27198, 27229, 27245, 27254, 27227, 27217, 27176,
            27226, 27195, 27199, 27201, 27242, 27236, 27216,
            27215, 27220, 27247, 27241, 27232, 27196, 27230,
            27222, 27221, 27213, 27214, 27206, 27477, 27476,
            27478, 27559, 27562, 27563, 27592, 27591, 27652,
            27651, 27654, 28589, 28619, 28579, 28615, 28604,
            28622, 28616, 28510, 28612, 28605, 28574, 28618,
            28584, 28676, 28581, 28590, 28602, 28588, 28586,
            28623, 28607, 28600, 28578, 28617, 28587, 28621,
            28591, 28594, 28592, 29125, 29122, 29119, 29112,
            29142, 29120, 29121, 29131, 29140, 29130, 29127,
            29135, 29117, 29144, 29116, 29126, 29146, 29147,
            29341, 29342, 29545, 29542, 29543, 29548, 29541,
            29547, 29546, 29823, 29850, 29856, 29844, 29842,
            29845, 29857, 29963, 30080, 30255, 30253, 30257,
            30269, 30259, 30268, 30261, 30258, 30256, 30395,
            30438, 30618, 30621, 30625, 30620, 30619, 30626,
            30627, 30613, 30617, 30615, 30941, 30953, 30949,
            30954, 30942, 30947, 30939, 30945, 30946, 30957,
            30943, 30944, 31140, 31300, 31304, 31303, 31414,
            31416, 31413, 31409, 31415, 31710, 31715, 31719,
            31709, 31701, 31717, 31706, 31720, 31737, 31700,
            31722, 31714, 31708, 31723, 31704, 31711, 31954,
            31956, 31959, 31952, 31953, 32274, 32289, 32279,
            32268, 32287, 32288, 32275, 32270, 32284, 32277,
            32282, 32290, 32267, 32271, 32278, 32269, 32276,
            32293, 32292, 32579, 32635, 32636, 32634, 32689,
            32751, 32810, 32809, 32876, 33201, 33190, 33198,
            33209, 33205, 33195, 33200, 33196, 33204, 33202,
            33207, 33191, 33266, 33365, 33366, 33367, 34134,
            34117, 34155, 34125, 34131, 34145, 34136, 34112,
            34118, 34148, 34113, 34146, 34116, 34129, 34119,
            34147, 34110, 34139, 34161, 34126, 34158, 34165,
            34133, 34151, 34144, 34188, 34150, 34141, 34132,
            34149, 34156, 34403, 34405, 34404, 34715, 34703,
            34711, 34707, 34706, 34696, 34689, 34710, 34712,
            34681, 34695, 34723, 34693, 34704, 34705, 34717,
            34692, 34708, 34716, 34714, 34697, 35102, 35110,
            35120, 35117, 35118, 35111, 35121, 35106, 35113,
            35107, 35119, 35116, 35103, 35313, 35552, 35554,
            35570, 35572, 35573, 35549, 35604, 35556, 35551,
            35568, 35528, 35550, 35553, 35560, 35583, 35567,
            35579, 35985, 35986, 35984, 36085, 36078, 36081,
            36080, 36083, 36204, 36206, 36261, 36263, 36403,
            36414, 36408, 36416, 36421, 36406, 36412, 36413,
            36417, 36400, 36415, 36541, 36662, 36654, 36661,
            36658, 36665, 36663, 36660, 36982, 36985, 36987,
            36998, 37114, 37171, 37173, 37174, 37267, 37264,
            37265, 37261, 37263, 37671, 37662, 37640, 37663,
            37638, 37647, 37754, 37688, 37692, 37659, 37667,
            37650, 37633, 37702, 37677, 37646, 37645, 37579,
            37661, 37626, 37669, 37651, 37625, 37623, 37684,
            37634, 37668, 37631, 37673, 37689, 37685, 37674,
            37652, 37644, 37643, 37630, 37641, 37632, 37627,
            37654, 38332, 38349, 38334, 38329, 38330, 38326,
            38335, 38325, 38333, 38569, 38612, 38667, 38674,
            38672, 38809, 38807, 38804, 38896, 38904, 38965,
            38959, 38962, 39204, 39199, 39207, 39209, 39326,
            39406, 39404, 39397, 39396, 39408, 39395, 39402,
            39401, 39399, 39609, 39615, 39604, 39611, 39670,
            39674, 39673, 39671, 39731, 39808, 39813, 39815,
            39804, 39806, 39803, 39810, 39827, 39826, 39824,
            39802, 39829, 39805, 39816, 40229, 40215, 40224,
            40222, 40212, 40233, 40221, 40216, 40226, 40208,
            40217, 40223, 40584, 40582, 40583, 40622, 40621,
            40661, 40662, 40698, 40722, 40765, 20774, 20773,
            20770, 20772, 20768, 20777, 21236, 22163, 22156,
            22157, 22150, 22148, 22147, 22142, 22146, 22143,
            22145, 22742, 22740, 22735, 22738, 23341, 23333,
            23346, 23331, 23340, 23335, 23334, 23343, 23342,
            23419, 23537, 23538, 23991, 24172, 24170, 24510,
            24507, 25027, 25013, 25020, 25063, 25056, 25061,
            25060, 25064, 25054, 25839, 25833, 25827, 25835,
            25828, 25832, 25985, 25984, 26038, 26074, 26322,
            27277, 27286, 27265, 27301, 27273, 27295, 27291,
            27297, 27294, 27271, 27283, 27278, 27285, 27267,
            27304, 27300, 27281, 27263, 27302, 27290, 27269,
            27276, 27282, 27483, 27565, 27657, 28620, 28585,
            28660, 28628, 28643, 28636, 28653, 28647, 28646,
            28638, 28658, 28637, 28642, 28648, 29153, 29169,
            29160, 29170, 29156, 29168, 29154, 29555, 29550,
            29551, 29847, 29874, 29867, 29840, 29866, 29869,
            29873, 29861, 29871, 29968, 29969, 29970, 29967,
            30084, 30275, 30280, 30281, 30279, 30372, 30441,
            30645, 30635, 30642, 30647, 30646, 30644, 30641,
            30632, 30704, 30963, 30973, 30978, 30971, 30972,
            30962, 30981, 30969, 30974, 30980, 31147, 31144,
            31324, 31323, 31318, 31320, 31316, 31322, 31422,
            31424, 31425, 31749, 31759, 31730, 31744, 31743,
            31739, 31758, 31732, 31755, 31731, 31746, 31753,
            31747, 31745, 31736, 31741, 31750, 31728, 31729,
            31760, 31754, 31976, 32301, 32316, 32322, 32307,
            38984, 32312, 32298, 32329, 32320, 32327, 32297,
            32332, 32304, 32315, 32310, 32324, 32314, 32581,
            32639, 32638, 32637, 32756, 32754, 32812, 33211,
            33220, 33228, 33226, 33221, 33223, 33212, 33257,
            33371, 33370, 33372, 34179, 34176, 34191, 34215,
            34197, 34208, 34187, 34211, 34171, 34212, 34202,
            34206, 34167, 34172, 34185, 34209, 34170, 34168,
            34135, 34190, 34198, 34182, 34189, 34201, 34205,
            34177, 34210, 34178, 34184, 34181, 34169, 34166,
            34200, 34192, 34207, 34408, 34750, 34730, 34733,
            34757, 34736, 34732, 34745, 34741, 34748, 34734,
            34761, 34755, 34754, 34764, 34743, 34735, 34756,
            34762, 34740, 34742, 34751, 34744, 34749, 34782,
            34738, 35125, 35123, 35132, 35134, 35137, 35154,
            35127, 35138, 35245, 35247, 35246, 35314, 35315,
            35614, 35608, 35606, 35601, 35589, 35595, 35618,
            35599, 35602, 35605, 35591, 35597, 35592, 35590,
            35612, 35603, 35610, 35919, 35952, 35954, 35953,
            35951, 35989, 35988, 36089, 36207, 36430, 36429,
            36435, 36432, 36428, 36423, 36675, 36672, 36997,
            36990, 37176, 37274, 37282, 37275, 37273, 37279,
            37281, 37277, 37280, 37793, 37763, 37807, 37732,
            37718, 37703, 37756, 37720, 37724, 37750, 37705,
            37712, 37713, 37728, 37741, 37775, 37708, 37738,
            37753, 37719, 37717, 37714, 37711, 37745, 37751,
            37755, 37729, 37726, 37731, 37735, 37760, 37710,
            37721, 38343, 38336, 38345, 38339, 38341, 38327,
            38574, 38576, 38572, 38688, 38687, 38680, 38685,
            38681, 38810, 38817, 38812, 38814, 38813, 38869,
            38868, 38897, 38977, 38980, 38986, 38985, 38981,
            38979, 39205, 39211, 39212, 39210, 39219, 39218,
            39215, 39213, 39217, 39216, 39320, 39331, 39329,
            39426, 39418, 39412, 39415, 39417, 39416, 39414,
            39419, 39421, 39422, 39420, 39427, 39614, 39678,
            39677, 39681, 39676, 39752, 39834, 39848, 39838,
            39835, 39846, 39841, 39845, 39844, 39814, 39842,
            39840, 39855, 40243, 40257, 40295, 40246, 40238,
            40239, 40241, 40248, 40240, 40261, 40258, 40259,
            40254, 40247, 40256, 40253, 32757, 40237, 40586,
            40585, 40589, 40624, 40648, 40666, 40699, 40703,
            40740, 40739, 40738, 40788, 40864, 20785, 20781,
            20782, 22168, 22172, 22167, 22170, 22173, 22169,
            22896, 23356, 23657, 23658, 24000, 24173, 24174,
            25048, 25055, 25069, 25070, 25073, 25066, 25072,
            25067, 25046, 25065, 25855, 25860, 25853, 25848,
            25857, 25859, 25852, 26004, 26075, 26330, 26331,
            26328, 27333, 27321, 27325, 27361, 27334, 27322,
            27318, 27319, 27335, 27316, 27309, 27486, 27593,
            27659, 28679, 28684, 28685, 28673, 28677, 28692,
            28686, 28671, 28672, 28667, 28710, 28668, 28663,
            28682, 29185, 29183, 29177, 29187, 29181, 29558,
            29880, 29888, 29877, 29889, 29886, 29878, 29883,
            29890, 29972, 29971, 30300, 30308, 30297, 30288,
            30291, 30295, 30298, 30374, 30397, 30444, 30658,
            30650, 30975, 30988, 30995, 30996, 30985, 30992,
            30994, 30993, 31149, 31148, 31327, 31772, 31785,
            31769, 31776, 31775, 31789, 31773, 31782, 31784,
            31778, 31781, 31792, 32348, 32336, 32342, 32355,
            32344, 32354, 32351, 32337, 32352, 32343, 32339,
            32693, 32691, 32759, 32760, 32885, 33233, 33234,
            33232, 33375, 33374, 34228, 34246, 34240, 34243,
            34242, 34227, 34229, 34237, 34247, 34244, 34239,
            34251, 34254, 34248, 34245, 34225, 34230, 34258,
            34340, 34232, 34231, 34238, 34409, 34791, 34790,
            34786, 34779, 34795, 34794, 34789, 34783, 34803,
            34788, 34772, 34780, 34771, 34797, 34776, 34787,
            34724, 34775, 34777, 34817, 34804, 34792, 34781,
            35155, 35147, 35151, 35148, 35142, 35152, 35153,
            35145, 35626, 35623, 35619, 35635, 35632, 35637,
            35655, 35631, 35644, 35646, 35633, 35621, 35639,
            35622, 35638, 35630, 35620, 35643, 35645, 35642,
            35906, 35957, 35993, 35992, 35991, 36094, 36100,
            36098, 36096, 36444, 36450, 36448, 36439, 36438,
            36446, 36453, 36455, 36443, 36442, 36449, 36445,
            36457, 36436, 36678, 36679, 36680, 36683, 37160,
            37178, 37179, 37182, 37288, 37285, 37287, 37295,
            37290, 37813, 37772, 37778, 37815, 37787, 37789,
            37769, 37799, 37774, 37802, 37790, 37798, 37781,
            37768, 37785, 37791, 37773, 37809, 37777, 37810,
            37796, 37800, 37812, 37795, 37797, 38354, 38355,
            38353, 38579, 38615, 38618, 24002, 38623, 38616,
            38621, 38691, 38690, 38693, 38828, 38830, 38824,
            38827, 38820, 38826, 38818, 38821, 38871, 38873,
            38870, 38872, 38906, 38992, 38993, 38994, 39096,
            39233, 39228, 39226, 39439, 39435, 39433, 39437,
            39428, 39441, 39434, 39429, 39431, 39430, 39616,
            39644, 39688, 39684, 39685, 39721, 39733, 39754,
            39756, 39755, 39879, 39878, 39875, 39871, 39873,
            39861, 39864, 39891, 39862, 39876, 39865, 39869,
            40284, 40275, 40271, 40266, 40283, 40267, 40281,
            40278, 40268, 40279, 40274, 40276, 40287, 40280,
            40282, 40590, 40588, 40671, 40705, 40704, 40726,
            40741, 40747, 40746, 40745, 40744, 40780, 40789,
            20788, 20789, 21142, 21239, 21428, 22187, 22189,
            22182, 22183, 22186, 22188, 22746, 22749, 22747,
            22802, 23357, 23358, 23359, 24003, 24176, 24511,
            25083, 25863, 25872, 25869, 25865, 25868, 25870,
            25988, 26078, 26077, 26334, 27367, 27360, 27340,
            27345, 27353, 27339, 27359, 27356, 27344, 27371,
            27343, 27341, 27358, 27488, 27568, 27660, 28697,
            28711, 28704, 28694, 28715, 28705, 28706, 28707,
            28713, 28695, 28708, 28700, 28714, 29196, 29194,
            29191, 29186, 29189, 29349, 29350, 29348, 29347,
            29345, 29899, 29893, 29879, 29891, 29974, 30304,
            30665, 30666, 30660, 30705, 31005, 31003, 31009,
            31004, 30999, 31006, 31152, 31335, 31336, 31795,
            31804, 31801, 31788, 31803, 31980, 31978, 32374,
            32373, 32376, 32368, 32375, 32367, 32378, 32370,
            32372, 32360, 32587, 32586, 32643, 32646, 32695,
            32765, 32766, 32888, 33239, 33237, 33380, 33377,
            33379, 34283, 34289, 34285, 34265, 34273, 34280,
            34266, 34263, 34284, 34290, 34296, 34264, 34271,
            34275, 34268, 34257, 34288, 34278, 34287, 34270,
            34274, 34816, 34810, 34819, 34806, 34807, 34825,
            34828, 34827, 34822, 34812, 34824, 34815, 34826,
            34818, 35170, 35162, 35163, 35159, 35169, 35164,
            35160, 35165, 35161, 35208, 35255, 35254, 35318,
            35664, 35656, 35658, 35648, 35667, 35670, 35668,
            35659, 35669, 35665, 35650, 35666, 35671, 35907,
            35959, 35958, 35994, 36102, 36103, 36105, 36268,
            36266, 36269, 36267, 36461, 36472, 36467, 36458,
            36463, 36475, 36546, 36690, 36689, 36687, 36688,
            36691, 36788, 37184, 37183, 37296, 37293, 37854,
            37831, 37839, 37826, 37850, 37840, 37881, 37868,
            37836, 37849, 37801, 37862, 37834, 37844, 37870,
            37859, 37845, 37828, 37838, 37824, 37842, 37863,
            38269, 38362, 38363, 38625, 38697, 38699, 38700,
            38696, 38694, 38835, 38839, 38838, 38877, 38878,
            38879, 39004, 39001, 39005, 38999, 39103, 39101,
            39099, 39102, 39240, 39239, 39235, 39334, 39335,
            39450, 39445, 39461, 39453, 39460, 39451, 39458,
            39456, 39463, 39459, 39454, 39452, 39444, 39618,
            39691, 39690, 39694, 39692, 39735, 39914, 39915,
            39904, 39902, 39908, 39910, 39906, 39920, 39892,
            39895, 39916, 39900, 39897, 39909, 39893, 39905,
            39898, 40311, 40321, 40330, 40324, 40328, 40305,
            40320, 40312, 40326, 40331, 40332, 40317, 40299,
            40308, 40309, 40304, 40297, 40325, 40307, 40315,
            40322, 40303, 40313, 40319, 40327, 40296, 40596,
            40593, 40640, 40700, 40749, 40768, 40769, 40781,
            40790, 40791, 40792, 21303, 22194, 22197, 22195,
            22755, 23365, 24006, 24007, 24302, 24303, 24512,
            24513, 25081, 25879, 25878, 25877, 25875, 26079,
            26344, 26339, 26340, 27379, 27376, 27370, 27368,
            27385, 27377, 27374, 27375, 28732, 28725, 28719,
            28727, 28724, 28721, 28738, 28728, 28735, 28730,
            28729, 28736, 28731, 28723, 28737, 29203, 29204,
            29352, 29565, 29564, 29882, 30379, 30378, 30398,
            30445, 30668, 30670, 30671, 30669, 30706, 31013,
            31011, 31015, 31016, 31012, 31017, 31154, 31342,
            31340, 31341, 31479, 31817, 31816, 31818, 31815,
            31813, 31982, 32379, 32382, 32385, 32384, 32698,
            32767, 32889, 33243, 33241, 33291, 33384, 33385,
            34338, 34303, 34305, 34302, 34331, 34304, 34294,
            34308, 34313, 34309, 34316, 34301, 34841, 34832,
            34833, 34839, 34835, 34838, 35171, 35174, 35257,
            35319, 35680, 35690, 35677, 35688, 35683, 35685,
            35687, 35693, 36270, 36486, 36488, 36484, 36697,
            36694, 36695, 36693, 36696, 36698, 37005, 37187,
            37185, 37303, 37301, 37298, 37299, 37899, 37907,
            37883, 37920, 37903, 37908, 37886, 37909, 37904,
            37928, 37913, 37901, 37877, 37888, 37879, 37895,
            37902, 37910, 37906, 37882, 37897, 37880, 37898,
            37887, 37884, 37900, 37878, 37905, 37894, 38366,
            38368, 38367, 38702, 38703, 38841, 38843, 38909,
            38910, 39008, 39010, 39011, 39007, 39105, 39106,
            39248, 39246, 39257, 39244, 39243, 39251, 39474,
            39476, 39473, 39468, 39466, 39478, 39465, 39470,
            39480, 39469, 39623, 39626, 39622, 39696, 39698,
            39697, 39947, 39944, 39927, 39941, 39954, 39928,
            40000, 39943, 39950, 39942, 39959, 39956, 39945,
            40351, 40345, 40356, 40349, 40338, 40344, 40336,
            40347, 40352, 40340, 40348, 40362, 40343, 40353,
            40346, 40354, 40360, 40350, 40355, 40383, 40361,
            40342, 40358, 40359, 40601, 40603, 40602, 40677,
            40676, 40679, 40678, 40752, 40750, 40795, 40800,
            40798, 40797, 40793, 40849, 20794, 20793, 21144,
            21143, 22211, 22205, 22206, 23368, 23367, 24011,
            24015, 24305, 25085, 25883, 27394, 27388, 27395,
            27384, 27392, 28739, 28740, 28746, 28744, 28745,
            28741, 28742, 29213, 29210, 29209, 29566, 29975,
            30314, 30672, 31021, 31025, 31023, 31828, 31827,
            31986, 32394, 32391, 32392, 32395, 32390, 32397,
            32589, 32699, 32816, 33245, 34328, 34346, 34342,
            34335, 34339, 34332, 34329, 34343, 34350, 34337,
            34336, 34345, 34334, 34341, 34857, 34845, 34843,
            34848, 34852, 34844, 34859, 34890, 35181, 35177,
            35182, 35179, 35322, 35705, 35704, 35653, 35706,
            35707, 36112, 36116, 36271, 36494, 36492, 36702,
            36699, 36701, 37190, 37188, 37189, 37305, 37951,
            37947, 37942, 37929, 37949, 37948, 37936, 37945,
            37930, 37943, 37932, 37952, 37937, 38373, 38372,
            38371, 38709, 38714, 38847, 38881, 39012, 39113,
            39110, 39104, 39256, 39254, 39481, 39485, 39494,
            39492, 39490, 39489, 39482, 39487, 39629, 39701,
            39703, 39704, 39702, 39738, 39762, 39979, 39965,
            39964, 39980, 39971, 39976, 39977, 39972, 39969,
            40375, 40374, 40380, 40385, 40391, 40394, 40399,
            40382, 40389, 40387, 40379, 40373, 40398, 40377,
            40378, 40364, 40392, 40369, 40365, 40396, 40371,
            40397, 40370, 40570, 40604, 40683, 40686, 40685,
            40731, 40728, 40730, 40753, 40782, 40805, 40804,
            40850, 20153, 22214, 22213, 22219, 22897, 23371,
            23372, 24021, 24017, 24306, 25889, 25888, 25894,
            25890, 27403, 27400, 27401, 27661, 28757, 28758,
            28759, 28754, 29214, 29215, 29353, 29567, 29912,
            29909, 29913, 29911, 30317, 30381, 31029, 31156,
            31344, 31345, 31831, 31836, 31833, 31835, 31834,
            31988, 31985, 32401, 32591, 32647, 33246, 33387,
            34356, 34357, 34355, 34348, 34354, 34358, 34860,
            34856, 34854, 34858, 34853, 35185, 35263, 35262,
            35323, 35710, 35716, 35714, 35718, 35717, 35711,
            36117, 36501, 36500, 36506, 36498, 36496, 36502,
            36503, 36704, 36706, 37191, 37964, 37968, 37962,
            37963, 37967, 37959, 37957, 37960, 37961, 37958,
            38719, 38883, 39018, 39017, 39115, 39252, 39259,
            39502, 39507, 39508, 39500, 39503, 39496, 39498,
            39497, 39506, 39504, 39632, 39705, 39723, 39739,
            39766, 39765, 40006, 40008, 39999, 40004, 39993,
            39987, 40001, 39996, 39991, 39988, 39986, 39997,
            39990, 40411, 40402, 40414, 40410, 40395, 40400,
            40412, 40401, 40415, 40425, 40409, 40408, 40406,
            40437, 40405, 40413, 40630, 40688, 40757, 40755,
            40754, 40770, 40811, 40853, 40866, 20797, 21145,
            22760, 22759, 22898, 23373, 24024, 34863, 24399,
            25089, 25091, 25092, 25897, 25893, 26006, 26347,
            27409, 27410, 27407, 27594, 28763, 28762, 29218,
            29570, 29569, 29571, 30320, 30676, 31847, 31846,
            32405, 33388, 34362, 34368, 34361, 34364, 34353,
            34363, 34366, 34864, 34866, 34862, 34867, 35190,
            35188, 35187, 35326, 35724, 35726, 35723, 35720,
            35909, 36121, 36504, 36708, 36707, 37308, 37986,
            37973, 37981, 37975, 37982, 38852, 38853, 38912,
            39510, 39513, 39710, 39711, 39712, 40018, 40024,
            40016, 40010, 40013, 40011, 40021, 40025, 40012,
            40014, 40443, 40439, 40431, 40419, 40427, 40440,
            40420, 40438, 40417, 40430, 40422, 40434, 40432,
            40418, 40428, 40436, 40435, 40424, 40429, 40642,
            40656, 40690, 40691, 40710, 40732, 40760, 40759,
            40758, 40771, 40783, 40817, 40816, 40814, 40815,
            22227, 22221, 23374, 23661, 25901, 26349, 26350,
            27411, 28767, 28769, 28765, 28768, 29219, 29915,
            29925, 30677, 31032, 31159, 31158, 31850, 32407,
            32649, 33389, 34371, 34872, 34871, 34869, 34891,
            35732, 35733, 36510, 36511, 36512, 36509, 37310,
            37309, 37314, 37995, 37992, 37993, 38629, 38726,
            38723, 38727, 38855, 38885, 39518, 39637, 39769,
            40035, 40039, 40038, 40034, 40030, 40032, 40450,
            40446, 40455, 40451, 40454, 40453, 40448, 40449,
            40457, 40447, 40445, 40452, 40608, 40734, 40774,
            40820, 40821, 40822, 22228, 25902, 26040, 27416,
            27417, 27415, 27418, 28770, 29222, 29354, 30680,
            30681, 31033, 31849, 31851, 31990, 32410, 32408,
            32411, 32409, 33248, 33249, 34374, 34375, 34376,
            35193, 35194, 35196, 35195, 35327, 35736, 35737,
            36517, 36516, 36515, 37998, 37997, 37999, 38001,
            38003, 38729, 39026, 39263, 40040, 40046, 40045,
            40459, 40461, 40464, 40463, 40466, 40465, 40609,
            40693, 40713, 40775, 40824, 40827, 40826, 40825,
            22302, 28774, 31855, 34876, 36274, 36518, 37315,
            38004, 38008, 38006, 38005, 39520, 40052, 40051,
            40049, 40053, 40468, 40467, 40694, 40714, 40868,
            28776, 28773, 31991, 34410, 34878, 34877, 34879,
            35742, 35996, 36521, 36553, 38731, 39027, 39028,
            39116, 39265, 39339, 39524, 39526, 39527, 39716,
            40469, 40471, 40776, 25095, 27422, 29223, 34380,
            36520, 38018, 38016, 38017, 39529, 39528, 39726,
            40473, 29225, 34379, 35743, 38019, 40057, 40631,
            30325, 39531, 40058, 40477, 28777, 28778, 40612,
            40830, 40777, 40856, 30849, 37561, 35023, 22715,
            24658, 31911, 23290, 9556, 9574, 9559, 9568, 9580,
            9571, 9562, 9577, 9565, 9554, 9572, 9557, 9566,
            9578, 9569, 9560, 9575, 9563, 9555, 9573, 9558,
            9567, 9579, 9570, 9561, 9576, 9564, 9553, 9552,
            9581, 9582, 9584, 9583, 65517, 132423, 37595,
            132575, 147397, 34124, 17077, 29679, 20917, 13897,
            149826, 166372, 37700, 137691, 33518, 146632, 30780,
            26436, 25311, 149811, 166314, 131744, 158643,
            135941, 20395, 140525, 20488, 159017, 162436,
            144896, 150193, 140563, 20521, 131966, 24484,
            131968, 131911, 28379, 132127, 20605, 20737, 13434,
            20750, 39020, 14147, 33814, 149924, 132231, 20832,
            144308, 20842, 134143, 139516, 131813, 140592,
            132494, 143923, 137603, 23426, 34685, 132531,
            146585, 20914, 20920, 40244, 20937, 20943, 20945,
            15580, 20947, 150182, 20915, 20962, 21314, 20973,
            33741, 26942, 145197, 24443, 21003, 21030, 21052,
            21173, 21079, 21140, 21177, 21189, 31765, 34114,
            21216, 34317, 158483, 21253, 166622, 21833, 28377,
            147328, 133460, 147436, 21299, 21316, 134114, 27851,
            136998, 26651, 29653, 24650, 16042, 14540, 136936,
            29149, 17570, 21357, 21364, 165547, 21374, 21375,
            136598, 136723, 30694, 21395, 166555, 21408, 21419,
            21422, 29607, 153458, 16217, 29596, 21441, 21445,
            27721, 20041, 22526, 21465, 15019, 134031, 21472,
            147435, 142755, 21494, 134263, 21523, 28793, 21803,
            26199, 27995, 21613, 158547, 134516, 21853, 21647,
            21668, 18342, 136973, 134877, 15796, 134477, 166332,
            140952, 21831, 19693, 21551, 29719, 21894, 21929,
            22021, 137431, 147514, 17746, 148533, 26291, 135348,
            22071, 26317, 144010, 26276, 26285, 22093, 22095,
            30961, 22257, 38791, 21502, 22272, 22255, 22253,
            166758, 13859, 135759, 22342, 147877, 27758, 28811,
            22338, 14001, 158846, 22502, 136214, 22531, 136276,
            148323, 22566, 150517, 22620, 22698, 13665, 22752,
            22748, 135740, 22779, 23551, 22339, 172368, 148088,
            37843, 13729, 22815, 26790, 14019, 28249, 136766,
            23076, 21843, 136850, 34053, 22985, 134478, 158849,
            159018, 137180, 23001, 137211, 137138, 159142,
            28017, 137256, 136917, 23033, 159301, 23211, 23139,
            14054, 149929, 23159, 14088, 23190, 29797, 23251,
            159649, 140628, 15749, 137489, 14130, 136888, 24195,
            21200, 23414, 25992, 23420, 162318, 16388, 18525,
            131588, 23509, 24928, 137780, 154060, 132517, 23539,
            23453, 19728, 23557, 138052, 23571, 29646, 23572,
            138405, 158504, 23625, 18653, 23685, 23785, 23791,
            23947, 138745, 138807, 23824, 23832, 23878, 138916,
            23738, 24023, 33532, 14381, 149761, 139337, 139635,
            33415, 14390, 15298, 24110, 27274, 24181, 24186,
            148668, 134355, 21414, 20151, 24272, 21416, 137073,
            24073, 24308, 164994, 24313, 24315, 14496, 24316,
            26686, 37915, 24333, 131521, 194708, 15070, 18606,
            135994, 24378, 157832, 140240, 24408, 140401, 24419,
            38845, 159342, 24434, 37696, 166454, 24487, 23990,
            15711, 152144, 139114, 159992, 140904, 37334,
            131742, 166441, 24625, 26245, 137335, 14691, 15815,
            13881, 22416, 141236, 31089, 15936, 24734, 24740,
            24755, 149890, 149903, 162387, 29860, 20705, 23200,
            24932, 33828, 24898, 194726, 159442, 24961, 20980,
            132694, 24967, 23466, 147383, 141407, 25043, 166813,
            170333, 25040, 14642, 141696, 141505, 24611, 24924,
            25886, 25483, 131352, 25285, 137072, 25301, 142861,
            25452, 149983, 14871, 25656, 25592, 136078, 137212,
            25744, 28554, 142902, 38932, 147596, 153373, 25825,
            25829, 38011, 14950, 25658, 14935, 25933, 28438,
            150056, 150051, 25989, 25965, 25951, 143486, 26037,
            149824, 19255, 26065, 16600, 137257, 26080, 26083,
            24543, 144384, 26136, 143863, 143864, 26180, 143780,
            143781, 26187, 134773, 26215, 152038, 26227, 26228,
            138813, 143921, 165364, 143816, 152339, 30661,
            141559, 39332, 26370, 148380, 150049, 15147, 27130,
            145346, 26462, 26471, 26466, 147917, 168173, 26583,
            17641, 26658, 28240, 37436, 26625, 144358, 159136,
            26717, 144495, 27105, 27147, 166623, 26995, 26819,
            144845, 26881, 26880, 15666, 14849, 144956, 15232,
            26540, 26977, 166474, 17148, 26934, 27032, 15265,
            132041, 33635, 20624, 27129, 144985, 139562, 27205,
            145155, 27293, 15347, 26545, 27336, 168348, 15373,
            27421, 133411, 24798, 27445, 27508, 141261, 28341,
            146139, 132021, 137560, 14144, 21537, 146266, 27617,
            147196, 27612, 27703, 140427, 149745, 158545, 27738,
            33318, 27769, 146876, 17605, 146877, 147876, 149772,
            149760, 146633, 14053, 15595, 134450, 39811, 143865,
            140433, 32655, 26679, 159013, 159137, 159211, 28054,
            27996, 28284, 28420, 149887, 147589, 159346, 34099,
            159604, 20935, 27804, 28189, 33838, 166689, 28207,
            146991, 29779, 147330, 31180, 28239, 23185, 143435,
            28664, 14093, 28573, 146992, 28410, 136343, 147517,
            17749, 37872, 28484, 28508, 15694, 28532, 168304,
            15675, 28575, 147780, 28627, 147601, 147797, 147513,
            147440, 147380, 147775, 20959, 147798, 147799,
            147776, 156125, 28747, 28798, 28839, 28801, 28876,
            28885, 28886, 28895, 16644, 15848, 29108, 29078,
            148087, 28971, 28997, 23176, 29002, 29038, 23708,
            148325, 29007, 37730, 148161, 28972, 148570, 150055,
            150050, 29114, 166888, 28861, 29198, 37954, 29205,
            22801, 37955, 29220, 37697, 153093, 29230, 29248,
            149876, 26813, 29269, 29271, 15957, 143428, 26637,
            28477, 29314, 29482, 29483, 149539, 165931, 18669,
            165892, 29480, 29486, 29647, 29610, 134202, 158254,
            29641, 29769, 147938, 136935, 150052, 26147, 14021,
            149943, 149901, 150011, 29687, 29717, 26883, 150054,
            29753, 132547, 16087, 29788, 141485, 29792, 167602,
            29767, 29668, 29814, 33721, 29804, 14128, 29812,
            37873, 27180, 29826, 18771, 150156, 147807, 150137,
            166799, 23366, 166915, 137374, 29896, 137608, 29966,
            29929, 29982, 167641, 137803, 23511, 167596, 37765,
            30029, 30026, 30055, 30062, 151426, 16132, 150803,
            30094, 29789, 30110, 30132, 30210, 30252, 30289,
            30287, 30319, 30326, 156661, 30352, 33263, 14328,
            157969, 157966, 30369, 30373, 30391, 30412, 159647,
            33890, 151709, 151933, 138780, 30494, 30502, 30528,
            25775, 152096, 30552, 144044, 30639, 166244, 166248,
            136897, 30708, 30729, 136054, 150034, 26826, 30895,
            30919, 30931, 38565, 31022, 153056, 30935, 31028,
            30897, 161292, 36792, 34948, 166699, 155779, 140828,
            31110, 35072, 26882, 31104, 153687, 31133, 162617,
            31036, 31145, 28202, 160038, 16040, 31174, 168205,
            31188
        ],
        "euc-kr": [44034, 44035, 44037, 44038, 44043, 44044, 44045,
            44046, 44047, 44056, 44062, 44063, 44065, 44066,
            44067, 44069, 44070, 44071, 44072, 44073, 44074,
            44075, 44078, 44082, 44083, 44084, 44085, 44086,
            44087, 44090, 44091, 44093, 44094, 44095, 44097,
            44098, 44099, 44100, 44101, 44102, 44103, 44104,
            44105, 44106, 44108, 44110, 44111, 44112, 44113,
            44114, 44115, 44117, 44118, 44119, 44121, 44122,
            44123, 44125, 44126, 44127, 44128, 44129, 44130,
            44131, 44132, 44133, 44134, 44135, 44136, 44137,
            44138, 44139, 44140, 44141, 44142, 44143, 44146,
            44147, 44149, 44150, 44153, 44155, 44156, 44157,
            44158, 44159, 44162, 44167, 44168, 44173, 44174,
            44175, 44177, 44178, 44179, 44181, 44182, 44183,
            44184, 44185, 44186, 44187, 44190, 44194, 44195,
            44196, 44197, 44198, 44199, 44203, 44205, 44206,
            44209, 44210, 44211, 44212, 44213, 44214, 44215,
            44218, 44222, 44223, 44224, 44226, 44227, 44229,
            44230, 44231, 44233, 44234, 44235, 44237, 44238,
            44239, 44240, 44241, 44242, 44243, 44244, 44246,
            44248, 44249, 44250, 44251, 44252, 44253, 44254,
            44255, 44258, 44259, 44261, 44262, 44265, 44267,
            44269, 44270, 44274, 44276, 44279, 44280, 44281,
            44282, 44283, 44286, 44287, 44289, 44290, 44291,
            44293, 44295, 44296, 44297, 44298, 44299, 44302,
            44304, 44306, 44307, 44308, 44309, 44310, 44311,
            44313, 44314, 44315, 44317, 44318, 44319, 44321,
            44322, 44323, 44324, 44325, 44326, 44327, 44328,
            44330, 44331, 44334, 44335, 44336, 44337, 44338,
            44339, 44342, 44343, 44345, 44346, 44347, 44349,
            44350, 44351, 44352, 44353, 44354, 44355, 44358,
            44360, 44362, 44363, 44364, 44365, 44366, 44367,
            44369, 44370, 44371, 44373, 44374, 44375, 44377,
            44378, 44379, 44380, 44381, 44382, 44383, 44384,
            44386, 44388, 44389, 44390, 44391, 44392, 44393,
            44394, 44395, 44398, 44399, 44401, 44402, 44407,
            44408, 44409, 44410, 44414, 44416, 44419, 44420,
            44421, 44422, 44423, 44426, 44427, 44429, 44430,
            44431, 44433, 44434, 44435, 44436, 44437, 44438,
            44439, 44440, 44441, 44442, 44443, 44446, 44447,
            44448, 44449, 44450, 44451, 44453, 44454, 44455,
            44456, 44457, 44458, 44459, 44460, 44461, 44462,
            44463, 44464, 44465, 44466, 44467, 44468, 44469,
            44470, 44472, 44473, 44474, 44475, 44476, 44477,
            44478, 44479, 44482, 44483, 44485, 44486, 44487,
            44489, 44490, 44491, 44492, 44493, 44494, 44495,
            44498, 44500, 44501, 44502, 44503, 44504, 44505,
            44506, 44507, 44509, 44510, 44511, 44513, 44514,
            44515, 44517, 44518, 44519, 44520, 44521, 44522,
            44523, 44524, 44525, 44526, 44527, 44528, 44529,
            44530, 44531, 44532, 44533, 44534, 44535, 44538,
            44539, 44541, 44542, 44546, 44547, 44548, 44549,
            44550, 44551, 44554, 44556, 44558, 44559, 44560,
            44561, 44562, 44563, 44565, 44566, 44567, 44568,
            44569, 44570, 44571, 44572, 44573, 44574, 44575,
            44576, 44577, 44578, 44579, 44580, 44581, 44582,
            44583, 44584, 44585, 44586, 44587, 44588, 44589,
            44590, 44591, 44594, 44595, 44597, 44598, 44601,
            44603, 44604, 44605, 44606, 44607, 44610, 44612,
            44615, 44616, 44617, 44619, 44623, 44625, 44626,
            44627, 44629, 44631, 44632, 44633, 44634, 44635,
            44638, 44642, 44643, 44644, 44646, 44647, 44650,
            44651, 44653, 44654, 44655, 44657, 44658, 44659,
            44660, 44661, 44662, 44663, 44666, 44670, 44671,
            44672, 44673, 44674, 44675, 44678, 44679, 44680,
            44681, 44682, 44683, 44685, 44686, 44687, 44688,
            44689, 44690, 44691, 44692, 44693, 44694, 44695,
            44696, 44697, 44698, 44699, 44700, 44701, 44702,
            44703, 44704, 44705, 44706, 44707, 44708, 44709,
            44710, 44711, 44712, 44713, 44714, 44715, 44716,
            44717, 44718, 44719, 44720, 44721, 44722, 44723,
            44724, 44725, 44726, 44727, 44728, 44729, 44730,
            44731, 44735, 44737, 44738, 44739, 44741, 44742,
            44743, 44744, 44745, 44746, 44747, 44750, 44754,
            44755, 44756, 44757, 44758, 44759, 44762, 44763,
            44765, 44766, 44767, 44768, 44769, 44770, 44771,
            44772, 44773, 44774, 44775, 44777, 44778, 44780,
            44782, 44783, 44784, 44785, 44786, 44787, 44789,
            44790, 44791, 44793, 44794, 44795, 44797, 44798,
            44799, 44800, 44801, 44802, 44803, 44804, 44805,
            44806, 44809, 44810, 44811, 44812, 44814, 44815,
            44817, 44818, 44819, 44820, 44821, 44822, 44823,
            44824, 44825, 44826, 44827, 44828, 44829, 44830,
            44831, 44832, 44833, 44834, 44835, 44836, 44837,
            44838, 44839, 44840, 44841, 44842, 44843, 44846,
            44847, 44849, 44851, 44853, 44854, 44855, 44856,
            44857, 44858, 44859, 44862, 44864, 44868, 44869,
            44870, 44871, 44874, 44875, 44876, 44877, 44878,
            44879, 44881, 44882, 44883, 44884, 44885, 44886,
            44887, 44888, 44889, 44890, 44891, 44894, 44895,
            44896, 44897, 44898, 44899, 44902, 44903, 44904,
            44905, 44906, 44907, 44908, 44909, 44910, 44911,
            44912, 44913, 44914, 44915, 44916, 44917, 44918,
            44919, 44920, 44922, 44923, 44924, 44925, 44926,
            44927, 44929, 44930, 44931, 44933, 44934, 44935,
            44937, 44938, 44939, 44940, 44941, 44942, 44943,
            44946, 44947, 44948, 44950, 44951, 44952, 44953,
            44954, 44955, 44957, 44958, 44959, 44960, 44961,
            44962, 44963, 44964, 44965, 44966, 44967, 44968,
            44969, 44970, 44971, 44972, 44973, 44974, 44975,
            44976, 44977, 44978, 44979, 44980, 44981, 44982,
            44983, 44986, 44987, 44989, 44990, 44991, 44993,
            44994, 44995, 44996, 44997, 44998, 45002, 45004,
            45007, 45008, 45009, 45010, 45011, 45013, 45014,
            45015, 45016, 45017, 45018, 45019, 45021, 45022,
            45023, 45024, 45025, 45026, 45027, 45028, 45029,
            45030, 45031, 45034, 45035, 45036, 45037, 45038,
            45039, 45042, 45043, 45045, 45046, 45047, 45049,
            45050, 45051, 45052, 45053, 45054, 45055, 45058,
            45059, 45061, 45062, 45063, 45064, 45065, 45066,
            45067, 45069, 45070, 45071, 45073, 45074, 45075,
            45077, 45078, 45079, 45080, 45081, 45082, 45083,
            45086, 45087, 45088, 45089, 45090, 45091, 45092,
            45093, 45094, 45095, 45097, 45098, 45099, 45100,
            45101, 45102, 45103, 45104, 45105, 45106, 45107,
            45108, 45109, 45110, 45111, 45112, 45113, 45114,
            45115, 45116, 45117, 45118, 45119, 45120, 45121,
            45122, 45123, 45126, 45127, 45129, 45131, 45133,
            45135, 45136, 45137, 45138, 45142, 45144, 45146,
            45147, 45148, 45150, 45151, 45152, 45153, 45154,
            45155, 45156, 45157, 45158, 45159, 45160, 45161,
            45162, 45163, 45164, 45165, 45166, 45167, 45168,
            45169, 45170, 45171, 45172, 45173, 45174, 45175,
            45176, 45177, 45178, 45179, 45182, 45183, 45185,
            45186, 45187, 45189, 45190, 45191, 45192, 45193,
            45194, 45195, 45198, 45200, 45202, 45203, 45204,
            45205, 45206, 45207, 45211, 45213, 45214, 45219,
            45220, 45221, 45222, 45223, 45226, 45232, 45234,
            45238, 45239, 45241, 45242, 45243, 45245, 45246,
            45247, 45248, 45249, 45250, 45251, 45254, 45258,
            45259, 45260, 45261, 45262, 45263, 45266, 45267,
            45269, 45270, 45271, 45273, 45274, 45275, 45276,
            45277, 45278, 45279, 45281, 45282, 45283, 45284,
            45286, 45287, 45288, 45289, 45290, 45291, 45292,
            45293, 45294, 45295, 45296, 45297, 45298, 45299,
            45300, 45301, 45302, 45303, 45304, 45305, 45306,
            45307, 45308, 45309, 45310, 45311, 45312, 45313,
            45314, 45315, 45316, 45317, 45318, 45319, 45322,
            45325, 45326, 45327, 45329, 45332, 45333, 45334,
            45335, 45338, 45342, 45343, 45344, 45345, 45346,
            45350, 45351, 45353, 45354, 45355, 45357, 45358,
            45359, 45360, 45361, 45362, 45363, 45366, 45370,
            45371, 45372, 45373, 45374, 45375, 45378, 45379,
            45381, 45382, 45383, 45385, 45386, 45387, 45388,
            45389, 45390, 45391, 45394, 45395, 45398, 45399,
            45401, 45402, 45403, 45405, 45406, 45407, 45409,
            45410, 45411, 45412, 45413, 45414, 45415, 45416,
            45417, 45418, 45419, 45420, 45421, 45422, 45423,
            45424, 45425, 45426, 45427, 45428, 45429, 45430,
            45431, 45434, 45435, 45437, 45438, 45439, 45441,
            45443, 45444, 45445, 45446, 45447, 45450, 45452,
            45454, 45455, 45456, 45457, 45461, 45462, 45463,
            45465, 45466, 45467, 45469, 45470, 45471, 45472,
            45473, 45474, 45475, 45476, 45477, 45478, 45479,
            45481, 45482, 45483, 45484, 45485, 45486, 45487,
            45488, 45489, 45490, 45491, 45492, 45493, 45494,
            45495, 45496, 45497, 45498, 45499, 45500, 45501,
            45502, 45503, 45504, 45505, 45506, 45507, 45508,
            45509, 45510, 45511, 45512, 45513, 45514, 45515,
            45517, 45518, 45519, 45521, 45522, 45523, 45525,
            45526, 45527, 45528, 45529, 45530, 45531, 45534,
            45536, 45537, 45538, 45539, 45540, 45541, 45542,
            45543, 45546, 45547, 45549, 45550, 45551, 45553,
            45554, 45555, 45556, 45557, 45558, 45559, 45560,
            45562, 45564, 45566, 45567, 45568, 45569, 45570,
            45571, 45574, 45575, 45577, 45578, 45581, 45582,
            45583, 45584, 45585, 45586, 45587, 45590, 45592,
            45594, 45595, 45596, 45597, 45598, 45599, 45601,
            45602, 45603, 45604, 45605, 45606, 45607, 45608,
            45609, 45610, 45611, 45612, 45613, 45614, 45615,
            45616, 45617, 45618, 45619, 45621, 45622, 45623,
            45624, 45625, 45626, 45627, 45629, 45630, 45631,
            45632, 45633, 45634, 45635, 45636, 45637, 45638,
            45639, 45640, 45641, 45642, 45643, 45644, 45645,
            45646, 45647, 45648, 45649, 45650, 45651, 45652,
            45653, 45654, 45655, 45657, 45658, 45659, 45661,
            45662, 45663, 45665, 45666, 45667, 45668, 45669,
            45670, 45671, 45674, 45675, 45676, 45677, 45678,
            45679, 45680, 45681, 45682, 45683, 45686, 45687,
            45688, 45689, 45690, 45691, 45693, 45694, 45695,
            45696, 45697, 45698, 45699, 45702, 45703, 45704,
            45706, 45707, 45708, 45709, 45710, 45711, 45714,
            45715, 45717, 45718, 45719, 45723, 45724, 45725,
            45726, 45727, 45730, 45732, 45735, 45736, 45737,
            45739, 45741, 45742, 45743, 45745, 45746, 45747,
            45749, 45750, 45751, 45752, 45753, 45754, 45755,
            45756, 45757, 45758, 45759, 45760, 45761, 45762,
            45763, 45764, 45765, 45766, 45767, 45770, 45771,
            45773, 45774, 45775, 45777, 45779, 45780, 45781,
            45782, 45783, 45786, 45788, 45790, 45791, 45792,
            45793, 45795, 45799, 45801, 45802, 45808, 45809,
            45810, 45814, 45820, 45821, 45822, 45826, 45827,
            45829, 45830, 45831, 45833, 45834, 45835, 45836,
            45837, 45838, 45839, 45842, 45846, 45847, 45848,
            45849, 45850, 45851, 45853, 45854, 45855, 45856,
            45857, 45858, 45859, 45860, 45861, 45862, 45863,
            45864, 45865, 45866, 45867, 45868, 45869, 45870,
            45871, 45872, 45873, 45874, 45875, 45876, 45877,
            45878, 45879, 45880, 45881, 45882, 45883, 45884,
            45885, 45886, 45887, 45888, 45889, 45890, 45891,
            45892, 45893, 45894, 45895, 45896, 45897, 45898,
            45899, 45900, 45901, 45902, 45903, 45904, 45905,
            45906, 45907, 45911, 45913, 45914, 45917, 45920,
            45921, 45922, 45923, 45926, 45928, 45930, 45932,
            45933, 45935, 45938, 45939, 45941, 45942, 45943,
            45945, 45946, 45947, 45948, 45949, 45950, 45951,
            45954, 45958, 45959, 45960, 45961, 45962, 45963,
            45965, 45966, 45967, 45969, 45970, 45971, 45973,
            45974, 45975, 45976, 45977, 45978, 45979, 45980,
            45981, 45982, 45983, 45986, 45987, 45988, 45989,
            45990, 45991, 45993, 45994, 45995, 45997, 45998,
            45999, 46000, 46001, 46002, 46003, 46004, 46005,
            46006, 46007, 46008, 46009, 46010, 46011, 46012,
            46013, 46014, 46015, 46016, 46017, 46018, 46019,
            46022, 46023, 46025, 46026, 46029, 46031, 46033,
            46034, 46035, 46038, 46040, 46042, 46044, 46046,
            46047, 46049, 46050, 46051, 46053, 46054, 46055,
            46057, 46058, 46059, 46060, 46061, 46062, 46063,
            46064, 46065, 46066, 46067, 46068, 46069, 46070,
            46071, 46072, 46073, 46074, 46075, 46077, 46078,
            46079, 46080, 46081, 46082, 46083, 46084, 46085,
            46086, 46087, 46088, 46089, 46090, 46091, 46092,
            46093, 46094, 46095, 46097, 46098, 46099, 46100,
            46101, 46102, 46103, 46105, 46106, 46107, 46109,
            46110, 46111, 46113, 46114, 46115, 46116, 46117,
            46118, 46119, 46122, 46124, 46125, 46126, 46127,
            46128, 46129, 46130, 46131, 46133, 46134, 46135,
            46136, 46137, 46138, 46139, 46140, 46141, 46142,
            46143, 46144, 46145, 46146, 46147, 46148, 46149,
            46150, 46151, 46152, 46153, 46154, 46155, 46156,
            46157, 46158, 46159, 46162, 46163, 46165, 46166,
            46167, 46169, 46170, 46171, 46172, 46173, 46174,
            46175, 46178, 46180, 46182, 46183, 46184, 46185,
            46186, 46187, 46189, 46190, 46191, 46192, 46193,
            46194, 46195, 46196, 46197, 46198, 46199, 46200,
            46201, 46202, 46203, 46204, 46205, 46206, 46207,
            46209, 46210, 46211, 46212, 46213, 46214, 46215,
            46217, 46218, 46219, 46220, 46221, 46222, 46223,
            46224, 46225, 46226, 46227, 46228, 46229, 46230,
            46231, 46232, 46233, 46234, 46235, 46236, 46238,
            46239, 46240, 46241, 46242, 46243, 46245, 46246,
            46247, 46249, 46250, 46251, 46253, 46254, 46255,
            46256, 46257, 46258, 46259, 46260, 46262, 46264,
            46266, 46267, 46268, 46269, 46270, 46271, 46273,
            46274, 46275, 46277, 46278, 46279, 46281, 46282,
            46283, 46284, 46285, 46286, 46287, 46289, 46290,
            46291, 46292, 46294, 46295, 46296, 46297, 46298,
            46299, 46302, 46303, 46305, 46306, 46309, 46311,
            46312, 46313, 46314, 46315, 46318, 46320, 46322,
            46323, 46324, 46325, 46326, 46327, 46329, 46330,
            46331, 46332, 46333, 46334, 46335, 46336, 46337,
            46338, 46339, 46340, 46341, 46342, 46343, 46344,
            46345, 46346, 46347, 46348, 46349, 46350, 46351,
            46352, 46353, 46354, 46355, 46358, 46359, 46361,
            46362, 46365, 46366, 46367, 46368, 46369, 46370,
            46371, 46374, 46379, 46380, 46381, 46382, 46383,
            46386, 46387, 46389, 46390, 46391, 46393, 46394,
            46395, 46396, 46397, 46398, 46399, 46402, 46406,
            46407, 46408, 46409, 46410, 46414, 46415, 46417,
            46418, 46419, 46421, 46422, 46423, 46424, 46425,
            46426, 46427, 46430, 46434, 46435, 46436, 46437,
            46438, 46439, 46440, 46441, 46442, 46443, 46444,
            46445, 46446, 46447, 46448, 46449, 46450, 46451,
            46452, 46453, 46454, 46455, 46456, 46457, 46458,
            46459, 46460, 46461, 46462, 46463, 46464, 46465,
            46466, 46467, 46468, 46469, 46470, 46471, 46472,
            46473, 46474, 46475, 46476, 46477, 46478, 46479,
            46480, 46481, 46482, 46483, 46484, 46485, 46486,
            46487, 46488, 46489, 46490, 46491, 46492, 46493,
            46494, 46495, 46498, 46499, 46501, 46502, 46503,
            46505, 46508, 46509, 46510, 46511, 46514, 46518,
            46519, 46520, 46521, 46522, 46526, 46527, 46529,
            46530, 46531, 46533, 46534, 46535, 46536, 46537,
            46538, 46539, 46542, 46546, 46547, 46548, 46549,
            46550, 46551, 46553, 46554, 46555, 46556, 46557,
            46558, 46559, 46560, 46561, 46562, 46563, 46564,
            46565, 46566, 46567, 46568, 46569, 46570, 46571,
            46573, 46574, 46575, 46576, 46577, 46578, 46579,
            46580, 46581, 46582, 46583, 46584, 46585, 46586,
            46587, 46588, 46589, 46590, 46591, 46592, 46593,
            46594, 46595, 46596, 46597, 46598, 46599, 46600,
            46601, 46602, 46603, 46604, 46605, 46606, 46607,
            46610, 46611, 46613, 46614, 46615, 46617, 46618,
            46619, 46620, 46621, 46622, 46623, 46624, 46625,
            46626, 46627, 46628, 46630, 46631, 46632, 46633,
            46634, 46635, 46637, 46638, 46639, 46640, 46641,
            46642, 46643, 46645, 46646, 46647, 46648, 46649,
            46650, 46651, 46652, 46653, 46654, 46655, 46656,
            46657, 46658, 46659, 46660, 46661, 46662, 46663,
            46665, 46666, 46667, 46668, 46669, 46670, 46671,
            46672, 46673, 46674, 46675, 46676, 46677, 46678,
            46679, 46680, 46681, 46682, 46683, 46684, 46685,
            46686, 46687, 46688, 46689, 46690, 46691, 46693,
            46694, 46695, 46697, 46698, 46699, 46700, 46701,
            46702, 46703, 46704, 46705, 46706, 46707, 46708,
            46709, 46710, 46711, 46712, 46713, 46714, 46715,
            46716, 46717, 46718, 46719, 46720, 46721, 46722,
            46723, 46724, 46725, 46726, 46727, 46728, 46729,
            46730, 46731, 46732, 46733, 46734, 46735, 46736,
            46737, 46738, 46739, 46740, 46741, 46742, 46743,
            46744, 46745, 46746, 46747, 46750, 46751, 46753,
            46754, 46755, 46757, 46758, 46759, 46760, 46761,
            46762, 46765, 46766, 46767, 46768, 46770, 46771,
            46772, 46773, 46774, 46775, 46776, 46777, 46778,
            46779, 46780, 46781, 46782, 46783, 46784, 46785,
            46786, 46787, 46788, 46789, 46790, 46791, 46792,
            46793, 46794, 46795, 46796, 46797, 46798, 46799,
            46800, 46801, 46802, 46803, 46805, 46806, 46807,
            46808, 46809, 46810, 46811, 46812, 46813, 46814,
            46815, 46816, 46817, 46818, 46819, 46820, 46821,
            46822, 46823, 46824, 46825, 46826, 46827, 46828,
            46829, 46830, 46831, 46833, 46834, 46835, 46837,
            46838, 46839, 46841, 46842, 46843, 46844, 46845,
            46846, 46847, 46850, 46851, 46852, 46854, 46855,
            46856, 46857, 46858, 46859, 46860, 46861, 46862,
            46863, 46864, 46865, 46866, 46867, 46868, 46869,
            46870, 46871, 46872, 46873, 46874, 46875, 46876,
            46877, 46878, 46879, 46880, 46881, 46882, 46883,
            46884, 46885, 46886, 46887, 46890, 46891, 46893,
            46894, 46897, 46898, 46899, 46900, 46901, 46902,
            46903, 46906, 46908, 46909, 46910, 46911, 46912,
            46913, 46914, 46915, 46917, 46918, 46919, 46921,
            46922, 46923, 46925, 46926, 46927, 46928, 46929,
            46930, 46931, 46934, 46935, 46936, 46937, 46938,
            46939, 46940, 46941, 46942, 46943, 46945, 46946,
            46947, 46949, 46950, 46951, 46953, 46954, 46955,
            46956, 46957, 46958, 46959, 46962, 46964, 46966,
            46967, 46968, 46969, 46970, 46971, 46974, 46975,
            46977, 46978, 46979, 46981, 46982, 46983, 46984,
            46985, 46986, 46987, 46990, 46995, 46996, 46997,
            47002, 47003, 47005, 47006, 47007, 47009, 47010,
            47011, 47012, 47013, 47014, 47015, 47018, 47022,
            47023, 47024, 47025, 47026, 47027, 47030, 47031,
            47033, 47034, 47035, 47036, 47037, 47038, 47039,
            47040, 47041, 47042, 47043, 47044, 47045, 47046,
            47048, 47050, 47051, 47052, 47053, 47054, 47055,
            47056, 47057, 47058, 47059, 47060, 47061, 47062,
            47063, 47064, 47065, 47066, 47067, 47068, 47069,
            47070, 47071, 47072, 47073, 47074, 47075, 47076,
            47077, 47078, 47079, 47080, 47081, 47082, 47083,
            47086, 47087, 47089, 47090, 47091, 47093, 47094,
            47095, 47096, 47097, 47098, 47099, 47102, 47106,
            47107, 47108, 47109, 47110, 47114, 47115, 47117,
            47118, 47119, 47121, 47122, 47123, 47124, 47125,
            47126, 47127, 47130, 47132, 47134, 47135, 47136,
            47137, 47138, 47139, 47142, 47143, 47145, 47146,
            47147, 47149, 47150, 47151, 47152, 47153, 47154,
            47155, 47158, 47162, 47163, 47164, 47165, 47166,
            47167, 47169, 47170, 47171, 47173, 47174, 47175,
            47176, 47177, 47178, 47179, 47180, 47181, 47182,
            47183, 47184, 47186, 47188, 47189, 47190, 47191,
            47192, 47193, 47194, 47195, 47198, 47199, 47201,
            47202, 47203, 47205, 47206, 47207, 47208, 47209,
            47210, 47211, 47214, 47216, 47218, 47219, 47220,
            47221, 47222, 47223, 47225, 47226, 47227, 47229,
            47230, 47231, 47232, 47233, 47234, 47235, 47236,
            47237, 47238, 47239, 47240, 47241, 47242, 47243,
            47244, 47246, 47247, 47248, 47249, 47250, 47251,
            47252, 47253, 47254, 47255, 47256, 47257, 47258,
            47259, 47260, 47261, 47262, 47263, 47264, 47265,
            47266, 47267, 47268, 47269, 47270, 47271, 47273,
            47274, 47275, 47276, 47277, 47278, 47279, 47281,
            47282, 47283, 47285, 47286, 47287, 47289, 47290,
            47291, 47292, 47293, 47294, 47295, 47298, 47300,
            47302, 47303, 47304, 47305, 47306, 47307, 47309,
            47310, 47311, 47313, 47314, 47315, 47317, 47318,
            47319, 47320, 47321, 47322, 47323, 47324, 47326,
            47328, 47330, 47331, 47332, 47333, 47334, 47335,
            47338, 47339, 47341, 47342, 47343, 47345, 47346,
            47347, 47348, 47349, 47350, 47351, 47354, 47356,
            47358, 47359, 47360, 47361, 47362, 47363, 47365,
            47366, 47367, 47368, 47369, 47370, 47371, 47372,
            47373, 47374, 47375, 47376, 47377, 47378, 47379,
            47380, 47381, 47382, 47383, 47385, 47386, 47387,
            47388, 47389, 47390, 47391, 47393, 47394, 47395,
            47396, 47397, 47398, 47399, 47400, 47401, 47402,
            47403, 47404, 47405, 47406, 47407, 47408, 47409,
            47410, 47411, 47412, 47413, 47414, 47415, 47416,
            47417, 47418, 47419, 47422, 47423, 47425, 47426,
            47427, 47429, 47430, 47431, 47432, 47433, 47434,
            47435, 47437, 47438, 47440, 47442, 47443, 47444,
            47445, 47446, 47447, 47450, 47451, 47453, 47454,
            47455, 47457, 47458, 47459, 47460, 47461, 47462,
            47463, 47466, 47468, 47470, 47471, 47472, 47473,
            47474, 47475, 47478, 47479, 47481, 47482, 47483,
            47485, 47486, 47487, 47488, 47489, 47490, 47491,
            47494, 47496, 47499, 47500, 47503, 47504, 47505,
            47506, 47507, 47508, 47509, 47510, 47511, 47512,
            47513, 47514, 47515, 47516, 47517, 47518, 47519,
            47520, 47521, 47522, 47523, 47524, 47525, 47526,
            47527, 47528, 47529, 47530, 47531, 47534, 47535,
            47537, 47538, 47539, 47541, 47542, 47543, 47544,
            47545, 47546, 47547, 47550, 47552, 47554, 47555,
            47556, 47557, 47558, 47559, 47562, 47563, 47565,
            47571, 47572, 47573, 47574, 47575, 47578, 47580,
            47583, 47584, 47586, 47590, 47591, 47593, 47594,
            47595, 47597, 47598, 47599, 47600, 47601, 47602,
            47603, 47606, 47611, 47612, 47613, 47614, 47615,
            47618, 47619, 47620, 47621, 47622, 47623, 47625,
            47626, 47627, 47628, 47629, 47630, 47631, 47632,
            47633, 47634, 47635, 47636, 47638, 47639, 47640,
            47641, 47642, 47643, 47644, 47645, 47646, 47647,
            47648, 47649, 47650, 47651, 47652, 47653, 47654,
            47655, 47656, 47657, 47658, 47659, 47660, 47661,
            47662, 47663, 47664, 47665, 47666, 47667, 47668,
            47669, 47670, 47671, 47674, 47675, 47677, 47678,
            47679, 47681, 47683, 47684, 47685, 47686, 47687,
            47690, 47692, 47695, 47696, 47697, 47698, 47702,
            47703, 47705, 47706, 47707, 47709, 47710, 47711,
            47712, 47713, 47714, 47715, 47718, 47722, 47723,
            47724, 47725, 47726, 47727, 47730, 47731, 47733,
            47734, 47735, 47737, 47738, 47739, 47740, 47741,
            47742, 47743, 47744, 47745, 47746, 47750, 47752,
            47753, 47754, 47755, 47757, 47758, 47759, 47760,
            47761, 47762, 47763, 47764, 47765, 47766, 47767,
            47768, 47769, 47770, 47771, 47772, 47773, 47774,
            47775, 47776, 47777, 47778, 47779, 47780, 47781,
            47782, 47783, 47786, 47789, 47790, 47791, 47793,
            47795, 47796, 47797, 47798, 47799, 47802, 47804,
            47806, 47807, 47808, 47809, 47810, 47811, 47813,
            47814, 47815, 47817, 47818, 47819, 47820, 47821,
            47822, 47823, 47824, 47825, 47826, 47827, 47828,
            47829, 47830, 47831, 47834, 47835, 47836, 47837,
            47838, 47839, 47840, 47841, 47842, 47843, 47844,
            47845, 47846, 47847, 47848, 47849, 47850, 47851,
            47852, 47853, 47854, 47855, 47856, 47857, 47858,
            47859, 47860, 47861, 47862, 47863, 47864, 47865,
            47866, 47867, 47869, 47870, 47871, 47873, 47874,
            47875, 47877, 47878, 47879, 47880, 47881, 47882,
            47883, 47884, 47886, 47888, 47890, 47891, 47892,
            47893, 47894, 47895, 47897, 47898, 47899, 47901,
            47902, 47903, 47905, 47906, 47907, 47908, 47909,
            47910, 47911, 47912, 47914, 47916, 47917, 47918,
            47919, 47920, 47921, 47922, 47923, 47927, 47929,
            47930, 47935, 47936, 47937, 47938, 47939, 47942,
            47944, 47946, 47947, 47948, 47950, 47953, 47954,
            47955, 47957, 47958, 47959, 47961, 47962, 47963,
            47964, 47965, 47966, 47967, 47968, 47970, 47972,
            47973, 47974, 47975, 47976, 47977, 47978, 47979,
            47981, 47982, 47983, 47984, 47985, 47986, 47987,
            47988, 47989, 47990, 47991, 47992, 47993, 47994,
            47995, 47996, 47997, 47998, 47999, 48000, 48001,
            48002, 48003, 48004, 48005, 48006, 48007, 48009,
            48010, 48011, 48013, 48014, 48015, 48017, 48018,
            48019, 48020, 48021, 48022, 48023, 48024, 48025,
            48026, 48027, 48028, 48029, 48030, 48031, 48032,
            48033, 48034, 48035, 48037, 48038, 48039, 48041,
            48042, 48043, 48045, 48046, 48047, 48048, 48049,
            48050, 48051, 48053, 48054, 48056, 48057, 48058,
            48059, 48060, 48061, 48062, 48063, 48065, 48066,
            48067, 48069, 48070, 48071, 48073, 48074, 48075,
            48076, 48077, 48078, 48079, 48081, 48082, 48084,
            48085, 48086, 48087, 48088, 48089, 48090, 48091,
            48092, 48093, 48094, 48095, 48096, 48097, 48098,
            48099, 48100, 48101, 48102, 48103, 48104, 48105,
            48106, 48107, 48108, 48109, 48110, 48111, 48112,
            48113, 48114, 48115, 48116, 48117, 48118, 48119,
            48122, 48123, 48125, 48126, 48129, 48131, 48132,
            48133, 48134, 48135, 48138, 48142, 48144, 48146,
            48147, 48153, 48154, 48160, 48161, 48162, 48163,
            48166, 48168, 48170, 48171, 48172, 48174, 48175,
            48178, 48179, 48181, 48182, 48183, 48185, 48186,
            48187, 48188, 48189, 48190, 48191, 48194, 48198,
            48199, 48200, 48202, 48203, 48206, 48207, 48209,
            48210, 48211, 48212, 48213, 48214, 48215, 48216,
            48217, 48218, 48219, 48220, 48222, 48223, 48224,
            48225, 48226, 48227, 48228, 48229, 48230, 48231,
            48232, 48233, 48234, 48235, 48236, 48237, 48238,
            48239, 48240, 48241, 48242, 48243, 48244, 48245,
            48246, 48247, 48248, 48249, 48250, 48251, 48252,
            48253, 48254, 48255, 48256, 48257, 48258, 48259,
            48262, 48263, 48265, 48266, 48269, 48271, 48272,
            48273, 48274, 48275, 48278, 48280, 48283, 48284,
            48285, 48286, 48287, 48290, 48291, 48293, 48294,
            48297, 48298, 48299, 48300, 48301, 48302, 48303,
            48306, 48310, 48311, 48312, 48313, 48314, 48315,
            48318, 48319, 48321, 48322, 48323, 48325, 48326,
            48327, 48328, 48329, 48330, 48331, 48332, 48334,
            48338, 48339, 48340, 48342, 48343, 48345, 48346,
            48347, 48349, 48350, 48351, 48352, 48353, 48354,
            48355, 48356, 48357, 48358, 48359, 48360, 48361,
            48362, 48363, 48364, 48365, 48366, 48367, 48368,
            48369, 48370, 48371, 48375, 48377, 48378, 48379,
            48381, 48382, 48383, 48384, 48385, 48386, 48387,
            48390, 48392, 48394, 48395, 48396, 48397, 48398,
            48399, 48401, 48402, 48403, 48405, 48406, 48407,
            48408, 48409, 48410, 48411, 48412, 48413, 48414,
            48415, 48416, 48417, 48418, 48419, 48421, 48422,
            48423, 48424, 48425, 48426, 48427, 48429, 48430,
            48431, 48432, 48433, 48434, 48435, 48436, 48437,
            48438, 48439, 48440, 48441, 48442, 48443, 48444,
            48445, 48446, 48447, 48449, 48450, 48451, 48452,
            48453, 48454, 48455, 48458, 48459, 48461, 48462,
            48463, 48465, 48466, 48467, 48468, 48469, 48470,
            48471, 48474, 48475, 48476, 48477, 48478, 48479,
            48480, 48481, 48482, 48483, 48485, 48486, 48487,
            48489, 48490, 48491, 48492, 48493, 48494, 48495,
            48496, 48497, 48498, 48499, 48500, 48501, 48502,
            48503, 48504, 48505, 48506, 48507, 48508, 48509,
            48510, 48511, 48514, 48515, 48517, 48518, 48523,
            48524, 48525, 48526, 48527, 48530, 48532, 48534,
            48535, 48536, 48539, 48541, 48542, 48543, 48544,
            48545, 48546, 48547, 48549, 48550, 48551, 48552,
            48553, 48554, 48555, 48556, 48557, 48558, 48559,
            48561, 48562, 48563, 48564, 48565, 48566, 48567,
            48569, 48570, 48571, 48572, 48573, 48574, 48575,
            48576, 48577, 48578, 48579, 48580, 48581, 48582,
            48583, 48584, 48585, 48586, 48587, 48588, 48589,
            48590, 48591, 48592, 48593, 48594, 48595, 48598,
            48599, 48601, 48602, 48603, 48605, 48606, 48607,
            48608, 48609, 48610, 48611, 48612, 48613, 48614,
            48615, 48616, 48618, 48619, 48620, 48621, 48622,
            48623, 48625, 48626, 48627, 48629, 48630, 48631,
            48633, 48634, 48635, 48636, 48637, 48638, 48639,
            48641, 48642, 48644, 48646, 48647, 48648, 48649,
            48650, 48651, 48654, 48655, 48657, 48658, 48659,
            48661, 48662, 48663, 48664, 48665, 48666, 48667,
            48670, 48672, 48673, 48674, 48675, 48676, 48677,
            48678, 48679, 48680, 48681, 48682, 48683, 48684,
            48685, 48686, 48687, 48688, 48689, 48690, 48691,
            48692, 48693, 48694, 48695, 48696, 48697, 48698,
            48699, 48700, 48701, 48702, 48703, 48704, 48705,
            48706, 48707, 48710, 48711, 48713, 48714, 48715,
            48717, 48719, 48720, 48721, 48722, 48723, 48726,
            48728, 48732, 48733, 48734, 48735, 48738, 48739,
            48741, 48742, 48743, 48745, 48747, 48748, 48749,
            48750, 48751, 48754, 48758, 48759, 48760, 48761,
            48762, 48766, 48767, 48769, 48770, 48771, 48773,
            48774, 48775, 48776, 48777, 48778, 48779, 48782,
            48786, 48787, 48788, 48789, 48790, 48791, 48794,
            48795, 48796, 48797, 48798, 48799, 48800, 48801,
            48802, 48803, 48804, 48805, 48806, 48807, 48809,
            48810, 48811, 48812, 48813, 48814, 48815, 48816,
            48817, 48818, 48819, 48820, 48821, 48822, 48823,
            48824, 48825, 48826, 48827, 48828, 48829, 48830,
            48831, 48832, 48833, 48834, 48835, 48836, 48837,
            48838, 48839, 48840, 48841, 48842, 48843, 48844,
            48845, 48846, 48847, 48850, 48851, 48853, 48854,
            48857, 48858, 48859, 48860, 48861, 48862, 48863,
            48865, 48866, 48870, 48871, 48872, 48873, 48874,
            48875, 48877, 48878, 48879, 48880, 48881, 48882,
            48883, 48884, 48885, 48886, 48887, 48888, 48889,
            48890, 48891, 48892, 48893, 48894, 48895, 48896,
            48898, 48899, 48900, 48901, 48902, 48903, 48906,
            48907, 48908, 48909, 48910, 48911, 48912, 48913,
            48914, 48915, 48916, 48917, 48918, 48919, 48922,
            48926, 48927, 48928, 48929, 48930, 48931, 48932,
            48933, 48934, 48935, 48936, 48937, 48938, 48939,
            48940, 48941, 48942, 48943, 48944, 48945, 48946,
            48947, 48948, 48949, 48950, 48951, 48952, 48953,
            48954, 48955, 48956, 48957, 48958, 48959, 48962,
            48963, 48965, 48966, 48967, 48969, 48970, 48971,
            48972, 48973, 48974, 48975, 48978, 48979, 48980,
            48982, 48983, 48984, 48985, 48986, 48987, 48988,
            48989, 48990, 48991, 48992, 48993, 48994, 48995,
            48996, 48997, 48998, 48999, 49000, 49001, 49002,
            49003, 49004, 49005, 49006, 49007, 49008, 49009,
            49010, 49011, 49012, 49013, 49014, 49015, 49016,
            49017, 49018, 49019, 49020, 49021, 49022, 49023,
            49024, 49025, 49026, 49027, 49028, 49029, 49030,
            49031, 49032, 49033, 49034, 49035, 49036, 49037,
            49038, 49039, 49040, 49041, 49042, 49043, 49045,
            49046, 49047, 49048, 49049, 49050, 49051, 49052,
            49053, 49054, 49055, 49056, 49057, 49058, 49059,
            49060, 49061, 49062, 49063, 49064, 49065, 49066,
            49067, 49068, 49069, 49070, 49071, 49073, 49074,
            49075, 49076, 49077, 49078, 49079, 49080, 49081,
            49082, 49083, 49084, 49085, 49086, 49087, 49088,
            49089, 49090, 49091, 49092, 49094, 49095, 49096,
            49097, 49098, 49099, 49102, 49103, 49105, 49106,
            49107, 49109, 49110, 49111, 49112, 49113, 49114,
            49115, 49117, 49118, 49120, 49122, 49123, 49124,
            49125, 49126, 49127, 49128, 49129, 49130, 49131,
            49132, 49133, 49134, 49135, 49136, 49137, 49138,
            49139, 49140, 49141, 49142, 49143, 49144, 49145,
            49146, 49147, 49148, 49149, 49150, 49151, 49152,
            49153, 49154, 49155, 49156, 49157, 49158, 49159,
            49160, 49161, 49162, 49163, 49164, 49165, 49166,
            49167, 49168, 49169, 49170, 49171, 49172, 49173,
            49174, 49175, 49176, 49177, 49178, 49179, 49180,
            49181, 49182, 49183, 49184, 49185, 49186, 49187,
            49188, 49189, 49190, 49191, 49192, 49193, 49194,
            49195, 49196, 49197, 49198, 49199, 49200, 49201,
            49202, 49203, 49204, 49205, 49206, 49207, 49208,
            49209, 49210, 49211, 49213, 49214, 49215, 49216,
            49217, 49218, 49219, 49220, 49221, 49222, 49223,
            49224, 49225, 49226, 49227, 49228, 49229, 49230,
            49231, 49232, 49234, 49235, 49236, 49237, 49238,
            49239, 49241, 49242, 49243, 49245, 49246, 49247,
            49249, 49250, 49251, 49252, 49253, 49254, 49255,
            49258, 49259, 49260, 49261, 49262, 49263, 49264,
            49265, 49266, 49267, 49268, 49269, 49270, 49271,
            49272, 49273, 49274, 49275, 49276, 49277, 49278,
            49279, 49280, 49281, 49282, 49283, 49284, 49285,
            49286, 49287, 49288, 49289, 49290, 49291, 49292,
            49293, 49294, 49295, 49298, 49299, 49301, 49302,
            49303, 49305, 49306, 49307, 49308, 49309, 49310,
            49311, 49314, 49316, 49318, 49319, 49320, 49321,
            49322, 49323, 49326, 49329, 49330, 49335, 49336,
            49337, 49338, 49339, 49342, 49346, 49347, 49348,
            49350, 49351, 49354, 49355, 49357, 49358, 49359,
            49361, 49362, 49363, 49364, 49365, 49366, 49367,
            49370, 49374, 49375, 49376, 49377, 49378, 49379,
            49382, 49383, 49385, 49386, 49387, 49389, 49390,
            49391, 49392, 49393, 49394, 49395, 49398, 49400,
            49402, 49403, 49404, 49405, 49406, 49407, 49409,
            49410, 49411, 49413, 49414, 49415, 49417, 49418,
            49419, 49420, 49421, 49422, 49423, 49425, 49426,
            49427, 49428, 49430, 49431, 49432, 49433, 49434,
            49435, 49441, 49442, 49445, 49448, 49449, 49450,
            49451, 49454, 49458, 49459, 49460, 49461, 49463,
            49466, 49467, 49469, 49470, 49471, 49473, 49474,
            49475, 49476, 49477, 49478, 49479, 49482, 49486,
            49487, 49488, 49489, 49490, 49491, 49494, 49495,
            49497, 49498, 49499, 49501, 49502, 49503, 49504,
            49505, 49506, 49507, 49510, 49514, 49515, 49516,
            49517, 49518, 49519, 49521, 49522, 49523, 49525,
            49526, 49527, 49529, 49530, 49531, 49532, 49533,
            49534, 49535, 49536, 49537, 49538, 49539, 49540,
            49542, 49543, 49544, 49545, 49546, 49547, 49551,
            49553, 49554, 49555, 49557, 49559, 49560, 49561,
            49562, 49563, 49566, 49568, 49570, 49571, 49572,
            49574, 49575, 49578, 49579, 49581, 49582, 49583,
            49585, 49586, 49587, 49588, 49589, 49590, 49591,
            49592, 49593, 49594, 49595, 49596, 49598, 49599,
            49600, 49601, 49602, 49603, 49605, 49606, 49607,
            49609, 49610, 49611, 49613, 49614, 49615, 49616,
            49617, 49618, 49619, 49621, 49622, 49625, 49626,
            49627, 49628, 49629, 49630, 49631, 49633, 49634,
            49635, 49637, 49638, 49639, 49641, 49642, 49643,
            49644, 49645, 49646, 49647, 49650, 49652, 49653,
            49654, 49655, 49656, 49657, 49658, 49659, 49662,
            49663, 49665, 49666, 49667, 49669, 49670, 49671,
            49672, 49673, 49674, 49675, 49678, 49680, 49682,
            49683, 49684, 49685, 49686, 49687, 49690, 49691,
            49693, 49694, 49697, 49698, 49699, 49700, 49701,
            49702, 49703, 49706, 49708, 49710, 49712, 49715,
            49717, 49718, 49719, 49720, 49721, 49722, 49723,
            49724, 49725, 49726, 49727, 49728, 49729, 49730,
            49731, 49732, 49733, 49734, 49735, 49737, 49738,
            49739, 49740, 49741, 49742, 49743, 49746, 49747,
            49749, 49750, 49751, 49753, 49754, 49755, 49756,
            49757, 49758, 49759, 49761, 49762, 49763, 49764,
            49766, 49767, 49768, 49769, 49770, 49771, 49774,
            49775, 49777, 49778, 49779, 49781, 49782, 49783,
            49784, 49785, 49786, 49787, 49790, 49792, 49794,
            49795, 49796, 49797, 49798, 49799, 49802, 49803,
            49804, 49805, 49806, 49807, 49809, 49810, 49811,
            49812, 49813, 49814, 49815, 49817, 49818, 49820,
            49822, 49823, 49824, 49825, 49826, 49827, 49830,
            49831, 49833, 49834, 49835, 49838, 49839, 49840,
            49841, 49842, 49843, 49846, 49848, 49850, 49851,
            49852, 49853, 49854, 49855, 49856, 49857, 49858,
            49859, 49860, 49861, 49862, 49863, 49864, 49865,
            49866, 49867, 49868, 49869, 49870, 49871, 49872,
            49873, 49874, 49875, 49876, 49877, 49878, 49879,
            49880, 49881, 49882, 49883, 49886, 49887, 49889,
            49890, 49893, 49894, 49895, 49896, 49897, 49898,
            49902, 49904, 49906, 49907, 49908, 49909, 49911,
            49914, 49917, 49918, 49919, 49921, 49922, 49923,
            49924, 49925, 49926, 49927, 49930, 49931, 49934,
            49935, 49936, 49937, 49938, 49942, 49943, 49945,
            49946, 49947, 49949, 49950, 49951, 49952, 49953,
            49954, 49955, 49958, 49959, 49962, 49963, 49964,
            49965, 49966, 49967, 49968, 49969, 49970, 49971,
            49972, 49973, 49974, 49975, 49976, 49977, 49978,
            49979, 49980, 49981, 49982, 49983, 49984, 49985,
            49986, 49987, 49988, 49990, 49991, 49992, 49993,
            49994, 49995, 49996, 49997, 49998, 49999, 50000,
            50001, 50002, 50003, 50004, 50005, 50006, 50007,
            50008, 50009, 50010, 50011, 50012, 50013, 50014,
            50015, 50016, 50017, 50018, 50019, 50020, 50021,
            50022, 50023, 50026, 50027, 50029, 50030, 50031,
            50033, 50035, 50036, 50037, 50038, 50039, 50042,
            50043, 50046, 50047, 50048, 50049, 50050, 50051,
            50053, 50054, 50055, 50057, 50058, 50059, 50061,
            50062, 50063, 50064, 50065, 50066, 50067, 50068,
            50069, 50070, 50071, 50072, 50073, 50074, 50075,
            50076, 50077, 50078, 50079, 50080, 50081, 50082,
            50083, 50084, 50085, 50086, 50087, 50088, 50089,
            50090, 50091, 50092, 50093, 50094, 50095, 50096,
            50097, 50098, 50099, 50100, 50101, 50102, 50103,
            50104, 50105, 50106, 50107, 50108, 50109, 50110,
            50111, 50113, 50114, 50115, 50116, 50117, 50118,
            50119, 50120, 50121, 50122, 50123, 50124, 50125,
            50126, 50127, 50128, 50129, 50130, 50131, 50132,
            50133, 50134, 50135, 50138, 50139, 50141, 50142,
            50145, 50147, 50148, 50149, 50150, 50151, 50154,
            50155, 50156, 50158, 50159, 50160, 50161, 50162,
            50163, 50166, 50167, 50169, 50170, 50171, 50172,
            50173, 50174, 50175, 50176, 50177, 50178, 50179,
            50180, 50181, 50182, 50183, 50185, 50186, 50187,
            50188, 50189, 50190, 50191, 50193, 50194, 50195,
            50196, 50197, 50198, 50199, 50200, 50201, 50202,
            50203, 50204, 50205, 50206, 50207, 50208, 50209,
            50210, 50211, 50213, 50214, 50215, 50216, 50217,
            50218, 50219, 50221, 50222, 50223, 50225, 50226,
            50227, 50229, 50230, 50231, 50232, 50233, 50234,
            50235, 50238, 50239, 50240, 50241, 50242, 50243,
            50244, 50245, 50246, 50247, 50249, 50250, 50251,
            50252, 50253, 50254, 50255, 50256, 50257, 50258,
            50259, 50260, 50261, 50262, 50263, 50264, 50265,
            50266, 50267, 50268, 50269, 50270, 50271, 50272,
            50273, 50274, 50275, 50278, 50279, 50281, 50282,
            50283, 50285, 50286, 50287, 50288, 50289, 50290,
            50291, 50294, 50295, 50296, 50298, 50299, 50300,
            50301, 50302, 50303, 50305, 50306, 50307, 50308,
            50309, 50310, 50311, 50312, 50313, 50314, 50315,
            50316, 50317, 50318, 50319, 50320, 50321, 50322,
            50323, 50325, 50326, 50327, 50328, 50329, 50330,
            50331, 50333, 50334, 50335, 50336, 50337, 50338,
            50339, 50340, 50341, 50342, 50343, 50344, 50345,
            50346, 50347, 50348, 50349, 50350, 50351, 50352,
            50353, 50354, 50355, 50356, 50357, 50358, 50359,
            50361, 50362, 50363, 50365, 50366, 50367, 50368,
            50369, 50370, 50371, 50372, 50373, 50374, 50375,
            50376, 50377, 50378, 50379, 50380, 50381, 50382,
            50383, 50384, 50385, 50386, 50387, 50388, 50389,
            50390, 50391, 50392, 50393, 50394, 50395, 50396,
            50397, 50398, 50399, 50400, 50401, 50402, 50403,
            50404, 50405, 50406, 50407, 50408, 50410, 50411,
            50412, 50413, 50414, 50415, 50418, 50419, 50421,
            50422, 50423, 50425, 50427, 50428, 50429, 50430,
            50434, 50435, 50436, 50437, 50438, 50439, 50440,
            50441, 50442, 50443, 50445, 50446, 50447, 50449,
            50450, 50451, 50453, 50454, 50455, 50456, 50457,
            50458, 50459, 50461, 50462, 50463, 50464, 50465,
            50466, 50467, 50468, 50469, 50470, 50471, 50474,
            50475, 50477, 50478, 50479, 50481, 50482, 50483,
            50484, 50485, 50486, 50487, 50490, 50492, 50494,
            50495, 50496, 50497, 50498, 50499, 50502, 50503,
            50507, 50511, 50512, 50513, 50514, 50518, 50522,
            50523, 50524, 50527, 50530, 50531, 50533, 50534,
            50535, 50537, 50538, 50539, 50540, 50541, 50542,
            50543, 50546, 50550, 50551, 50552, 50553, 50554,
            50555, 50558, 50559, 50561, 50562, 50563, 50565,
            50566, 50568, 50569, 50570, 50571, 50574, 50576,
            50578, 50579, 50580, 50582, 50585, 50586, 50587,
            50589, 50590, 50591, 50593, 50594, 50595, 50596,
            50597, 50598, 50599, 50600, 50602, 50603, 50604,
            50605, 50606, 50607, 50608, 50609, 50610, 50611,
            50614, 50615, 50618, 50623, 50624, 50625, 50626,
            50627, 50635, 50637, 50639, 50642, 50643, 50645,
            50646, 50647, 50649, 50650, 50651, 50652, 50653,
            50654, 50655, 50658, 50660, 50662, 50663, 50664,
            50665, 50666, 50667, 50671, 50673, 50674, 50675,
            50677, 50680, 50681, 50682, 50683, 50690, 50691,
            50692, 50697, 50698, 50699, 50701, 50702, 50703,
            50705, 50706, 50707, 50708, 50709, 50710, 50711,
            50714, 50717, 50718, 50719, 50720, 50721, 50722,
            50723, 50726, 50727, 50729, 50730, 50731, 50735,
            50737, 50738, 50742, 50744, 50746, 50748, 50749,
            50750, 50751, 50754, 50755, 50757, 50758, 50759,
            50761, 50762, 50763, 50764, 50765, 50766, 50767,
            50770, 50774, 50775, 50776, 50777, 50778, 50779,
            50782, 50783, 50785, 50786, 50787, 50788, 50789,
            50790, 50791, 50792, 50793, 50794, 50795, 50797,
            50798, 50800, 50802, 50803, 50804, 50805, 50806,
            50807, 50810, 50811, 50813, 50814, 50815, 50817,
            50818, 50819, 50820, 50821, 50822, 50823, 50826,
            50828, 50830, 50831, 50832, 50833, 50834, 50835,
            50838, 50839, 50841, 50842, 50843, 50845, 50846,
            50847, 50848, 50849, 50850, 50851, 50854, 50856,
            50858, 50859, 50860, 50861, 50862, 50863, 50866,
            50867, 50869, 50870, 50871, 50875, 50876, 50877,
            50878, 50879, 50882, 50884, 50886, 50887, 50888,
            50889, 50890, 50891, 50894, 50895, 50897, 50898,
            50899, 50901, 50902, 50903, 50904, 50905, 50906,
            50907, 50910, 50911, 50914, 50915, 50916, 50917,
            50918, 50919, 50922, 50923, 50925, 50926, 50927,
            50929, 50930, 50931, 50932, 50933, 50934, 50935,
            50938, 50939, 50940, 50942, 50943, 50944, 50945,
            50946, 50947, 50950, 50951, 50953, 50954, 50955,
            50957, 50958, 50959, 50960, 50961, 50962, 50963,
            50966, 50968, 50970, 50971, 50972, 50973, 50974,
            50975, 50978, 50979, 50981, 50982, 50983, 50985,
            50986, 50987, 50988, 50989, 50990, 50991, 50994,
            50996, 50998, 51000, 51001, 51002, 51003, 51006,
            51007, 51009, 51010, 51011, 51013, 51014, 51015,
            51016, 51017, 51019, 51022, 51024, 51033, 51034,
            51035, 51037, 51038, 51039, 51041, 51042, 51043,
            51044, 51045, 51046, 51047, 51049, 51050, 51052,
            51053, 51054, 51055, 51056, 51057, 51058, 51059,
            51062, 51063, 51065, 51066, 51067, 51071, 51072,
            51073, 51074, 51078, 51083, 51084, 51085, 51087,
            51090, 51091, 51093, 51097, 51099, 51100, 51101,
            51102, 51103, 51106, 51111, 51112, 51113, 51114,
            51115, 51118, 51119, 51121, 51122, 51123, 51125,
            51126, 51127, 51128, 51129, 51130, 51131, 51134,
            51138, 51139, 51140, 51141, 51142, 51143, 51146,
            51147, 51149, 51151, 51153, 51154, 51155, 51156,
            51157, 51158, 51159, 51161, 51162, 51163, 51164,
            51166, 51167, 51168, 51169, 51170, 51171, 51173,
            51174, 51175, 51177, 51178, 51179, 51181, 51182,
            51183, 51184, 51185, 51186, 51187, 51188, 51189,
            51190, 51191, 51192, 51193, 51194, 51195, 51196,
            51197, 51198, 51199, 51202, 51203, 51205, 51206,
            51207, 51209, 51211, 51212, 51213, 51214, 51215,
            51218, 51220, 51223, 51224, 51225, 51226, 51227,
            51230, 51231, 51233, 51234, 51235, 51237, 51238,
            51239, 51240, 51241, 51242, 51243, 51246, 51248,
            51250, 51251, 51252, 51253, 51254, 51255, 51257,
            51258, 51259, 51261, 51262, 51263, 51265, 51266,
            51267, 51268, 51269, 51270, 51271, 51274, 51275,
            51278, 51279, 51280, 51281, 51282, 51283, 51285,
            51286, 51287, 51288, 51289, 51290, 51291, 51292,
            51293, 51294, 51295, 51296, 51297, 51298, 51299,
            51300, 51301, 51302, 51303, 51304, 51305, 51306,
            51307, 51308, 51309, 51310, 51311, 51314, 51315,
            51317, 51318, 51319, 51321, 51323, 51324, 51325,
            51326, 51327, 51330, 51332, 51336, 51337, 51338,
            51342, 51343, 51344, 51345, 51346, 51347, 51349,
            51350, 51351, 51352, 51353, 51354, 51355, 51356,
            51358, 51360, 51362, 51363, 51364, 51365, 51366,
            51367, 51369, 51370, 51371, 51372, 51373, 51374,
            51375, 51376, 51377, 51378, 51379, 51380, 51381,
            51382, 51383, 51384, 51385, 51386, 51387, 51390,
            51391, 51392, 51393, 51394, 51395, 51397, 51398,
            51399, 51401, 51402, 51403, 51405, 51406, 51407,
            51408, 51409, 51410, 51411, 51414, 51416, 51418,
            51419, 51420, 51421, 51422, 51423, 51426, 51427,
            51429, 51430, 51431, 51432, 51433, 51434, 51435,
            51436, 51437, 51438, 51439, 51440, 51441, 51442,
            51443, 51444, 51446, 51447, 51448, 51449, 51450,
            51451, 51454, 51455, 51457, 51458, 51459, 51463,
            51464, 51465, 51466, 51467, 51470, 12288, 12289,
            12290, 183, 8229, 8230, 168, 12291, 173, 8213, 8741,
            65340, 8764, 8216, 8217, 8220, 8221, 12308, 12309,
            12296, 12297, 12298, 12299, 12300, 12301, 12302,
            12303, 12304, 12305, 177, 215, 247, 8800, 8804,
            8805, 8734, 8756, 176, 8242, 8243, 8451, 8491,
            65504, 65505, 65509, 9794, 9792, 8736, 8869, 8978,
            8706, 8711, 8801, 8786, 167, 8251, 9734, 9733, 9675,
            9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650,
            9661, 9660, 8594, 8592, 8593, 8595, 8596, 12307,
            8810, 8811, 8730, 8765, 8733, 8757, 8747, 8748,
            8712, 8715, 8838, 8839, 8834, 8835, 8746, 8745,
            8743, 8744, 65506, 51472, 51474, 51475, 51476,
            51477, 51478, 51479, 51481, 51482, 51483, 51484,
            51485, 51486, 51487, 51488, 51489, 51490, 51491,
            51492, 51493, 51494, 51495, 51496, 51497, 51498,
            51499, 51501, 51502, 51503, 51504, 51505, 51506,
            51507, 51509, 51510, 51511, 51512, 51513, 51514,
            51515, 51516, 51517, 51518, 51519, 51520, 51521,
            51522, 51523, 51524, 51525, 51526, 51527, 51528,
            51529, 51530, 51531, 51532, 51533, 51534, 51535,
            51538, 51539, 51541, 51542, 51543, 51545, 51546,
            51547, 51548, 51549, 51550, 51551, 51554, 51556,
            51557, 51558, 51559, 51560, 51561, 51562, 51563,
            51565, 51566, 51567, 8658, 8660, 8704, 8707, 180,
            65374, 711, 728, 733, 730, 729, 184, 731, 161, 191,
            720, 8750, 8721, 8719, 164, 8457, 8240, 9665, 9664,
            9655, 9654, 9828, 9824, 9825, 9829, 9831, 9827,
            8857, 9672, 9635, 9680, 9681, 9618, 9636, 9637,
            9640, 9639, 9638, 9641, 9832, 9743, 9742, 9756,
            9758, 182, 8224, 8225, 8597, 8599, 8601, 8598, 8600,
            9837, 9833, 9834, 9836, 12927, 12828, 8470, 13255,
            8482, 13250, 13272, 8481, 8364, 174, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 51569, 51570, 51571,
            51573, 51574, 51575, 51576, 51577, 51578, 51579,
            51581, 51582, 51583, 51584, 51585, 51586, 51587,
            51588, 51589, 51590, 51591, 51594, 51595, 51597,
            51598, 51599, 51601, 51602, 51603, 51604, 51605,
            51606, 51607, 51610, 51612, 51614, 51615, 51616,
            51617, 51618, 51619, 51620, 51621, 51622, 51623,
            51624, 51625, 51626, 51627, 51628, 51629, 51630,
            51631, 51632, 51633, 51634, 51635, 51636, 51637,
            51638, 51639, 51640, 51641, 51642, 51643, 51644,
            51645, 51646, 51647, 51650, 51651, 51653, 51654,
            51657, 51659, 51660, 51661, 51662, 51663, 51666,
            51668, 51671, 51672, 51675, 65281, 65282, 65283,
            65284, 65285, 65286, 65287, 65288, 65289, 65290,
            65291, 65292, 65293, 65294, 65295, 65296, 65297,
            65298, 65299, 65300, 65301, 65302, 65303, 65304,
            65305, 65306, 65307, 65308, 65309, 65310, 65311,
            65312, 65313, 65314, 65315, 65316, 65317, 65318,
            65319, 65320, 65321, 65322, 65323, 65324, 65325,
            65326, 65327, 65328, 65329, 65330, 65331, 65332,
            65333, 65334, 65335, 65336, 65337, 65338, 65339,
            65510, 65341, 65342, 65343, 65344, 65345, 65346,
            65347, 65348, 65349, 65350, 65351, 65352, 65353,
            65354, 65355, 65356, 65357, 65358, 65359, 65360,
            65361, 65362, 65363, 65364, 65365, 65366, 65367,
            65368, 65369, 65370, 65371, 65372, 65373, 65507,
            51678, 51679, 51681, 51683, 51685, 51686, 51688,
            51689, 51690, 51691, 51694, 51698, 51699, 51700,
            51701, 51702, 51703, 51706, 51707, 51709, 51710,
            51711, 51713, 51714, 51715, 51716, 51717, 51718,
            51719, 51722, 51726, 51727, 51728, 51729, 51730,
            51731, 51733, 51734, 51735, 51737, 51738, 51739,
            51740, 51741, 51742, 51743, 51744, 51745, 51746,
            51747, 51748, 51749, 51750, 51751, 51752, 51754,
            51755, 51756, 51757, 51758, 51759, 51760, 51761,
            51762, 51763, 51764, 51765, 51766, 51767, 51768,
            51769, 51770, 51771, 51772, 51773, 51774, 51775,
            51776, 51777, 51778, 51779, 51780, 51781, 51782,
            12593, 12594, 12595, 12596, 12597, 12598, 12599,
            12600, 12601, 12602, 12603, 12604, 12605, 12606,
            12607, 12608, 12609, 12610, 12611, 12612, 12613,
            12614, 12615, 12616, 12617, 12618, 12619, 12620,
            12621, 12622, 12623, 12624, 12625, 12626, 12627,
            12628, 12629, 12630, 12631, 12632, 12633, 12634,
            12635, 12636, 12637, 12638, 12639, 12640, 12641,
            12642, 12643, 12644, 12645, 12646, 12647, 12648,
            12649, 12650, 12651, 12652, 12653, 12654, 12655,
            12656, 12657, 12658, 12659, 12660, 12661, 12662,
            12663, 12664, 12665, 12666, 12667, 12668, 12669,
            12670, 12671, 12672, 12673, 12674, 12675, 12676,
            12677, 12678, 12679, 12680, 12681, 12682, 12683,
            12684, 12685, 12686, 51783, 51784, 51785, 51786,
            51787, 51790, 51791, 51793, 51794, 51795, 51797,
            51798, 51799, 51800, 51801, 51802, 51803, 51806,
            51810, 51811, 51812, 51813, 51814, 51815, 51817,
            51818, 51819, 51820, 51821, 51822, 51823, 51824,
            51825, 51826, 51827, 51828, 51829, 51830, 51831,
            51832, 51833, 51834, 51835, 51836, 51838, 51839,
            51840, 51841, 51842, 51843, 51845, 51846, 51847,
            51848, 51849, 51850, 51851, 51852, 51853, 51854,
            51855, 51856, 51857, 51858, 51859, 51860, 51861,
            51862, 51863, 51865, 51866, 51867, 51868, 51869,
            51870, 51871, 51872, 51873, 51874, 51875, 51876,
            51877, 51878, 51879, 8560, 8561, 8562, 8563, 8564,
            8565, 8566, 8567, 8568, 8569, null, null, null,
            null, null, 8544, 8545, 8546, 8547, 8548, 8549,
            8550, 8551, 8552, 8553, null, null, null, null,
            null, null, null, 913, 914, 915, 916, 917, 918, 919,
            920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
            931, 932, 933, 934, 935, 936, 937, null, null, null,
            null, null, null, null, null, 945, 946, 947, 948,
            949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
            959, 960, 961, 963, 964, 965, 966, 967, 968, 969,
            null, null, null, null, null, null, 51880, 51881,
            51882, 51883, 51884, 51885, 51886, 51887, 51888,
            51889, 51890, 51891, 51892, 51893, 51894, 51895,
            51896, 51897, 51898, 51899, 51902, 51903, 51905,
            51906, 51907, 51909, 51910, 51911, 51912, 51913,
            51914, 51915, 51918, 51920, 51922, 51924, 51925,
            51926, 51927, 51930, 51931, 51932, 51933, 51934,
            51935, 51937, 51938, 51939, 51940, 51941, 51942,
            51943, 51944, 51945, 51946, 51947, 51949, 51950,
            51951, 51952, 51953, 51954, 51955, 51957, 51958,
            51959, 51960, 51961, 51962, 51963, 51964, 51965,
            51966, 51967, 51968, 51969, 51970, 51971, 51972,
            51973, 51974, 51975, 51977, 51978, 9472, 9474, 9484,
            9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532,
            9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523,
            9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535,
            9501, 9520, 9509, 9528, 9538, 9490, 9489, 9498,
            9497, 9494, 9493, 9486, 9485, 9502, 9503, 9505,
            9506, 9510, 9511, 9513, 9514, 9517, 9518, 9521,
            9522, 9525, 9526, 9529, 9530, 9533, 9534, 9536,
            9537, 9539, 9540, 9541, 9542, 9543, 9544, 9545,
            9546, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 51979, 51980, 51981, 51982, 51983,
            51985, 51986, 51987, 51989, 51990, 51991, 51993,
            51994, 51995, 51996, 51997, 51998, 51999, 52002,
            52003, 52004, 52005, 52006, 52007, 52008, 52009,
            52010, 52011, 52012, 52013, 52014, 52015, 52016,
            52017, 52018, 52019, 52020, 52021, 52022, 52023,
            52024, 52025, 52026, 52027, 52028, 52029, 52030,
            52031, 52032, 52034, 52035, 52036, 52037, 52038,
            52039, 52042, 52043, 52045, 52046, 52047, 52049,
            52050, 52051, 52052, 52053, 52054, 52055, 52058,
            52059, 52060, 52062, 52063, 52064, 52065, 52066,
            52067, 52069, 52070, 52071, 52072, 52073, 52074,
            52075, 52076, 13205, 13206, 13207, 8467, 13208,
            13252, 13219, 13220, 13221, 13222, 13209, 13210,
            13211, 13212, 13213, 13214, 13215, 13216, 13217,
            13218, 13258, 13197, 13198, 13199, 13263, 13192,
            13193, 13256, 13223, 13224, 13232, 13233, 13234,
            13235, 13236, 13237, 13238, 13239, 13240, 13241,
            13184, 13185, 13186, 13187, 13188, 13242, 13243,
            13244, 13245, 13246, 13247, 13200, 13201, 13202,
            13203, 13204, 8486, 13248, 13249, 13194, 13195,
            13196, 13270, 13253, 13229, 13230, 13231, 13275,
            13225, 13226, 13227, 13228, 13277, 13264, 13267,
            13251, 13257, 13276, 13254, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 52077, 52078, 52079, 52080, 52081,
            52082, 52083, 52084, 52085, 52086, 52087, 52090,
            52091, 52092, 52093, 52094, 52095, 52096, 52097,
            52098, 52099, 52100, 52101, 52102, 52103, 52104,
            52105, 52106, 52107, 52108, 52109, 52110, 52111,
            52112, 52113, 52114, 52115, 52116, 52117, 52118,
            52119, 52120, 52121, 52122, 52123, 52125, 52126,
            52127, 52128, 52129, 52130, 52131, 52132, 52133,
            52134, 52135, 52136, 52137, 52138, 52139, 52140,
            52141, 52142, 52143, 52144, 52145, 52146, 52147,
            52148, 52149, 52150, 52151, 52153, 52154, 52155,
            52156, 52157, 52158, 52159, 52160, 52161, 52162,
            52163, 52164, 198, 208, 170, 294, null, 306, null,
            319, 321, 216, 338, 186, 222, 358, 330, null, 12896,
            12897, 12898, 12899, 12900, 12901, 12902, 12903,
            12904, 12905, 12906, 12907, 12908, 12909, 12910,
            12911, 12912, 12913, 12914, 12915, 12916, 12917,
            12918, 12919, 12920, 12921, 12922, 12923, 9424,
            9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432,
            9433, 9434, 9435, 9436, 9437, 9438, 9439, 9440,
            9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448,
            9449, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
            9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 189,
            8531, 8532, 188, 190, 8539, 8540, 8541, 8542, 52165,
            52166, 52167, 52168, 52169, 52170, 52171, 52172,
            52173, 52174, 52175, 52176, 52177, 52178, 52179,
            52181, 52182, 52183, 52184, 52185, 52186, 52187,
            52188, 52189, 52190, 52191, 52192, 52193, 52194,
            52195, 52197, 52198, 52200, 52202, 52203, 52204,
            52205, 52206, 52207, 52208, 52209, 52210, 52211,
            52212, 52213, 52214, 52215, 52216, 52217, 52218,
            52219, 52220, 52221, 52222, 52223, 52224, 52225,
            52226, 52227, 52228, 52229, 52230, 52231, 52232,
            52233, 52234, 52235, 52238, 52239, 52241, 52242,
            52243, 52245, 52246, 52247, 52248, 52249, 52250,
            52251, 52254, 52255, 52256, 52259, 52260, 230, 273,
            240, 295, 305, 307, 312, 320, 322, 248, 339, 223,
            254, 359, 331, 329, 12800, 12801, 12802, 12803,
            12804, 12805, 12806, 12807, 12808, 12809, 12810,
            12811, 12812, 12813, 12814, 12815, 12816, 12817,
            12818, 12819, 12820, 12821, 12822, 12823, 12824,
            12825, 12826, 12827, 9372, 9373, 9374, 9375, 9376,
            9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384,
            9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392,
            9393, 9394, 9395, 9396, 9397, 9332, 9333, 9334,
            9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342,
            9343, 9344, 9345, 9346, 185, 178, 179, 8308, 8319,
            8321, 8322, 8323, 8324, 52261, 52262, 52266, 52267,
            52269, 52271, 52273, 52274, 52275, 52276, 52277,
            52278, 52279, 52282, 52287, 52288, 52289, 52290,
            52291, 52294, 52295, 52297, 52298, 52299, 52301,
            52302, 52303, 52304, 52305, 52306, 52307, 52310,
            52314, 52315, 52316, 52317, 52318, 52319, 52321,
            52322, 52323, 52325, 52327, 52329, 52330, 52331,
            52332, 52333, 52334, 52335, 52337, 52338, 52339,
            52340, 52342, 52343, 52344, 52345, 52346, 52347,
            52348, 52349, 52350, 52351, 52352, 52353, 52354,
            52355, 52356, 52357, 52358, 52359, 52360, 52361,
            52362, 52363, 52364, 52365, 52366, 52367, 52368,
            52369, 52370, 52371, 12353, 12354, 12355, 12356,
            12357, 12358, 12359, 12360, 12361, 12362, 12363,
            12364, 12365, 12366, 12367, 12368, 12369, 12370,
            12371, 12372, 12373, 12374, 12375, 12376, 12377,
            12378, 12379, 12380, 12381, 12382, 12383, 12384,
            12385, 12386, 12387, 12388, 12389, 12390, 12391,
            12392, 12393, 12394, 12395, 12396, 12397, 12398,
            12399, 12400, 12401, 12402, 12403, 12404, 12405,
            12406, 12407, 12408, 12409, 12410, 12411, 12412,
            12413, 12414, 12415, 12416, 12417, 12418, 12419,
            12420, 12421, 12422, 12423, 12424, 12425, 12426,
            12427, 12428, 12429, 12430, 12431, 12432, 12433,
            12434, 12435, null, null, null, null, null, null,
            null, null, null, null, null, 52372, 52373, 52374,
            52375, 52378, 52379, 52381, 52382, 52383, 52385,
            52386, 52387, 52388, 52389, 52390, 52391, 52394,
            52398, 52399, 52400, 52401, 52402, 52403, 52406,
            52407, 52409, 52410, 52411, 52413, 52414, 52415,
            52416, 52417, 52418, 52419, 52422, 52424, 52426,
            52427, 52428, 52429, 52430, 52431, 52433, 52434,
            52435, 52437, 52438, 52439, 52440, 52441, 52442,
            52443, 52444, 52445, 52446, 52447, 52448, 52449,
            52450, 52451, 52453, 52454, 52455, 52456, 52457,
            52458, 52459, 52461, 52462, 52463, 52465, 52466,
            52467, 52468, 52469, 52470, 52471, 52472, 52473,
            52474, 52475, 52476, 52477, 12449, 12450, 12451,
            12452, 12453, 12454, 12455, 12456, 12457, 12458,
            12459, 12460, 12461, 12462, 12463, 12464, 12465,
            12466, 12467, 12468, 12469, 12470, 12471, 12472,
            12473, 12474, 12475, 12476, 12477, 12478, 12479,
            12480, 12481, 12482, 12483, 12484, 12485, 12486,
            12487, 12488, 12489, 12490, 12491, 12492, 12493,
            12494, 12495, 12496, 12497, 12498, 12499, 12500,
            12501, 12502, 12503, 12504, 12505, 12506, 12507,
            12508, 12509, 12510, 12511, 12512, 12513, 12514,
            12515, 12516, 12517, 12518, 12519, 12520, 12521,
            12522, 12523, 12524, 12525, 12526, 12527, 12528,
            12529, 12530, 12531, 12532, 12533, 12534, null,
            null, null, null, null, null, null, null, 52478,
            52479, 52480, 52482, 52483, 52484, 52485, 52486,
            52487, 52490, 52491, 52493, 52494, 52495, 52497,
            52498, 52499, 52500, 52501, 52502, 52503, 52506,
            52508, 52510, 52511, 52512, 52513, 52514, 52515,
            52517, 52518, 52519, 52521, 52522, 52523, 52525,
            52526, 52527, 52528, 52529, 52530, 52531, 52532,
            52533, 52534, 52535, 52536, 52538, 52539, 52540,
            52541, 52542, 52543, 52544, 52545, 52546, 52547,
            52548, 52549, 52550, 52551, 52552, 52553, 52554,
            52555, 52556, 52557, 52558, 52559, 52560, 52561,
            52562, 52563, 52564, 52565, 52566, 52567, 52568,
            52569, 52570, 52571, 52573, 52574, 52575, 1040,
            1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 1072,
            1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079,
            1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
            1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
            1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 52577, 52578, 52579,
            52581, 52582, 52583, 52584, 52585, 52586, 52587,
            52590, 52592, 52594, 52595, 52596, 52597, 52598,
            52599, 52601, 52602, 52603, 52604, 52605, 52606,
            52607, 52608, 52609, 52610, 52611, 52612, 52613,
            52614, 52615, 52617, 52618, 52619, 52620, 52621,
            52622, 52623, 52624, 52625, 52626, 52627, 52630,
            52631, 52633, 52634, 52635, 52637, 52638, 52639,
            52640, 52641, 52642, 52643, 52646, 52648, 52650,
            52651, 52652, 52653, 52654, 52655, 52657, 52658,
            52659, 52660, 52661, 52662, 52663, 52664, 52665,
            52666, 52667, 52668, 52669, 52670, 52671, 52672,
            52673, 52674, 52675, 52677, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, 52678, 52679, 52680, 52681, 52682,
            52683, 52685, 52686, 52687, 52689, 52690, 52691,
            52692, 52693, 52694, 52695, 52696, 52697, 52698,
            52699, 52700, 52701, 52702, 52703, 52704, 52705,
            52706, 52707, 52708, 52709, 52710, 52711, 52713,
            52714, 52715, 52717, 52718, 52719, 52721, 52722,
            52723, 52724, 52725, 52726, 52727, 52730, 52732,
            52734, 52735, 52736, 52737, 52738, 52739, 52741,
            52742, 52743, 52745, 52746, 52747, 52749, 52750,
            52751, 52752, 52753, 52754, 52755, 52757, 52758,
            52759, 52760, 52762, 52763, 52764, 52765, 52766,
            52767, 52770, 52771, 52773, 52774, 52775, 52777,
            52778, 52779, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            52780, 52781, 52782, 52783, 52786, 52788, 52790,
            52791, 52792, 52793, 52794, 52795, 52796, 52797,
            52798, 52799, 52800, 52801, 52802, 52803, 52804,
            52805, 52806, 52807, 52808, 52809, 52810, 52811,
            52812, 52813, 52814, 52815, 52816, 52817, 52818,
            52819, 52820, 52821, 52822, 52823, 52826, 52827,
            52829, 52830, 52834, 52835, 52836, 52837, 52838,
            52839, 52842, 52844, 52846, 52847, 52848, 52849,
            52850, 52851, 52854, 52855, 52857, 52858, 52859,
            52861, 52862, 52863, 52864, 52865, 52866, 52867,
            52870, 52872, 52874, 52875, 52876, 52877, 52878,
            52879, 52882, 52883, 52885, 52886, 52887, 52889,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 52890, 52891,
            52892, 52893, 52894, 52895, 52898, 52902, 52903,
            52904, 52905, 52906, 52907, 52910, 52911, 52912,
            52913, 52914, 52915, 52916, 52917, 52918, 52919,
            52920, 52921, 52922, 52923, 52924, 52925, 52926,
            52927, 52928, 52930, 52931, 52932, 52933, 52934,
            52935, 52936, 52937, 52938, 52939, 52940, 52941,
            52942, 52943, 52944, 52945, 52946, 52947, 52948,
            52949, 52950, 52951, 52952, 52953, 52954, 52955,
            52956, 52957, 52958, 52959, 52960, 52961, 52962,
            52963, 52966, 52967, 52969, 52970, 52973, 52974,
            52975, 52976, 52977, 52978, 52979, 52982, 52986,
            52987, 52988, 52989, 52990, 52991, 44032, 44033,
            44036, 44039, 44040, 44041, 44042, 44048, 44049,
            44050, 44051, 44052, 44053, 44054, 44055, 44057,
            44058, 44059, 44060, 44061, 44064, 44068, 44076,
            44077, 44079, 44080, 44081, 44088, 44089, 44092,
            44096, 44107, 44109, 44116, 44120, 44124, 44144,
            44145, 44148, 44151, 44152, 44154, 44160, 44161,
            44163, 44164, 44165, 44166, 44169, 44170, 44171,
            44172, 44176, 44180, 44188, 44189, 44191, 44192,
            44193, 44200, 44201, 44202, 44204, 44207, 44208,
            44216, 44217, 44219, 44220, 44221, 44225, 44228,
            44232, 44236, 44245, 44247, 44256, 44257, 44260,
            44263, 44264, 44266, 44268, 44271, 44272, 44273,
            44275, 44277, 44278, 44284, 44285, 44288, 44292,
            44294, 52994, 52995, 52997, 52998, 52999, 53001,
            53002, 53003, 53004, 53005, 53006, 53007, 53010,
            53012, 53014, 53015, 53016, 53017, 53018, 53019,
            53021, 53022, 53023, 53025, 53026, 53027, 53029,
            53030, 53031, 53032, 53033, 53034, 53035, 53038,
            53042, 53043, 53044, 53045, 53046, 53047, 53049,
            53050, 53051, 53052, 53053, 53054, 53055, 53056,
            53057, 53058, 53059, 53060, 53061, 53062, 53063,
            53064, 53065, 53066, 53067, 53068, 53069, 53070,
            53071, 53072, 53073, 53074, 53075, 53078, 53079,
            53081, 53082, 53083, 53085, 53086, 53087, 53088,
            53089, 53090, 53091, 53094, 53096, 53098, 53099,
            53100, 44300, 44301, 44303, 44305, 44312, 44316,
            44320, 44329, 44332, 44333, 44340, 44341, 44344,
            44348, 44356, 44357, 44359, 44361, 44368, 44372,
            44376, 44385, 44387, 44396, 44397, 44400, 44403,
            44404, 44405, 44406, 44411, 44412, 44413, 44415,
            44417, 44418, 44424, 44425, 44428, 44432, 44444,
            44445, 44452, 44471, 44480, 44481, 44484, 44488,
            44496, 44497, 44499, 44508, 44512, 44516, 44536,
            44537, 44540, 44543, 44544, 44545, 44552, 44553,
            44555, 44557, 44564, 44592, 44593, 44596, 44599,
            44600, 44602, 44608, 44609, 44611, 44613, 44614,
            44618, 44620, 44621, 44622, 44624, 44628, 44630,
            44636, 44637, 44639, 44640, 44641, 44645, 44648,
            44649, 44652, 44656, 44664, 53101, 53102, 53103,
            53106, 53107, 53109, 53110, 53111, 53113, 53114,
            53115, 53116, 53117, 53118, 53119, 53121, 53122,
            53123, 53124, 53126, 53127, 53128, 53129, 53130,
            53131, 53133, 53134, 53135, 53136, 53137, 53138,
            53139, 53140, 53141, 53142, 53143, 53144, 53145,
            53146, 53147, 53148, 53149, 53150, 53151, 53152,
            53154, 53155, 53156, 53157, 53158, 53159, 53161,
            53162, 53163, 53164, 53165, 53166, 53167, 53169,
            53170, 53171, 53172, 53173, 53174, 53175, 53176,
            53177, 53178, 53179, 53180, 53181, 53182, 53183,
            53184, 53185, 53186, 53187, 53189, 53190, 53191,
            53192, 53193, 53194, 53195, 44665, 44667, 44668,
            44669, 44676, 44677, 44684, 44732, 44733, 44734,
            44736, 44740, 44748, 44749, 44751, 44752, 44753,
            44760, 44761, 44764, 44776, 44779, 44781, 44788,
            44792, 44796, 44807, 44808, 44813, 44816, 44844,
            44845, 44848, 44850, 44852, 44860, 44861, 44863,
            44865, 44866, 44867, 44872, 44873, 44880, 44892,
            44893, 44900, 44901, 44921, 44928, 44932, 44936,
            44944, 44945, 44949, 44956, 44984, 44985, 44988,
            44992, 44999, 45000, 45001, 45003, 45005, 45006,
            45012, 45020, 45032, 45033, 45040, 45041, 45044,
            45048, 45056, 45057, 45060, 45068, 45072, 45076,
            45084, 45085, 45096, 45124, 45125, 45128, 45130,
            45132, 45134, 45139, 45140, 45141, 45143, 45145,
            53196, 53197, 53198, 53199, 53200, 53201, 53202,
            53203, 53204, 53205, 53206, 53207, 53208, 53209,
            53210, 53211, 53212, 53213, 53214, 53215, 53218,
            53219, 53221, 53222, 53223, 53225, 53226, 53227,
            53228, 53229, 53230, 53231, 53234, 53236, 53238,
            53239, 53240, 53241, 53242, 53243, 53245, 53246,
            53247, 53249, 53250, 53251, 53253, 53254, 53255,
            53256, 53257, 53258, 53259, 53260, 53261, 53262,
            53263, 53264, 53266, 53267, 53268, 53269, 53270,
            53271, 53273, 53274, 53275, 53276, 53277, 53278,
            53279, 53280, 53281, 53282, 53283, 53284, 53285,
            53286, 53287, 53288, 53289, 53290, 53291, 53292,
            45149, 45180, 45181, 45184, 45188, 45196, 45197,
            45199, 45201, 45208, 45209, 45210, 45212, 45215,
            45216, 45217, 45218, 45224, 45225, 45227, 45228,
            45229, 45230, 45231, 45233, 45235, 45236, 45237,
            45240, 45244, 45252, 45253, 45255, 45256, 45257,
            45264, 45265, 45268, 45272, 45280, 45285, 45320,
            45321, 45323, 45324, 45328, 45330, 45331, 45336,
            45337, 45339, 45340, 45341, 45347, 45348, 45349,
            45352, 45356, 45364, 45365, 45367, 45368, 45369,
            45376, 45377, 45380, 45384, 45392, 45393, 45396,
            45397, 45400, 45404, 45408, 45432, 45433, 45436,
            45440, 45442, 45448, 45449, 45451, 45453, 45458,
            45459, 45460, 45464, 45468, 45480, 45516, 45520,
            45524, 45532, 45533, 53294, 53295, 53296, 53297,
            53298, 53299, 53302, 53303, 53305, 53306, 53307,
            53309, 53310, 53311, 53312, 53313, 53314, 53315,
            53318, 53320, 53322, 53323, 53324, 53325, 53326,
            53327, 53329, 53330, 53331, 53333, 53334, 53335,
            53337, 53338, 53339, 53340, 53341, 53342, 53343,
            53345, 53346, 53347, 53348, 53349, 53350, 53351,
            53352, 53353, 53354, 53355, 53358, 53359, 53361,
            53362, 53363, 53365, 53366, 53367, 53368, 53369,
            53370, 53371, 53374, 53375, 53376, 53378, 53379,
            53380, 53381, 53382, 53383, 53384, 53385, 53386,
            53387, 53388, 53389, 53390, 53391, 53392, 53393,
            53394, 53395, 53396, 45535, 45544, 45545, 45548,
            45552, 45561, 45563, 45565, 45572, 45573, 45576,
            45579, 45580, 45588, 45589, 45591, 45593, 45600,
            45620, 45628, 45656, 45660, 45664, 45672, 45673,
            45684, 45685, 45692, 45700, 45701, 45705, 45712,
            45713, 45716, 45720, 45721, 45722, 45728, 45729,
            45731, 45733, 45734, 45738, 45740, 45744, 45748,
            45768, 45769, 45772, 45776, 45778, 45784, 45785,
            45787, 45789, 45794, 45796, 45797, 45798, 45800,
            45803, 45804, 45805, 45806, 45807, 45811, 45812,
            45813, 45815, 45816, 45817, 45818, 45819, 45823,
            45824, 45825, 45828, 45832, 45840, 45841, 45843,
            45844, 45845, 45852, 45908, 45909, 45910, 45912,
            45915, 45916, 45918, 45919, 45924, 45925, 53397,
            53398, 53399, 53400, 53401, 53402, 53403, 53404,
            53405, 53406, 53407, 53408, 53409, 53410, 53411,
            53414, 53415, 53417, 53418, 53419, 53421, 53422,
            53423, 53424, 53425, 53426, 53427, 53430, 53432,
            53434, 53435, 53436, 53437, 53438, 53439, 53442,
            53443, 53445, 53446, 53447, 53450, 53451, 53452,
            53453, 53454, 53455, 53458, 53462, 53463, 53464,
            53465, 53466, 53467, 53470, 53471, 53473, 53474,
            53475, 53477, 53478, 53479, 53480, 53481, 53482,
            53483, 53486, 53490, 53491, 53492, 53493, 53494,
            53495, 53497, 53498, 53499, 53500, 53501, 53502,
            53503, 53504, 53505, 53506, 53507, 53508, 45927,
            45929, 45931, 45934, 45936, 45937, 45940, 45944,
            45952, 45953, 45955, 45956, 45957, 45964, 45968,
            45972, 45984, 45985, 45992, 45996, 46020, 46021,
            46024, 46027, 46028, 46030, 46032, 46036, 46037,
            46039, 46041, 46043, 46045, 46048, 46052, 46056,
            46076, 46096, 46104, 46108, 46112, 46120, 46121,
            46123, 46132, 46160, 46161, 46164, 46168, 46176,
            46177, 46179, 46181, 46188, 46208, 46216, 46237,
            46244, 46248, 46252, 46261, 46263, 46265, 46272,
            46276, 46280, 46288, 46293, 46300, 46301, 46304,
            46307, 46308, 46310, 46316, 46317, 46319, 46321,
            46328, 46356, 46357, 46360, 46363, 46364, 46372,
            46373, 46375, 46376, 46377, 46378, 46384, 46385,
            46388, 46392, 53509, 53510, 53511, 53512, 53513,
            53514, 53515, 53516, 53518, 53519, 53520, 53521,
            53522, 53523, 53524, 53525, 53526, 53527, 53528,
            53529, 53530, 53531, 53532, 53533, 53534, 53535,
            53536, 53537, 53538, 53539, 53540, 53541, 53542,
            53543, 53544, 53545, 53546, 53547, 53548, 53549,
            53550, 53551, 53554, 53555, 53557, 53558, 53559,
            53561, 53563, 53564, 53565, 53566, 53567, 53570,
            53574, 53575, 53576, 53577, 53578, 53579, 53582,
            53583, 53585, 53586, 53587, 53589, 53590, 53591,
            53592, 53593, 53594, 53595, 53598, 53600, 53602,
            53603, 53604, 53605, 53606, 53607, 53609, 53610,
            53611, 53613, 46400, 46401, 46403, 46404, 46405,
            46411, 46412, 46413, 46416, 46420, 46428, 46429,
            46431, 46432, 46433, 46496, 46497, 46500, 46504,
            46506, 46507, 46512, 46513, 46515, 46516, 46517,
            46523, 46524, 46525, 46528, 46532, 46540, 46541,
            46543, 46544, 46545, 46552, 46572, 46608, 46609,
            46612, 46616, 46629, 46636, 46644, 46664, 46692,
            46696, 46748, 46749, 46752, 46756, 46763, 46764,
            46769, 46804, 46832, 46836, 46840, 46848, 46849,
            46853, 46888, 46889, 46892, 46895, 46896, 46904,
            46905, 46907, 46916, 46920, 46924, 46932, 46933,
            46944, 46948, 46952, 46960, 46961, 46963, 46965,
            46972, 46973, 46976, 46980, 46988, 46989, 46991,
            46992, 46993, 46994, 46998, 46999, 53614, 53615,
            53616, 53617, 53618, 53619, 53620, 53621, 53622,
            53623, 53624, 53625, 53626, 53627, 53629, 53630,
            53631, 53632, 53633, 53634, 53635, 53637, 53638,
            53639, 53641, 53642, 53643, 53644, 53645, 53646,
            53647, 53648, 53649, 53650, 53651, 53652, 53653,
            53654, 53655, 53656, 53657, 53658, 53659, 53660,
            53661, 53662, 53663, 53666, 53667, 53669, 53670,
            53671, 53673, 53674, 53675, 53676, 53677, 53678,
            53679, 53682, 53684, 53686, 53687, 53688, 53689,
            53691, 53693, 53694, 53695, 53697, 53698, 53699,
            53700, 53701, 53702, 53703, 53704, 53705, 53706,
            53707, 53708, 53709, 53710, 53711, 47000, 47001,
            47004, 47008, 47016, 47017, 47019, 47020, 47021,
            47028, 47029, 47032, 47047, 47049, 47084, 47085,
            47088, 47092, 47100, 47101, 47103, 47104, 47105,
            47111, 47112, 47113, 47116, 47120, 47128, 47129,
            47131, 47133, 47140, 47141, 47144, 47148, 47156,
            47157, 47159, 47160, 47161, 47168, 47172, 47185,
            47187, 47196, 47197, 47200, 47204, 47212, 47213,
            47215, 47217, 47224, 47228, 47245, 47272, 47280,
            47284, 47288, 47296, 47297, 47299, 47301, 47308,
            47312, 47316, 47325, 47327, 47329, 47336, 47337,
            47340, 47344, 47352, 47353, 47355, 47357, 47364,
            47384, 47392, 47420, 47421, 47424, 47428, 47436,
            47439, 47441, 47448, 47449, 47452, 47456, 47464,
            47465, 53712, 53713, 53714, 53715, 53716, 53717,
            53718, 53719, 53721, 53722, 53723, 53724, 53725,
            53726, 53727, 53728, 53729, 53730, 53731, 53732,
            53733, 53734, 53735, 53736, 53737, 53738, 53739,
            53740, 53741, 53742, 53743, 53744, 53745, 53746,
            53747, 53749, 53750, 53751, 53753, 53754, 53755,
            53756, 53757, 53758, 53759, 53760, 53761, 53762,
            53763, 53764, 53765, 53766, 53768, 53770, 53771,
            53772, 53773, 53774, 53775, 53777, 53778, 53779,
            53780, 53781, 53782, 53783, 53784, 53785, 53786,
            53787, 53788, 53789, 53790, 53791, 53792, 53793,
            53794, 53795, 53796, 53797, 53798, 53799, 53800,
            53801, 47467, 47469, 47476, 47477, 47480, 47484,
            47492, 47493, 47495, 47497, 47498, 47501, 47502,
            47532, 47533, 47536, 47540, 47548, 47549, 47551,
            47553, 47560, 47561, 47564, 47566, 47567, 47568,
            47569, 47570, 47576, 47577, 47579, 47581, 47582,
            47585, 47587, 47588, 47589, 47592, 47596, 47604,
            47605, 47607, 47608, 47609, 47610, 47616, 47617,
            47624, 47637, 47672, 47673, 47676, 47680, 47682,
            47688, 47689, 47691, 47693, 47694, 47699, 47700,
            47701, 47704, 47708, 47716, 47717, 47719, 47720,
            47721, 47728, 47729, 47732, 47736, 47747, 47748,
            47749, 47751, 47756, 47784, 47785, 47787, 47788,
            47792, 47794, 47800, 47801, 47803, 47805, 47812,
            47816, 47832, 47833, 47868, 53802, 53803, 53806,
            53807, 53809, 53810, 53811, 53813, 53814, 53815,
            53816, 53817, 53818, 53819, 53822, 53824, 53826,
            53827, 53828, 53829, 53830, 53831, 53833, 53834,
            53835, 53836, 53837, 53838, 53839, 53840, 53841,
            53842, 53843, 53844, 53845, 53846, 53847, 53848,
            53849, 53850, 53851, 53853, 53854, 53855, 53856,
            53857, 53858, 53859, 53861, 53862, 53863, 53864,
            53865, 53866, 53867, 53868, 53869, 53870, 53871,
            53872, 53873, 53874, 53875, 53876, 53877, 53878,
            53879, 53880, 53881, 53882, 53883, 53884, 53885,
            53886, 53887, 53890, 53891, 53893, 53894, 53895,
            53897, 53898, 53899, 53900, 47872, 47876, 47885,
            47887, 47889, 47896, 47900, 47904, 47913, 47915,
            47924, 47925, 47926, 47928, 47931, 47932, 47933,
            47934, 47940, 47941, 47943, 47945, 47949, 47951,
            47952, 47956, 47960, 47969, 47971, 47980, 48008,
            48012, 48016, 48036, 48040, 48044, 48052, 48055,
            48064, 48068, 48072, 48080, 48083, 48120, 48121,
            48124, 48127, 48128, 48130, 48136, 48137, 48139,
            48140, 48141, 48143, 48145, 48148, 48149, 48150,
            48151, 48152, 48155, 48156, 48157, 48158, 48159,
            48164, 48165, 48167, 48169, 48173, 48176, 48177,
            48180, 48184, 48192, 48193, 48195, 48196, 48197,
            48201, 48204, 48205, 48208, 48221, 48260, 48261,
            48264, 48267, 48268, 48270, 48276, 48277, 48279,
            53901, 53902, 53903, 53906, 53907, 53908, 53910,
            53911, 53912, 53913, 53914, 53915, 53917, 53918,
            53919, 53921, 53922, 53923, 53925, 53926, 53927,
            53928, 53929, 53930, 53931, 53933, 53934, 53935,
            53936, 53938, 53939, 53940, 53941, 53942, 53943,
            53946, 53947, 53949, 53950, 53953, 53955, 53956,
            53957, 53958, 53959, 53962, 53964, 53965, 53966,
            53967, 53968, 53969, 53970, 53971, 53973, 53974,
            53975, 53977, 53978, 53979, 53981, 53982, 53983,
            53984, 53985, 53986, 53987, 53990, 53991, 53992,
            53993, 53994, 53995, 53996, 53997, 53998, 53999,
            54002, 54003, 54005, 54006, 54007, 54009, 54010,
            48281, 48282, 48288, 48289, 48292, 48295, 48296,
            48304, 48305, 48307, 48308, 48309, 48316, 48317,
            48320, 48324, 48333, 48335, 48336, 48337, 48341,
            48344, 48348, 48372, 48373, 48374, 48376, 48380,
            48388, 48389, 48391, 48393, 48400, 48404, 48420,
            48428, 48448, 48456, 48457, 48460, 48464, 48472,
            48473, 48484, 48488, 48512, 48513, 48516, 48519,
            48520, 48521, 48522, 48528, 48529, 48531, 48533,
            48537, 48538, 48540, 48548, 48560, 48568, 48596,
            48597, 48600, 48604, 48617, 48624, 48628, 48632,
            48640, 48643, 48645, 48652, 48653, 48656, 48660,
            48668, 48669, 48671, 48708, 48709, 48712, 48716,
            48718, 48724, 48725, 48727, 48729, 48730, 48731,
            48736, 48737, 48740, 54011, 54012, 54013, 54014,
            54015, 54018, 54020, 54022, 54023, 54024, 54025,
            54026, 54027, 54031, 54033, 54034, 54035, 54037,
            54039, 54040, 54041, 54042, 54043, 54046, 54050,
            54051, 54052, 54054, 54055, 54058, 54059, 54061,
            54062, 54063, 54065, 54066, 54067, 54068, 54069,
            54070, 54071, 54074, 54078, 54079, 54080, 54081,
            54082, 54083, 54086, 54087, 54088, 54089, 54090,
            54091, 54092, 54093, 54094, 54095, 54096, 54097,
            54098, 54099, 54100, 54101, 54102, 54103, 54104,
            54105, 54106, 54107, 54108, 54109, 54110, 54111,
            54112, 54113, 54114, 54115, 54116, 54117, 54118,
            54119, 54120, 54121, 48744, 48746, 48752, 48753,
            48755, 48756, 48757, 48763, 48764, 48765, 48768,
            48772, 48780, 48781, 48783, 48784, 48785, 48792,
            48793, 48808, 48848, 48849, 48852, 48855, 48856,
            48864, 48867, 48868, 48869, 48876, 48897, 48904,
            48905, 48920, 48921, 48923, 48924, 48925, 48960,
            48961, 48964, 48968, 48976, 48977, 48981, 49044,
            49072, 49093, 49100, 49101, 49104, 49108, 49116,
            49119, 49121, 49212, 49233, 49240, 49244, 49248,
            49256, 49257, 49296, 49297, 49300, 49304, 49312,
            49313, 49315, 49317, 49324, 49325, 49327, 49328,
            49331, 49332, 49333, 49334, 49340, 49341, 49343,
            49344, 49345, 49349, 49352, 49353, 49356, 49360,
            49368, 49369, 49371, 49372, 49373, 49380, 54122,
            54123, 54124, 54125, 54126, 54127, 54128, 54129,
            54130, 54131, 54132, 54133, 54134, 54135, 54136,
            54137, 54138, 54139, 54142, 54143, 54145, 54146,
            54147, 54149, 54150, 54151, 54152, 54153, 54154,
            54155, 54158, 54162, 54163, 54164, 54165, 54166,
            54167, 54170, 54171, 54173, 54174, 54175, 54177,
            54178, 54179, 54180, 54181, 54182, 54183, 54186,
            54188, 54190, 54191, 54192, 54193, 54194, 54195,
            54197, 54198, 54199, 54201, 54202, 54203, 54205,
            54206, 54207, 54208, 54209, 54210, 54211, 54214,
            54215, 54218, 54219, 54220, 54221, 54222, 54223,
            54225, 54226, 54227, 54228, 54229, 54230, 49381,
            49384, 49388, 49396, 49397, 49399, 49401, 49408,
            49412, 49416, 49424, 49429, 49436, 49437, 49438,
            49439, 49440, 49443, 49444, 49446, 49447, 49452,
            49453, 49455, 49456, 49457, 49462, 49464, 49465,
            49468, 49472, 49480, 49481, 49483, 49484, 49485,
            49492, 49493, 49496, 49500, 49508, 49509, 49511,
            49512, 49513, 49520, 49524, 49528, 49541, 49548,
            49549, 49550, 49552, 49556, 49558, 49564, 49565,
            49567, 49569, 49573, 49576, 49577, 49580, 49584,
            49597, 49604, 49608, 49612, 49620, 49623, 49624,
            49632, 49636, 49640, 49648, 49649, 49651, 49660,
            49661, 49664, 49668, 49676, 49677, 49679, 49681,
            49688, 49689, 49692, 49695, 49696, 49704, 49705,
            49707, 49709, 54231, 54233, 54234, 54235, 54236,
            54237, 54238, 54239, 54240, 54242, 54244, 54245,
            54246, 54247, 54248, 54249, 54250, 54251, 54254,
            54255, 54257, 54258, 54259, 54261, 54262, 54263,
            54264, 54265, 54266, 54267, 54270, 54272, 54274,
            54275, 54276, 54277, 54278, 54279, 54281, 54282,
            54283, 54284, 54285, 54286, 54287, 54288, 54289,
            54290, 54291, 54292, 54293, 54294, 54295, 54296,
            54297, 54298, 54299, 54300, 54302, 54303, 54304,
            54305, 54306, 54307, 54308, 54309, 54310, 54311,
            54312, 54313, 54314, 54315, 54316, 54317, 54318,
            54319, 54320, 54321, 54322, 54323, 54324, 54325,
            54326, 54327, 49711, 49713, 49714, 49716, 49736,
            49744, 49745, 49748, 49752, 49760, 49765, 49772,
            49773, 49776, 49780, 49788, 49789, 49791, 49793,
            49800, 49801, 49808, 49816, 49819, 49821, 49828,
            49829, 49832, 49836, 49837, 49844, 49845, 49847,
            49849, 49884, 49885, 49888, 49891, 49892, 49899,
            49900, 49901, 49903, 49905, 49910, 49912, 49913,
            49915, 49916, 49920, 49928, 49929, 49932, 49933,
            49939, 49940, 49941, 49944, 49948, 49956, 49957,
            49960, 49961, 49989, 50024, 50025, 50028, 50032,
            50034, 50040, 50041, 50044, 50045, 50052, 50056,
            50060, 50112, 50136, 50137, 50140, 50143, 50144,
            50146, 50152, 50153, 50157, 50164, 50165, 50168,
            50184, 50192, 50212, 50220, 50224, 54328, 54329,
            54330, 54331, 54332, 54333, 54334, 54335, 54337,
            54338, 54339, 54341, 54342, 54343, 54344, 54345,
            54346, 54347, 54348, 54349, 54350, 54351, 54352,
            54353, 54354, 54355, 54356, 54357, 54358, 54359,
            54360, 54361, 54362, 54363, 54365, 54366, 54367,
            54369, 54370, 54371, 54373, 54374, 54375, 54376,
            54377, 54378, 54379, 54380, 54382, 54384, 54385,
            54386, 54387, 54388, 54389, 54390, 54391, 54394,
            54395, 54397, 54398, 54401, 54403, 54404, 54405,
            54406, 54407, 54410, 54412, 54414, 54415, 54416,
            54417, 54418, 54419, 54421, 54422, 54423, 54424,
            54425, 54426, 54427, 54428, 54429, 50228, 50236,
            50237, 50248, 50276, 50277, 50280, 50284, 50292,
            50293, 50297, 50304, 50324, 50332, 50360, 50364,
            50409, 50416, 50417, 50420, 50424, 50426, 50431,
            50432, 50433, 50444, 50448, 50452, 50460, 50472,
            50473, 50476, 50480, 50488, 50489, 50491, 50493,
            50500, 50501, 50504, 50505, 50506, 50508, 50509,
            50510, 50515, 50516, 50517, 50519, 50520, 50521,
            50525, 50526, 50528, 50529, 50532, 50536, 50544,
            50545, 50547, 50548, 50549, 50556, 50557, 50560,
            50564, 50567, 50572, 50573, 50575, 50577, 50581,
            50583, 50584, 50588, 50592, 50601, 50612, 50613,
            50616, 50617, 50619, 50620, 50621, 50622, 50628,
            50629, 50630, 50631, 50632, 50633, 50634, 50636,
            50638, 54430, 54431, 54432, 54433, 54434, 54435,
            54436, 54437, 54438, 54439, 54440, 54442, 54443,
            54444, 54445, 54446, 54447, 54448, 54449, 54450,
            54451, 54452, 54453, 54454, 54455, 54456, 54457,
            54458, 54459, 54460, 54461, 54462, 54463, 54464,
            54465, 54466, 54467, 54468, 54469, 54470, 54471,
            54472, 54473, 54474, 54475, 54477, 54478, 54479,
            54481, 54482, 54483, 54485, 54486, 54487, 54488,
            54489, 54490, 54491, 54493, 54494, 54496, 54497,
            54498, 54499, 54500, 54501, 54502, 54503, 54505,
            54506, 54507, 54509, 54510, 54511, 54513, 54514,
            54515, 54516, 54517, 54518, 54519, 54521, 54522,
            54524, 50640, 50641, 50644, 50648, 50656, 50657,
            50659, 50661, 50668, 50669, 50670, 50672, 50676,
            50678, 50679, 50684, 50685, 50686, 50687, 50688,
            50689, 50693, 50694, 50695, 50696, 50700, 50704,
            50712, 50713, 50715, 50716, 50724, 50725, 50728,
            50732, 50733, 50734, 50736, 50739, 50740, 50741,
            50743, 50745, 50747, 50752, 50753, 50756, 50760,
            50768, 50769, 50771, 50772, 50773, 50780, 50781,
            50784, 50796, 50799, 50801, 50808, 50809, 50812,
            50816, 50824, 50825, 50827, 50829, 50836, 50837,
            50840, 50844, 50852, 50853, 50855, 50857, 50864,
            50865, 50868, 50872, 50873, 50874, 50880, 50881,
            50883, 50885, 50892, 50893, 50896, 50900, 50908,
            50909, 50912, 50913, 50920, 54526, 54527, 54528,
            54529, 54530, 54531, 54533, 54534, 54535, 54537,
            54538, 54539, 54541, 54542, 54543, 54544, 54545,
            54546, 54547, 54550, 54552, 54553, 54554, 54555,
            54556, 54557, 54558, 54559, 54560, 54561, 54562,
            54563, 54564, 54565, 54566, 54567, 54568, 54569,
            54570, 54571, 54572, 54573, 54574, 54575, 54576,
            54577, 54578, 54579, 54580, 54581, 54582, 54583,
            54584, 54585, 54586, 54587, 54590, 54591, 54593,
            54594, 54595, 54597, 54598, 54599, 54600, 54601,
            54602, 54603, 54606, 54608, 54610, 54611, 54612,
            54613, 54614, 54615, 54618, 54619, 54621, 54622,
            54623, 54625, 54626, 54627, 50921, 50924, 50928,
            50936, 50937, 50941, 50948, 50949, 50952, 50956,
            50964, 50965, 50967, 50969, 50976, 50977, 50980,
            50984, 50992, 50993, 50995, 50997, 50999, 51004,
            51005, 51008, 51012, 51018, 51020, 51021, 51023,
            51025, 51026, 51027, 51028, 51029, 51030, 51031,
            51032, 51036, 51040, 51048, 51051, 51060, 51061,
            51064, 51068, 51069, 51070, 51075, 51076, 51077,
            51079, 51080, 51081, 51082, 51086, 51088, 51089,
            51092, 51094, 51095, 51096, 51098, 51104, 51105,
            51107, 51108, 51109, 51110, 51116, 51117, 51120,
            51124, 51132, 51133, 51135, 51136, 51137, 51144,
            51145, 51148, 51150, 51152, 51160, 51165, 51172,
            51176, 51180, 51200, 51201, 51204, 51208, 51210,
            54628, 54630, 54631, 54634, 54636, 54638, 54639,
            54640, 54641, 54642, 54643, 54646, 54647, 54649,
            54650, 54651, 54653, 54654, 54655, 54656, 54657,
            54658, 54659, 54662, 54666, 54667, 54668, 54669,
            54670, 54671, 54673, 54674, 54675, 54676, 54677,
            54678, 54679, 54680, 54681, 54682, 54683, 54684,
            54685, 54686, 54687, 54688, 54689, 54690, 54691,
            54692, 54694, 54695, 54696, 54697, 54698, 54699,
            54700, 54701, 54702, 54703, 54704, 54705, 54706,
            54707, 54708, 54709, 54710, 54711, 54712, 54713,
            54714, 54715, 54716, 54717, 54718, 54719, 54720,
            54721, 54722, 54723, 54724, 54725, 54726, 54727,
            51216, 51217, 51219, 51221, 51222, 51228, 51229,
            51232, 51236, 51244, 51245, 51247, 51249, 51256,
            51260, 51264, 51272, 51273, 51276, 51277, 51284,
            51312, 51313, 51316, 51320, 51322, 51328, 51329,
            51331, 51333, 51334, 51335, 51339, 51340, 51341,
            51348, 51357, 51359, 51361, 51368, 51388, 51389,
            51396, 51400, 51404, 51412, 51413, 51415, 51417,
            51424, 51425, 51428, 51445, 51452, 51453, 51456,
            51460, 51461, 51462, 51468, 51469, 51471, 51473,
            51480, 51500, 51508, 51536, 51537, 51540, 51544,
            51552, 51553, 51555, 51564, 51568, 51572, 51580,
            51592, 51593, 51596, 51600, 51608, 51609, 51611,
            51613, 51648, 51649, 51652, 51655, 51656, 51658,
            51664, 51665, 51667, 54730, 54731, 54733, 54734,
            54735, 54737, 54739, 54740, 54741, 54742, 54743,
            54746, 54748, 54750, 54751, 54752, 54753, 54754,
            54755, 54758, 54759, 54761, 54762, 54763, 54765,
            54766, 54767, 54768, 54769, 54770, 54771, 54774,
            54776, 54778, 54779, 54780, 54781, 54782, 54783,
            54786, 54787, 54789, 54790, 54791, 54793, 54794,
            54795, 54796, 54797, 54798, 54799, 54802, 54806,
            54807, 54808, 54809, 54810, 54811, 54813, 54814,
            54815, 54817, 54818, 54819, 54821, 54822, 54823,
            54824, 54825, 54826, 54827, 54828, 54830, 54831,
            54832, 54833, 54834, 54835, 54836, 54837, 54838,
            54839, 54842, 54843, 51669, 51670, 51673, 51674,
            51676, 51677, 51680, 51682, 51684, 51687, 51692,
            51693, 51695, 51696, 51697, 51704, 51705, 51708,
            51712, 51720, 51721, 51723, 51724, 51725, 51732,
            51736, 51753, 51788, 51789, 51792, 51796, 51804,
            51805, 51807, 51808, 51809, 51816, 51837, 51844,
            51864, 51900, 51901, 51904, 51908, 51916, 51917,
            51919, 51921, 51923, 51928, 51929, 51936, 51948,
            51956, 51976, 51984, 51988, 51992, 52000, 52001,
            52033, 52040, 52041, 52044, 52048, 52056, 52057,
            52061, 52068, 52088, 52089, 52124, 52152, 52180,
            52196, 52199, 52201, 52236, 52237, 52240, 52244,
            52252, 52253, 52257, 52258, 52263, 52264, 52265,
            52268, 52270, 52272, 52280, 52281, 52283, 54845,
            54846, 54847, 54849, 54850, 54851, 54852, 54854,
            54855, 54858, 54860, 54862, 54863, 54864, 54866,
            54867, 54870, 54871, 54873, 54874, 54875, 54877,
            54878, 54879, 54880, 54881, 54882, 54883, 54884,
            54885, 54886, 54888, 54890, 54891, 54892, 54893,
            54894, 54895, 54898, 54899, 54901, 54902, 54903,
            54904, 54905, 54906, 54907, 54908, 54909, 54910,
            54911, 54912, 54913, 54914, 54916, 54918, 54919,
            54920, 54921, 54922, 54923, 54926, 54927, 54929,
            54930, 54931, 54933, 54934, 54935, 54936, 54937,
            54938, 54939, 54940, 54942, 54944, 54946, 54947,
            54948, 54949, 54950, 54951, 54953, 54954, 52284,
            52285, 52286, 52292, 52293, 52296, 52300, 52308,
            52309, 52311, 52312, 52313, 52320, 52324, 52326,
            52328, 52336, 52341, 52376, 52377, 52380, 52384,
            52392, 52393, 52395, 52396, 52397, 52404, 52405,
            52408, 52412, 52420, 52421, 52423, 52425, 52432,
            52436, 52452, 52460, 52464, 52481, 52488, 52489,
            52492, 52496, 52504, 52505, 52507, 52509, 52516,
            52520, 52524, 52537, 52572, 52576, 52580, 52588,
            52589, 52591, 52593, 52600, 52616, 52628, 52629,
            52632, 52636, 52644, 52645, 52647, 52649, 52656,
            52676, 52684, 52688, 52712, 52716, 52720, 52728,
            52729, 52731, 52733, 52740, 52744, 52748, 52756,
            52761, 52768, 52769, 52772, 52776, 52784, 52785,
            52787, 52789, 54955, 54957, 54958, 54959, 54961,
            54962, 54963, 54964, 54965, 54966, 54967, 54968,
            54970, 54972, 54973, 54974, 54975, 54976, 54977,
            54978, 54979, 54982, 54983, 54985, 54986, 54987,
            54989, 54990, 54991, 54992, 54994, 54995, 54997,
            54998, 55000, 55002, 55003, 55004, 55005, 55006,
            55007, 55009, 55010, 55011, 55013, 55014, 55015,
            55017, 55018, 55019, 55020, 55021, 55022, 55023,
            55025, 55026, 55027, 55028, 55030, 55031, 55032,
            55033, 55034, 55035, 55038, 55039, 55041, 55042,
            55043, 55045, 55046, 55047, 55048, 55049, 55050,
            55051, 55052, 55053, 55054, 55055, 55056, 55058,
            55059, 55060, 52824, 52825, 52828, 52831, 52832,
            52833, 52840, 52841, 52843, 52845, 52852, 52853,
            52856, 52860, 52868, 52869, 52871, 52873, 52880,
            52881, 52884, 52888, 52896, 52897, 52899, 52900,
            52901, 52908, 52909, 52929, 52964, 52965, 52968,
            52971, 52972, 52980, 52981, 52983, 52984, 52985,
            52992, 52993, 52996, 53000, 53008, 53009, 53011,
            53013, 53020, 53024, 53028, 53036, 53037, 53039,
            53040, 53041, 53048, 53076, 53077, 53080, 53084,
            53092, 53093, 53095, 53097, 53104, 53105, 53108,
            53112, 53120, 53125, 53132, 53153, 53160, 53168,
            53188, 53216, 53217, 53220, 53224, 53232, 53233,
            53235, 53237, 53244, 53248, 53252, 53265, 53272,
            53293, 53300, 53301, 53304, 53308, 55061, 55062,
            55063, 55066, 55067, 55069, 55070, 55071, 55073,
            55074, 55075, 55076, 55077, 55078, 55079, 55082,
            55084, 55086, 55087, 55088, 55089, 55090, 55091,
            55094, 55095, 55097, 55098, 55099, 55101, 55102,
            55103, 55104, 55105, 55106, 55107, 55109, 55110,
            55112, 55114, 55115, 55116, 55117, 55118, 55119,
            55122, 55123, 55125, 55130, 55131, 55132, 55133,
            55134, 55135, 55138, 55140, 55142, 55143, 55144,
            55146, 55147, 55149, 55150, 55151, 55153, 55154,
            55155, 55157, 55158, 55159, 55160, 55161, 55162,
            55163, 55166, 55167, 55168, 55170, 55171, 55172,
            55173, 55174, 55175, 55178, 55179, 53316, 53317,
            53319, 53321, 53328, 53332, 53336, 53344, 53356,
            53357, 53360, 53364, 53372, 53373, 53377, 53412,
            53413, 53416, 53420, 53428, 53429, 53431, 53433,
            53440, 53441, 53444, 53448, 53449, 53456, 53457,
            53459, 53460, 53461, 53468, 53469, 53472, 53476,
            53484, 53485, 53487, 53488, 53489, 53496, 53517,
            53552, 53553, 53556, 53560, 53562, 53568, 53569,
            53571, 53572, 53573, 53580, 53581, 53584, 53588,
            53596, 53597, 53599, 53601, 53608, 53612, 53628,
            53636, 53640, 53664, 53665, 53668, 53672, 53680,
            53681, 53683, 53685, 53690, 53692, 53696, 53720,
            53748, 53752, 53767, 53769, 53776, 53804, 53805,
            53808, 53812, 53820, 53821, 53823, 53825, 53832,
            53852, 55181, 55182, 55183, 55185, 55186, 55187,
            55188, 55189, 55190, 55191, 55194, 55196, 55198,
            55199, 55200, 55201, 55202, 55203, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 53860,
            53888, 53889, 53892, 53896, 53904, 53905, 53909,
            53916, 53920, 53924, 53932, 53937, 53944, 53945,
            53948, 53951, 53952, 53954, 53960, 53961, 53963,
            53972, 53976, 53980, 53988, 53989, 54000, 54001,
            54004, 54008, 54016, 54017, 54019, 54021, 54028,
            54029, 54030, 54032, 54036, 54038, 54044, 54045,
            54047, 54048, 54049, 54053, 54056, 54057, 54060,
            54064, 54072, 54073, 54075, 54076, 54077, 54084,
            54085, 54140, 54141, 54144, 54148, 54156, 54157,
            54159, 54160, 54161, 54168, 54169, 54172, 54176,
            54184, 54185, 54187, 54189, 54196, 54200, 54204,
            54212, 54213, 54216, 54217, 54224, 54232, 54241,
            54243, 54252, 54253, 54256, 54260, 54268, 54269,
            54271, 54273, 54280, 54301, 54336, 54340, 54364,
            54368, 54372, 54381, 54383, 54392, 54393, 54396,
            54399, 54400, 54402, 54408, 54409, 54411, 54413,
            54420, 54441, 54476, 54480, 54484, 54492, 54495,
            54504, 54508, 54512, 54520, 54523, 54525, 54532,
            54536, 54540, 54548, 54549, 54551, 54588, 54589,
            54592, 54596, 54604, 54605, 54607, 54609, 54616,
            54617, 54620, 54624, 54629, 54632, 54633, 54635,
            54637, 54644, 54645, 54648, 54652, 54660, 54661,
            54663, 54664, 54665, 54672, 54693, 54728, 54729,
            54732, 54736, 54738, 54744, 54745, 54747, 54749,
            54756, 54757, 54760, 54764, 54772, 54773, 54775,
            54777, 54784, 54785, 54788, 54792, 54800, 54801,
            54803, 54804, 54805, 54812, 54816, 54820, 54829,
            54840, 54841, 54844, 54848, 54853, 54856, 54857,
            54859, 54861, 54865, 54868, 54869, 54872, 54876,
            54887, 54889, 54896, 54897, 54900, 54915, 54917,
            54924, 54925, 54928, 54932, 54941, 54943, 54945,
            54952, 54956, 54960, 54969, 54971, 54980, 54981,
            54984, 54988, 54993, 54996, 54999, 55001, 55008,
            55012, 55016, 55024, 55029, 55036, 55037, 55040,
            55044, 55057, 55064, 55065, 55068, 55072, 55080,
            55081, 55083, 55085, 55092, 55093, 55096, 55100,
            55108, 55111, 55113, 55120, 55121, 55124, 55126,
            55127, 55128, 55129, 55136, 55137, 55139, 55141,
            55145, 55148, 55152, 55156, 55164, 55165, 55169,
            55176, 55177, 55180, 55184, 55192, 55193, 55195,
            55197, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 20285,
            20339, 20551, 20729, 21152, 21487, 21621, 21733,
            22025, 23233, 23478, 26247, 26550, 26551, 26607,
            27468, 29634, 30146, 31292, 33499, 33540, 34903,
            34952, 35382, 36040, 36303, 36603, 36838, 39381,
            21051, 21364, 21508, 24682, 24932, 27580, 29647,
            33050, 35258, 35282, 38307, 20355, 21002, 22718,
            22904, 23014, 24178, 24185, 25031, 25536, 26438,
            26604, 26751, 28567, 30286, 30475, 30965, 31240,
            31487, 31777, 32925, 33390, 33393, 35563, 38291,
            20075, 21917, 26359, 28212, 30883, 31469, 33883,
            35088, 34638, 38824, 21208, 22350, 22570, 23884,
            24863, 25022, 25121, 25954, 26577, 27204, 28187,
            29976, 30131, 30435, 30640, 32058, 37039, 37969,
            37970, 40853, 21283, 23724, 30002, 32987, 37440,
            38296, 21083, 22536, 23004, 23713, 23831, 24247,
            24378, 24394, 24951, 27743, 30074, 30086, 31968,
            32115, 32177, 32652, 33108, 33313, 34193, 35137,
            35611, 37628, 38477, 40007, 20171, 20215, 20491,
            20977, 22607, 24887, 24894, 24936, 25913, 27114,
            28433, 30117, 30342, 30422, 31623, 33445, 33995,
            63744, 37799, 38283, 21888, 23458, 22353, 63745,
            31923, 32697, 37301, 20520, 21435, 23621, 24040,
            25298, 25454, 25818, 25831, 28192, 28844, 31067,
            36317, 36382, 63746, 36989, 37445, 37624, 20094,
            20214, 20581, 24062, 24314, 24838, 26967, 33137,
            34388, 36423, 37749, 39467, 20062, 20625, 26480,
            26688, 20745, 21133, 21138, 27298, 30652, 37392,
            40660, 21163, 24623, 36850, 20552, 25001, 25581,
            25802, 26684, 27268, 28608, 33160, 35233, 38548,
            22533, 29309, 29356, 29956, 32121, 32365, 32937,
            35211, 35700, 36963, 40273, 25225, 27770, 28500,
            32080, 32570, 35363, 20860, 24906, 31645, 35609,
            37463, 37772, 20140, 20435, 20510, 20670, 20742,
            21185, 21197, 21375, 22384, 22659, 24218, 24465,
            24950, 25004, 25806, 25964, 26223, 26299, 26356,
            26775, 28039, 28805, 28913, 29855, 29861, 29898,
            30169, 30828, 30956, 31455, 31478, 32069, 32147,
            32789, 32831, 33051, 33686, 35686, 36629, 36885,
            37857, 38915, 38968, 39514, 39912, 20418, 21843,
            22586, 22865, 23395, 23622, 24760, 25106, 26690,
            26800, 26856, 28330, 30028, 30328, 30926, 31293,
            31995, 32363, 32380, 35336, 35489, 35903, 38542,
            40388, 21476, 21481, 21578, 21617, 22266, 22993,
            23396, 23611, 24235, 25335, 25911, 25925, 25970,
            26272, 26543, 27073, 27837, 30204, 30352, 30590,
            31295, 32660, 32771, 32929, 33167, 33510, 33533,
            33776, 34241, 34865, 34996, 35493, 63747, 36764,
            37678, 38599, 39015, 39640, 40723, 21741, 26011,
            26354, 26767, 31296, 35895, 40288, 22256, 22372,
            23825, 26118, 26801, 26829, 28414, 29736, 34974,
            39908, 27752, 63748, 39592, 20379, 20844, 20849,
            21151, 23380, 24037, 24656, 24685, 25329, 25511,
            25915, 29657, 31354, 34467, 36002, 38799, 20018,
            23521, 25096, 26524, 29916, 31185, 33747, 35463,
            35506, 36328, 36942, 37707, 38982, 24275, 27112,
            34303, 37101, 63749, 20896, 23448, 23532, 24931,
            26874, 27454, 28748, 29743, 29912, 31649, 32592,
            33733, 35264, 36011, 38364, 39208, 21038, 24669,
            25324, 36866, 20362, 20809, 21281, 22745, 24291,
            26336, 27960, 28826, 29378, 29654, 31568, 33009,
            37979, 21350, 25499, 32619, 20054, 20608, 22602,
            22750, 24618, 24871, 25296, 27088, 39745, 23439,
            32024, 32945, 36703, 20132, 20689, 21676, 21932,
            23308, 23968, 24039, 25898, 25934, 26657, 27211,
            29409, 30350, 30703, 32094, 32761, 33184, 34126,
            34527, 36611, 36686, 37066, 39171, 39509, 39851,
            19992, 20037, 20061, 20167, 20465, 20855, 21246,
            21312, 21475, 21477, 21646, 22036, 22389, 22434,
            23495, 23943, 24272, 25084, 25304, 25937, 26552,
            26601, 27083, 27472, 27590, 27628, 27714, 28317,
            28792, 29399, 29590, 29699, 30655, 30697, 31350,
            32127, 32777, 33276, 33285, 33290, 33503, 34914,
            35635, 36092, 36544, 36881, 37041, 37476, 37558,
            39378, 39493, 40169, 40407, 40860, 22283, 23616,
            33738, 38816, 38827, 40628, 21531, 31384, 32676,
            35033, 36557, 37089, 22528, 23624, 25496, 31391,
            23470, 24339, 31353, 31406, 33422, 36524, 20518,
            21048, 21240, 21367, 22280, 25331, 25458, 27402,
            28099, 30519, 21413, 29527, 34152, 36470, 38357,
            26426, 27331, 28528, 35437, 36556, 39243, 63750,
            26231, 27512, 36020, 39740, 63751, 21483, 22317,
            22862, 25542, 27131, 29674, 30789, 31418, 31429,
            31998, 33909, 35215, 36211, 36917, 38312, 21243,
            22343, 30023, 31584, 33740, 37406, 63752, 27224,
            20811, 21067, 21127, 25119, 26840, 26997, 38553,
            20677, 21156, 21220, 25027, 26020, 26681, 27135,
            29822, 31563, 33465, 33771, 35250, 35641, 36817,
            39241, 63753, 20170, 22935, 25810, 26129, 27278,
            29748, 31105, 31165, 33449, 34942, 34943, 35167,
            63754, 37670, 20235, 21450, 24613, 25201, 27762,
            32026, 32102, 20120, 20834, 30684, 32943, 20225,
            20238, 20854, 20864, 21980, 22120, 22331, 22522,
            22524, 22804, 22855, 22931, 23492, 23696, 23822,
            24049, 24190, 24524, 25216, 26071, 26083, 26398,
            26399, 26462, 26827, 26820, 27231, 27450, 27683,
            27773, 27778, 28103, 29592, 29734, 29738, 29826,
            29859, 30072, 30079, 30849, 30959, 31041, 31047,
            31048, 31098, 31637, 32000, 32186, 32648, 32774,
            32813, 32908, 35352, 35663, 35912, 36215, 37665,
            37668, 39138, 39249, 39438, 39439, 39525, 40594,
            32202, 20342, 21513, 25326, 26708, 37329, 21931,
            20794, 63755, 63756, 23068, 25062, 63757, 25295,
            25343, 63758, 63759, 63760, 63761, 63762, 63763,
            37027, 63764, 63765, 63766, 63767, 63768, 35582,
            63769, 63770, 63771, 63772, 26262, 63773, 29014,
            63774, 63775, 38627, 63776, 25423, 25466, 21335,
            63777, 26511, 26976, 28275, 63778, 30007, 63779,
            63780, 63781, 32013, 63782, 63783, 34930, 22218,
            23064, 63784, 63785, 63786, 63787, 63788, 20035,
            63789, 20839, 22856, 26608, 32784, 63790, 22899,
            24180, 25754, 31178, 24565, 24684, 25288, 25467,
            23527, 23511, 21162, 63791, 22900, 24361, 24594,
            63792, 63793, 63794, 29785, 63795, 63796, 63797,
            63798, 63799, 63800, 39377, 63801, 63802, 63803,
            63804, 63805, 63806, 63807, 63808, 63809, 63810,
            63811, 28611, 63812, 63813, 33215, 36786, 24817,
            63814, 63815, 33126, 63816, 63817, 23615, 63818,
            63819, 63820, 63821, 63822, 63823, 63824, 63825,
            23273, 35365, 26491, 32016, 63826, 63827, 63828,
            63829, 63830, 63831, 33021, 63832, 63833, 23612,
            27877, 21311, 28346, 22810, 33590, 20025, 20150,
            20294, 21934, 22296, 22727, 24406, 26039, 26086,
            27264, 27573, 28237, 30701, 31471, 31774, 32222,
            34507, 34962, 37170, 37723, 25787, 28606, 29562,
            30136, 36948, 21846, 22349, 25018, 25812, 26311,
            28129, 28251, 28525, 28601, 30192, 32835, 33213,
            34113, 35203, 35527, 35674, 37663, 27795, 30035,
            31572, 36367, 36957, 21776, 22530, 22616, 24162,
            25095, 25758, 26848, 30070, 31958, 34739, 40680,
            20195, 22408, 22382, 22823, 23565, 23729, 24118,
            24453, 25140, 25825, 29619, 33274, 34955, 36024,
            38538, 40667, 23429, 24503, 24755, 20498, 20992,
            21040, 22294, 22581, 22615, 23566, 23648, 23798,
            23947, 24230, 24466, 24764, 25361, 25481, 25623,
            26691, 26873, 27330, 28120, 28193, 28372, 28644,
            29182, 30428, 30585, 31153, 31291, 33796, 35241,
            36077, 36339, 36424, 36867, 36884, 36947, 37117,
            37709, 38518, 38876, 27602, 28678, 29272, 29346,
            29544, 30563, 31167, 31716, 32411, 35712, 22697,
            24775, 25958, 26109, 26302, 27788, 28958, 29129,
            35930, 38931, 20077, 31361, 20189, 20908, 20941,
            21205, 21516, 24999, 26481, 26704, 26847, 27934,
            28540, 30140, 30643, 31461, 33012, 33891, 37509,
            20828, 26007, 26460, 26515, 30168, 31431, 33651,
            63834, 35910, 36887, 38957, 23663, 33216, 33434,
            36929, 36975, 37389, 24471, 23965, 27225, 29128,
            30331, 31561, 34276, 35588, 37159, 39472, 21895,
            25078, 63835, 30313, 32645, 34367, 34746, 35064,
            37007, 63836, 27931, 28889, 29662, 32097, 33853,
            63837, 37226, 39409, 63838, 20098, 21365, 27396,
            27410, 28734, 29211, 34349, 40478, 21068, 36771,
            23888, 25829, 25900, 27414, 28651, 31811, 32412,
            34253, 35172, 35261, 25289, 33240, 34847, 24266,
            26391, 28010, 29436, 29701, 29807, 34690, 37086,
            20358, 23821, 24480, 33802, 20919, 25504, 30053,
            20142, 20486, 20841, 20937, 26753, 27153, 31918,
            31921, 31975, 33391, 35538, 36635, 37327, 20406,
            20791, 21237, 21570, 24300, 24942, 25150, 26053,
            27354, 28670, 31018, 34268, 34851, 38317, 39522,
            39530, 40599, 40654, 21147, 26310, 27511, 28701,
            31019, 36706, 38722, 24976, 25088, 25891, 28451,
            29001, 29833, 32244, 32879, 34030, 36646, 36899,
            37706, 20925, 21015, 21155, 27916, 28872, 35010,
            24265, 25986, 27566, 28610, 31806, 29557, 20196,
            20278, 22265, 63839, 23738, 23994, 24604, 29618,
            31533, 32666, 32718, 32838, 36894, 37428, 38646,
            38728, 38936, 40801, 20363, 28583, 31150, 37300,
            38583, 21214, 63840, 25736, 25796, 27347, 28510,
            28696, 29200, 30439, 32769, 34310, 34396, 36335,
            36613, 38706, 39791, 40442, 40565, 30860, 31103,
            32160, 33737, 37636, 40575, 40595, 35542, 22751,
            24324, 26407, 28711, 29903, 31840, 32894, 20769,
            28712, 29282, 30922, 36034, 36058, 36084, 38647,
            20102, 20698, 23534, 24278, 26009, 29134, 30274,
            30637, 32842, 34044, 36988, 39719, 40845, 22744,
            23105, 23650, 27155, 28122, 28431, 30267, 32047,
            32311, 34078, 35128, 37860, 38475, 21129, 26066,
            26611, 27060, 27969, 28316, 28687, 29705, 29792,
            30041, 30244, 30827, 35628, 39006, 20845, 25134,
            38520, 20374, 20523, 23833, 28138, 32184, 36650,
            24459, 24900, 26647, 63841, 38534, 21202, 32907,
            20956, 20940, 26974, 31260, 32190, 33777, 38517,
            20442, 21033, 21400, 21519, 21774, 23653, 24743,
            26446, 26792, 28012, 29313, 29432, 29702, 29827,
            63842, 30178, 31852, 32633, 32696, 33673, 35023,
            35041, 37324, 37328, 38626, 39881, 21533, 28542,
            29136, 29848, 34298, 36522, 38563, 40023, 40607,
            26519, 28107, 29747, 33256, 38678, 30764, 31435,
            31520, 31890, 25705, 29802, 30194, 30908, 30952,
            39340, 39764, 40635, 23518, 24149, 28448, 33180,
            33707, 37000, 19975, 21325, 23081, 24018, 24398,
            24930, 25405, 26217, 26364, 28415, 28459, 28771,
            30622, 33836, 34067, 34875, 36627, 39237, 39995,
            21788, 25273, 26411, 27819, 33545, 35178, 38778,
            20129, 22916, 24536, 24537, 26395, 32178, 32596,
            33426, 33579, 33725, 36638, 37017, 22475, 22969,
            23186, 23504, 26151, 26522, 26757, 27599, 29028,
            32629, 36023, 36067, 36993, 39749, 33032, 35978,
            38476, 39488, 40613, 23391, 27667, 29467, 30450,
            30431, 33804, 20906, 35219, 20813, 20885, 21193,
            26825, 27796, 30468, 30496, 32191, 32236, 38754,
            40629, 28357, 34065, 20901, 21517, 21629, 26126,
            26269, 26919, 28319, 30399, 30609, 33559, 33986,
            34719, 37225, 37528, 40180, 34946, 20398, 20882,
            21215, 22982, 24125, 24917, 25720, 25721, 26286,
            26576, 27169, 27597, 27611, 29279, 29281, 29761,
            30520, 30683, 32791, 33468, 33541, 35584, 35624,
            35980, 26408, 27792, 29287, 30446, 30566, 31302,
            40361, 27519, 27794, 22818, 26406, 33945, 21359,
            22675, 22937, 24287, 25551, 26164, 26483, 28218,
            29483, 31447, 33495, 37672, 21209, 24043, 25006,
            25035, 25098, 25287, 25771, 26080, 26969, 27494,
            27595, 28961, 29687, 30045, 32326, 33310, 33538,
            34154, 35491, 36031, 38695, 40289, 22696, 40664,
            20497, 21006, 21563, 21839, 25991, 27766, 32010,
            32011, 32862, 34442, 38272, 38639, 21247, 27797,
            29289, 21619, 23194, 23614, 23883, 24396, 24494,
            26410, 26806, 26979, 28220, 28228, 30473, 31859,
            32654, 34183, 35598, 36855, 38753, 40692, 23735,
            24758, 24845, 25003, 25935, 26107, 26108, 27665,
            27887, 29599, 29641, 32225, 38292, 23494, 34588,
            35600, 21085, 21338, 25293, 25615, 25778, 26420,
            27192, 27850, 29632, 29854, 31636, 31893, 32283,
            33162, 33334, 34180, 36843, 38649, 39361, 20276,
            21322, 21453, 21467, 25292, 25644, 25856, 26001,
            27075, 27886, 28504, 29677, 30036, 30242, 30436,
            30460, 30928, 30971, 31020, 32070, 33324, 34784,
            36820, 38930, 39151, 21187, 25300, 25765, 28196,
            28497, 30332, 36299, 37297, 37474, 39662, 39747,
            20515, 20621, 22346, 22952, 23592, 24135, 24439,
            25151, 25918, 26041, 26049, 26121, 26507, 27036,
            28354, 30917, 32033, 32938, 33152, 33323, 33459,
            33953, 34444, 35370, 35607, 37030, 38450, 40848,
            20493, 20467, 63843, 22521, 24472, 25308, 25490,
            26479, 28227, 28953, 30403, 32972, 32986, 35060,
            35061, 35097, 36064, 36649, 37197, 38506, 20271,
            20336, 24091, 26575, 26658, 30333, 30334, 39748,
            24161, 27146, 29033, 29140, 30058, 63844, 32321,
            34115, 34281, 39132, 20240, 31567, 32624, 38309,
            20961, 24070, 26805, 27710, 27726, 27867, 29359,
            31684, 33539, 27861, 29754, 20731, 21128, 22721,
            25816, 27287, 29863, 30294, 30887, 34327, 38370,
            38713, 63845, 21342, 24321, 35722, 36776, 36783,
            37002, 21029, 30629, 40009, 40712, 19993, 20482,
            20853, 23643, 24183, 26142, 26170, 26564, 26821,
            28851, 29953, 30149, 31177, 31453, 36647, 39200,
            39432, 20445, 22561, 22577, 23542, 26222, 27493,
            27921, 28282, 28541, 29668, 29995, 33769, 35036,
            35091, 35676, 36628, 20239, 20693, 21264, 21340,
            23443, 24489, 26381, 31119, 33145, 33583, 34068,
            35079, 35206, 36665, 36667, 39333, 39954, 26412,
            20086, 20472, 22857, 23553, 23791, 23792, 25447,
            26834, 28925, 29090, 29739, 32299, 34028, 34562,
            36898, 37586, 40179, 19981, 20184, 20463, 20613,
            21078, 21103, 21542, 21648, 22496, 22827, 23142,
            23386, 23413, 23500, 24220, 63846, 25206, 25975,
            26023, 28014, 28325, 29238, 31526, 31807, 32566,
            33104, 33105, 33178, 33344, 33433, 33705, 35331,
            36000, 36070, 36091, 36212, 36282, 37096, 37340,
            38428, 38468, 39385, 40167, 21271, 20998, 21545,
            22132, 22707, 22868, 22894, 24575, 24996, 25198,
            26128, 27774, 28954, 30406, 31881, 31966, 32027,
            33452, 36033, 38640, 63847, 20315, 24343, 24447,
            25282, 23849, 26379, 26842, 30844, 32323, 40300,
            19989, 20633, 21269, 21290, 21329, 22915, 23138,
            24199, 24754, 24970, 25161, 25209, 26000, 26503,
            27047, 27604, 27606, 27607, 27608, 27832, 63848,
            29749, 30202, 30738, 30865, 31189, 31192, 31875,
            32203, 32737, 32933, 33086, 33218, 33778, 34586,
            35048, 35513, 35692, 36027, 37145, 38750, 39131,
            40763, 22188, 23338, 24428, 25996, 27315, 27567,
            27996, 28657, 28693, 29277, 29613, 36007, 36051,
            38971, 24977, 27703, 32856, 39425, 20045, 20107,
            20123, 20181, 20282, 20284, 20351, 20447, 20735,
            21490, 21496, 21766, 21987, 22235, 22763, 22882,
            23057, 23531, 23546, 23556, 24051, 24107, 24473,
            24605, 25448, 26012, 26031, 26614, 26619, 26797,
            27515, 27801, 27863, 28195, 28681, 29509, 30722,
            31038, 31040, 31072, 31169, 31721, 32023, 32114,
            32902, 33293, 33678, 34001, 34503, 35039, 35408,
            35422, 35613, 36060, 36198, 36781, 37034, 39164,
            39391, 40605, 21066, 63849, 26388, 63850, 20632,
            21034, 23665, 25955, 27733, 29642, 29987, 30109,
            31639, 33948, 37240, 38704, 20087, 25746, 27578,
            29022, 34217, 19977, 63851, 26441, 26862, 28183,
            33439, 34072, 34923, 25591, 28545, 37394, 39087,
            19978, 20663, 20687, 20767, 21830, 21930, 22039,
            23360, 23577, 23776, 24120, 24202, 24224, 24258,
            24819, 26705, 27233, 28248, 29245, 29248, 29376,
            30456, 31077, 31665, 32724, 35059, 35316, 35443,
            35937, 36062, 38684, 22622, 29885, 36093, 21959,
            63852, 31329, 32034, 33394, 29298, 29983, 29989,
            63853, 31513, 22661, 22779, 23996, 24207, 24246,
            24464, 24661, 25234, 25471, 25933, 26257, 26329,
            26360, 26646, 26866, 29312, 29790, 31598, 32110,
            32214, 32626, 32997, 33298, 34223, 35199, 35475,
            36893, 37604, 40653, 40736, 22805, 22893, 24109,
            24796, 26132, 26227, 26512, 27728, 28101, 28511,
            30707, 30889, 33990, 37323, 37675, 20185, 20682,
            20808, 21892, 23307, 23459, 25159, 25982, 26059,
            28210, 29053, 29697, 29764, 29831, 29887, 30316,
            31146, 32218, 32341, 32680, 33146, 33203, 33337,
            34330, 34796, 35445, 36323, 36984, 37521, 37925,
            39245, 39854, 21352, 23633, 26964, 27844, 27945,
            28203, 33292, 34203, 35131, 35373, 35498, 38634,
            40807, 21089, 26297, 27570, 32406, 34814, 36109,
            38275, 38493, 25885, 28041, 29166, 63854, 22478,
            22995, 23468, 24615, 24826, 25104, 26143, 26207,
            29481, 29689, 30427, 30465, 31596, 32854, 32882,
            33125, 35488, 37266, 19990, 21218, 27506, 27927,
            31237, 31545, 32048, 63855, 36016, 21484, 22063,
            22609, 23477, 23567, 23569, 24034, 25152, 25475,
            25620, 26157, 26803, 27836, 28040, 28335, 28703,
            28836, 29138, 29990, 30095, 30094, 30233, 31505,
            31712, 31787, 32032, 32057, 34092, 34157, 34311,
            35380, 36877, 36961, 37045, 37559, 38902, 39479,
            20439, 23660, 26463, 28049, 31903, 32396, 35606,
            36118, 36895, 23403, 24061, 25613, 33984, 36956,
            39137, 29575, 23435, 24730, 26494, 28126, 35359,
            35494, 36865, 38924, 21047, 63856, 28753, 30862,
            37782, 34928, 37335, 20462, 21463, 22013, 22234,
            22402, 22781, 23234, 23432, 23723, 23744, 24101,
            24833, 25101, 25163, 25480, 25628, 25910, 25976,
            27193, 27530, 27700, 27929, 28465, 29159, 29417,
            29560, 29703, 29874, 30246, 30561, 31168, 31319,
            31466, 31929, 32143, 32172, 32353, 32670, 33065,
            33585, 33936, 34010, 34282, 34966, 35504, 35728,
            36664, 36930, 36995, 37228, 37526, 37561, 38539,
            38567, 38568, 38614, 38656, 38920, 39318, 39635,
            39706, 21460, 22654, 22809, 23408, 23487, 28113,
            28506, 29087, 29729, 29881, 32901, 33789, 24033,
            24455, 24490, 24642, 26092, 26642, 26991, 27219,
            27529, 27957, 28147, 29667, 30462, 30636, 31565,
            32020, 33059, 33308, 33600, 34036, 34147, 35426,
            35524, 37255, 37662, 38918, 39348, 25100, 34899,
            36848, 37477, 23815, 23847, 23913, 29791, 33181,
            34664, 28629, 25342, 32722, 35126, 35186, 19998,
            20056, 20711, 21213, 21319, 25215, 26119, 32361,
            34821, 38494, 20365, 21273, 22070, 22987, 23204,
            23608, 23630, 23629, 24066, 24337, 24643, 26045,
            26159, 26178, 26558, 26612, 29468, 30690, 31034,
            32709, 33940, 33997, 35222, 35430, 35433, 35553,
            35925, 35962, 22516, 23508, 24335, 24687, 25325,
            26893, 27542, 28252, 29060, 31698, 34645, 35672,
            36606, 39135, 39166, 20280, 20353, 20449, 21627,
            23072, 23480, 24892, 26032, 26216, 29180, 30003,
            31070, 32051, 33102, 33251, 33688, 34218, 34254,
            34563, 35338, 36523, 36763, 63857, 36805, 22833,
            23460, 23526, 24713, 23529, 23563, 24515, 27777,
            63858, 28145, 28683, 29978, 33455, 35574, 20160,
            21313, 63859, 38617, 27663, 20126, 20420, 20818,
            21854, 23077, 23784, 25105, 29273, 33469, 33706,
            34558, 34905, 35357, 38463, 38597, 39187, 40201,
            40285, 22538, 23731, 23997, 24132, 24801, 24853,
            25569, 27138, 28197, 37122, 37716, 38990, 39952,
            40823, 23433, 23736, 25353, 26191, 26696, 30524,
            38593, 38797, 38996, 39839, 26017, 35585, 36555,
            38332, 21813, 23721, 24022, 24245, 26263, 30284,
            33780, 38343, 22739, 25276, 29390, 40232, 20208,
            22830, 24591, 26171, 27523, 31207, 40230, 21395,
            21696, 22467, 23830, 24859, 26326, 28079, 30861,
            33406, 38552, 38724, 21380, 25212, 25494, 28082,
            32266, 33099, 38989, 27387, 32588, 40367, 40474,
            20063, 20539, 20918, 22812, 24825, 25590, 26928,
            29242, 32822, 63860, 37326, 24369, 63861, 63862,
            32004, 33509, 33903, 33979, 34277, 36493, 63863,
            20335, 63864, 63865, 22756, 23363, 24665, 25562,
            25880, 25965, 26264, 63866, 26954, 27171, 27915,
            28673, 29036, 30162, 30221, 31155, 31344, 63867,
            32650, 63868, 35140, 63869, 35731, 37312, 38525,
            63870, 39178, 22276, 24481, 26044, 28417, 30208,
            31142, 35486, 39341, 39770, 40812, 20740, 25014,
            25233, 27277, 33222, 20547, 22576, 24422, 28937,
            35328, 35578, 23420, 34326, 20474, 20796, 22196,
            22852, 25513, 28153, 23978, 26989, 20870, 20104,
            20313, 63871, 63872, 63873, 22914, 63874, 63875,
            27487, 27741, 63876, 29877, 30998, 63877, 33287,
            33349, 33593, 36671, 36701, 63878, 39192, 63879,
            63880, 63881, 20134, 63882, 22495, 24441, 26131,
            63883, 63884, 30123, 32377, 35695, 63885, 36870,
            39515, 22181, 22567, 23032, 23071, 23476, 63886,
            24310, 63887, 63888, 25424, 25403, 63889, 26941,
            27783, 27839, 28046, 28051, 28149, 28436, 63890,
            28895, 28982, 29017, 63891, 29123, 29141, 63892,
            30799, 30831, 63893, 31605, 32227, 63894, 32303,
            63895, 34893, 36575, 63896, 63897, 63898, 37467,
            63899, 40182, 63900, 63901, 63902, 24709, 28037,
            63903, 29105, 63904, 63905, 38321, 21421, 63906,
            63907, 63908, 26579, 63909, 28814, 28976, 29744,
            33398, 33490, 63910, 38331, 39653, 40573, 26308,
            63911, 29121, 33865, 63912, 63913, 22603, 63914,
            63915, 23992, 24433, 63916, 26144, 26254, 27001,
            27054, 27704, 27891, 28214, 28481, 28634, 28699,
            28719, 29008, 29151, 29552, 63917, 29787, 63918,
            29908, 30408, 31310, 32403, 63919, 63920, 33521,
            35424, 36814, 63921, 37704, 63922, 38681, 63923,
            63924, 20034, 20522, 63925, 21000, 21473, 26355,
            27757, 28618, 29450, 30591, 31330, 33454, 34269,
            34306, 63926, 35028, 35427, 35709, 35947, 63927,
            37555, 63928, 38675, 38928, 20116, 20237, 20425,
            20658, 21320, 21566, 21555, 21978, 22626, 22714,
            22887, 23067, 23524, 24735, 63929, 25034, 25942,
            26111, 26212, 26791, 27738, 28595, 28879, 29100,
            29522, 31613, 34568, 35492, 39986, 40711, 23627,
            27779, 29508, 29577, 37434, 28331, 29797, 30239,
            31337, 32277, 34314, 20800, 22725, 25793, 29934,
            29973, 30320, 32705, 37013, 38605, 39252, 28198,
            29926, 31401, 31402, 33253, 34521, 34680, 35355,
            23113, 23436, 23451, 26785, 26880, 28003, 29609,
            29715, 29740, 30871, 32233, 32747, 33048, 33109,
            33694, 35916, 38446, 38929, 26352, 24448, 26106,
            26505, 27754, 29579, 20525, 23043, 27498, 30702,
            22806, 23916, 24013, 29477, 30031, 63930, 63931,
            20709, 20985, 22575, 22829, 22934, 23002, 23525,
            63932, 63933, 23970, 25303, 25622, 25747, 25854,
            63934, 26332, 63935, 27208, 63936, 29183, 29796,
            63937, 31368, 31407, 32327, 32350, 32768, 33136,
            63938, 34799, 35201, 35616, 36953, 63939, 36992,
            39250, 24958, 27442, 28020, 32287, 35109, 36785,
            20433, 20653, 20887, 21191, 22471, 22665, 23481,
            24248, 24898, 27029, 28044, 28263, 28342, 29076,
            29794, 29992, 29996, 32883, 33592, 33993, 36362,
            37780, 37854, 63940, 20110, 20305, 20598, 20778,
            21448, 21451, 21491, 23431, 23507, 23588, 24858,
            24962, 26100, 29275, 29591, 29760, 30402, 31056,
            31121, 31161, 32006, 32701, 33419, 34261, 34398,
            36802, 36935, 37109, 37354, 38533, 38632, 38633,
            21206, 24423, 26093, 26161, 26671, 29020, 31286,
            37057, 38922, 20113, 63941, 27218, 27550, 28560,
            29065, 32792, 33464, 34131, 36939, 38549, 38642,
            38907, 34074, 39729, 20112, 29066, 38596, 20803,
            21407, 21729, 22291, 22290, 22435, 23195, 23236,
            23491, 24616, 24895, 25588, 27781, 27961, 28274,
            28304, 29232, 29503, 29783, 33489, 34945, 36677,
            36960, 63942, 38498, 39000, 40219, 26376, 36234,
            37470, 20301, 20553, 20702, 21361, 22285, 22996,
            23041, 23561, 24944, 26256, 28205, 29234, 29771,
            32239, 32963, 33806, 33894, 34111, 34655, 34907,
            35096, 35586, 36949, 38859, 39759, 20083, 20369,
            20754, 20842, 63943, 21807, 21929, 23418, 23461,
            24188, 24189, 24254, 24736, 24799, 24840, 24841,
            25540, 25912, 26377, 63944, 26580, 26586, 63945,
            26977, 26978, 27833, 27943, 63946, 28216, 63947,
            28641, 29494, 29495, 63948, 29788, 30001, 63949,
            30290, 63950, 63951, 32173, 33278, 33848, 35029,
            35480, 35547, 35565, 36400, 36418, 36938, 36926,
            36986, 37193, 37321, 37742, 63952, 63953, 22537,
            63954, 27603, 32905, 32946, 63955, 63956, 20801,
            22891, 23609, 63957, 63958, 28516, 29607, 32996,
            36103, 63959, 37399, 38287, 63960, 63961, 63962,
            63963, 32895, 25102, 28700, 32104, 34701, 63964,
            22432, 24681, 24903, 27575, 35518, 37504, 38577,
            20057, 21535, 28139, 34093, 38512, 38899, 39150,
            25558, 27875, 37009, 20957, 25033, 33210, 40441,
            20381, 20506, 20736, 23452, 24847, 25087, 25836,
            26885, 27589, 30097, 30691, 32681, 33380, 34191,
            34811, 34915, 35516, 35696, 37291, 20108, 20197,
            20234, 63965, 63966, 22839, 23016, 63967, 24050,
            24347, 24411, 24609, 63968, 63969, 63970, 63971,
            29246, 29669, 63972, 30064, 30157, 63973, 31227,
            63974, 32780, 32819, 32900, 33505, 33617, 63975,
            63976, 36029, 36019, 36999, 63977, 63978, 39156,
            39180, 63979, 63980, 28727, 30410, 32714, 32716,
            32764, 35610, 20154, 20161, 20995, 21360, 63981,
            21693, 22240, 23035, 23493, 24341, 24525, 28270,
            63982, 63983, 32106, 33589, 63984, 34451, 35469,
            63985, 38765, 38775, 63986, 63987, 19968, 20314,
            20350, 22777, 26085, 28322, 36920, 37808, 39353,
            20219, 22764, 22922, 23001, 24641, 63988, 63989,
            31252, 63990, 33615, 36035, 20837, 21316, 63991,
            63992, 63993, 20173, 21097, 23381, 33471, 20180,
            21050, 21672, 22985, 23039, 23376, 23383, 23388,
            24675, 24904, 28363, 28825, 29038, 29574, 29943,
            30133, 30913, 32043, 32773, 33258, 33576, 34071,
            34249, 35566, 36039, 38604, 20316, 21242, 22204,
            26027, 26152, 28796, 28856, 29237, 32189, 33421,
            37196, 38592, 40306, 23409, 26855, 27544, 28538,
            30430, 23697, 26283, 28507, 31668, 31786, 34870,
            38620, 19976, 20183, 21280, 22580, 22715, 22767,
            22892, 23559, 24115, 24196, 24373, 25484, 26290,
            26454, 27167, 27299, 27404, 28479, 29254, 63994,
            29520, 29835, 31456, 31911, 33144, 33247, 33255,
            33674, 33900, 34083, 34196, 34255, 35037, 36115,
            37292, 38263, 38556, 20877, 21705, 22312, 23472,
            25165, 26448, 26685, 26771, 28221, 28371, 28797,
            32289, 35009, 36001, 36617, 40779, 40782, 29229,
            31631, 35533, 37658, 20295, 20302, 20786, 21632,
            22992, 24213, 25269, 26485, 26990, 27159, 27822,
            28186, 29401, 29482, 30141, 31672, 32053, 33511,
            33785, 33879, 34295, 35419, 36015, 36487, 36889,
            37048, 38606, 40799, 21219, 21514, 23265, 23490,
            25688, 25973, 28404, 29380, 63995, 30340, 31309,
            31515, 31821, 32318, 32735, 33659, 35627, 36042,
            36196, 36321, 36447, 36842, 36857, 36969, 37841,
            20291, 20346, 20659, 20840, 20856, 21069, 21098,
            22625, 22652, 22880, 23560, 23637, 24283, 24731,
            25136, 26643, 27583, 27656, 28593, 29006, 29728,
            30000, 30008, 30033, 30322, 31564, 31627, 31661,
            31686, 32399, 35438, 36670, 36681, 37439, 37523,
            37666, 37931, 38651, 39002, 39019, 39198, 20999,
            25130, 25240, 27993, 30308, 31434, 31680, 32118,
            21344, 23742, 24215, 28472, 28857, 31896, 38673,
            39822, 40670, 25509, 25722, 34678, 19969, 20117,
            20141, 20572, 20597, 21576, 22979, 23450, 24128,
            24237, 24311, 24449, 24773, 25402, 25919, 25972,
            26060, 26230, 26232, 26622, 26984, 27273, 27491,
            27712, 28096, 28136, 28191, 28254, 28702, 28833,
            29582, 29693, 30010, 30555, 30855, 31118, 31243,
            31357, 31934, 32142, 33351, 35330, 35562, 35998,
            37165, 37194, 37336, 37478, 37580, 37664, 38662,
            38742, 38748, 38914, 40718, 21046, 21137, 21884,
            22564, 24093, 24351, 24716, 25552, 26799, 28639,
            31085, 31532, 33229, 34234, 35069, 35576, 36420,
            37261, 38500, 38555, 38717, 38988, 40778, 20430,
            20806, 20939, 21161, 22066, 24340, 24427, 25514,
            25805, 26089, 26177, 26362, 26361, 26397, 26781,
            26839, 27133, 28437, 28526, 29031, 29157, 29226,
            29866, 30522, 31062, 31066, 31199, 31264, 31381,
            31895, 31967, 32068, 32368, 32903, 34299, 34468,
            35412, 35519, 36249, 36481, 36896, 36973, 37347,
            38459, 38613, 40165, 26063, 31751, 36275, 37827,
            23384, 23562, 21330, 25305, 29469, 20519, 23447,
            24478, 24752, 24939, 26837, 28121, 29742, 31278,
            32066, 32156, 32305, 33131, 36394, 36405, 37758,
            37912, 20304, 22352, 24038, 24231, 25387, 32618,
            20027, 20303, 20367, 20570, 23005, 32964, 21610,
            21608, 22014, 22863, 23449, 24030, 24282, 26205,
            26417, 26609, 26666, 27880, 27954, 28234, 28557,
            28855, 29664, 30087, 31820, 32002, 32044, 32162,
            33311, 34523, 35387, 35461, 36208, 36490, 36659,
            36913, 37198, 37202, 37956, 39376, 31481, 31909,
            20426, 20737, 20934, 22472, 23535, 23803, 26201,
            27197, 27994, 28310, 28652, 28940, 30063, 31459,
            34850, 36897, 36981, 38603, 39423, 33537, 20013,
            20210, 34886, 37325, 21373, 27355, 26987, 27713,
            33914, 22686, 24974, 26366, 25327, 28893, 29969,
            30151, 32338, 33976, 35657, 36104, 20043, 21482,
            21675, 22320, 22336, 24535, 25345, 25351, 25711,
            25903, 26088, 26234, 26525, 26547, 27490, 27744,
            27802, 28460, 30693, 30757, 31049, 31063, 32025,
            32930, 33026, 33267, 33437, 33463, 34584, 35468,
            63996, 36100, 36286, 36978, 30452, 31257, 31287,
            32340, 32887, 21767, 21972, 22645, 25391, 25634,
            26185, 26187, 26733, 27035, 27524, 27941, 28337,
            29645, 29800, 29857, 30043, 30137, 30433, 30494,
            30603, 31206, 32265, 32285, 33275, 34095, 34967,
            35386, 36049, 36587, 36784, 36914, 37805, 38499,
            38515, 38663, 20356, 21489, 23018, 23241, 24089,
            26702, 29894, 30142, 31209, 31378, 33187, 34541,
            36074, 36300, 36845, 26015, 26389, 63997, 22519,
            28503, 32221, 36655, 37878, 38598, 24501, 25074,
            28548, 19988, 20376, 20511, 21449, 21983, 23919,
            24046, 27425, 27492, 30923, 31642, 63998, 36425,
            36554, 36974, 25417, 25662, 30528, 31364, 37679,
            38015, 40810, 25776, 28591, 29158, 29864, 29914,
            31428, 31762, 32386, 31922, 32408, 35738, 36106,
            38013, 39184, 39244, 21049, 23519, 25830, 26413,
            32046, 20717, 21443, 22649, 24920, 24921, 25082,
            26028, 31449, 35730, 35734, 20489, 20513, 21109,
            21809, 23100, 24288, 24432, 24884, 25950, 26124,
            26166, 26274, 27085, 28356, 28466, 29462, 30241,
            31379, 33081, 33369, 33750, 33980, 20661, 22512,
            23488, 23528, 24425, 25505, 30758, 32181, 33756,
            34081, 37319, 37365, 20874, 26613, 31574, 36012,
            20932, 22971, 24765, 34389, 20508, 63999, 21076,
            23610, 24957, 25114, 25299, 25842, 26021, 28364,
            30240, 33034, 36448, 38495, 38587, 20191, 21315,
            21912, 22825, 24029, 25797, 27849, 28154, 29588,
            31359, 33307, 34214, 36068, 36368, 36983, 37351,
            38369, 38433, 38854, 20984, 21746, 21894, 24505,
            25764, 28552, 32180, 36639, 36685, 37941, 20681,
            23574, 27838, 28155, 29979, 30651, 31805, 31844,
            35449, 35522, 22558, 22974, 24086, 25463, 29266,
            30090, 30571, 35548, 36028, 36626, 24307, 26228,
            28152, 32893, 33729, 35531, 38737, 39894, 64000,
            21059, 26367, 28053, 28399, 32224, 35558, 36910,
            36958, 39636, 21021, 21119, 21736, 24980, 25220,
            25307, 26786, 26898, 26970, 27189, 28818, 28966,
            30813, 30977, 30990, 31186, 31245, 32918, 33400,
            33493, 33609, 34121, 35970, 36229, 37218, 37259,
            37294, 20419, 22225, 29165, 30679, 34560, 35320,
            23544, 24534, 26449, 37032, 21474, 22618, 23541,
            24740, 24961, 25696, 32317, 32880, 34085, 37507,
            25774, 20652, 23828, 26368, 22684, 25277, 25512,
            26894, 27000, 27166, 28267, 30394, 31179, 33467,
            33833, 35535, 36264, 36861, 37138, 37195, 37276,
            37648, 37656, 37786, 38619, 39478, 39949, 19985,
            30044, 31069, 31482, 31569, 31689, 32302, 33988,
            36441, 36468, 36600, 36880, 26149, 26943, 29763,
            20986, 26414, 40668, 20805, 24544, 27798, 34802,
            34909, 34935, 24756, 33205, 33795, 36101, 21462,
            21561, 22068, 23094, 23601, 28810, 32736, 32858,
            33030, 33261, 36259, 37257, 39519, 40434, 20596,
            20164, 21408, 24827, 28204, 23652, 20360, 20516,
            21988, 23769, 24159, 24677, 26772, 27835, 28100,
            29118, 30164, 30196, 30305, 31258, 31305, 32199,
            32251, 32622, 33268, 34473, 36636, 38601, 39347,
            40786, 21063, 21189, 39149, 35242, 19971, 26578,
            28422, 20405, 23522, 26517, 27784, 28024, 29723,
            30759, 37341, 37756, 34756, 31204, 31281, 24555,
            20182, 21668, 21822, 22702, 22949, 24816, 25171,
            25302, 26422, 26965, 33333, 38464, 39345, 39389,
            20524, 21331, 21828, 22396, 64001, 25176, 64002,
            25826, 26219, 26589, 28609, 28655, 29730, 29752,
            35351, 37944, 21585, 22022, 22374, 24392, 24986,
            27470, 28760, 28845, 32187, 35477, 22890, 33067,
            25506, 30472, 32829, 36010, 22612, 25645, 27067,
            23445, 24081, 28271, 64003, 34153, 20812, 21488,
            22826, 24608, 24907, 27526, 27760, 27888, 31518,
            32974, 33492, 36294, 37040, 39089, 64004, 25799,
            28580, 25745, 25860, 20814, 21520, 22303, 35342,
            24927, 26742, 64005, 30171, 31570, 32113, 36890,
            22534, 27084, 33151, 35114, 36864, 38969, 20600,
            22871, 22956, 25237, 36879, 39722, 24925, 29305,
            38358, 22369, 23110, 24052, 25226, 25773, 25850,
            26487, 27874, 27966, 29228, 29750, 30772, 32631,
            33453, 36315, 38935, 21028, 22338, 26495, 29256,
            29923, 36009, 36774, 37393, 38442, 20843, 21485,
            25420, 20329, 21764, 24726, 25943, 27803, 28031,
            29260, 29437, 31255, 35207, 35997, 24429, 28558,
            28921, 33192, 24846, 20415, 20559, 25153, 29255,
            31687, 32232, 32745, 36941, 38829, 39449, 36022,
            22378, 24179, 26544, 33805, 35413, 21536, 23318,
            24163, 24290, 24330, 25987, 32954, 34109, 38281,
            38491, 20296, 21253, 21261, 21263, 21638, 21754,
            22275, 24067, 24598, 25243, 25265, 25429, 64006,
            27873, 28006, 30129, 30770, 32990, 33071, 33502,
            33889, 33970, 34957, 35090, 36875, 37610, 39165,
            39825, 24133, 26292, 26333, 28689, 29190, 64007,
            20469, 21117, 24426, 24915, 26451, 27161, 28418,
            29922, 31080, 34920, 35961, 39111, 39108, 39491,
            21697, 31263, 26963, 35575, 35914, 39080, 39342,
            24444, 25259, 30130, 30382, 34987, 36991, 38466,
            21305, 24380, 24517, 27852, 29644, 30050, 30091,
            31558, 33534, 39325, 20047, 36924, 19979, 20309,
            21414, 22799, 24264, 26160, 27827, 29781, 33655,
            34662, 36032, 36944, 38686, 39957, 22737, 23416,
            34384, 35604, 40372, 23506, 24680, 24717, 26097,
            27735, 28450, 28579, 28698, 32597, 32752, 38289,
            38290, 38480, 38867, 21106, 36676, 20989, 21547,
            21688, 21859, 21898, 27323, 28085, 32216, 33382,
            37532, 38519, 40569, 21512, 21704, 30418, 34532,
            38308, 38356, 38492, 20130, 20233, 23022, 23270,
            24055, 24658, 25239, 26477, 26689, 27782, 28207,
            32568, 32923, 33322, 64008, 64009, 38917, 20133,
            20565, 21683, 22419, 22874, 23401, 23475, 25032,
            26999, 28023, 28707, 34809, 35299, 35442, 35559,
            36994, 39405, 39608, 21182, 26680, 20502, 24184,
            26447, 33607, 34892, 20139, 21521, 22190, 29670,
            37141, 38911, 39177, 39255, 39321, 22099, 22687,
            34395, 35377, 25010, 27382, 29563, 36562, 27463,
            38570, 39511, 22869, 29184, 36203, 38761, 20436,
            23796, 24358, 25080, 26203, 27883, 28843, 29572,
            29625, 29694, 30505, 30541, 32067, 32098, 32291,
            33335, 34898, 64010, 36066, 37449, 39023, 23377,
            31348, 34880, 38913, 23244, 20448, 21332, 22846,
            23805, 25406, 28025, 29433, 33029, 33031, 33698,
            37583, 38960, 20136, 20804, 21009, 22411, 24418,
            27842, 28366, 28677, 28752, 28847, 29074, 29673,
            29801, 33610, 34722, 34913, 36872, 37026, 37795,
            39336, 20846, 24407, 24800, 24935, 26291, 34137,
            36426, 37295, 38795, 20046, 20114, 21628, 22741,
            22778, 22909, 23733, 24359, 25142, 25160, 26122,
            26215, 27627, 28009, 28111, 28246, 28408, 28564,
            28640, 28649, 28765, 29392, 29733, 29786, 29920,
            30355, 31068, 31946, 32286, 32993, 33446, 33899,
            33983, 34382, 34399, 34676, 35703, 35946, 37804,
            38912, 39013, 24785, 25110, 37239, 23130, 26127,
            28151, 28222, 29759, 39746, 24573, 24794, 31503,
            21700, 24344, 27742, 27859, 27946, 28888, 32005,
            34425, 35340, 40251, 21270, 21644, 23301, 27194,
            28779, 30069, 31117, 31166, 33457, 33775, 35441,
            35649, 36008, 38772, 64011, 25844, 25899, 30906,
            30907, 31339, 20024, 21914, 22864, 23462, 24187,
            24739, 25563, 27489, 26213, 26707, 28185, 29029,
            29872, 32008, 36996, 39529, 39973, 27963, 28369,
            29502, 35905, 38346, 20976, 24140, 24488, 24653,
            24822, 24880, 24908, 26179, 26180, 27045, 27841,
            28255, 28361, 28514, 29004, 29852, 30343, 31681,
            31783, 33618, 34647, 36945, 38541, 40643, 21295,
            22238, 24315, 24458, 24674, 24724, 25079, 26214,
            26371, 27292, 28142, 28590, 28784, 29546, 32362,
            33214, 33588, 34516, 35496, 36036, 21123, 29554,
            23446, 27243, 37892, 21742, 22150, 23389, 25928,
            25989, 26313, 26783, 28045, 28102, 29243, 32948,
            37237, 39501, 20399, 20505, 21402, 21518, 21564,
            21897, 21957, 24127, 24460, 26429, 29030, 29661,
            36869, 21211, 21235, 22628, 22734, 28932, 29071,
            29179, 34224, 35347, 26248, 34216, 21927, 26244,
            29002, 33841, 21321, 21913, 27585, 24409, 24509,
            25582, 26249, 28999, 35569, 36637, 40638, 20241,
            25658, 28875, 30054, 34407, 24676, 35662, 40440,
            20807, 20982, 21256, 27958, 33016, 40657, 26133,
            27427, 28824, 30165, 21507, 23673, 32007, 35350,
            27424, 27453, 27462, 21560, 24688, 27965, 32725,
            33288, 20694, 20958, 21916, 22123, 22221, 23020,
            23305, 24076, 24985, 24984, 25137, 26206, 26342,
            29081, 29113, 29114, 29351, 31143, 31232, 32690,
            35440
        ],
        "gb18030": [19970, 19972, 19973, 19974, 19983, 19986, 19991,
            19999, 20000, 20001, 20003, 20006, 20009, 20014,
            20015, 20017, 20019, 20021, 20023, 20028, 20032,
            20033, 20034, 20036, 20038, 20042, 20049, 20053,
            20055, 20058, 20059, 20066, 20067, 20068, 20069,
            20071, 20072, 20074, 20075, 20076, 20077, 20078,
            20079, 20082, 20084, 20085, 20086, 20087, 20088,
            20089, 20090, 20091, 20092, 20093, 20095, 20096,
            20097, 20098, 20099, 20100, 20101, 20103, 20106,
            20112, 20118, 20119, 20121, 20124, 20125, 20126,
            20131, 20138, 20143, 20144, 20145, 20148, 20150,
            20151, 20152, 20153, 20156, 20157, 20158, 20168,
            20172, 20175, 20176, 20178, 20186, 20187, 20188,
            20192, 20194, 20198, 20199, 20201, 20205, 20206,
            20207, 20209, 20212, 20216, 20217, 20218, 20220,
            20222, 20224, 20226, 20227, 20228, 20229, 20230,
            20231, 20232, 20235, 20236, 20242, 20243, 20244,
            20245, 20246, 20252, 20253, 20257, 20259, 20264,
            20265, 20268, 20269, 20270, 20273, 20275, 20277,
            20279, 20281, 20283, 20286, 20287, 20288, 20289,
            20290, 20292, 20293, 20295, 20296, 20297, 20298,
            20299, 20300, 20306, 20308, 20310, 20321, 20322,
            20326, 20328, 20330, 20331, 20333, 20334, 20337,
            20338, 20341, 20343, 20344, 20345, 20346, 20349,
            20352, 20353, 20354, 20357, 20358, 20359, 20362,
            20364, 20366, 20368, 20370, 20371, 20373, 20374,
            20376, 20377, 20378, 20380, 20382, 20383, 20385,
            20386, 20388, 20395, 20397, 20400, 20401, 20402,
            20403, 20404, 20406, 20407, 20408, 20409, 20410,
            20411, 20412, 20413, 20414, 20416, 20417, 20418,
            20422, 20423, 20424, 20425, 20427, 20428, 20429,
            20434, 20435, 20436, 20437, 20438, 20441, 20443,
            20448, 20450, 20452, 20453, 20455, 20459, 20460,
            20464, 20466, 20468, 20469, 20470, 20471, 20473,
            20475, 20476, 20477, 20479, 20480, 20481, 20482,
            20483, 20484, 20485, 20486, 20487, 20488, 20489,
            20490, 20491, 20494, 20496, 20497, 20499, 20501,
            20502, 20503, 20507, 20509, 20510, 20512, 20514,
            20515, 20516, 20519, 20523, 20527, 20528, 20529,
            20530, 20531, 20532, 20533, 20534, 20535, 20536,
            20537, 20539, 20541, 20543, 20544, 20545, 20546,
            20548, 20549, 20550, 20553, 20554, 20555, 20557,
            20560, 20561, 20562, 20563, 20564, 20566, 20567,
            20568, 20569, 20571, 20573, 20574, 20575, 20576,
            20577, 20578, 20579, 20580, 20582, 20583, 20584,
            20585, 20586, 20587, 20589, 20590, 20591, 20592,
            20593, 20594, 20595, 20596, 20597, 20600, 20601,
            20602, 20604, 20605, 20609, 20610, 20611, 20612,
            20614, 20615, 20617, 20618, 20619, 20620, 20622,
            20623, 20624, 20625, 20626, 20627, 20628, 20629,
            20630, 20631, 20632, 20633, 20634, 20635, 20636,
            20637, 20638, 20639, 20640, 20641, 20642, 20644,
            20646, 20650, 20651, 20653, 20654, 20655, 20656,
            20657, 20659, 20660, 20661, 20662, 20663, 20664,
            20665, 20668, 20669, 20670, 20671, 20672, 20673,
            20674, 20675, 20676, 20677, 20678, 20679, 20680,
            20681, 20682, 20683, 20684, 20685, 20686, 20688,
            20689, 20690, 20691, 20692, 20693, 20695, 20696,
            20697, 20699, 20700, 20701, 20702, 20703, 20704,
            20705, 20706, 20707, 20708, 20709, 20712, 20713,
            20714, 20715, 20719, 20720, 20721, 20722, 20724,
            20726, 20727, 20728, 20729, 20730, 20732, 20733,
            20734, 20735, 20736, 20737, 20738, 20739, 20740,
            20741, 20744, 20745, 20746, 20748, 20749, 20750,
            20751, 20752, 20753, 20755, 20756, 20757, 20758,
            20759, 20760, 20761, 20762, 20763, 20764, 20765,
            20766, 20767, 20768, 20770, 20771, 20772, 20773,
            20774, 20775, 20776, 20777, 20778, 20779, 20780,
            20781, 20782, 20783, 20784, 20785, 20786, 20787,
            20788, 20789, 20790, 20791, 20792, 20793, 20794,
            20795, 20796, 20797, 20798, 20802, 20807, 20810,
            20812, 20814, 20815, 20816, 20818, 20819, 20823,
            20824, 20825, 20827, 20829, 20830, 20831, 20832,
            20833, 20835, 20836, 20838, 20839, 20841, 20842,
            20847, 20850, 20858, 20862, 20863, 20867, 20868,
            20870, 20871, 20874, 20875, 20878, 20879, 20880,
            20881, 20883, 20884, 20888, 20890, 20893, 20894,
            20895, 20897, 20899, 20902, 20903, 20904, 20905,
            20906, 20909, 20910, 20916, 20920, 20921, 20922,
            20926, 20927, 20929, 20930, 20931, 20933, 20936,
            20938, 20941, 20942, 20944, 20946, 20947, 20948,
            20949, 20950, 20951, 20952, 20953, 20954, 20956,
            20958, 20959, 20962, 20963, 20965, 20966, 20967,
            20968, 20969, 20970, 20972, 20974, 20977, 20978,
            20980, 20983, 20990, 20996, 20997, 21001, 21003,
            21004, 21007, 21008, 21011, 21012, 21013, 21020,
            21022, 21023, 21025, 21026, 21027, 21029, 21030,
            21031, 21034, 21036, 21039, 21041, 21042, 21044,
            21045, 21052, 21054, 21060, 21061, 21062, 21063,
            21064, 21065, 21067, 21070, 21071, 21074, 21075,
            21077, 21079, 21080, 21081, 21082, 21083, 21085,
            21087, 21088, 21090, 21091, 21092, 21094, 21096,
            21099, 21100, 21101, 21102, 21104, 21105, 21107,
            21108, 21109, 21110, 21111, 21112, 21113, 21114,
            21115, 21116, 21118, 21120, 21123, 21124, 21125,
            21126, 21127, 21129, 21130, 21131, 21132, 21133,
            21134, 21135, 21137, 21138, 21140, 21141, 21142,
            21143, 21144, 21145, 21146, 21148, 21156, 21157,
            21158, 21159, 21166, 21167, 21168, 21172, 21173,
            21174, 21175, 21176, 21177, 21178, 21179, 21180,
            21181, 21184, 21185, 21186, 21188, 21189, 21190,
            21192, 21194, 21196, 21197, 21198, 21199, 21201,
            21203, 21204, 21205, 21207, 21209, 21210, 21211,
            21212, 21213, 21214, 21216, 21217, 21218, 21219,
            21221, 21222, 21223, 21224, 21225, 21226, 21227,
            21228, 21229, 21230, 21231, 21233, 21234, 21235,
            21236, 21237, 21238, 21239, 21240, 21243, 21244,
            21245, 21249, 21250, 21251, 21252, 21255, 21257,
            21258, 21259, 21260, 21262, 21265, 21266, 21267,
            21268, 21272, 21275, 21276, 21278, 21279, 21282,
            21284, 21285, 21287, 21288, 21289, 21291, 21292,
            21293, 21295, 21296, 21297, 21298, 21299, 21300,
            21301, 21302, 21303, 21304, 21308, 21309, 21312,
            21314, 21316, 21318, 21323, 21324, 21325, 21328,
            21332, 21336, 21337, 21339, 21341, 21349, 21352,
            21354, 21356, 21357, 21362, 21366, 21369, 21371,
            21372, 21373, 21374, 21376, 21377, 21379, 21383,
            21384, 21386, 21390, 21391, 21392, 21393, 21394,
            21395, 21396, 21398, 21399, 21401, 21403, 21404,
            21406, 21408, 21409, 21412, 21415, 21418, 21419,
            21420, 21421, 21423, 21424, 21425, 21426, 21427,
            21428, 21429, 21431, 21432, 21433, 21434, 21436,
            21437, 21438, 21440, 21443, 21444, 21445, 21446,
            21447, 21454, 21455, 21456, 21458, 21459, 21461,
            21466, 21468, 21469, 21470, 21473, 21474, 21479,
            21492, 21498, 21502, 21503, 21504, 21506, 21509,
            21511, 21515, 21524, 21528, 21529, 21530, 21532,
            21538, 21540, 21541, 21546, 21552, 21555, 21558,
            21559, 21562, 21565, 21567, 21569, 21570, 21572,
            21573, 21575, 21577, 21580, 21581, 21582, 21583,
            21585, 21594, 21597, 21598, 21599, 21600, 21601,
            21603, 21605, 21607, 21609, 21610, 21611, 21612,
            21613, 21614, 21615, 21616, 21620, 21625, 21626,
            21630, 21631, 21633, 21635, 21637, 21639, 21640,
            21641, 21642, 21645, 21649, 21651, 21655, 21656,
            21660, 21662, 21663, 21664, 21665, 21666, 21669,
            21678, 21680, 21682, 21685, 21686, 21687, 21689,
            21690, 21692, 21694, 21699, 21701, 21706, 21707,
            21718, 21720, 21723, 21728, 21729, 21730, 21731,
            21732, 21739, 21740, 21743, 21744, 21745, 21748,
            21749, 21750, 21751, 21752, 21753, 21755, 21758,
            21760, 21762, 21763, 21764, 21765, 21768, 21770,
            21771, 21772, 21773, 21774, 21778, 21779, 21781,
            21782, 21783, 21784, 21785, 21786, 21788, 21789,
            21790, 21791, 21793, 21797, 21798, 21800, 21801,
            21803, 21805, 21810, 21812, 21813, 21814, 21816,
            21817, 21818, 21819, 21821, 21824, 21826, 21829,
            21831, 21832, 21835, 21836, 21837, 21838, 21839,
            21841, 21842, 21843, 21844, 21847, 21848, 21849,
            21850, 21851, 21853, 21854, 21855, 21856, 21858,
            21859, 21864, 21865, 21867, 21871, 21872, 21873,
            21874, 21875, 21876, 21881, 21882, 21885, 21887,
            21893, 21894, 21900, 21901, 21902, 21904, 21906,
            21907, 21909, 21910, 21911, 21914, 21915, 21918,
            21920, 21921, 21922, 21923, 21924, 21925, 21926,
            21928, 21929, 21930, 21931, 21932, 21933, 21934,
            21935, 21936, 21938, 21940, 21942, 21944, 21946,
            21948, 21951, 21952, 21953, 21954, 21955, 21958,
            21959, 21960, 21962, 21963, 21966, 21967, 21968,
            21973, 21975, 21976, 21977, 21978, 21979, 21982,
            21984, 21986, 21991, 21993, 21997, 21998, 22000,
            22001, 22004, 22006, 22008, 22009, 22010, 22011,
            22012, 22015, 22018, 22019, 22020, 22021, 22022,
            22023, 22026, 22027, 22029, 22032, 22033, 22034,
            22035, 22036, 22037, 22038, 22039, 22041, 22042,
            22044, 22045, 22048, 22049, 22050, 22053, 22054,
            22056, 22057, 22058, 22059, 22062, 22063, 22064,
            22067, 22069, 22071, 22072, 22074, 22076, 22077,
            22078, 22080, 22081, 22082, 22083, 22084, 22085,
            22086, 22087, 22088, 22089, 22090, 22091, 22095,
            22096, 22097, 22098, 22099, 22101, 22102, 22106,
            22107, 22109, 22110, 22111, 22112, 22113, 22115,
            22117, 22118, 22119, 22125, 22126, 22127, 22128,
            22130, 22131, 22132, 22133, 22135, 22136, 22137,
            22138, 22141, 22142, 22143, 22144, 22145, 22146,
            22147, 22148, 22151, 22152, 22153, 22154, 22155,
            22156, 22157, 22160, 22161, 22162, 22164, 22165,
            22166, 22167, 22168, 22169, 22170, 22171, 22172,
            22173, 22174, 22175, 22176, 22177, 22178, 22180,
            22181, 22182, 22183, 22184, 22185, 22186, 22187,
            22188, 22189, 22190, 22192, 22193, 22194, 22195,
            22196, 22197, 22198, 22200, 22201, 22202, 22203,
            22205, 22206, 22207, 22208, 22209, 22210, 22211,
            22212, 22213, 22214, 22215, 22216, 22217, 22219,
            22220, 22221, 22222, 22223, 22224, 22225, 22226,
            22227, 22229, 22230, 22232, 22233, 22236, 22243,
            22245, 22246, 22247, 22248, 22249, 22250, 22252,
            22254, 22255, 22258, 22259, 22262, 22263, 22264,
            22267, 22268, 22272, 22273, 22274, 22277, 22279,
            22283, 22284, 22285, 22286, 22287, 22288, 22289,
            22290, 22291, 22292, 22293, 22294, 22295, 22296,
            22297, 22298, 22299, 22301, 22302, 22304, 22305,
            22306, 22308, 22309, 22310, 22311, 22315, 22321,
            22322, 22324, 22325, 22326, 22327, 22328, 22332,
            22333, 22335, 22337, 22339, 22340, 22341, 22342,
            22344, 22345, 22347, 22354, 22355, 22356, 22357,
            22358, 22360, 22361, 22370, 22371, 22373, 22375,
            22380, 22382, 22384, 22385, 22386, 22388, 22389,
            22392, 22393, 22394, 22397, 22398, 22399, 22400,
            22401, 22407, 22408, 22409, 22410, 22413, 22414,
            22415, 22416, 22417, 22420, 22421, 22422, 22423,
            22424, 22425, 22426, 22428, 22429, 22430, 22431,
            22437, 22440, 22442, 22444, 22447, 22448, 22449,
            22451, 22453, 22454, 22455, 22457, 22458, 22459,
            22460, 22461, 22462, 22463, 22464, 22465, 22468,
            22469, 22470, 22471, 22472, 22473, 22474, 22476,
            22477, 22480, 22481, 22483, 22486, 22487, 22491,
            22492, 22494, 22497, 22498, 22499, 22501, 22502,
            22503, 22504, 22505, 22506, 22507, 22508, 22510,
            22512, 22513, 22514, 22515, 22517, 22518, 22519,
            22523, 22524, 22526, 22527, 22529, 22531, 22532,
            22533, 22536, 22537, 22538, 22540, 22542, 22543,
            22544, 22546, 22547, 22548, 22550, 22551, 22552,
            22554, 22555, 22556, 22557, 22559, 22562, 22563,
            22565, 22566, 22567, 22568, 22569, 22571, 22572,
            22573, 22574, 22575, 22577, 22578, 22579, 22580,
            22582, 22583, 22584, 22585, 22586, 22587, 22588,
            22589, 22590, 22591, 22592, 22593, 22594, 22595,
            22597, 22598, 22599, 22600, 22601, 22602, 22603,
            22606, 22607, 22608, 22610, 22611, 22613, 22614,
            22615, 22617, 22618, 22619, 22620, 22621, 22623,
            22624, 22625, 22626, 22627, 22628, 22630, 22631,
            22632, 22633, 22634, 22637, 22638, 22639, 22640,
            22641, 22642, 22643, 22644, 22645, 22646, 22647,
            22648, 22649, 22650, 22651, 22652, 22653, 22655,
            22658, 22660, 22662, 22663, 22664, 22666, 22667,
            22668, 22669, 22670, 22671, 22672, 22673, 22676,
            22677, 22678, 22679, 22680, 22683, 22684, 22685,
            22688, 22689, 22690, 22691, 22692, 22693, 22694,
            22695, 22698, 22699, 22700, 22701, 22702, 22703,
            22704, 22705, 22706, 22707, 22708, 22709, 22710,
            22711, 22712, 22713, 22714, 22715, 22717, 22718,
            22719, 22720, 22722, 22723, 22724, 22726, 22727,
            22728, 22729, 22730, 22731, 22732, 22733, 22734,
            22735, 22736, 22738, 22739, 22740, 22742, 22743,
            22744, 22745, 22746, 22747, 22748, 22749, 22750,
            22751, 22752, 22753, 22754, 22755, 22757, 22758,
            22759, 22760, 22761, 22762, 22765, 22767, 22769,
            22770, 22772, 22773, 22775, 22776, 22778, 22779,
            22780, 22781, 22782, 22783, 22784, 22785, 22787,
            22789, 22790, 22792, 22793, 22794, 22795, 22796,
            22798, 22800, 22801, 22802, 22803, 22807, 22808,
            22811, 22813, 22814, 22816, 22817, 22818, 22819,
            22822, 22824, 22828, 22832, 22834, 22835, 22837,
            22838, 22843, 22845, 22846, 22847, 22848, 22851,
            22853, 22854, 22858, 22860, 22861, 22864, 22866,
            22867, 22873, 22875, 22876, 22877, 22878, 22879,
            22881, 22883, 22884, 22886, 22887, 22888, 22889,
            22890, 22891, 22892, 22893, 22894, 22895, 22896,
            22897, 22898, 22901, 22903, 22906, 22907, 22908,
            22910, 22911, 22912, 22917, 22921, 22923, 22924,
            22926, 22927, 22928, 22929, 22932, 22933, 22936,
            22938, 22939, 22940, 22941, 22943, 22944, 22945,
            22946, 22950, 22951, 22956, 22957, 22960, 22961,
            22963, 22964, 22965, 22966, 22967, 22968, 22970,
            22972, 22973, 22975, 22976, 22977, 22978, 22979,
            22980, 22981, 22983, 22984, 22985, 22988, 22989,
            22990, 22991, 22997, 22998, 23001, 23003, 23006,
            23007, 23008, 23009, 23010, 23012, 23014, 23015,
            23017, 23018, 23019, 23021, 23022, 23023, 23024,
            23025, 23026, 23027, 23028, 23029, 23030, 23031,
            23032, 23034, 23036, 23037, 23038, 23040, 23042,
            23050, 23051, 23053, 23054, 23055, 23056, 23058,
            23060, 23061, 23062, 23063, 23065, 23066, 23067,
            23069, 23070, 23073, 23074, 23076, 23078, 23079,
            23080, 23082, 23083, 23084, 23085, 23086, 23087,
            23088, 23091, 23093, 23095, 23096, 23097, 23098,
            23099, 23101, 23102, 23103, 23105, 23106, 23107,
            23108, 23109, 23111, 23112, 23115, 23116, 23117,
            23118, 23119, 23120, 23121, 23122, 23123, 23124,
            23126, 23127, 23128, 23129, 23131, 23132, 23133,
            23134, 23135, 23136, 23137, 23139, 23140, 23141,
            23142, 23144, 23145, 23147, 23148, 23149, 23150,
            23151, 23152, 23153, 23154, 23155, 23160, 23161,
            23163, 23164, 23165, 23166, 23168, 23169, 23170,
            23171, 23172, 23173, 23174, 23175, 23176, 23177,
            23178, 23179, 23180, 23181, 23182, 23183, 23184,
            23185, 23187, 23188, 23189, 23190, 23191, 23192,
            23193, 23196, 23197, 23198, 23199, 23200, 23201,
            23202, 23203, 23204, 23205, 23206, 23207, 23208,
            23209, 23211, 23212, 23213, 23214, 23215, 23216,
            23217, 23220, 23222, 23223, 23225, 23226, 23227,
            23228, 23229, 23231, 23232, 23235, 23236, 23237,
            23238, 23239, 23240, 23242, 23243, 23245, 23246,
            23247, 23248, 23249, 23251, 23253, 23255, 23257,
            23258, 23259, 23261, 23262, 23263, 23266, 23268,
            23269, 23271, 23272, 23274, 23276, 23277, 23278,
            23279, 23280, 23282, 23283, 23284, 23285, 23286,
            23287, 23288, 23289, 23290, 23291, 23292, 23293,
            23294, 23295, 23296, 23297, 23298, 23299, 23300,
            23301, 23302, 23303, 23304, 23306, 23307, 23308,
            23309, 23310, 23311, 23312, 23313, 23314, 23315,
            23316, 23317, 23320, 23321, 23322, 23323, 23324,
            23325, 23326, 23327, 23328, 23329, 23330, 23331,
            23332, 23333, 23334, 23335, 23336, 23337, 23338,
            23339, 23340, 23341, 23342, 23343, 23344, 23345,
            23347, 23349, 23350, 23352, 23353, 23354, 23355,
            23356, 23357, 23358, 23359, 23361, 23362, 23363,
            23364, 23365, 23366, 23367, 23368, 23369, 23370,
            23371, 23372, 23373, 23374, 23375, 23378, 23382,
            23390, 23392, 23393, 23399, 23400, 23403, 23405,
            23406, 23407, 23410, 23412, 23414, 23415, 23416,
            23417, 23419, 23420, 23422, 23423, 23426, 23430,
            23434, 23437, 23438, 23440, 23441, 23442, 23444,
            23446, 23455, 23463, 23464, 23465, 23468, 23469,
            23470, 23471, 23473, 23474, 23479, 23482, 23483,
            23484, 23488, 23489, 23491, 23496, 23497, 23498,
            23499, 23501, 23502, 23503, 23505, 23508, 23509,
            23510, 23511, 23512, 23513, 23514, 23515, 23516,
            23520, 23522, 23523, 23526, 23527, 23529, 23530,
            23531, 23532, 23533, 23535, 23537, 23538, 23539,
            23540, 23541, 23542, 23543, 23549, 23550, 23552,
            23554, 23555, 23557, 23559, 23560, 23563, 23564,
            23565, 23566, 23568, 23570, 23571, 23575, 23577,
            23579, 23582, 23583, 23584, 23585, 23587, 23590,
            23592, 23593, 23594, 23595, 23597, 23598, 23599,
            23600, 23602, 23603, 23605, 23606, 23607, 23619,
            23620, 23622, 23623, 23628, 23629, 23634, 23635,
            23636, 23638, 23639, 23640, 23642, 23643, 23644,
            23645, 23647, 23650, 23652, 23655, 23656, 23657,
            23658, 23659, 23660, 23661, 23664, 23666, 23667,
            23668, 23669, 23670, 23671, 23672, 23675, 23676,
            23677, 23678, 23680, 23683, 23684, 23685, 23686,
            23687, 23689, 23690, 23691, 23694, 23695, 23698,
            23699, 23701, 23709, 23710, 23711, 23712, 23713,
            23716, 23717, 23718, 23719, 23720, 23722, 23726,
            23727, 23728, 23730, 23732, 23734, 23737, 23738,
            23739, 23740, 23742, 23744, 23746, 23747, 23749,
            23750, 23751, 23752, 23753, 23754, 23756, 23757,
            23758, 23759, 23760, 23761, 23763, 23764, 23765,
            23766, 23767, 23768, 23770, 23771, 23772, 23773,
            23774, 23775, 23776, 23778, 23779, 23783, 23785,
            23787, 23788, 23790, 23791, 23793, 23794, 23795,
            23796, 23797, 23798, 23799, 23800, 23801, 23802,
            23804, 23805, 23806, 23807, 23808, 23809, 23812,
            23813, 23816, 23817, 23818, 23819, 23820, 23821,
            23823, 23824, 23825, 23826, 23827, 23829, 23831,
            23832, 23833, 23834, 23836, 23837, 23839, 23840,
            23841, 23842, 23843, 23845, 23848, 23850, 23851,
            23852, 23855, 23856, 23857, 23858, 23859, 23861,
            23862, 23863, 23864, 23865, 23866, 23867, 23868,
            23871, 23872, 23873, 23874, 23875, 23876, 23877,
            23878, 23880, 23881, 23885, 23886, 23887, 23888,
            23889, 23890, 23891, 23892, 23893, 23894, 23895,
            23897, 23898, 23900, 23902, 23903, 23904, 23905,
            23906, 23907, 23908, 23909, 23910, 23911, 23912,
            23914, 23917, 23918, 23920, 23921, 23922, 23923,
            23925, 23926, 23927, 23928, 23929, 23930, 23931,
            23932, 23933, 23934, 23935, 23936, 23937, 23939,
            23940, 23941, 23942, 23943, 23944, 23945, 23946,
            23947, 23948, 23949, 23950, 23951, 23952, 23953,
            23954, 23955, 23956, 23957, 23958, 23959, 23960,
            23962, 23963, 23964, 23966, 23967, 23968, 23969,
            23970, 23971, 23972, 23973, 23974, 23975, 23976,
            23977, 23978, 23979, 23980, 23981, 23982, 23983,
            23984, 23985, 23986, 23987, 23988, 23989, 23990,
            23992, 23993, 23994, 23995, 23996, 23997, 23998,
            23999, 24000, 24001, 24002, 24003, 24004, 24006,
            24007, 24008, 24009, 24010, 24011, 24012, 24014,
            24015, 24016, 24017, 24018, 24019, 24020, 24021,
            24022, 24023, 24024, 24025, 24026, 24028, 24031,
            24032, 24035, 24036, 24042, 24044, 24045, 24048,
            24053, 24054, 24056, 24057, 24058, 24059, 24060,
            24063, 24064, 24068, 24071, 24073, 24074, 24075,
            24077, 24078, 24082, 24083, 24087, 24094, 24095,
            24096, 24097, 24098, 24099, 24100, 24101, 24104,
            24105, 24106, 24107, 24108, 24111, 24112, 24114,
            24115, 24116, 24117, 24118, 24121, 24122, 24126,
            24127, 24128, 24129, 24131, 24134, 24135, 24136,
            24137, 24138, 24139, 24141, 24142, 24143, 24144,
            24145, 24146, 24147, 24150, 24151, 24152, 24153,
            24154, 24156, 24157, 24159, 24160, 24163, 24164,
            24165, 24166, 24167, 24168, 24169, 24170, 24171,
            24172, 24173, 24174, 24175, 24176, 24177, 24181,
            24183, 24185, 24190, 24193, 24194, 24195, 24197,
            24200, 24201, 24204, 24205, 24206, 24210, 24216,
            24219, 24221, 24225, 24226, 24227, 24228, 24232,
            24233, 24234, 24235, 24236, 24238, 24239, 24240,
            24241, 24242, 24244, 24250, 24251, 24252, 24253,
            24255, 24256, 24257, 24258, 24259, 24260, 24261,
            24262, 24263, 24264, 24267, 24268, 24269, 24270,
            24271, 24272, 24276, 24277, 24279, 24280, 24281,
            24282, 24284, 24285, 24286, 24287, 24288, 24289,
            24290, 24291, 24292, 24293, 24294, 24295, 24297,
            24299, 24300, 24301, 24302, 24303, 24304, 24305,
            24306, 24307, 24309, 24312, 24313, 24315, 24316,
            24317, 24325, 24326, 24327, 24329, 24332, 24333,
            24334, 24336, 24338, 24340, 24342, 24345, 24346,
            24348, 24349, 24350, 24353, 24354, 24355, 24356,
            24360, 24363, 24364, 24366, 24368, 24370, 24371,
            24372, 24373, 24374, 24375, 24376, 24379, 24381,
            24382, 24383, 24385, 24386, 24387, 24388, 24389,
            24390, 24391, 24392, 24393, 24394, 24395, 24396,
            24397, 24398, 24399, 24401, 24404, 24409, 24410,
            24411, 24412, 24414, 24415, 24416, 24419, 24421,
            24423, 24424, 24427, 24430, 24431, 24434, 24436,
            24437, 24438, 24440, 24442, 24445, 24446, 24447,
            24451, 24454, 24461, 24462, 24463, 24465, 24467,
            24468, 24470, 24474, 24475, 24477, 24478, 24479,
            24480, 24482, 24483, 24484, 24485, 24486, 24487,
            24489, 24491, 24492, 24495, 24496, 24497, 24498,
            24499, 24500, 24502, 24504, 24505, 24506, 24507,
            24510, 24511, 24512, 24513, 24514, 24519, 24520,
            24522, 24523, 24526, 24531, 24532, 24533, 24538,
            24539, 24540, 24542, 24543, 24546, 24547, 24549,
            24550, 24552, 24553, 24556, 24559, 24560, 24562,
            24563, 24564, 24566, 24567, 24569, 24570, 24572,
            24583, 24584, 24585, 24587, 24588, 24592, 24593,
            24595, 24599, 24600, 24602, 24606, 24607, 24610,
            24611, 24612, 24620, 24621, 24622, 24624, 24625,
            24626, 24627, 24628, 24630, 24631, 24632, 24633,
            24634, 24637, 24638, 24640, 24644, 24645, 24646,
            24647, 24648, 24649, 24650, 24652, 24654, 24655,
            24657, 24659, 24660, 24662, 24663, 24664, 24667,
            24668, 24670, 24671, 24672, 24673, 24677, 24678,
            24686, 24689, 24690, 24692, 24693, 24695, 24702,
            24704, 24705, 24706, 24709, 24710, 24711, 24712,
            24714, 24715, 24718, 24719, 24720, 24721, 24723,
            24725, 24727, 24728, 24729, 24732, 24734, 24737,
            24738, 24740, 24741, 24743, 24745, 24746, 24750,
            24752, 24755, 24757, 24758, 24759, 24761, 24762,
            24765, 24766, 24767, 24768, 24769, 24770, 24771,
            24772, 24775, 24776, 24777, 24780, 24781, 24782,
            24783, 24784, 24786, 24787, 24788, 24790, 24791,
            24793, 24795, 24798, 24801, 24802, 24803, 24804,
            24805, 24810, 24817, 24818, 24821, 24823, 24824,
            24827, 24828, 24829, 24830, 24831, 24834, 24835,
            24836, 24837, 24839, 24842, 24843, 24844, 24848,
            24849, 24850, 24851, 24852, 24854, 24855, 24856,
            24857, 24859, 24860, 24861, 24862, 24865, 24866,
            24869, 24872, 24873, 24874, 24876, 24877, 24878,
            24879, 24880, 24881, 24882, 24883, 24884, 24885,
            24886, 24887, 24888, 24889, 24890, 24891, 24892,
            24893, 24894, 24896, 24897, 24898, 24899, 24900,
            24901, 24902, 24903, 24905, 24907, 24909, 24911,
            24912, 24914, 24915, 24916, 24918, 24919, 24920,
            24921, 24922, 24923, 24924, 24926, 24927, 24928,
            24929, 24931, 24932, 24933, 24934, 24937, 24938,
            24939, 24940, 24941, 24942, 24943, 24945, 24946,
            24947, 24948, 24950, 24952, 24953, 24954, 24955,
            24956, 24957, 24958, 24959, 24960, 24961, 24962,
            24963, 24964, 24965, 24966, 24967, 24968, 24969,
            24970, 24972, 24973, 24975, 24976, 24977, 24978,
            24979, 24981, 24982, 24983, 24984, 24985, 24986,
            24987, 24988, 24990, 24991, 24992, 24993, 24994,
            24995, 24996, 24997, 24998, 25002, 25003, 25005,
            25006, 25007, 25008, 25009, 25010, 25011, 25012,
            25013, 25014, 25016, 25017, 25018, 25019, 25020,
            25021, 25023, 25024, 25025, 25027, 25028, 25029,
            25030, 25031, 25033, 25036, 25037, 25038, 25039,
            25040, 25043, 25045, 25046, 25047, 25048, 25049,
            25050, 25051, 25052, 25053, 25054, 25055, 25056,
            25057, 25058, 25059, 25060, 25061, 25063, 25064,
            25065, 25066, 25067, 25068, 25069, 25070, 25071,
            25072, 25073, 25074, 25075, 25076, 25078, 25079,
            25080, 25081, 25082, 25083, 25084, 25085, 25086,
            25088, 25089, 25090, 25091, 25092, 25093, 25095,
            25097, 25107, 25108, 25113, 25116, 25117, 25118,
            25120, 25123, 25126, 25127, 25128, 25129, 25131,
            25133, 25135, 25136, 25137, 25138, 25141, 25142,
            25144, 25145, 25146, 25147, 25148, 25154, 25156,
            25157, 25158, 25162, 25167, 25168, 25173, 25174,
            25175, 25177, 25178, 25180, 25181, 25182, 25183,
            25184, 25185, 25186, 25188, 25189, 25192, 25201,
            25202, 25204, 25205, 25207, 25208, 25210, 25211,
            25213, 25217, 25218, 25219, 25221, 25222, 25223,
            25224, 25227, 25228, 25229, 25230, 25231, 25232,
            25236, 25241, 25244, 25245, 25246, 25251, 25254,
            25255, 25257, 25258, 25261, 25262, 25263, 25264,
            25266, 25267, 25268, 25270, 25271, 25272, 25274,
            25278, 25280, 25281, 25283, 25291, 25295, 25297,
            25301, 25309, 25310, 25312, 25313, 25316, 25322,
            25323, 25328, 25330, 25333, 25336, 25337, 25338,
            25339, 25344, 25347, 25348, 25349, 25350, 25354,
            25355, 25356, 25357, 25359, 25360, 25362, 25363,
            25364, 25365, 25367, 25368, 25369, 25372, 25382,
            25383, 25385, 25388, 25389, 25390, 25392, 25393,
            25395, 25396, 25397, 25398, 25399, 25400, 25403,
            25404, 25406, 25407, 25408, 25409, 25412, 25415,
            25416, 25418, 25425, 25426, 25427, 25428, 25430,
            25431, 25432, 25433, 25434, 25435, 25436, 25437,
            25440, 25444, 25445, 25446, 25448, 25450, 25451,
            25452, 25455, 25456, 25458, 25459, 25460, 25461,
            25464, 25465, 25468, 25469, 25470, 25471, 25473,
            25475, 25476, 25477, 25478, 25483, 25485, 25489,
            25491, 25492, 25493, 25495, 25497, 25498, 25499,
            25500, 25501, 25502, 25503, 25505, 25508, 25510,
            25515, 25519, 25521, 25522, 25525, 25526, 25529,
            25531, 25533, 25535, 25536, 25537, 25538, 25539,
            25541, 25543, 25544, 25546, 25547, 25548, 25553,
            25555, 25556, 25557, 25559, 25560, 25561, 25562,
            25563, 25564, 25565, 25567, 25570, 25572, 25573,
            25574, 25575, 25576, 25579, 25580, 25582, 25583,
            25584, 25585, 25587, 25589, 25591, 25593, 25594,
            25595, 25596, 25598, 25603, 25604, 25606, 25607,
            25608, 25609, 25610, 25613, 25614, 25617, 25618,
            25621, 25622, 25623, 25624, 25625, 25626, 25629,
            25631, 25634, 25635, 25636, 25637, 25639, 25640,
            25641, 25643, 25646, 25647, 25648, 25649, 25650,
            25651, 25653, 25654, 25655, 25656, 25657, 25659,
            25660, 25662, 25664, 25666, 25667, 25673, 25675,
            25676, 25677, 25678, 25679, 25680, 25681, 25683,
            25685, 25686, 25687, 25689, 25690, 25691, 25692,
            25693, 25695, 25696, 25697, 25698, 25699, 25700,
            25701, 25702, 25704, 25706, 25707, 25708, 25710,
            25711, 25712, 25713, 25714, 25715, 25716, 25717,
            25718, 25719, 25723, 25724, 25725, 25726, 25727,
            25728, 25729, 25731, 25734, 25736, 25737, 25738,
            25739, 25740, 25741, 25742, 25743, 25744, 25747,
            25748, 25751, 25752, 25754, 25755, 25756, 25757,
            25759, 25760, 25761, 25762, 25763, 25765, 25766,
            25767, 25768, 25770, 25771, 25775, 25777, 25778,
            25779, 25780, 25782, 25785, 25787, 25789, 25790,
            25791, 25793, 25795, 25796, 25798, 25799, 25800,
            25801, 25802, 25803, 25804, 25807, 25809, 25811,
            25812, 25813, 25814, 25817, 25818, 25819, 25820,
            25821, 25823, 25824, 25825, 25827, 25829, 25831,
            25832, 25833, 25834, 25835, 25836, 25837, 25838,
            25839, 25840, 25841, 25842, 25843, 25844, 25845,
            25846, 25847, 25848, 25849, 25850, 25851, 25852,
            25853, 25854, 25855, 25857, 25858, 25859, 25860,
            25861, 25862, 25863, 25864, 25866, 25867, 25868,
            25869, 25870, 25871, 25872, 25873, 25875, 25876,
            25877, 25878, 25879, 25881, 25882, 25883, 25884,
            25885, 25886, 25887, 25888, 25889, 25890, 25891,
            25892, 25894, 25895, 25896, 25897, 25898, 25900,
            25901, 25904, 25905, 25906, 25907, 25911, 25914,
            25916, 25917, 25920, 25921, 25922, 25923, 25924,
            25926, 25927, 25930, 25931, 25933, 25934, 25936,
            25938, 25939, 25940, 25943, 25944, 25946, 25948,
            25951, 25952, 25953, 25956, 25957, 25959, 25960,
            25961, 25962, 25965, 25966, 25967, 25969, 25971,
            25973, 25974, 25976, 25977, 25978, 25979, 25980,
            25981, 25982, 25983, 25984, 25985, 25986, 25987,
            25988, 25989, 25990, 25992, 25993, 25994, 25997,
            25998, 25999, 26002, 26004, 26005, 26006, 26008,
            26010, 26013, 26014, 26016, 26018, 26019, 26022,
            26024, 26026, 26028, 26030, 26033, 26034, 26035,
            26036, 26037, 26038, 26039, 26040, 26042, 26043,
            26046, 26047, 26048, 26050, 26055, 26056, 26057,
            26058, 26061, 26064, 26065, 26067, 26068, 26069,
            26072, 26073, 26074, 26075, 26076, 26077, 26078,
            26079, 26081, 26083, 26084, 26090, 26091, 26098,
            26099, 26100, 26101, 26104, 26105, 26107, 26108,
            26109, 26110, 26111, 26113, 26116, 26117, 26119,
            26120, 26121, 26123, 26125, 26128, 26129, 26130,
            26134, 26135, 26136, 26138, 26139, 26140, 26142,
            26145, 26146, 26147, 26148, 26150, 26153, 26154,
            26155, 26156, 26158, 26160, 26162, 26163, 26167,
            26168, 26169, 26170, 26171, 26173, 26175, 26176,
            26178, 26180, 26181, 26182, 26183, 26184, 26185,
            26186, 26189, 26190, 26192, 26193, 26200, 26201,
            26203, 26204, 26205, 26206, 26208, 26210, 26211,
            26213, 26215, 26217, 26218, 26219, 26220, 26221,
            26225, 26226, 26227, 26229, 26232, 26233, 26235,
            26236, 26237, 26239, 26240, 26241, 26243, 26245,
            26246, 26248, 26249, 26250, 26251, 26253, 26254,
            26255, 26256, 26258, 26259, 26260, 26261, 26264,
            26265, 26266, 26267, 26268, 26270, 26271, 26272,
            26273, 26274, 26275, 26276, 26277, 26278, 26281,
            26282, 26283, 26284, 26285, 26287, 26288, 26289,
            26290, 26291, 26293, 26294, 26295, 26296, 26298,
            26299, 26300, 26301, 26303, 26304, 26305, 26306,
            26307, 26308, 26309, 26310, 26311, 26312, 26313,
            26314, 26315, 26316, 26317, 26318, 26319, 26320,
            26321, 26322, 26323, 26324, 26325, 26326, 26327,
            26328, 26330, 26334, 26335, 26336, 26337, 26338,
            26339, 26340, 26341, 26343, 26344, 26346, 26347,
            26348, 26349, 26350, 26351, 26353, 26357, 26358,
            26360, 26362, 26363, 26365, 26369, 26370, 26371,
            26372, 26373, 26374, 26375, 26380, 26382, 26383,
            26385, 26386, 26387, 26390, 26392, 26393, 26394,
            26396, 26398, 26400, 26401, 26402, 26403, 26404,
            26405, 26407, 26409, 26414, 26416, 26418, 26419,
            26422, 26423, 26424, 26425, 26427, 26428, 26430,
            26431, 26433, 26436, 26437, 26439, 26442, 26443,
            26445, 26450, 26452, 26453, 26455, 26456, 26457,
            26458, 26459, 26461, 26466, 26467, 26468, 26470,
            26471, 26475, 26476, 26478, 26481, 26484, 26486,
            26488, 26489, 26490, 26491, 26493, 26496, 26498,
            26499, 26501, 26502, 26504, 26506, 26508, 26509,
            26510, 26511, 26513, 26514, 26515, 26516, 26518,
            26521, 26523, 26527, 26528, 26529, 26532, 26534,
            26537, 26540, 26542, 26545, 26546, 26548, 26553,
            26554, 26555, 26556, 26557, 26558, 26559, 26560,
            26562, 26565, 26566, 26567, 26568, 26569, 26570,
            26571, 26572, 26573, 26574, 26581, 26582, 26583,
            26587, 26591, 26593, 26595, 26596, 26598, 26599,
            26600, 26602, 26603, 26605, 26606, 26610, 26613,
            26614, 26615, 26616, 26617, 26618, 26619, 26620,
            26622, 26625, 26626, 26627, 26628, 26630, 26637,
            26640, 26642, 26644, 26645, 26648, 26649, 26650,
            26651, 26652, 26654, 26655, 26656, 26658, 26659,
            26660, 26661, 26662, 26663, 26664, 26667, 26668,
            26669, 26670, 26671, 26672, 26673, 26676, 26677,
            26678, 26682, 26683, 26687, 26695, 26699, 26701,
            26703, 26706, 26710, 26711, 26712, 26713, 26714,
            26715, 26716, 26717, 26718, 26719, 26730, 26732,
            26733, 26734, 26735, 26736, 26737, 26738, 26739,
            26741, 26744, 26745, 26746, 26747, 26748, 26749,
            26750, 26751, 26752, 26754, 26756, 26759, 26760,
            26761, 26762, 26763, 26764, 26765, 26766, 26768,
            26769, 26770, 26772, 26773, 26774, 26776, 26777,
            26778, 26779, 26780, 26781, 26782, 26783, 26784,
            26785, 26787, 26788, 26789, 26793, 26794, 26795,
            26796, 26798, 26801, 26802, 26804, 26806, 26807,
            26808, 26809, 26810, 26811, 26812, 26813, 26814,
            26815, 26817, 26819, 26820, 26821, 26822, 26823,
            26824, 26826, 26828, 26830, 26831, 26832, 26833,
            26835, 26836, 26838, 26839, 26841, 26843, 26844,
            26845, 26846, 26847, 26849, 26850, 26852, 26853,
            26854, 26855, 26856, 26857, 26858, 26859, 26860,
            26861, 26863, 26866, 26867, 26868, 26870, 26871,
            26872, 26875, 26877, 26878, 26879, 26880, 26882,
            26883, 26884, 26886, 26887, 26888, 26889, 26890,
            26892, 26895, 26897, 26899, 26900, 26901, 26902,
            26903, 26904, 26905, 26906, 26907, 26908, 26909,
            26910, 26913, 26914, 26915, 26917, 26918, 26919,
            26920, 26921, 26922, 26923, 26924, 26926, 26927,
            26929, 26930, 26931, 26933, 26934, 26935, 26936,
            26938, 26939, 26940, 26942, 26944, 26945, 26947,
            26948, 26949, 26950, 26951, 26952, 26953, 26954,
            26955, 26956, 26957, 26958, 26959, 26960, 26961,
            26962, 26963, 26965, 26966, 26968, 26969, 26971,
            26972, 26975, 26977, 26978, 26980, 26981, 26983,
            26984, 26985, 26986, 26988, 26989, 26991, 26992,
            26994, 26995, 26996, 26997, 26998, 27002, 27003,
            27005, 27006, 27007, 27009, 27011, 27013, 27018,
            27019, 27020, 27022, 27023, 27024, 27025, 27026,
            27027, 27030, 27031, 27033, 27034, 27037, 27038,
            27039, 27040, 27041, 27042, 27043, 27044, 27045,
            27046, 27049, 27050, 27052, 27054, 27055, 27056,
            27058, 27059, 27061, 27062, 27064, 27065, 27066,
            27068, 27069, 27070, 27071, 27072, 27074, 27075,
            27076, 27077, 27078, 27079, 27080, 27081, 27083,
            27085, 27087, 27089, 27090, 27091, 27093, 27094,
            27095, 27096, 27097, 27098, 27100, 27101, 27102,
            27105, 27106, 27107, 27108, 27109, 27110, 27111,
            27112, 27113, 27114, 27115, 27116, 27118, 27119,
            27120, 27121, 27123, 27124, 27125, 27126, 27127,
            27128, 27129, 27130, 27131, 27132, 27134, 27136,
            27137, 27138, 27139, 27140, 27141, 27142, 27143,
            27144, 27145, 27147, 27148, 27149, 27150, 27151,
            27152, 27153, 27154, 27155, 27156, 27157, 27158,
            27161, 27162, 27163, 27164, 27165, 27166, 27168,
            27170, 27171, 27172, 27173, 27174, 27175, 27177,
            27179, 27180, 27181, 27182, 27184, 27186, 27187,
            27188, 27190, 27191, 27192, 27193, 27194, 27195,
            27196, 27199, 27200, 27201, 27202, 27203, 27205,
            27206, 27208, 27209, 27210, 27211, 27212, 27213,
            27214, 27215, 27217, 27218, 27219, 27220, 27221,
            27222, 27223, 27226, 27228, 27229, 27230, 27231,
            27232, 27234, 27235, 27236, 27238, 27239, 27240,
            27241, 27242, 27243, 27244, 27245, 27246, 27247,
            27248, 27250, 27251, 27252, 27253, 27254, 27255,
            27256, 27258, 27259, 27261, 27262, 27263, 27265,
            27266, 27267, 27269, 27270, 27271, 27272, 27273,
            27274, 27275, 27276, 27277, 27279, 27282, 27283,
            27284, 27285, 27286, 27288, 27289, 27290, 27291,
            27292, 27293, 27294, 27295, 27297, 27298, 27299,
            27300, 27301, 27302, 27303, 27304, 27306, 27309,
            27310, 27311, 27312, 27313, 27314, 27315, 27316,
            27317, 27318, 27319, 27320, 27321, 27322, 27323,
            27324, 27325, 27326, 27327, 27328, 27329, 27330,
            27331, 27332, 27333, 27334, 27335, 27336, 27337,
            27338, 27339, 27340, 27341, 27342, 27343, 27344,
            27345, 27346, 27347, 27348, 27349, 27350, 27351,
            27352, 27353, 27354, 27355, 27356, 27357, 27358,
            27359, 27360, 27361, 27362, 27363, 27364, 27365,
            27366, 27367, 27368, 27369, 27370, 27371, 27372,
            27373, 27374, 27375, 27376, 27377, 27378, 27379,
            27380, 27381, 27382, 27383, 27384, 27385, 27386,
            27387, 27388, 27389, 27390, 27391, 27392, 27393,
            27394, 27395, 27396, 27397, 27398, 27399, 27400,
            27401, 27402, 27403, 27404, 27405, 27406, 27407,
            27408, 27409, 27410, 27411, 27412, 27413, 27414,
            27415, 27416, 27417, 27418, 27419, 27420, 27421,
            27422, 27423, 27429, 27430, 27432, 27433, 27434,
            27435, 27436, 27437, 27438, 27439, 27440, 27441,
            27443, 27444, 27445, 27446, 27448, 27451, 27452,
            27453, 27455, 27456, 27457, 27458, 27460, 27461,
            27464, 27466, 27467, 27469, 27470, 27471, 27472,
            27473, 27474, 27475, 27476, 27477, 27478, 27479,
            27480, 27482, 27483, 27484, 27485, 27486, 27487,
            27488, 27489, 27496, 27497, 27499, 27500, 27501,
            27502, 27503, 27504, 27505, 27506, 27507, 27508,
            27509, 27510, 27511, 27512, 27514, 27517, 27518,
            27519, 27520, 27525, 27528, 27532, 27534, 27535,
            27536, 27537, 27540, 27541, 27543, 27544, 27545,
            27548, 27549, 27550, 27551, 27552, 27554, 27555,
            27556, 27557, 27558, 27559, 27560, 27561, 27563,
            27564, 27565, 27566, 27567, 27568, 27569, 27570,
            27574, 27576, 27577, 27578, 27579, 27580, 27581,
            27582, 27584, 27587, 27588, 27590, 27591, 27592,
            27593, 27594, 27596, 27598, 27600, 27601, 27608,
            27610, 27612, 27613, 27614, 27615, 27616, 27618,
            27619, 27620, 27621, 27622, 27623, 27624, 27625,
            27628, 27629, 27630, 27632, 27633, 27634, 27636,
            27638, 27639, 27640, 27642, 27643, 27644, 27646,
            27647, 27648, 27649, 27650, 27651, 27652, 27656,
            27657, 27658, 27659, 27660, 27662, 27666, 27671,
            27676, 27677, 27678, 27680, 27683, 27685, 27691,
            27692, 27693, 27697, 27699, 27702, 27703, 27705,
            27706, 27707, 27708, 27710, 27711, 27715, 27716,
            27717, 27720, 27723, 27724, 27725, 27726, 27727,
            27729, 27730, 27731, 27734, 27736, 27737, 27738,
            27746, 27747, 27749, 27750, 27751, 27755, 27756,
            27757, 27758, 27759, 27761, 27763, 27765, 27767,
            27768, 27770, 27771, 27772, 27775, 27776, 27780,
            27783, 27786, 27787, 27789, 27790, 27793, 27794,
            27797, 27798, 27799, 27800, 27802, 27804, 27805,
            27806, 27808, 27810, 27816, 27820, 27823, 27824,
            27828, 27829, 27830, 27831, 27834, 27840, 27841,
            27842, 27843, 27846, 27847, 27848, 27851, 27853,
            27854, 27855, 27857, 27858, 27864, 27865, 27866,
            27868, 27869, 27871, 27876, 27878, 27879, 27881,
            27884, 27885, 27890, 27892, 27897, 27903, 27904,
            27906, 27907, 27909, 27910, 27912, 27913, 27914,
            27917, 27919, 27920, 27921, 27923, 27924, 27925,
            27926, 27928, 27932, 27933, 27935, 27936, 27937,
            27938, 27939, 27940, 27942, 27944, 27945, 27948,
            27949, 27951, 27952, 27956, 27958, 27959, 27960,
            27962, 27967, 27968, 27970, 27972, 27977, 27980,
            27984, 27989, 27990, 27991, 27992, 27995, 27997,
            27999, 28001, 28002, 28004, 28005, 28007, 28008,
            28011, 28012, 28013, 28016, 28017, 28018, 28019,
            28021, 28022, 28025, 28026, 28027, 28029, 28030,
            28031, 28032, 28033, 28035, 28036, 28038, 28039,
            28042, 28043, 28045, 28047, 28048, 28050, 28054,
            28055, 28056, 28057, 28058, 28060, 28066, 28069,
            28076, 28077, 28080, 28081, 28083, 28084, 28086,
            28087, 28089, 28090, 28091, 28092, 28093, 28094,
            28097, 28098, 28099, 28104, 28105, 28106, 28109,
            28110, 28111, 28112, 28114, 28115, 28116, 28117,
            28119, 28122, 28123, 28124, 28127, 28130, 28131,
            28133, 28135, 28136, 28137, 28138, 28141, 28143,
            28144, 28146, 28148, 28149, 28150, 28152, 28154,
            28157, 28158, 28159, 28160, 28161, 28162, 28163,
            28164, 28166, 28167, 28168, 28169, 28171, 28175,
            28178, 28179, 28181, 28184, 28185, 28187, 28188,
            28190, 28191, 28194, 28198, 28199, 28200, 28202,
            28204, 28206, 28208, 28209, 28211, 28213, 28214,
            28215, 28217, 28219, 28220, 28221, 28222, 28223,
            28224, 28225, 28226, 28229, 28230, 28231, 28232,
            28233, 28234, 28235, 28236, 28239, 28240, 28241,
            28242, 28245, 28247, 28249, 28250, 28252, 28253,
            28254, 28256, 28257, 28258, 28259, 28260, 28261,
            28262, 28263, 28264, 28265, 28266, 28268, 28269,
            28271, 28272, 28273, 28274, 28275, 28276, 28277,
            28278, 28279, 28280, 28281, 28282, 28283, 28284,
            28285, 28288, 28289, 28290, 28292, 28295, 28296,
            28298, 28299, 28300, 28301, 28302, 28305, 28306,
            28307, 28308, 28309, 28310, 28311, 28313, 28314,
            28315, 28317, 28318, 28320, 28321, 28323, 28324,
            28326, 28328, 28329, 28331, 28332, 28333, 28334,
            28336, 28339, 28341, 28344, 28345, 28348, 28350,
            28351, 28352, 28355, 28356, 28357, 28358, 28360,
            28361, 28362, 28364, 28365, 28366, 28368, 28370,
            28374, 28376, 28377, 28379, 28380, 28381, 28387,
            28391, 28394, 28395, 28396, 28397, 28398, 28399,
            28400, 28401, 28402, 28403, 28405, 28406, 28407,
            28408, 28410, 28411, 28412, 28413, 28414, 28415,
            28416, 28417, 28419, 28420, 28421, 28423, 28424,
            28426, 28427, 28428, 28429, 28430, 28432, 28433,
            28434, 28438, 28439, 28440, 28441, 28442, 28443,
            28444, 28445, 28446, 28447, 28449, 28450, 28451,
            28453, 28454, 28455, 28456, 28460, 28462, 28464,
            28466, 28468, 28469, 28471, 28472, 28473, 28474,
            28475, 28476, 28477, 28479, 28480, 28481, 28482,
            28483, 28484, 28485, 28488, 28489, 28490, 28492,
            28494, 28495, 28496, 28497, 28498, 28499, 28500,
            28501, 28502, 28503, 28505, 28506, 28507, 28509,
            28511, 28512, 28513, 28515, 28516, 28517, 28519,
            28520, 28521, 28522, 28523, 28524, 28527, 28528,
            28529, 28531, 28533, 28534, 28535, 28537, 28539,
            28541, 28542, 28543, 28544, 28545, 28546, 28547,
            28549, 28550, 28551, 28554, 28555, 28559, 28560,
            28561, 28562, 28563, 28564, 28565, 28566, 28567,
            28568, 28569, 28570, 28571, 28573, 28574, 28575,
            28576, 28578, 28579, 28580, 28581, 28582, 28584,
            28585, 28586, 28587, 28588, 28589, 28590, 28591,
            28592, 28593, 28594, 28596, 28597, 28599, 28600,
            28602, 28603, 28604, 28605, 28606, 28607, 28609,
            28611, 28612, 28613, 28614, 28615, 28616, 28618,
            28619, 28620, 28621, 28622, 28623, 28624, 28627,
            28628, 28629, 28630, 28631, 28632, 28633, 28634,
            28635, 28636, 28637, 28639, 28642, 28643, 28644,
            28645, 28646, 28647, 28648, 28649, 28650, 28651,
            28652, 28653, 28656, 28657, 28658, 28659, 28660,
            28661, 28662, 28663, 28664, 28665, 28666, 28667,
            28668, 28669, 28670, 28671, 28672, 28673, 28674,
            28675, 28676, 28677, 28678, 28679, 28680, 28681,
            28682, 28683, 28684, 28685, 28686, 28687, 28688,
            28690, 28691, 28692, 28693, 28694, 28695, 28696,
            28697, 28700, 28701, 28702, 28703, 28704, 28705,
            28706, 28708, 28709, 28710, 28711, 28712, 28713,
            28714, 28715, 28716, 28717, 28718, 28719, 28720,
            28721, 28722, 28723, 28724, 28726, 28727, 28728,
            28730, 28731, 28732, 28733, 28734, 28735, 28736,
            28737, 28738, 28739, 28740, 28741, 28742, 28743,
            28744, 28745, 28746, 28747, 28749, 28750, 28752,
            28753, 28754, 28755, 28756, 28757, 28758, 28759,
            28760, 28761, 28762, 28763, 28764, 28765, 28767,
            28768, 28769, 28770, 28771, 28772, 28773, 28774,
            28775, 28776, 28777, 28778, 28782, 28785, 28786,
            28787, 28788, 28791, 28793, 28794, 28795, 28797,
            28801, 28802, 28803, 28804, 28806, 28807, 28808,
            28811, 28812, 28813, 28815, 28816, 28817, 28819,
            28823, 28824, 28826, 28827, 28830, 28831, 28832,
            28833, 28834, 28835, 28836, 28837, 28838, 28839,
            28840, 28841, 28842, 28848, 28850, 28852, 28853,
            28854, 28858, 28862, 28863, 28868, 28869, 28870,
            28871, 28873, 28875, 28876, 28877, 28878, 28879,
            28880, 28881, 28882, 28883, 28884, 28885, 28886,
            28887, 28890, 28892, 28893, 28894, 28896, 28897,
            28898, 28899, 28901, 28906, 28910, 28912, 28913,
            28914, 28915, 28916, 28917, 28918, 28920, 28922,
            28923, 28924, 28926, 28927, 28928, 28929, 28930,
            28931, 28932, 28933, 28934, 28935, 28936, 28939,
            28940, 28941, 28942, 28943, 28945, 28946, 28948,
            28951, 28955, 28956, 28957, 28958, 28959, 28960,
            28961, 28962, 28963, 28964, 28965, 28967, 28968,
            28969, 28970, 28971, 28972, 28973, 28974, 28978,
            28979, 28980, 28981, 28983, 28984, 28985, 28986,
            28987, 28988, 28989, 28990, 28991, 28992, 28993,
            28994, 28995, 28996, 28998, 28999, 29000, 29001,
            29003, 29005, 29007, 29008, 29009, 29010, 29011,
            29012, 29013, 29014, 29015, 29016, 29017, 29018,
            29019, 29021, 29023, 29024, 29025, 29026, 29027,
            29029, 29033, 29034, 29035, 29036, 29037, 29039,
            29040, 29041, 29044, 29045, 29046, 29047, 29049,
            29051, 29052, 29054, 29055, 29056, 29057, 29058,
            29059, 29061, 29062, 29063, 29064, 29065, 29067,
            29068, 29069, 29070, 29072, 29073, 29074, 29075,
            29077, 29078, 29079, 29082, 29083, 29084, 29085,
            29086, 29089, 29090, 29091, 29092, 29093, 29094,
            29095, 29097, 29098, 29099, 29101, 29102, 29103,
            29104, 29105, 29106, 29108, 29110, 29111, 29112,
            29114, 29115, 29116, 29117, 29118, 29119, 29120,
            29121, 29122, 29124, 29125, 29126, 29127, 29128,
            29129, 29130, 29131, 29132, 29133, 29135, 29136,
            29137, 29138, 29139, 29142, 29143, 29144, 29145,
            29146, 29147, 29148, 29149, 29150, 29151, 29153,
            29154, 29155, 29156, 29158, 29160, 29161, 29162,
            29163, 29164, 29165, 29167, 29168, 29169, 29170,
            29171, 29172, 29173, 29174, 29175, 29176, 29178,
            29179, 29180, 29181, 29182, 29183, 29184, 29185,
            29186, 29187, 29188, 29189, 29191, 29192, 29193,
            29194, 29195, 29196, 29197, 29198, 29199, 29200,
            29201, 29202, 29203, 29204, 29205, 29206, 29207,
            29208, 29209, 29210, 29211, 29212, 29214, 29215,
            29216, 29217, 29218, 29219, 29220, 29221, 29222,
            29223, 29225, 29227, 29229, 29230, 29231, 29234,
            29235, 29236, 29242, 29244, 29246, 29248, 29249,
            29250, 29251, 29252, 29253, 29254, 29257, 29258,
            29259, 29262, 29263, 29264, 29265, 29267, 29268,
            29269, 29271, 29272, 29274, 29276, 29278, 29280,
            29283, 29284, 29285, 29288, 29290, 29291, 29292,
            29293, 29296, 29297, 29299, 29300, 29302, 29303,
            29304, 29307, 29308, 29309, 29314, 29315, 29317,
            29318, 29319, 29320, 29321, 29324, 29326, 29328,
            29329, 29331, 29332, 29333, 29334, 29335, 29336,
            29337, 29338, 29339, 29340, 29341, 29342, 29344,
            29345, 29346, 29347, 29348, 29349, 29350, 29351,
            29352, 29353, 29354, 29355, 29358, 29361, 29362,
            29363, 29365, 29370, 29371, 29372, 29373, 29374,
            29375, 29376, 29381, 29382, 29383, 29385, 29386,
            29387, 29388, 29391, 29393, 29395, 29396, 29397,
            29398, 29400, 29402, 29403, 58566, 58567, 58568,
            58569, 58570, 58571, 58572, 58573, 58574, 58575,
            58576, 58577, 58578, 58579, 58580, 58581, 58582,
            58583, 58584, 58585, 58586, 58587, 58588, 58589,
            58590, 58591, 58592, 58593, 58594, 58595, 58596,
            58597, 58598, 58599, 58600, 58601, 58602, 58603,
            58604, 58605, 58606, 58607, 58608, 58609, 58610,
            58611, 58612, 58613, 58614, 58615, 58616, 58617,
            58618, 58619, 58620, 58621, 58622, 58623, 58624,
            58625, 58626, 58627, 58628, 58629, 58630, 58631,
            58632, 58633, 58634, 58635, 58636, 58637, 58638,
            58639, 58640, 58641, 58642, 58643, 58644, 58645,
            58646, 58647, 58648, 58649, 58650, 58651, 58652,
            58653, 58654, 58655, 58656, 58657, 58658, 58659,
            58660, 58661, 12288, 12289, 12290, 183, 713, 711,
            168, 12291, 12293, 8212, 65374, 8214, 8230, 8216,
            8217, 8220, 8221, 12308, 12309, 12296, 12297, 12298,
            12299, 12300, 12301, 12302, 12303, 12310, 12311,
            12304, 12305, 177, 215, 247, 8758, 8743, 8744, 8721,
            8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741,
            8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776,
            8765, 8733, 8800, 8814, 8815, 8804, 8805, 8734,
            8757, 8756, 9794, 9792, 176, 8242, 8243, 8451,
            65284, 164, 65504, 65505, 8240, 167, 8470, 9734,
            9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632,
            9651, 9650, 8251, 8594, 8592, 8593, 8595, 12307,
            58662, 58663, 58664, 58665, 58666, 58667, 58668,
            58669, 58670, 58671, 58672, 58673, 58674, 58675,
            58676, 58677, 58678, 58679, 58680, 58681, 58682,
            58683, 58684, 58685, 58686, 58687, 58688, 58689,
            58690, 58691, 58692, 58693, 58694, 58695, 58696,
            58697, 58698, 58699, 58700, 58701, 58702, 58703,
            58704, 58705, 58706, 58707, 58708, 58709, 58710,
            58711, 58712, 58713, 58714, 58715, 58716, 58717,
            58718, 58719, 58720, 58721, 58722, 58723, 58724,
            58725, 58726, 58727, 58728, 58729, 58730, 58731,
            58732, 58733, 58734, 58735, 58736, 58737, 58738,
            58739, 58740, 58741, 58742, 58743, 58744, 58745,
            58746, 58747, 58748, 58749, 58750, 58751, 58752,
            58753, 58754, 58755, 58756, 58757, 8560, 8561, 8562,
            8563, 8564, 8565, 8566, 8567, 8568, 8569, 59238,
            59239, 59240, 59241, 59242, 59243, 9352, 9353, 9354,
            9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362,
            9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370,
            9371, 9332, 9333, 9334, 9335, 9336, 9337, 9338,
            9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346,
            9347, 9348, 9349, 9350, 9351, 9312, 9313, 9314,
            9315, 9316, 9317, 9318, 9319, 9320, 9321, 8364,
            59245, 12832, 12833, 12834, 12835, 12836, 12837,
            12838, 12839, 12840, 12841, 59246, 59247, 8544,
            8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552,
            8553, 8554, 8555, 59248, 59249, 58758, 58759, 58760,
            58761, 58762, 58763, 58764, 58765, 58766, 58767,
            58768, 58769, 58770, 58771, 58772, 58773, 58774,
            58775, 58776, 58777, 58778, 58779, 58780, 58781,
            58782, 58783, 58784, 58785, 58786, 58787, 58788,
            58789, 58790, 58791, 58792, 58793, 58794, 58795,
            58796, 58797, 58798, 58799, 58800, 58801, 58802,
            58803, 58804, 58805, 58806, 58807, 58808, 58809,
            58810, 58811, 58812, 58813, 58814, 58815, 58816,
            58817, 58818, 58819, 58820, 58821, 58822, 58823,
            58824, 58825, 58826, 58827, 58828, 58829, 58830,
            58831, 58832, 58833, 58834, 58835, 58836, 58837,
            58838, 58839, 58840, 58841, 58842, 58843, 58844,
            58845, 58846, 58847, 58848, 58849, 58850, 58851,
            58852, 12288, 65281, 65282, 65283, 65509, 65285,
            65286, 65287, 65288, 65289, 65290, 65291, 65292,
            65293, 65294, 65295, 65296, 65297, 65298, 65299,
            65300, 65301, 65302, 65303, 65304, 65305, 65306,
            65307, 65308, 65309, 65310, 65311, 65312, 65313,
            65314, 65315, 65316, 65317, 65318, 65319, 65320,
            65321, 65322, 65323, 65324, 65325, 65326, 65327,
            65328, 65329, 65330, 65331, 65332, 65333, 65334,
            65335, 65336, 65337, 65338, 65339, 65340, 65341,
            65342, 65343, 65344, 65345, 65346, 65347, 65348,
            65349, 65350, 65351, 65352, 65353, 65354, 65355,
            65356, 65357, 65358, 65359, 65360, 65361, 65362,
            65363, 65364, 65365, 65366, 65367, 65368, 65369,
            65370, 65371, 65372, 65373, 65507, 58854, 58855,
            58856, 58857, 58858, 58859, 58860, 58861, 58862,
            58863, 58864, 58865, 58866, 58867, 58868, 58869,
            58870, 58871, 58872, 58873, 58874, 58875, 58876,
            58877, 58878, 58879, 58880, 58881, 58882, 58883,
            58884, 58885, 58886, 58887, 58888, 58889, 58890,
            58891, 58892, 58893, 58894, 58895, 58896, 58897,
            58898, 58899, 58900, 58901, 58902, 58903, 58904,
            58905, 58906, 58907, 58908, 58909, 58910, 58911,
            58912, 58913, 58914, 58915, 58916, 58917, 58918,
            58919, 58920, 58921, 58922, 58923, 58924, 58925,
            58926, 58927, 58928, 58929, 58930, 58931, 58932,
            58933, 58934, 58935, 58936, 58937, 58938, 58939,
            58940, 58941, 58942, 58943, 58944, 58945, 58946,
            58947, 58948, 58949, 12353, 12354, 12355, 12356,
            12357, 12358, 12359, 12360, 12361, 12362, 12363,
            12364, 12365, 12366, 12367, 12368, 12369, 12370,
            12371, 12372, 12373, 12374, 12375, 12376, 12377,
            12378, 12379, 12380, 12381, 12382, 12383, 12384,
            12385, 12386, 12387, 12388, 12389, 12390, 12391,
            12392, 12393, 12394, 12395, 12396, 12397, 12398,
            12399, 12400, 12401, 12402, 12403, 12404, 12405,
            12406, 12407, 12408, 12409, 12410, 12411, 12412,
            12413, 12414, 12415, 12416, 12417, 12418, 12419,
            12420, 12421, 12422, 12423, 12424, 12425, 12426,
            12427, 12428, 12429, 12430, 12431, 12432, 12433,
            12434, 12435, 59250, 59251, 59252, 59253, 59254,
            59255, 59256, 59257, 59258, 59259, 59260, 58950,
            58951, 58952, 58953, 58954, 58955, 58956, 58957,
            58958, 58959, 58960, 58961, 58962, 58963, 58964,
            58965, 58966, 58967, 58968, 58969, 58970, 58971,
            58972, 58973, 58974, 58975, 58976, 58977, 58978,
            58979, 58980, 58981, 58982, 58983, 58984, 58985,
            58986, 58987, 58988, 58989, 58990, 58991, 58992,
            58993, 58994, 58995, 58996, 58997, 58998, 58999,
            59000, 59001, 59002, 59003, 59004, 59005, 59006,
            59007, 59008, 59009, 59010, 59011, 59012, 59013,
            59014, 59015, 59016, 59017, 59018, 59019, 59020,
            59021, 59022, 59023, 59024, 59025, 59026, 59027,
            59028, 59029, 59030, 59031, 59032, 59033, 59034,
            59035, 59036, 59037, 59038, 59039, 59040, 59041,
            59042, 59043, 59044, 59045, 12449, 12450, 12451,
            12452, 12453, 12454, 12455, 12456, 12457, 12458,
            12459, 12460, 12461, 12462, 12463, 12464, 12465,
            12466, 12467, 12468, 12469, 12470, 12471, 12472,
            12473, 12474, 12475, 12476, 12477, 12478, 12479,
            12480, 12481, 12482, 12483, 12484, 12485, 12486,
            12487, 12488, 12489, 12490, 12491, 12492, 12493,
            12494, 12495, 12496, 12497, 12498, 12499, 12500,
            12501, 12502, 12503, 12504, 12505, 12506, 12507,
            12508, 12509, 12510, 12511, 12512, 12513, 12514,
            12515, 12516, 12517, 12518, 12519, 12520, 12521,
            12522, 12523, 12524, 12525, 12526, 12527, 12528,
            12529, 12530, 12531, 12532, 12533, 12534, 59261,
            59262, 59263, 59264, 59265, 59266, 59267, 59268,
            59046, 59047, 59048, 59049, 59050, 59051, 59052,
            59053, 59054, 59055, 59056, 59057, 59058, 59059,
            59060, 59061, 59062, 59063, 59064, 59065, 59066,
            59067, 59068, 59069, 59070, 59071, 59072, 59073,
            59074, 59075, 59076, 59077, 59078, 59079, 59080,
            59081, 59082, 59083, 59084, 59085, 59086, 59087,
            59088, 59089, 59090, 59091, 59092, 59093, 59094,
            59095, 59096, 59097, 59098, 59099, 59100, 59101,
            59102, 59103, 59104, 59105, 59106, 59107, 59108,
            59109, 59110, 59111, 59112, 59113, 59114, 59115,
            59116, 59117, 59118, 59119, 59120, 59121, 59122,
            59123, 59124, 59125, 59126, 59127, 59128, 59129,
            59130, 59131, 59132, 59133, 59134, 59135, 59136,
            59137, 59138, 59139, 59140, 59141, 913, 914, 915,
            916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
            926, 927, 928, 929, 931, 932, 933, 934, 935, 936,
            937, 59269, 59270, 59271, 59272, 59273, 59274,
            59275, 59276, 945, 946, 947, 948, 949, 950, 951,
            952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
            963, 964, 965, 966, 967, 968, 969, 59277, 59278,
            59279, 59280, 59281, 59282, 59283, 65077, 65078,
            65081, 65082, 65087, 65088, 65085, 65086, 65089,
            65090, 65091, 65092, 59284, 59285, 65083, 65084,
            65079, 65080, 65073, 59286, 65075, 65076, 59287,
            59288, 59289, 59290, 59291, 59292, 59293, 59294,
            59295, 59142, 59143, 59144, 59145, 59146, 59147,
            59148, 59149, 59150, 59151, 59152, 59153, 59154,
            59155, 59156, 59157, 59158, 59159, 59160, 59161,
            59162, 59163, 59164, 59165, 59166, 59167, 59168,
            59169, 59170, 59171, 59172, 59173, 59174, 59175,
            59176, 59177, 59178, 59179, 59180, 59181, 59182,
            59183, 59184, 59185, 59186, 59187, 59188, 59189,
            59190, 59191, 59192, 59193, 59194, 59195, 59196,
            59197, 59198, 59199, 59200, 59201, 59202, 59203,
            59204, 59205, 59206, 59207, 59208, 59209, 59210,
            59211, 59212, 59213, 59214, 59215, 59216, 59217,
            59218, 59219, 59220, 59221, 59222, 59223, 59224,
            59225, 59226, 59227, 59228, 59229, 59230, 59231,
            59232, 59233, 59234, 59235, 59236, 59237, 1040,
            1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            59296, 59297, 59298, 59299, 59300, 59301, 59302,
            59303, 59304, 59305, 59306, 59307, 59308, 59309,
            59310, 1072, 1073, 1074, 1075, 1076, 1077, 1105,
            1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
            1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
            1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
            1102, 1103, 59311, 59312, 59313, 59314, 59315,
            59316, 59317, 59318, 59319, 59320, 59321, 59322,
            59323, 714, 715, 729, 8211, 8213, 8229, 8245, 8453,
            8457, 8598, 8599, 8600, 8601, 8725, 8735, 8739,
            8786, 8806, 8807, 8895, 9552, 9553, 9554, 9555,
            9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563,
            9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571,
            9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579,
            9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587,
            9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608,
            9609, 9610, 9611, 9612, 9613, 9614, 9615, 9619,
            9620, 9621, 9660, 9661, 9698, 9699, 9700, 9701,
            9737, 8853, 12306, 12317, 12318, 59324, 59325,
            59326, 59327, 59328, 59329, 59330, 59331, 59332,
            59333, 59334, 257, 225, 462, 224, 275, 233, 283,
            232, 299, 237, 464, 236, 333, 243, 466, 242, 363,
            250, 468, 249, 470, 472, 474, 476, 252, 234, 593,
            59335, 324, 328, 505, 609, 59337, 59338, 59339,
            59340, 12549, 12550, 12551, 12552, 12553, 12554,
            12555, 12556, 12557, 12558, 12559, 12560, 12561,
            12562, 12563, 12564, 12565, 12566, 12567, 12568,
            12569, 12570, 12571, 12572, 12573, 12574, 12575,
            12576, 12577, 12578, 12579, 12580, 12581, 12582,
            12583, 12584, 12585, 59341, 59342, 59343, 59344,
            59345, 59346, 59347, 59348, 59349, 59350, 59351,
            59352, 59353, 59354, 59355, 59356, 59357, 59358,
            59359, 59360, 59361, 12321, 12322, 12323, 12324,
            12325, 12326, 12327, 12328, 12329, 12963, 13198,
            13199, 13212, 13213, 13214, 13217, 13252, 13262,
            13265, 13266, 13269, 65072, 65506, 65508, 59362,
            8481, 12849, 59363, 8208, 59364, 59365, 59366,
            12540, 12443, 12444, 12541, 12542, 12294, 12445,
            12446, 65097, 65098, 65099, 65100, 65101, 65102,
            65103, 65104, 65105, 65106, 65108, 65109, 65110,
            65111, 65113, 65114, 65115, 65116, 65117, 65118,
            65119, 65120, 65121, 65122, 65123, 65124, 65125,
            65126, 65128, 65129, 65130, 65131, 12350, 12272,
            12273, 12274, 12275, 12276, 12277, 12278, 12279,
            12280, 12281, 12282, 12283, 12295, 59380, 59381,
            59382, 59383, 59384, 59385, 59386, 59387, 59388,
            59389, 59390, 59391, 59392, 9472, 9473, 9474, 9475,
            9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483,
            9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491,
            9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499,
            9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507,
            9508, 9509, 9510, 9511, 9512, 9513, 9514, 9515,
            9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523,
            9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531,
            9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539,
            9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547,
            59393, 59394, 59395, 59396, 59397, 59398, 59399,
            59400, 59401, 59402, 59403, 59404, 59405, 59406,
            59407, 29404, 29405, 29407, 29410, 29411, 29412,
            29413, 29414, 29415, 29418, 29419, 29429, 29430,
            29433, 29437, 29438, 29439, 29440, 29442, 29444,
            29445, 29446, 29447, 29448, 29449, 29451, 29452,
            29453, 29455, 29456, 29457, 29458, 29460, 29464,
            29465, 29466, 29471, 29472, 29475, 29476, 29478,
            29479, 29480, 29485, 29487, 29488, 29490, 29491,
            29493, 29494, 29498, 29499, 29500, 29501, 29504,
            29505, 29506, 29507, 29508, 29509, 29510, 29511,
            29512, 29513, 29514, 29515, 29516, 29518, 29519,
            29521, 29523, 29524, 29525, 29526, 29528, 29529,
            29530, 29531, 29532, 29533, 29534, 29535, 29537,
            29538, 29539, 29540, 29541, 29542, 29543, 29544,
            29545, 29546, 29547, 29550, 29552, 29553, 57344,
            57345, 57346, 57347, 57348, 57349, 57350, 57351,
            57352, 57353, 57354, 57355, 57356, 57357, 57358,
            57359, 57360, 57361, 57362, 57363, 57364, 57365,
            57366, 57367, 57368, 57369, 57370, 57371, 57372,
            57373, 57374, 57375, 57376, 57377, 57378, 57379,
            57380, 57381, 57382, 57383, 57384, 57385, 57386,
            57387, 57388, 57389, 57390, 57391, 57392, 57393,
            57394, 57395, 57396, 57397, 57398, 57399, 57400,
            57401, 57402, 57403, 57404, 57405, 57406, 57407,
            57408, 57409, 57410, 57411, 57412, 57413, 57414,
            57415, 57416, 57417, 57418, 57419, 57420, 57421,
            57422, 57423, 57424, 57425, 57426, 57427, 57428,
            57429, 57430, 57431, 57432, 57433, 57434, 57435,
            57436, 57437, 29554, 29555, 29556, 29557, 29558,
            29559, 29560, 29561, 29562, 29563, 29564, 29565,
            29567, 29568, 29569, 29570, 29571, 29573, 29574,
            29576, 29578, 29580, 29581, 29583, 29584, 29586,
            29587, 29588, 29589, 29591, 29592, 29593, 29594,
            29596, 29597, 29598, 29600, 29601, 29603, 29604,
            29605, 29606, 29607, 29608, 29610, 29612, 29613,
            29617, 29620, 29621, 29622, 29624, 29625, 29628,
            29629, 29630, 29631, 29633, 29635, 29636, 29637,
            29638, 29639, 29643, 29644, 29646, 29650, 29651,
            29652, 29653, 29654, 29655, 29656, 29658, 29659,
            29660, 29661, 29663, 29665, 29666, 29667, 29668,
            29670, 29672, 29674, 29675, 29676, 29678, 29679,
            29680, 29681, 29683, 29684, 29685, 29686, 29687,
            57438, 57439, 57440, 57441, 57442, 57443, 57444,
            57445, 57446, 57447, 57448, 57449, 57450, 57451,
            57452, 57453, 57454, 57455, 57456, 57457, 57458,
            57459, 57460, 57461, 57462, 57463, 57464, 57465,
            57466, 57467, 57468, 57469, 57470, 57471, 57472,
            57473, 57474, 57475, 57476, 57477, 57478, 57479,
            57480, 57481, 57482, 57483, 57484, 57485, 57486,
            57487, 57488, 57489, 57490, 57491, 57492, 57493,
            57494, 57495, 57496, 57497, 57498, 57499, 57500,
            57501, 57502, 57503, 57504, 57505, 57506, 57507,
            57508, 57509, 57510, 57511, 57512, 57513, 57514,
            57515, 57516, 57517, 57518, 57519, 57520, 57521,
            57522, 57523, 57524, 57525, 57526, 57527, 57528,
            57529, 57530, 57531, 29688, 29689, 29690, 29691,
            29692, 29693, 29694, 29695, 29696, 29697, 29698,
            29700, 29703, 29704, 29707, 29708, 29709, 29710,
            29713, 29714, 29715, 29716, 29717, 29718, 29719,
            29720, 29721, 29724, 29725, 29726, 29727, 29728,
            29729, 29731, 29732, 29735, 29737, 29739, 29741,
            29743, 29745, 29746, 29751, 29752, 29753, 29754,
            29755, 29757, 29758, 29759, 29760, 29762, 29763,
            29764, 29765, 29766, 29767, 29768, 29769, 29770,
            29771, 29772, 29773, 29774, 29775, 29776, 29777,
            29778, 29779, 29780, 29782, 29784, 29789, 29792,
            29793, 29794, 29795, 29796, 29797, 29798, 29799,
            29800, 29801, 29802, 29803, 29804, 29806, 29807,
            29809, 29810, 29811, 29812, 29813, 29816, 29817,
            29818, 57532, 57533, 57534, 57535, 57536, 57537,
            57538, 57539, 57540, 57541, 57542, 57543, 57544,
            57545, 57546, 57547, 57548, 57549, 57550, 57551,
            57552, 57553, 57554, 57555, 57556, 57557, 57558,
            57559, 57560, 57561, 57562, 57563, 57564, 57565,
            57566, 57567, 57568, 57569, 57570, 57571, 57572,
            57573, 57574, 57575, 57576, 57577, 57578, 57579,
            57580, 57581, 57582, 57583, 57584, 57585, 57586,
            57587, 57588, 57589, 57590, 57591, 57592, 57593,
            57594, 57595, 57596, 57597, 57598, 57599, 57600,
            57601, 57602, 57603, 57604, 57605, 57606, 57607,
            57608, 57609, 57610, 57611, 57612, 57613, 57614,
            57615, 57616, 57617, 57618, 57619, 57620, 57621,
            57622, 57623, 57624, 57625, 29819, 29820, 29821,
            29823, 29826, 29828, 29829, 29830, 29832, 29833,
            29834, 29836, 29837, 29839, 29841, 29842, 29843,
            29844, 29845, 29846, 29847, 29848, 29849, 29850,
            29851, 29853, 29855, 29856, 29857, 29858, 29859,
            29860, 29861, 29862, 29866, 29867, 29868, 29869,
            29870, 29871, 29872, 29873, 29874, 29875, 29876,
            29877, 29878, 29879, 29880, 29881, 29883, 29884,
            29885, 29886, 29887, 29888, 29889, 29890, 29891,
            29892, 29893, 29894, 29895, 29896, 29897, 29898,
            29899, 29900, 29901, 29902, 29903, 29904, 29905,
            29907, 29908, 29909, 29910, 29911, 29912, 29913,
            29914, 29915, 29917, 29919, 29921, 29925, 29927,
            29928, 29929, 29930, 29931, 29932, 29933, 29936,
            29937, 29938, 57626, 57627, 57628, 57629, 57630,
            57631, 57632, 57633, 57634, 57635, 57636, 57637,
            57638, 57639, 57640, 57641, 57642, 57643, 57644,
            57645, 57646, 57647, 57648, 57649, 57650, 57651,
            57652, 57653, 57654, 57655, 57656, 57657, 57658,
            57659, 57660, 57661, 57662, 57663, 57664, 57665,
            57666, 57667, 57668, 57669, 57670, 57671, 57672,
            57673, 57674, 57675, 57676, 57677, 57678, 57679,
            57680, 57681, 57682, 57683, 57684, 57685, 57686,
            57687, 57688, 57689, 57690, 57691, 57692, 57693,
            57694, 57695, 57696, 57697, 57698, 57699, 57700,
            57701, 57702, 57703, 57704, 57705, 57706, 57707,
            57708, 57709, 57710, 57711, 57712, 57713, 57714,
            57715, 57716, 57717, 57718, 57719, 29939, 29941,
            29944, 29945, 29946, 29947, 29948, 29949, 29950,
            29952, 29953, 29954, 29955, 29957, 29958, 29959,
            29960, 29961, 29962, 29963, 29964, 29966, 29968,
            29970, 29972, 29973, 29974, 29975, 29979, 29981,
            29982, 29984, 29985, 29986, 29987, 29988, 29990,
            29991, 29994, 29998, 30004, 30006, 30009, 30012,
            30013, 30015, 30017, 30018, 30019, 30020, 30022,
            30023, 30025, 30026, 30029, 30032, 30033, 30034,
            30035, 30037, 30038, 30039, 30040, 30045, 30046,
            30047, 30048, 30049, 30050, 30051, 30052, 30055,
            30056, 30057, 30059, 30060, 30061, 30062, 30063,
            30064, 30065, 30067, 30069, 30070, 30071, 30074,
            30075, 30076, 30077, 30078, 30080, 30081, 30082,
            30084, 30085, 30087, 57720, 57721, 57722, 57723,
            57724, 57725, 57726, 57727, 57728, 57729, 57730,
            57731, 57732, 57733, 57734, 57735, 57736, 57737,
            57738, 57739, 57740, 57741, 57742, 57743, 57744,
            57745, 57746, 57747, 57748, 57749, 57750, 57751,
            57752, 57753, 57754, 57755, 57756, 57757, 57758,
            57759, 57760, 57761, 57762, 57763, 57764, 57765,
            57766, 57767, 57768, 57769, 57770, 57771, 57772,
            57773, 57774, 57775, 57776, 57777, 57778, 57779,
            57780, 57781, 57782, 57783, 57784, 57785, 57786,
            57787, 57788, 57789, 57790, 57791, 57792, 57793,
            57794, 57795, 57796, 57797, 57798, 57799, 57800,
            57801, 57802, 57803, 57804, 57805, 57806, 57807,
            57808, 57809, 57810, 57811, 57812, 57813, 30088,
            30089, 30090, 30092, 30093, 30094, 30096, 30099,
            30101, 30104, 30107, 30108, 30110, 30114, 30118,
            30119, 30120, 30121, 30122, 30125, 30134, 30135,
            30138, 30139, 30143, 30144, 30145, 30150, 30155,
            30156, 30158, 30159, 30160, 30161, 30163, 30167,
            30169, 30170, 30172, 30173, 30175, 30176, 30177,
            30181, 30185, 30188, 30189, 30190, 30191, 30194,
            30195, 30197, 30198, 30199, 30200, 30202, 30203,
            30205, 30206, 30210, 30212, 30214, 30215, 30216,
            30217, 30219, 30221, 30222, 30223, 30225, 30226,
            30227, 30228, 30230, 30234, 30236, 30237, 30238,
            30241, 30243, 30247, 30248, 30252, 30254, 30255,
            30257, 30258, 30262, 30263, 30265, 30266, 30267,
            30269, 30273, 30274, 30276, 57814, 57815, 57816,
            57817, 57818, 57819, 57820, 57821, 57822, 57823,
            57824, 57825, 57826, 57827, 57828, 57829, 57830,
            57831, 57832, 57833, 57834, 57835, 57836, 57837,
            57838, 57839, 57840, 57841, 57842, 57843, 57844,
            57845, 57846, 57847, 57848, 57849, 57850, 57851,
            57852, 57853, 57854, 57855, 57856, 57857, 57858,
            57859, 57860, 57861, 57862, 57863, 57864, 57865,
            57866, 57867, 57868, 57869, 57870, 57871, 57872,
            57873, 57874, 57875, 57876, 57877, 57878, 57879,
            57880, 57881, 57882, 57883, 57884, 57885, 57886,
            57887, 57888, 57889, 57890, 57891, 57892, 57893,
            57894, 57895, 57896, 57897, 57898, 57899, 57900,
            57901, 57902, 57903, 57904, 57905, 57906, 57907,
            30277, 30278, 30279, 30280, 30281, 30282, 30283,
            30286, 30287, 30288, 30289, 30290, 30291, 30293,
            30295, 30296, 30297, 30298, 30299, 30301, 30303,
            30304, 30305, 30306, 30308, 30309, 30310, 30311,
            30312, 30313, 30314, 30316, 30317, 30318, 30320,
            30321, 30322, 30323, 30324, 30325, 30326, 30327,
            30329, 30330, 30332, 30335, 30336, 30337, 30339,
            30341, 30345, 30346, 30348, 30349, 30351, 30352,
            30354, 30356, 30357, 30359, 30360, 30362, 30363,
            30364, 30365, 30366, 30367, 30368, 30369, 30370,
            30371, 30373, 30374, 30375, 30376, 30377, 30378,
            30379, 30380, 30381, 30383, 30384, 30387, 30389,
            30390, 30391, 30392, 30393, 30394, 30395, 30396,
            30397, 30398, 30400, 30401, 30403, 21834, 38463,
            22467, 25384, 21710, 21769, 21696, 30353, 30284,
            34108, 30702, 33406, 30861, 29233, 38552, 38797,
            27688, 23433, 20474, 25353, 26263, 23736, 33018,
            26696, 32942, 26114, 30414, 20985, 25942, 29100,
            32753, 34948, 20658, 22885, 25034, 28595, 33453,
            25420, 25170, 21485, 21543, 31494, 20843, 30116,
            24052, 25300, 36299, 38774, 25226, 32793, 22365,
            38712, 32610, 29240, 30333, 26575, 30334, 25670,
            20336, 36133, 25308, 31255, 26001, 29677, 25644,
            25203, 33324, 39041, 26495, 29256, 25198, 25292,
            20276, 29923, 21322, 21150, 32458, 37030, 24110,
            26758, 27036, 33152, 32465, 26834, 30917, 34444,
            38225, 20621, 35876, 33502, 32990, 21253, 35090,
            21093, 30404, 30407, 30409, 30411, 30412, 30419,
            30421, 30425, 30426, 30428, 30429, 30430, 30432,
            30433, 30434, 30435, 30436, 30438, 30439, 30440,
            30441, 30442, 30443, 30444, 30445, 30448, 30451,
            30453, 30454, 30455, 30458, 30459, 30461, 30463,
            30464, 30466, 30467, 30469, 30470, 30474, 30476,
            30478, 30479, 30480, 30481, 30482, 30483, 30484,
            30485, 30486, 30487, 30488, 30491, 30492, 30493,
            30494, 30497, 30499, 30500, 30501, 30503, 30506,
            30507, 30508, 30510, 30512, 30513, 30514, 30515,
            30516, 30521, 30523, 30525, 30526, 30527, 30530,
            30532, 30533, 30534, 30536, 30537, 30538, 30539,
            30540, 30541, 30542, 30543, 30546, 30547, 30548,
            30549, 30550, 30551, 30552, 30553, 30556, 34180,
            38649, 20445, 22561, 39281, 23453, 25265, 25253,
            26292, 35961, 40077, 29190, 26479, 30865, 24754,
            21329, 21271, 36744, 32972, 36125, 38049, 20493,
            29384, 22791, 24811, 28953, 34987, 22868, 33519,
            26412, 31528, 23849, 32503, 29997, 27893, 36454,
            36856, 36924, 40763, 27604, 37145, 31508, 24444,
            30887, 34006, 34109, 27605, 27609, 27606, 24065,
            24199, 30201, 38381, 25949, 24330, 24517, 36767,
            22721, 33218, 36991, 38491, 38829, 36793, 32534,
            36140, 25153, 20415, 21464, 21342, 36776, 36777,
            36779, 36941, 26631, 24426, 33176, 34920, 40150,
            24971, 21035, 30250, 24428, 25996, 28626, 28392,
            23486, 25672, 20853, 20912, 26564, 19993, 31177,
            39292, 28851, 30557, 30558, 30559, 30560, 30564,
            30567, 30569, 30570, 30573, 30574, 30575, 30576,
            30577, 30578, 30579, 30580, 30581, 30582, 30583,
            30584, 30586, 30587, 30588, 30593, 30594, 30595,
            30598, 30599, 30600, 30601, 30602, 30603, 30607,
            30608, 30611, 30612, 30613, 30614, 30615, 30616,
            30617, 30618, 30619, 30620, 30621, 30622, 30625,
            30627, 30628, 30630, 30632, 30635, 30637, 30638,
            30639, 30641, 30642, 30644, 30646, 30647, 30648,
            30649, 30650, 30652, 30654, 30656, 30657, 30658,
            30659, 30660, 30661, 30662, 30663, 30664, 30665,
            30666, 30667, 30668, 30670, 30671, 30672, 30673,
            30674, 30675, 30676, 30677, 30678, 30680, 30681,
            30682, 30685, 30686, 30687, 30688, 30689, 30692,
            30149, 24182, 29627, 33760, 25773, 25320, 38069,
            27874, 21338, 21187, 25615, 38082, 31636, 20271,
            24091, 33334, 33046, 33162, 28196, 27850, 39539,
            25429, 21340, 21754, 34917, 22496, 19981, 24067,
            27493, 31807, 37096, 24598, 25830, 29468, 35009,
            26448, 25165, 36130, 30572, 36393, 37319, 24425,
            33756, 34081, 39184, 21442, 34453, 27531, 24813,
            24808, 28799, 33485, 33329, 20179, 27815, 34255,
            25805, 31961, 27133, 26361, 33609, 21397, 31574,
            20391, 20876, 27979, 23618, 36461, 25554, 21449,
            33580, 33590, 26597, 30900, 25661, 23519, 23700,
            24046, 35815, 25286, 26612, 35962, 25600, 25530,
            34633, 39307, 35863, 32544, 38130, 20135, 38416,
            39076, 26124, 29462, 30694, 30696, 30698, 30703,
            30704, 30705, 30706, 30708, 30709, 30711, 30713,
            30714, 30715, 30716, 30723, 30724, 30725, 30726,
            30727, 30728, 30730, 30731, 30734, 30735, 30736,
            30739, 30741, 30745, 30747, 30750, 30752, 30753,
            30754, 30756, 30760, 30762, 30763, 30766, 30767,
            30769, 30770, 30771, 30773, 30774, 30781, 30783,
            30785, 30786, 30787, 30788, 30790, 30792, 30793,
            30794, 30795, 30797, 30799, 30801, 30803, 30804,
            30808, 30809, 30810, 30811, 30812, 30814, 30815,
            30816, 30817, 30818, 30819, 30820, 30821, 30822,
            30823, 30824, 30825, 30831, 30832, 30833, 30834,
            30835, 30836, 30837, 30838, 30840, 30841, 30842,
            30843, 30845, 30846, 30847, 30848, 30849, 30850,
            30851, 22330, 23581, 24120, 38271, 20607, 32928,
            21378, 25950, 30021, 21809, 20513, 36229, 25220,
            38046, 26397, 22066, 28526, 24034, 21557, 28818,
            36710, 25199, 25764, 25507, 24443, 28552, 37108,
            33251, 36784, 23576, 26216, 24561, 27785, 38472,
            36225, 34924, 25745, 31216, 22478, 27225, 25104,
            21576, 20056, 31243, 24809, 28548, 35802, 25215,
            36894, 39563, 31204, 21507, 30196, 25345, 21273,
            27744, 36831, 24347, 39536, 32827, 40831, 20360,
            23610, 36196, 32709, 26021, 28861, 20805, 20914,
            34411, 23815, 23456, 25277, 37228, 30068, 36364,
            31264, 24833, 31609, 20167, 32504, 30597, 19985,
            33261, 21021, 20986, 27249, 21416, 36487, 38148,
            38607, 28353, 38500, 26970, 30852, 30853, 30854,
            30856, 30858, 30859, 30863, 30864, 30866, 30868,
            30869, 30870, 30873, 30877, 30878, 30880, 30882,
            30884, 30886, 30888, 30889, 30890, 30891, 30892,
            30893, 30894, 30895, 30901, 30902, 30903, 30904,
            30906, 30907, 30908, 30909, 30911, 30912, 30914,
            30915, 30916, 30918, 30919, 30920, 30924, 30925,
            30926, 30927, 30929, 30930, 30931, 30934, 30935,
            30936, 30938, 30939, 30940, 30941, 30942, 30943,
            30944, 30945, 30946, 30947, 30948, 30949, 30950,
            30951, 30953, 30954, 30955, 30957, 30958, 30959,
            30960, 30961, 30963, 30965, 30966, 30968, 30969,
            30971, 30972, 30973, 30974, 30975, 30976, 30978,
            30979, 30980, 30982, 30983, 30984, 30985, 30986,
            30987, 30988, 30784, 20648, 30679, 25616, 35302,
            22788, 25571, 24029, 31359, 26941, 20256, 33337,
            21912, 20018, 30126, 31383, 24162, 24202, 38383,
            21019, 21561, 28810, 25462, 38180, 22402, 26149,
            26943, 37255, 21767, 28147, 32431, 34850, 25139,
            32496, 30133, 33576, 30913, 38604, 36766, 24904,
            29943, 35789, 27492, 21050, 36176, 27425, 32874,
            33905, 22257, 21254, 20174, 19995, 20945, 31895,
            37259, 31751, 20419, 36479, 31713, 31388, 25703,
            23828, 20652, 33030, 30209, 31929, 28140, 32736,
            26449, 23384, 23544, 30923, 25774, 25619, 25514,
            25387, 38169, 25645, 36798, 31572, 30249, 25171,
            22823, 21574, 27513, 20643, 25140, 24102, 27526,
            20195, 36151, 34955, 24453, 36910, 30989, 30990,
            30991, 30992, 30993, 30994, 30996, 30997, 30998,
            30999, 31000, 31001, 31002, 31003, 31004, 31005,
            31007, 31008, 31009, 31010, 31011, 31013, 31014,
            31015, 31016, 31017, 31018, 31019, 31020, 31021,
            31022, 31023, 31024, 31025, 31026, 31027, 31029,
            31030, 31031, 31032, 31033, 31037, 31039, 31042,
            31043, 31044, 31045, 31047, 31050, 31051, 31052,
            31053, 31054, 31055, 31056, 31057, 31058, 31060,
            31061, 31064, 31065, 31073, 31075, 31076, 31078,
            31081, 31082, 31083, 31084, 31086, 31088, 31089,
            31090, 31091, 31092, 31093, 31094, 31097, 31099,
            31100, 31101, 31102, 31103, 31106, 31107, 31110,
            31111, 31112, 31113, 31115, 31116, 31117, 31118,
            31120, 31121, 31122, 24608, 32829, 25285, 20025,
            21333, 37112, 25528, 32966, 26086, 27694, 20294,
            24814, 28129, 35806, 24377, 34507, 24403, 25377,
            20826, 33633, 26723, 20992, 25443, 36424, 20498,
            23707, 31095, 23548, 21040, 31291, 24764, 36947,
            30423, 24503, 24471, 30340, 36460, 28783, 30331,
            31561, 30634, 20979, 37011, 22564, 20302, 28404,
            36842, 25932, 31515, 29380, 28068, 32735, 23265,
            25269, 24213, 22320, 33922, 31532, 24093, 24351,
            36882, 32532, 39072, 25474, 28359, 30872, 28857,
            20856, 38747, 22443, 30005, 20291, 30008, 24215,
            24806, 22880, 28096, 27583, 30857, 21500, 38613,
            20939, 20993, 25481, 21514, 38035, 35843, 36300,
            29241, 30879, 34678, 36845, 35853, 21472, 31123,
            31124, 31125, 31126, 31127, 31128, 31129, 31131,
            31132, 31133, 31134, 31135, 31136, 31137, 31138,
            31139, 31140, 31141, 31142, 31144, 31145, 31146,
            31147, 31148, 31149, 31150, 31151, 31152, 31153,
            31154, 31156, 31157, 31158, 31159, 31160, 31164,
            31167, 31170, 31172, 31173, 31175, 31176, 31178,
            31180, 31182, 31183, 31184, 31187, 31188, 31190,
            31191, 31193, 31194, 31195, 31196, 31197, 31198,
            31200, 31201, 31202, 31205, 31208, 31210, 31212,
            31214, 31217, 31218, 31219, 31220, 31221, 31222,
            31223, 31225, 31226, 31228, 31230, 31231, 31233,
            31236, 31237, 31239, 31240, 31241, 31242, 31244,
            31247, 31248, 31249, 31250, 31251, 31253, 31254,
            31256, 31257, 31259, 31260, 19969, 30447, 21486,
            38025, 39030, 40718, 38189, 23450, 35746, 20002,
            19996, 20908, 33891, 25026, 21160, 26635, 20375,
            24683, 20923, 27934, 20828, 25238, 26007, 38497,
            35910, 36887, 30168, 37117, 30563, 27602, 29322,
            29420, 35835, 22581, 30585, 36172, 26460, 38208,
            32922, 24230, 28193, 22930, 31471, 30701, 38203,
            27573, 26029, 32526, 22534, 20817, 38431, 23545,
            22697, 21544, 36466, 25958, 39039, 22244, 38045,
            30462, 36929, 25479, 21702, 22810, 22842, 22427,
            36530, 26421, 36346, 33333, 21057, 24816, 22549,
            34558, 23784, 40517, 20420, 39069, 35769, 23077,
            24694, 21380, 25212, 36943, 37122, 39295, 24681,
            32780, 20799, 32819, 23572, 39285, 27953, 20108,
            31261, 31263, 31265, 31266, 31268, 31269, 31270,
            31271, 31272, 31273, 31274, 31275, 31276, 31277,
            31278, 31279, 31280, 31281, 31282, 31284, 31285,
            31286, 31288, 31290, 31294, 31296, 31297, 31298,
            31299, 31300, 31301, 31303, 31304, 31305, 31306,
            31307, 31308, 31309, 31310, 31311, 31312, 31314,
            31315, 31316, 31317, 31318, 31320, 31321, 31322,
            31323, 31324, 31325, 31326, 31327, 31328, 31329,
            31330, 31331, 31332, 31333, 31334, 31335, 31336,
            31337, 31338, 31339, 31340, 31341, 31342, 31343,
            31345, 31346, 31347, 31349, 31355, 31356, 31357,
            31358, 31362, 31365, 31367, 31369, 31370, 31371,
            31372, 31374, 31375, 31376, 31379, 31380, 31385,
            31386, 31387, 31390, 31393, 31394, 36144, 21457,
            32602, 31567, 20240, 20047, 38400, 27861, 29648,
            34281, 24070, 30058, 32763, 27146, 30718, 38034,
            32321, 20961, 28902, 21453, 36820, 33539, 36137,
            29359, 39277, 27867, 22346, 33459, 26041, 32938,
            25151, 38450, 22952, 20223, 35775, 32442, 25918,
            33778, 38750, 21857, 39134, 32933, 21290, 35837,
            21536, 32954, 24223, 27832, 36153, 33452, 37210,
            21545, 27675, 20998, 32439, 22367, 28954, 27774,
            31881, 22859, 20221, 24575, 24868, 31914, 20016,
            23553, 26539, 34562, 23792, 38155, 39118, 30127,
            28925, 36898, 20911, 32541, 35773, 22857, 20964,
            20315, 21542, 22827, 25975, 32932, 23413, 25206,
            25282, 36752, 24133, 27679, 31526, 20239, 20440,
            26381, 31395, 31396, 31399, 31401, 31402, 31403,
            31406, 31407, 31408, 31409, 31410, 31412, 31413,
            31414, 31415, 31416, 31417, 31418, 31419, 31420,
            31421, 31422, 31424, 31425, 31426, 31427, 31428,
            31429, 31430, 31431, 31432, 31433, 31434, 31436,
            31437, 31438, 31439, 31440, 31441, 31442, 31443,
            31444, 31445, 31447, 31448, 31450, 31451, 31452,
            31453, 31457, 31458, 31460, 31463, 31464, 31465,
            31466, 31467, 31468, 31470, 31472, 31473, 31474,
            31475, 31476, 31477, 31478, 31479, 31480, 31483,
            31484, 31486, 31488, 31489, 31490, 31493, 31495,
            31497, 31500, 31501, 31502, 31504, 31506, 31507,
            31510, 31511, 31512, 31514, 31516, 31517, 31519,
            31521, 31522, 31523, 31527, 31529, 31533, 28014,
            28074, 31119, 34993, 24343, 29995, 25242, 36741,
            20463, 37340, 26023, 33071, 33105, 24220, 33104,
            36212, 21103, 35206, 36171, 22797, 20613, 20184,
            38428, 29238, 33145, 36127, 23500, 35747, 38468,
            22919, 32538, 21648, 22134, 22030, 35813, 25913,
            27010, 38041, 30422, 28297, 24178, 29976, 26438,
            26577, 31487, 32925, 36214, 24863, 31174, 25954,
            36195, 20872, 21018, 38050, 32568, 32923, 32434,
            23703, 28207, 26464, 31705, 30347, 39640, 33167,
            32660, 31957, 25630, 38224, 31295, 21578, 21733,
            27468, 25601, 25096, 40509, 33011, 30105, 21106,
            38761, 33883, 26684, 34532, 38401, 38548, 38124,
            20010, 21508, 32473, 26681, 36319, 32789, 26356,
            24218, 32697, 31535, 31536, 31538, 31540, 31541,
            31542, 31543, 31545, 31547, 31549, 31551, 31552,
            31553, 31554, 31555, 31556, 31558, 31560, 31562,
            31565, 31566, 31571, 31573, 31575, 31577, 31580,
            31582, 31583, 31585, 31587, 31588, 31589, 31590,
            31591, 31592, 31593, 31594, 31595, 31596, 31597,
            31599, 31600, 31603, 31604, 31606, 31608, 31610,
            31612, 31613, 31615, 31617, 31618, 31619, 31620,
            31622, 31623, 31624, 31625, 31626, 31627, 31628,
            31630, 31631, 31633, 31634, 31635, 31638, 31640,
            31641, 31642, 31643, 31646, 31647, 31648, 31651,
            31652, 31653, 31662, 31663, 31664, 31666, 31667,
            31669, 31670, 31671, 31673, 31674, 31675, 31676,
            31677, 31678, 31679, 31680, 31682, 31683, 31684,
            22466, 32831, 26775, 24037, 25915, 21151, 24685,
            40858, 20379, 36524, 20844, 23467, 24339, 24041,
            27742, 25329, 36129, 20849, 38057, 21246, 27807,
            33503, 29399, 22434, 26500, 36141, 22815, 36764,
            33735, 21653, 31629, 20272, 27837, 23396, 22993,
            40723, 21476, 34506, 39592, 35895, 32929, 25925,
            39038, 22266, 38599, 21038, 29916, 21072, 23521,
            25346, 35074, 20054, 25296, 24618, 26874, 20851,
            23448, 20896, 35266, 31649, 39302, 32592, 24815,
            28748, 36143, 20809, 24191, 36891, 29808, 35268,
            22317, 30789, 24402, 40863, 38394, 36712, 39740,
            35809, 30328, 26690, 26588, 36330, 36149, 21053,
            36746, 28378, 26829, 38149, 37101, 22269, 26524,
            35065, 36807, 21704, 31685, 31688, 31689, 31690,
            31691, 31693, 31694, 31695, 31696, 31698, 31700,
            31701, 31702, 31703, 31704, 31707, 31708, 31710,
            31711, 31712, 31714, 31715, 31716, 31719, 31720,
            31721, 31723, 31724, 31725, 31727, 31728, 31730,
            31731, 31732, 31733, 31734, 31736, 31737, 31738,
            31739, 31741, 31743, 31744, 31745, 31746, 31747,
            31748, 31749, 31750, 31752, 31753, 31754, 31757,
            31758, 31760, 31761, 31762, 31763, 31764, 31765,
            31767, 31768, 31769, 31770, 31771, 31772, 31773,
            31774, 31776, 31777, 31778, 31779, 31780, 31781,
            31784, 31785, 31787, 31788, 31789, 31790, 31791,
            31792, 31793, 31794, 31795, 31796, 31797, 31798,
            31799, 31801, 31802, 31803, 31804, 31805, 31806,
            31810, 39608, 23401, 28023, 27686, 20133, 23475,
            39559, 37219, 25000, 37039, 38889, 21547, 28085,
            23506, 20989, 21898, 32597, 32752, 25788, 25421,
            26097, 25022, 24717, 28938, 27735, 27721, 22831,
            26477, 33322, 22741, 22158, 35946, 27627, 37085,
            22909, 32791, 21495, 28009, 21621, 21917, 33655,
            33743, 26680, 31166, 21644, 20309, 21512, 30418,
            35977, 38402, 27827, 28088, 36203, 35088, 40548,
            36154, 22079, 40657, 30165, 24456, 29408, 24680,
            21756, 20136, 27178, 34913, 24658, 36720, 21700,
            28888, 34425, 40511, 27946, 23439, 24344, 32418,
            21897, 20399, 29492, 21564, 21402, 20505, 21518,
            21628, 20046, 24573, 29786, 22774, 33899, 32993,
            34676, 29392, 31946, 28246, 31811, 31812, 31813,
            31814, 31815, 31816, 31817, 31818, 31819, 31820,
            31822, 31823, 31824, 31825, 31826, 31827, 31828,
            31829, 31830, 31831, 31832, 31833, 31834, 31835,
            31836, 31837, 31838, 31839, 31840, 31841, 31842,
            31843, 31844, 31845, 31846, 31847, 31848, 31849,
            31850, 31851, 31852, 31853, 31854, 31855, 31856,
            31857, 31858, 31861, 31862, 31863, 31864, 31865,
            31866, 31870, 31871, 31872, 31873, 31874, 31875,
            31876, 31877, 31878, 31879, 31880, 31882, 31883,
            31884, 31885, 31886, 31887, 31888, 31891, 31892,
            31894, 31897, 31898, 31899, 31904, 31905, 31907,
            31910, 31911, 31912, 31913, 31915, 31916, 31917,
            31919, 31920, 31924, 31925, 31926, 31927, 31928,
            31930, 31931, 24359, 34382, 21804, 25252, 20114,
            27818, 25143, 33457, 21719, 21326, 29502, 28369,
            30011, 21010, 21270, 35805, 27088, 24458, 24576,
            28142, 22351, 27426, 29615, 26707, 36824, 32531,
            25442, 24739, 21796, 30186, 35938, 28949, 28067,
            23462, 24187, 33618, 24908, 40644, 30970, 34647,
            31783, 30343, 20976, 24822, 29004, 26179, 24140,
            24653, 35854, 28784, 25381, 36745, 24509, 24674,
            34516, 22238, 27585, 24724, 24935, 21321, 24800,
            26214, 36159, 31229, 20250, 28905, 27719, 35763,
            35826, 32472, 33636, 26127, 23130, 39746, 27985,
            28151, 35905, 27963, 20249, 28779, 33719, 25110,
            24785, 38669, 36135, 31096, 20987, 22334, 22522,
            26426, 30072, 31293, 31215, 31637, 31935, 31936,
            31938, 31939, 31940, 31942, 31945, 31947, 31950,
            31951, 31952, 31953, 31954, 31955, 31956, 31960,
            31962, 31963, 31965, 31966, 31969, 31970, 31971,
            31972, 31973, 31974, 31975, 31977, 31978, 31979,
            31980, 31981, 31982, 31984, 31985, 31986, 31987,
            31988, 31989, 31990, 31991, 31993, 31994, 31996,
            31997, 31998, 31999, 32000, 32001, 32002, 32003,
            32004, 32005, 32006, 32007, 32008, 32009, 32011,
            32012, 32013, 32014, 32015, 32016, 32017, 32018,
            32019, 32020, 32021, 32022, 32023, 32024, 32025,
            32026, 32027, 32028, 32029, 32030, 32031, 32033,
            32035, 32036, 32037, 32038, 32040, 32041, 32042,
            32044, 32045, 32046, 32048, 32049, 32050, 32051,
            32052, 32053, 32054, 32908, 39269, 36857, 28608,
            35749, 40481, 23020, 32489, 32521, 21513, 26497,
            26840, 36753, 31821, 38598, 21450, 24613, 30142,
            27762, 21363, 23241, 32423, 25380, 20960, 33034,
            24049, 34015, 25216, 20864, 23395, 20238, 31085,
            21058, 24760, 27982, 23492, 23490, 35745, 35760,
            26082, 24524, 38469, 22931, 32487, 32426, 22025,
            26551, 22841, 20339, 23478, 21152, 33626, 39050,
            36158, 30002, 38078, 20551, 31292, 20215, 26550,
            39550, 23233, 27516, 30417, 22362, 23574, 31546,
            38388, 29006, 20860, 32937, 33392, 22904, 32516,
            33575, 26816, 26604, 30897, 30839, 25315, 25441,
            31616, 20461, 21098, 20943, 33616, 27099, 37492,
            36341, 36145, 35265, 38190, 31661, 20214, 32055,
            32056, 32057, 32058, 32059, 32060, 32061, 32062,
            32063, 32064, 32065, 32066, 32067, 32068, 32069,
            32070, 32071, 32072, 32073, 32074, 32075, 32076,
            32077, 32078, 32079, 32080, 32081, 32082, 32083,
            32084, 32085, 32086, 32087, 32088, 32089, 32090,
            32091, 32092, 32093, 32094, 32095, 32096, 32097,
            32098, 32099, 32100, 32101, 32102, 32103, 32104,
            32105, 32106, 32107, 32108, 32109, 32111, 32112,
            32113, 32114, 32115, 32116, 32117, 32118, 32120,
            32121, 32122, 32123, 32124, 32125, 32126, 32127,
            32128, 32129, 32130, 32131, 32132, 32133, 32134,
            32135, 32136, 32137, 32138, 32139, 32140, 32141,
            32142, 32143, 32144, 32145, 32146, 32147, 32148,
            32149, 32150, 32151, 32152, 20581, 33328, 21073,
            39279, 28176, 28293, 28071, 24314, 20725, 23004,
            23558, 27974, 27743, 30086, 33931, 26728, 22870,
            35762, 21280, 37233, 38477, 34121, 26898, 30977,
            28966, 33014, 20132, 37066, 27975, 39556, 23047,
            22204, 25605, 38128, 30699, 20389, 33050, 29409,
            35282, 39290, 32564, 32478, 21119, 25945, 37237,
            36735, 36739, 21483, 31382, 25581, 25509, 30342,
            31224, 34903, 38454, 25130, 21163, 33410, 26708,
            26480, 25463, 30571, 31469, 27905, 32467, 35299,
            22992, 25106, 34249, 33445, 30028, 20511, 20171,
            30117, 35819, 23626, 24062, 31563, 26020, 37329,
            20170, 27941, 35167, 32039, 38182, 20165, 35880,
            36827, 38771, 26187, 31105, 36817, 28908, 28024,
            32153, 32154, 32155, 32156, 32157, 32158, 32159,
            32160, 32161, 32162, 32163, 32164, 32165, 32167,
            32168, 32169, 32170, 32171, 32172, 32173, 32175,
            32176, 32177, 32178, 32179, 32180, 32181, 32182,
            32183, 32184, 32185, 32186, 32187, 32188, 32189,
            32190, 32191, 32192, 32193, 32194, 32195, 32196,
            32197, 32198, 32199, 32200, 32201, 32202, 32203,
            32204, 32205, 32206, 32207, 32208, 32209, 32210,
            32211, 32212, 32213, 32214, 32215, 32216, 32217,
            32218, 32219, 32220, 32221, 32222, 32223, 32224,
            32225, 32226, 32227, 32228, 32229, 32230, 32231,
            32232, 32233, 32234, 32235, 32236, 32237, 32238,
            32239, 32240, 32241, 32242, 32243, 32244, 32245,
            32246, 32247, 32248, 32249, 32250, 23613, 21170,
            33606, 20834, 33550, 30555, 26230, 40120, 20140,
            24778, 31934, 31923, 32463, 20117, 35686, 26223,
            39048, 38745, 22659, 25964, 38236, 24452, 30153,
            38742, 31455, 31454, 20928, 28847, 31384, 25578,
            31350, 32416, 29590, 38893, 20037, 28792, 20061,
            37202, 21417, 25937, 26087, 33276, 33285, 21646,
            23601, 30106, 38816, 25304, 29401, 30141, 23621,
            39545, 33738, 23616, 21632, 30697, 20030, 27822,
            32858, 25298, 25454, 24040, 20855, 36317, 36382,
            38191, 20465, 21477, 24807, 28844, 21095, 25424,
            40515, 23071, 20518, 30519, 21367, 32482, 25733,
            25899, 25225, 25496, 20500, 29237, 35273, 20915,
            35776, 32477, 22343, 33740, 38055, 20891, 21531,
            23803, 32251, 32252, 32253, 32254, 32255, 32256,
            32257, 32258, 32259, 32260, 32261, 32262, 32263,
            32264, 32265, 32266, 32267, 32268, 32269, 32270,
            32271, 32272, 32273, 32274, 32275, 32276, 32277,
            32278, 32279, 32280, 32281, 32282, 32283, 32284,
            32285, 32286, 32287, 32288, 32289, 32290, 32291,
            32292, 32293, 32294, 32295, 32296, 32297, 32298,
            32299, 32300, 32301, 32302, 32303, 32304, 32305,
            32306, 32307, 32308, 32309, 32310, 32311, 32312,
            32313, 32314, 32316, 32317, 32318, 32319, 32320,
            32322, 32323, 32324, 32325, 32326, 32328, 32329,
            32330, 32331, 32332, 32333, 32334, 32335, 32336,
            32337, 32338, 32339, 32340, 32341, 32342, 32343,
            32344, 32345, 32346, 32347, 32348, 32349, 20426,
            31459, 27994, 37089, 39567, 21888, 21654, 21345,
            21679, 24320, 25577, 26999, 20975, 24936, 21002,
            22570, 21208, 22350, 30733, 30475, 24247, 24951,
            31968, 25179, 25239, 20130, 28821, 32771, 25335,
            28900, 38752, 22391, 33499, 26607, 26869, 30933,
            39063, 31185, 22771, 21683, 21487, 28212, 20811,
            21051, 23458, 35838, 32943, 21827, 22438, 24691,
            22353, 21549, 31354, 24656, 23380, 25511, 25248,
            21475, 25187, 23495, 26543, 21741, 31391, 33510,
            37239, 24211, 35044, 22840, 22446, 25358, 36328,
            33007, 22359, 31607, 20393, 24555, 23485, 27454,
            21281, 31568, 29378, 26694, 30719, 30518, 26103,
            20917, 20111, 30420, 23743, 31397, 33909, 22862,
            39745, 20608, 32350, 32351, 32352, 32353, 32354,
            32355, 32356, 32357, 32358, 32359, 32360, 32361,
            32362, 32363, 32364, 32365, 32366, 32367, 32368,
            32369, 32370, 32371, 32372, 32373, 32374, 32375,
            32376, 32377, 32378, 32379, 32380, 32381, 32382,
            32383, 32384, 32385, 32387, 32388, 32389, 32390,
            32391, 32392, 32393, 32394, 32395, 32396, 32397,
            32398, 32399, 32400, 32401, 32402, 32403, 32404,
            32405, 32406, 32407, 32408, 32409, 32410, 32412,
            32413, 32414, 32430, 32436, 32443, 32444, 32470,
            32484, 32492, 32505, 32522, 32528, 32542, 32567,
            32569, 32571, 32572, 32573, 32574, 32575, 32576,
            32577, 32579, 32582, 32583, 32584, 32585, 32586,
            32587, 32588, 32589, 32590, 32591, 32594, 32595,
            39304, 24871, 28291, 22372, 26118, 25414, 22256,
            25324, 25193, 24275, 38420, 22403, 25289, 21895,
            34593, 33098, 36771, 21862, 33713, 26469, 36182,
            34013, 23146, 26639, 25318, 31726, 38417, 20848,
            28572, 35888, 25597, 35272, 25042, 32518, 28866,
            28389, 29701, 27028, 29436, 24266, 37070, 26391,
            28010, 25438, 21171, 29282, 32769, 20332, 23013,
            37226, 28889, 28061, 21202, 20048, 38647, 38253,
            34174, 30922, 32047, 20769, 22418, 25794, 32907,
            31867, 27882, 26865, 26974, 20919, 21400, 26792,
            29313, 40654, 31729, 29432, 31163, 28435, 29702,
            26446, 37324, 40100, 31036, 33673, 33620, 21519,
            26647, 20029, 21385, 21169, 30782, 21382, 21033,
            20616, 20363, 20432, 32598, 32601, 32603, 32604,
            32605, 32606, 32608, 32611, 32612, 32613, 32614,
            32615, 32619, 32620, 32621, 32623, 32624, 32627,
            32629, 32630, 32631, 32632, 32634, 32635, 32636,
            32637, 32639, 32640, 32642, 32643, 32644, 32645,
            32646, 32647, 32648, 32649, 32651, 32653, 32655,
            32656, 32657, 32658, 32659, 32661, 32662, 32663,
            32664, 32665, 32667, 32668, 32672, 32674, 32675,
            32677, 32678, 32680, 32681, 32682, 32683, 32684,
            32685, 32686, 32689, 32691, 32692, 32693, 32694,
            32695, 32698, 32699, 32702, 32704, 32706, 32707,
            32708, 32710, 32711, 32712, 32713, 32715, 32717,
            32719, 32720, 32721, 32722, 32723, 32726, 32727,
            32729, 32730, 32731, 32732, 32733, 32734, 32738,
            32739, 30178, 31435, 31890, 27813, 38582, 21147,
            29827, 21737, 20457, 32852, 33714, 36830, 38256,
            24265, 24604, 28063, 24088, 25947, 33080, 38142,
            24651, 28860, 32451, 31918, 20937, 26753, 31921,
            33391, 20004, 36742, 37327, 26238, 20142, 35845,
            25769, 32842, 20698, 30103, 29134, 23525, 36797,
            28518, 20102, 25730, 38243, 24278, 26009, 21015,
            35010, 28872, 21155, 29454, 29747, 26519, 30967,
            38678, 20020, 37051, 40158, 28107, 20955, 36161,
            21533, 25294, 29618, 33777, 38646, 40836, 38083,
            20278, 32666, 20940, 28789, 38517, 23725, 39046,
            21478, 20196, 28316, 29705, 27060, 30827, 39311,
            30041, 21016, 30244, 27969, 26611, 20845, 40857,
            32843, 21657, 31548, 31423, 32740, 32743, 32744,
            32746, 32747, 32748, 32749, 32751, 32754, 32756,
            32757, 32758, 32759, 32760, 32761, 32762, 32765,
            32766, 32767, 32770, 32775, 32776, 32777, 32778,
            32782, 32783, 32785, 32787, 32794, 32795, 32797,
            32798, 32799, 32801, 32803, 32804, 32811, 32812,
            32813, 32814, 32815, 32816, 32818, 32820, 32825,
            32826, 32828, 32830, 32832, 32833, 32836, 32837,
            32839, 32840, 32841, 32846, 32847, 32848, 32849,
            32851, 32853, 32854, 32855, 32857, 32859, 32860,
            32861, 32862, 32863, 32864, 32865, 32866, 32867,
            32868, 32869, 32870, 32871, 32872, 32875, 32876,
            32877, 32878, 32879, 32880, 32882, 32883, 32884,
            32885, 32886, 32887, 32888, 32889, 32890, 32891,
            32892, 32893, 38534, 22404, 25314, 38471, 27004,
            23044, 25602, 31699, 28431, 38475, 33446, 21346,
            39045, 24208, 28809, 25523, 21348, 34383, 40065,
            40595, 30860, 38706, 36335, 36162, 40575, 28510,
            31108, 24405, 38470, 25134, 39540, 21525, 38109,
            20387, 26053, 23653, 23649, 32533, 34385, 27695,
            24459, 29575, 28388, 32511, 23782, 25371, 23402,
            28390, 21365, 20081, 25504, 30053, 25249, 36718,
            20262, 20177, 27814, 32438, 35770, 33821, 34746,
            32599, 36923, 38179, 31657, 39585, 35064, 33853,
            27931, 39558, 32476, 22920, 40635, 29595, 30721,
            34434, 39532, 39554, 22043, 21527, 22475, 20080,
            40614, 21334, 36808, 33033, 30610, 39314, 34542,
            28385, 34067, 26364, 24930, 28459, 32894, 32897,
            32898, 32901, 32904, 32906, 32909, 32910, 32911,
            32912, 32913, 32914, 32916, 32917, 32919, 32921,
            32926, 32931, 32934, 32935, 32936, 32940, 32944,
            32947, 32949, 32950, 32952, 32953, 32955, 32965,
            32967, 32968, 32969, 32970, 32971, 32975, 32976,
            32977, 32978, 32979, 32980, 32981, 32984, 32991,
            32992, 32994, 32995, 32998, 33006, 33013, 33015,
            33017, 33019, 33022, 33023, 33024, 33025, 33027,
            33028, 33029, 33031, 33032, 33035, 33036, 33045,
            33047, 33049, 33051, 33052, 33053, 33055, 33056,
            33057, 33058, 33059, 33060, 33061, 33062, 33063,
            33064, 33065, 33066, 33067, 33069, 33070, 33072,
            33075, 33076, 33077, 33079, 33081, 33082, 33083,
            33084, 33085, 33087, 35881, 33426, 33579, 30450,
            27667, 24537, 33725, 29483, 33541, 38170, 27611,
            30683, 38086, 21359, 33538, 20882, 24125, 35980,
            36152, 20040, 29611, 26522, 26757, 37238, 38665,
            29028, 27809, 30473, 23186, 38209, 27599, 32654,
            26151, 23504, 22969, 23194, 38376, 38391, 20204,
            33804, 33945, 27308, 30431, 38192, 29467, 26790,
            23391, 30511, 37274, 38753, 31964, 36855, 35868,
            24357, 31859, 31192, 35269, 27852, 34588, 23494,
            24130, 26825, 30496, 32501, 20885, 20813, 21193,
            23081, 32517, 38754, 33495, 25551, 30596, 34256,
            31186, 28218, 24217, 22937, 34065, 28781, 27665,
            25279, 30399, 25935, 24751, 38397, 26126, 34719,
            40483, 38125, 21517, 21629, 35884, 25720, 33088,
            33089, 33090, 33091, 33092, 33093, 33095, 33097,
            33101, 33102, 33103, 33106, 33110, 33111, 33112,
            33115, 33116, 33117, 33118, 33119, 33121, 33122,
            33123, 33124, 33126, 33128, 33130, 33131, 33132,
            33135, 33138, 33139, 33141, 33142, 33143, 33144,
            33153, 33155, 33156, 33157, 33158, 33159, 33161,
            33163, 33164, 33165, 33166, 33168, 33170, 33171,
            33172, 33173, 33174, 33175, 33177, 33178, 33182,
            33183, 33184, 33185, 33186, 33188, 33189, 33191,
            33193, 33195, 33196, 33197, 33198, 33199, 33200,
            33201, 33202, 33204, 33205, 33206, 33207, 33208,
            33209, 33212, 33213, 33214, 33215, 33220, 33221,
            33223, 33224, 33225, 33227, 33229, 33230, 33231,
            33232, 33233, 33234, 33235, 25721, 34321, 27169,
            33180, 30952, 25705, 39764, 25273, 26411, 33707,
            22696, 40664, 27819, 28448, 23518, 38476, 35851,
            29279, 26576, 25287, 29281, 20137, 22982, 27597,
            22675, 26286, 24149, 21215, 24917, 26408, 30446,
            30566, 29287, 31302, 25343, 21738, 21584, 38048,
            37027, 23068, 32435, 27670, 20035, 22902, 32784,
            22856, 21335, 30007, 38590, 22218, 25376, 33041,
            24700, 38393, 28118, 21602, 39297, 20869, 23273,
            33021, 22958, 38675, 20522, 27877, 23612, 25311,
            20320, 21311, 33147, 36870, 28346, 34091, 25288,
            24180, 30910, 25781, 25467, 24565, 23064, 37247,
            40479, 23615, 25423, 32834, 23421, 21870, 38218,
            38221, 28037, 24744, 26592, 29406, 20957, 23425,
            33236, 33237, 33238, 33239, 33240, 33241, 33242,
            33243, 33244, 33245, 33246, 33247, 33248, 33249,
            33250, 33252, 33253, 33254, 33256, 33257, 33259,
            33262, 33263, 33264, 33265, 33266, 33269, 33270,
            33271, 33272, 33273, 33274, 33277, 33279, 33283,
            33287, 33288, 33289, 33290, 33291, 33294, 33295,
            33297, 33299, 33301, 33302, 33303, 33304, 33305,
            33306, 33309, 33312, 33316, 33317, 33318, 33319,
            33321, 33326, 33330, 33338, 33340, 33341, 33343,
            33344, 33345, 33346, 33347, 33349, 33350, 33352,
            33354, 33356, 33357, 33358, 33360, 33361, 33362,
            33363, 33364, 33365, 33366, 33367, 33369, 33371,
            33372, 33373, 33374, 33376, 33377, 33378, 33379,
            33380, 33381, 33382, 33383, 33385, 25319, 27870,
            29275, 25197, 38062, 32445, 33043, 27987, 20892,
            24324, 22900, 21162, 24594, 22899, 26262, 34384,
            30111, 25386, 25062, 31983, 35834, 21734, 27431,
            40485, 27572, 34261, 21589, 20598, 27812, 21866,
            36276, 29228, 24085, 24597, 29750, 25293, 25490,
            29260, 24472, 28227, 27966, 25856, 28504, 30424,
            30928, 30460, 30036, 21028, 21467, 20051, 24222,
            26049, 32810, 32982, 25243, 21638, 21032, 28846,
            34957, 36305, 27873, 21624, 32986, 22521, 35060,
            36180, 38506, 37197, 20329, 27803, 21943, 30406,
            30768, 25256, 28921, 28558, 24429, 34028, 26842,
            30844, 31735, 33192, 26379, 40527, 25447, 30896,
            22383, 30738, 38713, 25209, 25259, 21128, 29749,
            27607, 33386, 33387, 33388, 33389, 33393, 33397,
            33398, 33399, 33400, 33403, 33404, 33408, 33409,
            33411, 33413, 33414, 33415, 33417, 33420, 33424,
            33427, 33428, 33429, 33430, 33434, 33435, 33438,
            33440, 33442, 33443, 33447, 33458, 33461, 33462,
            33466, 33467, 33468, 33471, 33472, 33474, 33475,
            33477, 33478, 33481, 33488, 33494, 33497, 33498,
            33501, 33506, 33511, 33512, 33513, 33514, 33516,
            33517, 33518, 33520, 33522, 33523, 33525, 33526,
            33528, 33530, 33532, 33533, 33534, 33535, 33536,
            33546, 33547, 33549, 33552, 33554, 33555, 33558,
            33560, 33561, 33565, 33566, 33567, 33568, 33569,
            33570, 33571, 33572, 33573, 33574, 33577, 33578,
            33582, 33584, 33586, 33591, 33595, 33597, 21860,
            33086, 30130, 30382, 21305, 30174, 20731, 23617,
            35692, 31687, 20559, 29255, 39575, 39128, 28418,
            29922, 31080, 25735, 30629, 25340, 39057, 36139,
            21697, 32856, 20050, 22378, 33529, 33805, 24179,
            20973, 29942, 35780, 23631, 22369, 27900, 39047,
            23110, 30772, 39748, 36843, 31893, 21078, 25169,
            38138, 20166, 33670, 33889, 33769, 33970, 22484,
            26420, 22275, 26222, 28006, 35889, 26333, 28689,
            26399, 27450, 26646, 25114, 22971, 19971, 20932,
            28422, 26578, 27791, 20854, 26827, 22855, 27495,
            30054, 23822, 33040, 40784, 26071, 31048, 31041,
            39569, 36215, 23682, 20062, 20225, 21551, 22865,
            30732, 22120, 27668, 36804, 24323, 27773, 27875,
            35755, 25488, 33598, 33599, 33601, 33602, 33604,
            33605, 33608, 33610, 33611, 33612, 33613, 33614,
            33619, 33621, 33622, 33623, 33624, 33625, 33629,
            33634, 33648, 33649, 33650, 33651, 33652, 33653,
            33654, 33657, 33658, 33662, 33663, 33664, 33665,
            33666, 33667, 33668, 33671, 33672, 33674, 33675,
            33676, 33677, 33679, 33680, 33681, 33684, 33685,
            33686, 33687, 33689, 33690, 33693, 33695, 33697,
            33698, 33699, 33700, 33701, 33702, 33703, 33708,
            33709, 33710, 33711, 33717, 33723, 33726, 33727,
            33730, 33731, 33732, 33734, 33736, 33737, 33739,
            33741, 33742, 33744, 33745, 33746, 33747, 33749,
            33751, 33753, 33754, 33755, 33758, 33762, 33763,
            33764, 33766, 33767, 33768, 33771, 33772, 33773,
            24688, 27965, 29301, 25190, 38030, 38085, 21315,
            36801, 31614, 20191, 35878, 20094, 40660, 38065,
            38067, 21069, 28508, 36963, 27973, 35892, 22545,
            23884, 27424, 27465, 26538, 21595, 33108, 32652,
            22681, 34103, 24378, 25250, 27207, 38201, 25970,
            24708, 26725, 30631, 20052, 20392, 24039, 38808,
            25772, 32728, 23789, 20431, 31373, 20999, 33540,
            19988, 24623, 31363, 38054, 20405, 20146, 31206,
            29748, 21220, 33465, 25810, 31165, 23517, 27777,
            38738, 36731, 27682, 20542, 21375, 28165, 25806,
            26228, 27696, 24773, 39031, 35831, 24198, 29756,
            31351, 31179, 19992, 37041, 29699, 27714, 22234,
            37195, 27845, 36235, 21306, 34502, 26354, 36527,
            23624, 39537, 28192, 33774, 33775, 33779, 33780,
            33781, 33782, 33783, 33786, 33787, 33788, 33790,
            33791, 33792, 33794, 33797, 33799, 33800, 33801,
            33802, 33808, 33810, 33811, 33812, 33813, 33814,
            33815, 33817, 33818, 33819, 33822, 33823, 33824,
            33825, 33826, 33827, 33833, 33834, 33835, 33836,
            33837, 33838, 33839, 33840, 33842, 33843, 33844,
            33845, 33846, 33847, 33849, 33850, 33851, 33854,
            33855, 33856, 33857, 33858, 33859, 33860, 33861,
            33863, 33864, 33865, 33866, 33867, 33868, 33869,
            33870, 33871, 33872, 33874, 33875, 33876, 33877,
            33878, 33880, 33885, 33886, 33887, 33888, 33890,
            33892, 33893, 33894, 33895, 33896, 33898, 33902,
            33903, 33904, 33906, 33908, 33911, 33913, 33915,
            33916, 21462, 23094, 40843, 36259, 21435, 22280,
            39079, 26435, 37275, 27849, 20840, 30154, 25331,
            29356, 21048, 21149, 32570, 28820, 30264, 21364,
            40522, 27063, 30830, 38592, 35033, 32676, 28982,
            29123, 20873, 26579, 29924, 22756, 25880, 22199,
            35753, 39286, 25200, 32469, 24825, 28909, 22764,
            20161, 20154, 24525, 38887, 20219, 35748, 20995,
            22922, 32427, 25172, 20173, 26085, 25102, 33592,
            33993, 33635, 34701, 29076, 28342, 23481, 32466,
            20887, 25545, 26580, 32905, 33593, 34837, 20754,
            23418, 22914, 36785, 20083, 27741, 20837, 35109,
            36719, 38446, 34122, 29790, 38160, 38384, 28070,
            33509, 24369, 25746, 27922, 33832, 33134, 40131,
            22622, 36187, 19977, 21441, 33917, 33918, 33919,
            33920, 33921, 33923, 33924, 33925, 33926, 33930,
            33933, 33935, 33936, 33937, 33938, 33939, 33940,
            33941, 33942, 33944, 33946, 33947, 33949, 33950,
            33951, 33952, 33954, 33955, 33956, 33957, 33958,
            33959, 33960, 33961, 33962, 33963, 33964, 33965,
            33966, 33968, 33969, 33971, 33973, 33974, 33975,
            33979, 33980, 33982, 33984, 33986, 33987, 33989,
            33990, 33991, 33992, 33995, 33996, 33998, 33999,
            34002, 34004, 34005, 34007, 34008, 34009, 34010,
            34011, 34012, 34014, 34017, 34018, 34020, 34023,
            34024, 34025, 34026, 34027, 34029, 34030, 34031,
            34033, 34034, 34035, 34036, 34037, 34038, 34039,
            34040, 34041, 34042, 34043, 34045, 34046, 34048,
            34049, 34050, 20254, 25955, 26705, 21971, 20007,
            25620, 39578, 25195, 23234, 29791, 33394, 28073,
            26862, 20711, 33678, 30722, 26432, 21049, 27801,
            32433, 20667, 21861, 29022, 31579, 26194, 29642,
            33515, 26441, 23665, 21024, 29053, 34923, 38378,
            38485, 25797, 36193, 33203, 21892, 27733, 25159,
            32558, 22674, 20260, 21830, 36175, 26188, 19978,
            23578, 35059, 26786, 25422, 31245, 28903, 33421,
            21242, 38902, 23569, 21736, 37045, 32461, 22882,
            36170, 34503, 33292, 33293, 36198, 25668, 23556,
            24913, 28041, 31038, 35774, 30775, 30003, 21627,
            20280, 36523, 28145, 23072, 32453, 31070, 27784,
            23457, 23158, 29978, 32958, 24910, 28183, 22768,
            29983, 29989, 29298, 21319, 32499, 34051, 34052,
            34053, 34054, 34055, 34056, 34057, 34058, 34059,
            34061, 34062, 34063, 34064, 34066, 34068, 34069,
            34070, 34072, 34073, 34075, 34076, 34077, 34078,
            34080, 34082, 34083, 34084, 34085, 34086, 34087,
            34088, 34089, 34090, 34093, 34094, 34095, 34096,
            34097, 34098, 34099, 34100, 34101, 34102, 34110,
            34111, 34112, 34113, 34114, 34116, 34117, 34118,
            34119, 34123, 34124, 34125, 34126, 34127, 34128,
            34129, 34130, 34131, 34132, 34133, 34135, 34136,
            34138, 34139, 34140, 34141, 34143, 34144, 34145,
            34146, 34147, 34149, 34150, 34151, 34153, 34154,
            34155, 34156, 34157, 34158, 34159, 34160, 34161,
            34163, 34165, 34166, 34167, 34168, 34172, 34173,
            34175, 34176, 34177, 30465, 30427, 21097, 32988,
            22307, 24072, 22833, 29422, 26045, 28287, 35799,
            23608, 34417, 21313, 30707, 25342, 26102, 20160,
            39135, 34432, 23454, 35782, 21490, 30690, 20351,
            23630, 39542, 22987, 24335, 31034, 22763, 19990,
            26623, 20107, 25325, 35475, 36893, 21183, 26159,
            21980, 22124, 36866, 20181, 20365, 37322, 39280,
            27663, 24066, 24643, 23460, 35270, 35797, 25910,
            25163, 39318, 23432, 23551, 25480, 21806, 21463,
            30246, 20861, 34092, 26530, 26803, 27530, 25234,
            36755, 21460, 33298, 28113, 30095, 20070, 36174,
            23408, 29087, 34223, 26257, 26329, 32626, 34560,
            40653, 40736, 23646, 26415, 36848, 26641, 26463,
            25101, 31446, 22661, 24246, 25968, 28465, 34178,
            34179, 34182, 34184, 34185, 34186, 34187, 34188,
            34189, 34190, 34192, 34193, 34194, 34195, 34196,
            34197, 34198, 34199, 34200, 34201, 34202, 34205,
            34206, 34207, 34208, 34209, 34210, 34211, 34213,
            34214, 34215, 34217, 34219, 34220, 34221, 34225,
            34226, 34227, 34228, 34229, 34230, 34232, 34234,
            34235, 34236, 34237, 34238, 34239, 34240, 34242,
            34243, 34244, 34245, 34246, 34247, 34248, 34250,
            34251, 34252, 34253, 34254, 34257, 34258, 34260,
            34262, 34263, 34264, 34265, 34266, 34267, 34269,
            34270, 34271, 34272, 34273, 34274, 34275, 34277,
            34278, 34279, 34280, 34282, 34283, 34284, 34285,
            34286, 34287, 34288, 34289, 34290, 34291, 34292,
            34293, 34294, 34295, 34296, 24661, 21047, 32781,
            25684, 34928, 29993, 24069, 26643, 25332, 38684,
            21452, 29245, 35841, 27700, 30561, 31246, 21550,
            30636, 39034, 33308, 35828, 30805, 26388, 28865,
            26031, 25749, 22070, 24605, 31169, 21496, 19997,
            27515, 32902, 23546, 21987, 22235, 20282, 20284,
            39282, 24051, 26494, 32824, 24578, 39042, 36865,
            23435, 35772, 35829, 25628, 33368, 25822, 22013,
            33487, 37221, 20439, 32032, 36895, 31903, 20723,
            22609, 28335, 23487, 35785, 32899, 37240, 33948,
            31639, 34429, 38539, 38543, 32485, 39635, 30862,
            23681, 31319, 36930, 38567, 31071, 23385, 25439,
            31499, 34001, 26797, 21766, 32553, 29712, 32034,
            38145, 25152, 22604, 20182, 23427, 22905, 22612,
            34297, 34298, 34300, 34301, 34302, 34304, 34305,
            34306, 34307, 34308, 34310, 34311, 34312, 34313,
            34314, 34315, 34316, 34317, 34318, 34319, 34320,
            34322, 34323, 34324, 34325, 34327, 34328, 34329,
            34330, 34331, 34332, 34333, 34334, 34335, 34336,
            34337, 34338, 34339, 34340, 34341, 34342, 34344,
            34346, 34347, 34348, 34349, 34350, 34351, 34352,
            34353, 34354, 34355, 34356, 34357, 34358, 34359,
            34361, 34362, 34363, 34365, 34366, 34367, 34368,
            34369, 34370, 34371, 34372, 34373, 34374, 34375,
            34376, 34377, 34378, 34379, 34380, 34386, 34387,
            34389, 34390, 34391, 34392, 34393, 34395, 34396,
            34397, 34399, 34400, 34401, 34403, 34404, 34405,
            34406, 34407, 34408, 34409, 34410, 29549, 25374,
            36427, 36367, 32974, 33492, 25260, 21488, 27888,
            37214, 22826, 24577, 27760, 22349, 25674, 36138,
            30251, 28393, 22363, 27264, 30192, 28525, 35885,
            35848, 22374, 27631, 34962, 30899, 25506, 21497,
            28845, 27748, 22616, 25642, 22530, 26848, 33179,
            21776, 31958, 20504, 36538, 28108, 36255, 28907,
            25487, 28059, 28372, 32486, 33796, 26691, 36867,
            28120, 38518, 35752, 22871, 29305, 34276, 33150,
            30140, 35466, 26799, 21076, 36386, 38161, 25552,
            39064, 36420, 21884, 20307, 26367, 22159, 24789,
            28053, 21059, 23625, 22825, 28155, 22635, 30000,
            29980, 24684, 33300, 33094, 25361, 26465, 36834,
            30522, 36339, 36148, 38081, 24086, 21381, 21548,
            28867, 34413, 34415, 34416, 34418, 34419, 34420,
            34421, 34422, 34423, 34424, 34435, 34436, 34437,
            34438, 34439, 34440, 34441, 34446, 34447, 34448,
            34449, 34450, 34452, 34454, 34455, 34456, 34457,
            34458, 34459, 34462, 34463, 34464, 34465, 34466,
            34469, 34470, 34475, 34477, 34478, 34482, 34483,
            34487, 34488, 34489, 34491, 34492, 34493, 34494,
            34495, 34497, 34498, 34499, 34501, 34504, 34508,
            34509, 34514, 34515, 34517, 34518, 34519, 34522,
            34524, 34525, 34528, 34529, 34530, 34531, 34533,
            34534, 34535, 34536, 34538, 34539, 34540, 34543,
            34549, 34550, 34551, 34554, 34555, 34556, 34557,
            34559, 34561, 34564, 34565, 34566, 34571, 34572,
            34574, 34575, 34576, 34577, 34580, 34582, 27712,
            24311, 20572, 20141, 24237, 25402, 33351, 36890,
            26704, 37230, 30643, 21516, 38108, 24420, 31461,
            26742, 25413, 31570, 32479, 30171, 20599, 25237,
            22836, 36879, 20984, 31171, 31361, 22270, 24466,
            36884, 28034, 23648, 22303, 21520, 20820, 28237,
            22242, 25512, 39059, 33151, 34581, 35114, 36864,
            21534, 23663, 33216, 25302, 25176, 33073, 40501,
            38464, 39534, 39548, 26925, 22949, 25299, 21822,
            25366, 21703, 34521, 27964, 23043, 29926, 34972,
            27498, 22806, 35916, 24367, 28286, 29609, 39037,
            20024, 28919, 23436, 30871, 25405, 26202, 30358,
            24779, 23451, 23113, 19975, 33109, 27754, 29579,
            20129, 26505, 32593, 24448, 26106, 26395, 24536,
            22916, 23041, 34585, 34587, 34589, 34591, 34592,
            34596, 34598, 34599, 34600, 34602, 34603, 34604,
            34605, 34607, 34608, 34610, 34611, 34613, 34614,
            34616, 34617, 34618, 34620, 34621, 34624, 34625,
            34626, 34627, 34628, 34629, 34630, 34634, 34635,
            34637, 34639, 34640, 34641, 34642, 34644, 34645,
            34646, 34648, 34650, 34651, 34652, 34653, 34654,
            34655, 34657, 34658, 34662, 34663, 34664, 34665,
            34666, 34667, 34668, 34669, 34671, 34673, 34674,
            34675, 34677, 34679, 34680, 34681, 34682, 34687,
            34688, 34689, 34692, 34694, 34695, 34697, 34698,
            34700, 34702, 34703, 34704, 34705, 34706, 34708,
            34709, 34710, 34712, 34713, 34714, 34715, 34716,
            34717, 34718, 34720, 34721, 34722, 34723, 34724,
            24013, 24494, 21361, 38886, 36829, 26693, 22260,
            21807, 24799, 20026, 28493, 32500, 33479, 33806,
            22996, 20255, 20266, 23614, 32428, 26410, 34074,
            21619, 30031, 32963, 21890, 39759, 20301, 28205,
            35859, 23561, 24944, 21355, 30239, 28201, 34442,
            25991, 38395, 32441, 21563, 31283, 32010, 38382,
            21985, 32705, 29934, 25373, 34583, 28065, 31389,
            25105, 26017, 21351, 25569, 27779, 24043, 21596,
            38056, 20044, 27745, 35820, 23627, 26080, 33436,
            26791, 21566, 21556, 27595, 27494, 20116, 25410,
            21320, 33310, 20237, 20398, 22366, 25098, 38654,
            26212, 29289, 21247, 21153, 24735, 35823, 26132,
            29081, 26512, 35199, 30802, 30717, 26224, 22075,
            21560, 38177, 29306, 34725, 34726, 34727, 34729,
            34730, 34734, 34736, 34737, 34738, 34740, 34742,
            34743, 34744, 34745, 34747, 34748, 34750, 34751,
            34753, 34754, 34755, 34756, 34757, 34759, 34760,
            34761, 34764, 34765, 34766, 34767, 34768, 34772,
            34773, 34774, 34775, 34776, 34777, 34778, 34780,
            34781, 34782, 34783, 34785, 34786, 34787, 34788,
            34790, 34791, 34792, 34793, 34795, 34796, 34797,
            34799, 34800, 34801, 34802, 34803, 34804, 34805,
            34806, 34807, 34808, 34810, 34811, 34812, 34813,
            34815, 34816, 34817, 34818, 34820, 34821, 34822,
            34823, 34824, 34825, 34827, 34828, 34829, 34830,
            34831, 34832, 34833, 34834, 34836, 34839, 34840,
            34841, 34842, 34844, 34845, 34846, 34847, 34848,
            34851, 31232, 24687, 24076, 24713, 33181, 22805,
            24796, 29060, 28911, 28330, 27728, 29312, 27268,
            34989, 24109, 20064, 23219, 21916, 38115, 27927,
            31995, 38553, 25103, 32454, 30606, 34430, 21283,
            38686, 36758, 26247, 23777, 20384, 29421, 19979,
            21414, 22799, 21523, 25472, 38184, 20808, 20185,
            40092, 32420, 21688, 36132, 34900, 33335, 38386,
            28046, 24358, 23244, 26174, 38505, 29616, 29486,
            21439, 33146, 39301, 32673, 23466, 38519, 38480,
            32447, 30456, 21410, 38262, 39321, 31665, 35140,
            28248, 20065, 32724, 31077, 35814, 24819, 21709,
            20139, 39033, 24055, 27233, 20687, 21521, 35937,
            33831, 30813, 38660, 21066, 21742, 22179, 38144,
            28040, 23477, 28102, 26195, 34852, 34853, 34854,
            34855, 34856, 34857, 34858, 34859, 34860, 34861,
            34862, 34863, 34864, 34865, 34867, 34868, 34869,
            34870, 34871, 34872, 34874, 34875, 34877, 34878,
            34879, 34881, 34882, 34883, 34886, 34887, 34888,
            34889, 34890, 34891, 34894, 34895, 34896, 34897,
            34898, 34899, 34901, 34902, 34904, 34906, 34907,
            34908, 34909, 34910, 34911, 34912, 34918, 34919,
            34922, 34925, 34927, 34929, 34931, 34932, 34933,
            34934, 34936, 34937, 34938, 34939, 34940, 34944,
            34947, 34950, 34951, 34953, 34954, 34956, 34958,
            34959, 34960, 34961, 34963, 34964, 34965, 34967,
            34968, 34969, 34970, 34971, 34973, 34974, 34975,
            34976, 34977, 34979, 34981, 34982, 34983, 34984,
            34985, 34986, 23567, 23389, 26657, 32918, 21880,
            31505, 25928, 26964, 20123, 27463, 34638, 38795,
            21327, 25375, 25658, 37034, 26012, 32961, 35856,
            20889, 26800, 21368, 34809, 25032, 27844, 27899,
            35874, 23633, 34218, 33455, 38156, 27427, 36763,
            26032, 24571, 24515, 20449, 34885, 26143, 33125,
            29481, 24826, 20852, 21009, 22411, 24418, 37026,
            34892, 37266, 24184, 26447, 24615, 22995, 20804,
            20982, 33016, 21256, 27769, 38596, 29066, 20241,
            20462, 32670, 26429, 21957, 38152, 31168, 34966,
            32483, 22687, 25100, 38656, 34394, 22040, 39035,
            24464, 35768, 33988, 37207, 21465, 26093, 24207,
            30044, 24676, 32110, 23167, 32490, 32493, 36713,
            21927, 23459, 24748, 26059, 29572, 34988, 34990,
            34991, 34992, 34994, 34995, 34996, 34997, 34998,
            35000, 35001, 35002, 35003, 35005, 35006, 35007,
            35008, 35011, 35012, 35015, 35016, 35018, 35019,
            35020, 35021, 35023, 35024, 35025, 35027, 35030,
            35031, 35034, 35035, 35036, 35037, 35038, 35040,
            35041, 35046, 35047, 35049, 35050, 35051, 35052,
            35053, 35054, 35055, 35058, 35061, 35062, 35063,
            35066, 35067, 35069, 35071, 35072, 35073, 35075,
            35076, 35077, 35078, 35079, 35080, 35081, 35083,
            35084, 35085, 35086, 35087, 35089, 35092, 35093,
            35094, 35095, 35096, 35100, 35101, 35102, 35103,
            35104, 35106, 35107, 35108, 35110, 35111, 35112,
            35113, 35116, 35117, 35118, 35119, 35121, 35122,
            35123, 35125, 35127, 36873, 30307, 30505, 32474,
            38772, 34203, 23398, 31348, 38634, 34880, 21195,
            29071, 24490, 26092, 35810, 23547, 39535, 24033,
            27529, 27739, 35757, 35759, 36874, 36805, 21387,
            25276, 40486, 40493, 21568, 20011, 33469, 29273,
            34460, 23830, 34905, 28079, 38597, 21713, 20122,
            35766, 28937, 21693, 38409, 28895, 28153, 30416,
            20005, 30740, 34578, 23721, 24310, 35328, 39068,
            38414, 28814, 27839, 22852, 25513, 30524, 34893,
            28436, 33395, 22576, 29141, 21388, 30746, 38593,
            21761, 24422, 28976, 23476, 35866, 39564, 27523,
            22830, 40495, 31207, 26472, 25196, 20335, 30113,
            32650, 27915, 38451, 27687, 20208, 30162, 20859,
            26679, 28478, 36992, 33136, 22934, 29814, 35128,
            35129, 35130, 35131, 35132, 35133, 35134, 35135,
            35136, 35138, 35139, 35141, 35142, 35143, 35144,
            35145, 35146, 35147, 35148, 35149, 35150, 35151,
            35152, 35153, 35154, 35155, 35156, 35157, 35158,
            35159, 35160, 35161, 35162, 35163, 35164, 35165,
            35168, 35169, 35170, 35171, 35172, 35173, 35175,
            35176, 35177, 35178, 35179, 35180, 35181, 35182,
            35183, 35184, 35185, 35186, 35187, 35188, 35189,
            35190, 35191, 35192, 35193, 35194, 35196, 35197,
            35198, 35200, 35202, 35204, 35205, 35207, 35208,
            35209, 35210, 35211, 35212, 35213, 35214, 35215,
            35216, 35217, 35218, 35219, 35220, 35221, 35222,
            35223, 35224, 35225, 35226, 35227, 35228, 35229,
            35230, 35231, 35232, 35233, 25671, 23591, 36965,
            31377, 35875, 23002, 21676, 33280, 33647, 35201,
            32768, 26928, 22094, 32822, 29239, 37326, 20918,
            20063, 39029, 25494, 19994, 21494, 26355, 33099,
            22812, 28082, 19968, 22777, 21307, 25558, 38129,
            20381, 20234, 34915, 39056, 22839, 36951, 31227,
            20202, 33008, 30097, 27778, 23452, 23016, 24413,
            26885, 34433, 20506, 24050, 20057, 30691, 20197,
            33402, 25233, 26131, 37009, 23673, 20159, 24441,
            33222, 36920, 32900, 30123, 20134, 35028, 24847,
            27589, 24518, 20041, 30410, 28322, 35811, 35758,
            35850, 35793, 24322, 32764, 32716, 32462, 33589,
            33643, 22240, 27575, 38899, 38452, 23035, 21535,
            38134, 28139, 23493, 39278, 23609, 24341, 38544,
            35234, 35235, 35236, 35237, 35238, 35239, 35240,
            35241, 35242, 35243, 35244, 35245, 35246, 35247,
            35248, 35249, 35250, 35251, 35252, 35253, 35254,
            35255, 35256, 35257, 35258, 35259, 35260, 35261,
            35262, 35263, 35264, 35267, 35277, 35283, 35284,
            35285, 35287, 35288, 35289, 35291, 35293, 35295,
            35296, 35297, 35298, 35300, 35303, 35304, 35305,
            35306, 35308, 35309, 35310, 35312, 35313, 35314,
            35316, 35317, 35318, 35319, 35320, 35321, 35322,
            35323, 35324, 35325, 35326, 35327, 35329, 35330,
            35331, 35332, 35333, 35334, 35336, 35337, 35338,
            35339, 35340, 35341, 35342, 35343, 35344, 35345,
            35346, 35347, 35348, 35349, 35350, 35351, 35352,
            35353, 35354, 35355, 35356, 35357, 21360, 33521,
            27185, 23156, 40560, 24212, 32552, 33721, 33828,
            33829, 33639, 34631, 36814, 36194, 30408, 24433,
            39062, 30828, 26144, 21727, 25317, 20323, 33219,
            30152, 24248, 38605, 36362, 34553, 21647, 27891,
            28044, 27704, 24703, 21191, 29992, 24189, 20248,
            24736, 24551, 23588, 30001, 37038, 38080, 29369,
            27833, 28216, 37193, 26377, 21451, 21491, 20305,
            37321, 35825, 21448, 24188, 36802, 28132, 20110,
            30402, 27014, 34398, 24858, 33286, 20313, 20446,
            36926, 40060, 24841, 28189, 28180, 38533, 20104,
            23089, 38632, 19982, 23679, 31161, 23431, 35821,
            32701, 29577, 22495, 33419, 37057, 21505, 36935,
            21947, 23786, 24481, 24840, 27442, 29425, 32946,
            35465, 35358, 35359, 35360, 35361, 35362, 35363,
            35364, 35365, 35366, 35367, 35368, 35369, 35370,
            35371, 35372, 35373, 35374, 35375, 35376, 35377,
            35378, 35379, 35380, 35381, 35382, 35383, 35384,
            35385, 35386, 35387, 35388, 35389, 35391, 35392,
            35393, 35394, 35395, 35396, 35397, 35398, 35399,
            35401, 35402, 35403, 35404, 35405, 35406, 35407,
            35408, 35409, 35410, 35411, 35412, 35413, 35414,
            35415, 35416, 35417, 35418, 35419, 35420, 35421,
            35422, 35423, 35424, 35425, 35426, 35427, 35428,
            35429, 35430, 35431, 35432, 35433, 35434, 35435,
            35436, 35437, 35438, 35439, 35440, 35441, 35442,
            35443, 35444, 35445, 35446, 35447, 35448, 35450,
            35451, 35452, 35453, 35454, 35455, 35456, 28020,
            23507, 35029, 39044, 35947, 39533, 40499, 28170,
            20900, 20803, 22435, 34945, 21407, 25588, 36757,
            22253, 21592, 22278, 29503, 28304, 32536, 36828,
            33489, 24895, 24616, 38498, 26352, 32422, 36234,
            36291, 38053, 23731, 31908, 26376, 24742, 38405,
            32792, 20113, 37095, 21248, 38504, 20801, 36816,
            34164, 37213, 26197, 38901, 23381, 21277, 30776,
            26434, 26685, 21705, 28798, 23472, 36733, 20877,
            22312, 21681, 25874, 26242, 36190, 36163, 33039,
            33900, 36973, 31967, 20991, 34299, 26531, 26089,
            28577, 34468, 36481, 22122, 36896, 30338, 28790,
            29157, 36131, 25321, 21017, 27901, 36156, 24590,
            22686, 24974, 26366, 36192, 25166, 21939, 28195,
            26413, 36711, 35457, 35458, 35459, 35460, 35461,
            35462, 35463, 35464, 35467, 35468, 35469, 35470,
            35471, 35472, 35473, 35474, 35476, 35477, 35478,
            35479, 35480, 35481, 35482, 35483, 35484, 35485,
            35486, 35487, 35488, 35489, 35490, 35491, 35492,
            35493, 35494, 35495, 35496, 35497, 35498, 35499,
            35500, 35501, 35502, 35503, 35504, 35505, 35506,
            35507, 35508, 35509, 35510, 35511, 35512, 35513,
            35514, 35515, 35516, 35517, 35518, 35519, 35520,
            35521, 35522, 35523, 35524, 35525, 35526, 35527,
            35528, 35529, 35530, 35531, 35532, 35533, 35534,
            35535, 35536, 35537, 35538, 35539, 35540, 35541,
            35542, 35543, 35544, 35545, 35546, 35547, 35548,
            35549, 35550, 35551, 35552, 35553, 35554, 35555,
            38113, 38392, 30504, 26629, 27048, 21643, 20045,
            28856, 35784, 25688, 25995, 23429, 31364, 20538,
            23528, 30651, 27617, 35449, 31896, 27838, 30415,
            26025, 36759, 23853, 23637, 34360, 26632, 21344,
            25112, 31449, 28251, 32509, 27167, 31456, 24432,
            28467, 24352, 25484, 28072, 26454, 19976, 24080,
            36134, 20183, 32960, 30260, 38556, 25307, 26157,
            25214, 27836, 36213, 29031, 32617, 20806, 32903,
            21484, 36974, 25240, 21746, 34544, 36761, 32773,
            38167, 34071, 36825, 27993, 29645, 26015, 30495,
            29956, 30759, 33275, 36126, 38024, 20390, 26517,
            30137, 35786, 38663, 25391, 38215, 38453, 33976,
            25379, 30529, 24449, 29424, 20105, 24596, 25972,
            25327, 27491, 25919, 35556, 35557, 35558, 35559,
            35560, 35561, 35562, 35563, 35564, 35565, 35566,
            35567, 35568, 35569, 35570, 35571, 35572, 35573,
            35574, 35575, 35576, 35577, 35578, 35579, 35580,
            35581, 35582, 35583, 35584, 35585, 35586, 35587,
            35588, 35589, 35590, 35592, 35593, 35594, 35595,
            35596, 35597, 35598, 35599, 35600, 35601, 35602,
            35603, 35604, 35605, 35606, 35607, 35608, 35609,
            35610, 35611, 35612, 35613, 35614, 35615, 35616,
            35617, 35618, 35619, 35620, 35621, 35623, 35624,
            35625, 35626, 35627, 35628, 35629, 35630, 35631,
            35632, 35633, 35634, 35635, 35636, 35637, 35638,
            35639, 35640, 35641, 35642, 35643, 35644, 35645,
            35646, 35647, 35648, 35649, 35650, 35651, 35652,
            35653, 24103, 30151, 37073, 35777, 33437, 26525,
            25903, 21553, 34584, 30693, 32930, 33026, 27713,
            20043, 32455, 32844, 30452, 26893, 27542, 25191,
            20540, 20356, 22336, 25351, 27490, 36286, 21482,
            26088, 32440, 24535, 25370, 25527, 33267, 33268,
            32622, 24092, 23769, 21046, 26234, 31209, 31258,
            36136, 28825, 30164, 28382, 27835, 31378, 20013,
            30405, 24544, 38047, 34935, 32456, 31181, 32959,
            37325, 20210, 20247, 33311, 21608, 24030, 27954,
            35788, 31909, 36724, 32920, 24090, 21650, 30385,
            23449, 26172, 39588, 29664, 26666, 34523, 26417,
            29482, 35832, 35803, 36880, 31481, 28891, 29038,
            25284, 30633, 22065, 20027, 33879, 26609, 21161,
            34496, 36142, 38136, 31569, 35654, 35655, 35656,
            35657, 35658, 35659, 35660, 35661, 35662, 35663,
            35664, 35665, 35666, 35667, 35668, 35669, 35670,
            35671, 35672, 35673, 35674, 35675, 35676, 35677,
            35678, 35679, 35680, 35681, 35682, 35683, 35684,
            35685, 35687, 35688, 35689, 35690, 35691, 35693,
            35694, 35695, 35696, 35697, 35698, 35699, 35700,
            35701, 35702, 35703, 35704, 35705, 35706, 35707,
            35708, 35709, 35710, 35711, 35712, 35713, 35714,
            35715, 35716, 35717, 35718, 35719, 35720, 35721,
            35722, 35723, 35724, 35725, 35726, 35727, 35728,
            35729, 35730, 35731, 35732, 35733, 35734, 35735,
            35736, 35737, 35738, 35739, 35740, 35741, 35742,
            35743, 35756, 35761, 35771, 35783, 35792, 35818,
            35849, 35870, 20303, 27880, 31069, 39547, 25235,
            29226, 25341, 19987, 30742, 36716, 25776, 36186,
            31686, 26729, 24196, 35013, 22918, 25758, 22766,
            29366, 26894, 38181, 36861, 36184, 22368, 32512,
            35846, 20934, 25417, 25305, 21331, 26700, 29730,
            33537, 37196, 21828, 30528, 28796, 27978, 20857,
            21672, 36164, 23039, 28363, 28100, 23388, 32043,
            20180, 31869, 28371, 23376, 33258, 28173, 23383,
            39683, 26837, 36394, 23447, 32508, 24635, 32437,
            37049, 36208, 22863, 25549, 31199, 36275, 21330,
            26063, 31062, 35781, 38459, 32452, 38075, 32386,
            22068, 37257, 26368, 32618, 23562, 36981, 26152,
            24038, 20304, 26590, 20570, 20316, 22352, 24231,
            59408, 59409, 59410, 59411, 59412, 35896, 35897,
            35898, 35899, 35900, 35901, 35902, 35903, 35904,
            35906, 35907, 35908, 35909, 35912, 35914, 35915,
            35917, 35918, 35919, 35920, 35921, 35922, 35923,
            35924, 35926, 35927, 35928, 35929, 35931, 35932,
            35933, 35934, 35935, 35936, 35939, 35940, 35941,
            35942, 35943, 35944, 35945, 35948, 35949, 35950,
            35951, 35952, 35953, 35954, 35956, 35957, 35958,
            35959, 35963, 35964, 35965, 35966, 35967, 35968,
            35969, 35971, 35972, 35974, 35975, 35976, 35979,
            35981, 35982, 35983, 35984, 35985, 35986, 35987,
            35989, 35990, 35991, 35993, 35994, 35995, 35996,
            35997, 35998, 35999, 36000, 36001, 36002, 36003,
            36004, 36005, 36006, 36007, 36008, 36009, 36010,
            36011, 36012, 36013, 20109, 19980, 20800, 19984,
            24319, 21317, 19989, 20120, 19998, 39730, 23404,
            22121, 20008, 31162, 20031, 21269, 20039, 22829,
            29243, 21358, 27664, 22239, 32996, 39319, 27603,
            30590, 40727, 20022, 20127, 40720, 20060, 20073,
            20115, 33416, 23387, 21868, 22031, 20164, 21389,
            21405, 21411, 21413, 21422, 38757, 36189, 21274,
            21493, 21286, 21294, 21310, 36188, 21350, 21347,
            20994, 21000, 21006, 21037, 21043, 21055, 21056,
            21068, 21086, 21089, 21084, 33967, 21117, 21122,
            21121, 21136, 21139, 20866, 32596, 20155, 20163,
            20169, 20162, 20200, 20193, 20203, 20190, 20251,
            20211, 20258, 20324, 20213, 20261, 20263, 20233,
            20267, 20318, 20327, 25912, 20314, 20317, 36014,
            36015, 36016, 36017, 36018, 36019, 36020, 36021,
            36022, 36023, 36024, 36025, 36026, 36027, 36028,
            36029, 36030, 36031, 36032, 36033, 36034, 36035,
            36036, 36037, 36038, 36039, 36040, 36041, 36042,
            36043, 36044, 36045, 36046, 36047, 36048, 36049,
            36050, 36051, 36052, 36053, 36054, 36055, 36056,
            36057, 36058, 36059, 36060, 36061, 36062, 36063,
            36064, 36065, 36066, 36067, 36068, 36069, 36070,
            36071, 36072, 36073, 36074, 36075, 36076, 36077,
            36078, 36079, 36080, 36081, 36082, 36083, 36084,
            36085, 36086, 36087, 36088, 36089, 36090, 36091,
            36092, 36093, 36094, 36095, 36096, 36097, 36098,
            36099, 36100, 36101, 36102, 36103, 36104, 36105,
            36106, 36107, 36108, 36109, 20319, 20311, 20274,
            20285, 20342, 20340, 20369, 20361, 20355, 20367,
            20350, 20347, 20394, 20348, 20396, 20372, 20454,
            20456, 20458, 20421, 20442, 20451, 20444, 20433,
            20447, 20472, 20521, 20556, 20467, 20524, 20495,
            20526, 20525, 20478, 20508, 20492, 20517, 20520,
            20606, 20547, 20565, 20552, 20558, 20588, 20603,
            20645, 20647, 20649, 20666, 20694, 20742, 20717,
            20716, 20710, 20718, 20743, 20747, 20189, 27709,
            20312, 20325, 20430, 40864, 27718, 31860, 20846,
            24061, 40649, 39320, 20865, 22804, 21241, 21261,
            35335, 21264, 20971, 22809, 20821, 20128, 20822,
            20147, 34926, 34980, 20149, 33044, 35026, 31104,
            23348, 34819, 32696, 20907, 20913, 20925, 20924,
            36110, 36111, 36112, 36113, 36114, 36115, 36116,
            36117, 36118, 36119, 36120, 36121, 36122, 36123,
            36124, 36128, 36177, 36178, 36183, 36191, 36197,
            36200, 36201, 36202, 36204, 36206, 36207, 36209,
            36210, 36216, 36217, 36218, 36219, 36220, 36221,
            36222, 36223, 36224, 36226, 36227, 36230, 36231,
            36232, 36233, 36236, 36237, 36238, 36239, 36240,
            36242, 36243, 36245, 36246, 36247, 36248, 36249,
            36250, 36251, 36252, 36253, 36254, 36256, 36257,
            36258, 36260, 36261, 36262, 36263, 36264, 36265,
            36266, 36267, 36268, 36269, 36270, 36271, 36272,
            36274, 36278, 36279, 36281, 36283, 36285, 36288,
            36289, 36290, 36293, 36295, 36296, 36297, 36298,
            36301, 36304, 36306, 36307, 36308, 20935, 20886,
            20898, 20901, 35744, 35750, 35751, 35754, 35764,
            35765, 35767, 35778, 35779, 35787, 35791, 35790,
            35794, 35795, 35796, 35798, 35800, 35801, 35804,
            35807, 35808, 35812, 35816, 35817, 35822, 35824,
            35827, 35830, 35833, 35836, 35839, 35840, 35842,
            35844, 35847, 35852, 35855, 35857, 35858, 35860,
            35861, 35862, 35865, 35867, 35864, 35869, 35871,
            35872, 35873, 35877, 35879, 35882, 35883, 35886,
            35887, 35890, 35891, 35893, 35894, 21353, 21370,
            38429, 38434, 38433, 38449, 38442, 38461, 38460,
            38466, 38473, 38484, 38495, 38503, 38508, 38514,
            38516, 38536, 38541, 38551, 38576, 37015, 37019,
            37021, 37017, 37036, 37025, 37044, 37043, 37046,
            37050, 36309, 36312, 36313, 36316, 36320, 36321,
            36322, 36325, 36326, 36327, 36329, 36333, 36334,
            36336, 36337, 36338, 36340, 36342, 36348, 36350,
            36351, 36352, 36353, 36354, 36355, 36356, 36358,
            36359, 36360, 36363, 36365, 36366, 36368, 36369,
            36370, 36371, 36373, 36374, 36375, 36376, 36377,
            36378, 36379, 36380, 36384, 36385, 36388, 36389,
            36390, 36391, 36392, 36395, 36397, 36400, 36402,
            36403, 36404, 36406, 36407, 36408, 36411, 36412,
            36414, 36415, 36419, 36421, 36422, 36428, 36429,
            36430, 36431, 36432, 36435, 36436, 36437, 36438,
            36439, 36440, 36442, 36443, 36444, 36445, 36446,
            36447, 36448, 36449, 36450, 36451, 36452, 36453,
            36455, 36456, 36458, 36459, 36462, 36465, 37048,
            37040, 37071, 37061, 37054, 37072, 37060, 37063,
            37075, 37094, 37090, 37084, 37079, 37083, 37099,
            37103, 37118, 37124, 37154, 37150, 37155, 37169,
            37167, 37177, 37187, 37190, 21005, 22850, 21154,
            21164, 21165, 21182, 21759, 21200, 21206, 21232,
            21471, 29166, 30669, 24308, 20981, 20988, 39727,
            21430, 24321, 30042, 24047, 22348, 22441, 22433,
            22654, 22716, 22725, 22737, 22313, 22316, 22314,
            22323, 22329, 22318, 22319, 22364, 22331, 22338,
            22377, 22405, 22379, 22406, 22396, 22395, 22376,
            22381, 22390, 22387, 22445, 22436, 22412, 22450,
            22479, 22439, 22452, 22419, 22432, 22485, 22488,
            22490, 22489, 22482, 22456, 22516, 22511, 22520,
            22500, 22493, 36467, 36469, 36471, 36472, 36473,
            36474, 36475, 36477, 36478, 36480, 36482, 36483,
            36484, 36486, 36488, 36489, 36490, 36491, 36492,
            36493, 36494, 36497, 36498, 36499, 36501, 36502,
            36503, 36504, 36505, 36506, 36507, 36509, 36511,
            36512, 36513, 36514, 36515, 36516, 36517, 36518,
            36519, 36520, 36521, 36522, 36525, 36526, 36528,
            36529, 36531, 36532, 36533, 36534, 36535, 36536,
            36537, 36539, 36540, 36541, 36542, 36543, 36544,
            36545, 36546, 36547, 36548, 36549, 36550, 36551,
            36552, 36553, 36554, 36555, 36556, 36557, 36559,
            36560, 36561, 36562, 36563, 36564, 36565, 36566,
            36567, 36568, 36569, 36570, 36571, 36572, 36573,
            36574, 36575, 36576, 36577, 36578, 36579, 36580,
            22539, 22541, 22525, 22509, 22528, 22558, 22553,
            22596, 22560, 22629, 22636, 22657, 22665, 22682,
            22656, 39336, 40729, 25087, 33401, 33405, 33407,
            33423, 33418, 33448, 33412, 33422, 33425, 33431,
            33433, 33451, 33464, 33470, 33456, 33480, 33482,
            33507, 33432, 33463, 33454, 33483, 33484, 33473,
            33449, 33460, 33441, 33450, 33439, 33476, 33486,
            33444, 33505, 33545, 33527, 33508, 33551, 33543,
            33500, 33524, 33490, 33496, 33548, 33531, 33491,
            33553, 33562, 33542, 33556, 33557, 33504, 33493,
            33564, 33617, 33627, 33628, 33544, 33682, 33596,
            33588, 33585, 33691, 33630, 33583, 33615, 33607,
            33603, 33631, 33600, 33559, 33632, 33581, 33594,
            33587, 33638, 33637, 36581, 36582, 36583, 36584,
            36585, 36586, 36587, 36588, 36589, 36590, 36591,
            36592, 36593, 36594, 36595, 36596, 36597, 36598,
            36599, 36600, 36601, 36602, 36603, 36604, 36605,
            36606, 36607, 36608, 36609, 36610, 36611, 36612,
            36613, 36614, 36615, 36616, 36617, 36618, 36619,
            36620, 36621, 36622, 36623, 36624, 36625, 36626,
            36627, 36628, 36629, 36630, 36631, 36632, 36633,
            36634, 36635, 36636, 36637, 36638, 36639, 36640,
            36641, 36642, 36643, 36644, 36645, 36646, 36647,
            36648, 36649, 36650, 36651, 36652, 36653, 36654,
            36655, 36656, 36657, 36658, 36659, 36660, 36661,
            36662, 36663, 36664, 36665, 36666, 36667, 36668,
            36669, 36670, 36671, 36672, 36673, 36674, 36675,
            36676, 33640, 33563, 33641, 33644, 33642, 33645,
            33646, 33712, 33656, 33715, 33716, 33696, 33706,
            33683, 33692, 33669, 33660, 33718, 33705, 33661,
            33720, 33659, 33688, 33694, 33704, 33722, 33724,
            33729, 33793, 33765, 33752, 22535, 33816, 33803,
            33757, 33789, 33750, 33820, 33848, 33809, 33798,
            33748, 33759, 33807, 33795, 33784, 33785, 33770,
            33733, 33728, 33830, 33776, 33761, 33884, 33873,
            33882, 33881, 33907, 33927, 33928, 33914, 33929,
            33912, 33852, 33862, 33897, 33910, 33932, 33934,
            33841, 33901, 33985, 33997, 34000, 34022, 33981,
            34003, 33994, 33983, 33978, 34016, 33953, 33977,
            33972, 33943, 34021, 34019, 34060, 29965, 34104,
            34032, 34105, 34079, 34106, 36677, 36678, 36679,
            36680, 36681, 36682, 36683, 36684, 36685, 36686,
            36687, 36688, 36689, 36690, 36691, 36692, 36693,
            36694, 36695, 36696, 36697, 36698, 36699, 36700,
            36701, 36702, 36703, 36704, 36705, 36706, 36707,
            36708, 36709, 36714, 36736, 36748, 36754, 36765,
            36768, 36769, 36770, 36772, 36773, 36774, 36775,
            36778, 36780, 36781, 36782, 36783, 36786, 36787,
            36788, 36789, 36791, 36792, 36794, 36795, 36796,
            36799, 36800, 36803, 36806, 36809, 36810, 36811,
            36812, 36813, 36815, 36818, 36822, 36823, 36826,
            36832, 36833, 36835, 36839, 36844, 36847, 36849,
            36850, 36852, 36853, 36854, 36858, 36859, 36860,
            36862, 36863, 36871, 36872, 36876, 36878, 36883,
            36885, 36888, 34134, 34107, 34047, 34044, 34137,
            34120, 34152, 34148, 34142, 34170, 30626, 34115,
            34162, 34171, 34212, 34216, 34183, 34191, 34169,
            34222, 34204, 34181, 34233, 34231, 34224, 34259,
            34241, 34268, 34303, 34343, 34309, 34345, 34326,
            34364, 24318, 24328, 22844, 22849, 32823, 22869,
            22874, 22872, 21263, 23586, 23589, 23596, 23604,
            25164, 25194, 25247, 25275, 25290, 25306, 25303,
            25326, 25378, 25334, 25401, 25419, 25411, 25517,
            25590, 25457, 25466, 25486, 25524, 25453, 25516,
            25482, 25449, 25518, 25532, 25586, 25592, 25568,
            25599, 25540, 25566, 25550, 25682, 25542, 25534,
            25669, 25665, 25611, 25627, 25632, 25612, 25638,
            25633, 25694, 25732, 25709, 25750, 36889, 36892,
            36899, 36900, 36901, 36903, 36904, 36905, 36906,
            36907, 36908, 36912, 36913, 36914, 36915, 36916,
            36919, 36921, 36922, 36925, 36927, 36928, 36931,
            36933, 36934, 36936, 36937, 36938, 36939, 36940,
            36942, 36948, 36949, 36950, 36953, 36954, 36956,
            36957, 36958, 36959, 36960, 36961, 36964, 36966,
            36967, 36969, 36970, 36971, 36972, 36975, 36976,
            36977, 36978, 36979, 36982, 36983, 36984, 36985,
            36986, 36987, 36988, 36990, 36993, 36996, 36997,
            36998, 36999, 37001, 37002, 37004, 37005, 37006,
            37007, 37008, 37010, 37012, 37014, 37016, 37018,
            37020, 37022, 37023, 37024, 37028, 37029, 37031,
            37032, 37033, 37035, 37037, 37042, 37047, 37052,
            37053, 37055, 37056, 25722, 25783, 25784, 25753,
            25786, 25792, 25808, 25815, 25828, 25826, 25865,
            25893, 25902, 24331, 24530, 29977, 24337, 21343,
            21489, 21501, 21481, 21480, 21499, 21522, 21526,
            21510, 21579, 21586, 21587, 21588, 21590, 21571,
            21537, 21591, 21593, 21539, 21554, 21634, 21652,
            21623, 21617, 21604, 21658, 21659, 21636, 21622,
            21606, 21661, 21712, 21677, 21698, 21684, 21714,
            21671, 21670, 21715, 21716, 21618, 21667, 21717,
            21691, 21695, 21708, 21721, 21722, 21724, 21673,
            21674, 21668, 21725, 21711, 21726, 21787, 21735,
            21792, 21757, 21780, 21747, 21794, 21795, 21775,
            21777, 21799, 21802, 21863, 21903, 21941, 21833,
            21869, 21825, 21845, 21823, 21840, 21820, 37058,
            37059, 37062, 37064, 37065, 37067, 37068, 37069,
            37074, 37076, 37077, 37078, 37080, 37081, 37082,
            37086, 37087, 37088, 37091, 37092, 37093, 37097,
            37098, 37100, 37102, 37104, 37105, 37106, 37107,
            37109, 37110, 37111, 37113, 37114, 37115, 37116,
            37119, 37120, 37121, 37123, 37125, 37126, 37127,
            37128, 37129, 37130, 37131, 37132, 37133, 37134,
            37135, 37136, 37137, 37138, 37139, 37140, 37141,
            37142, 37143, 37144, 37146, 37147, 37148, 37149,
            37151, 37152, 37153, 37156, 37157, 37158, 37159,
            37160, 37161, 37162, 37163, 37164, 37165, 37166,
            37168, 37170, 37171, 37172, 37173, 37174, 37175,
            37176, 37178, 37179, 37180, 37181, 37182, 37183,
            37184, 37185, 37186, 37188, 21815, 21846, 21877,
            21878, 21879, 21811, 21808, 21852, 21899, 21970,
            21891, 21937, 21945, 21896, 21889, 21919, 21886,
            21974, 21905, 21883, 21983, 21949, 21950, 21908,
            21913, 21994, 22007, 21961, 22047, 21969, 21995,
            21996, 21972, 21990, 21981, 21956, 21999, 21989,
            22002, 22003, 21964, 21965, 21992, 22005, 21988,
            36756, 22046, 22024, 22028, 22017, 22052, 22051,
            22014, 22016, 22055, 22061, 22104, 22073, 22103,
            22060, 22093, 22114, 22105, 22108, 22092, 22100,
            22150, 22116, 22129, 22123, 22139, 22140, 22149,
            22163, 22191, 22228, 22231, 22237, 22241, 22261,
            22251, 22265, 22271, 22276, 22282, 22281, 22300,
            24079, 24089, 24084, 24081, 24113, 24123, 24124,
            37189, 37191, 37192, 37201, 37203, 37204, 37205,
            37206, 37208, 37209, 37211, 37212, 37215, 37216,
            37222, 37223, 37224, 37227, 37229, 37235, 37242,
            37243, 37244, 37248, 37249, 37250, 37251, 37252,
            37254, 37256, 37258, 37262, 37263, 37267, 37268,
            37269, 37270, 37271, 37272, 37273, 37276, 37277,
            37278, 37279, 37280, 37281, 37284, 37285, 37286,
            37287, 37288, 37289, 37291, 37292, 37296, 37297,
            37298, 37299, 37302, 37303, 37304, 37305, 37307,
            37308, 37309, 37310, 37311, 37312, 37313, 37314,
            37315, 37316, 37317, 37318, 37320, 37323, 37328,
            37330, 37331, 37332, 37333, 37334, 37335, 37336,
            37337, 37338, 37339, 37341, 37342, 37343, 37344,
            37345, 37346, 37347, 37348, 37349, 24119, 24132,
            24148, 24155, 24158, 24161, 23692, 23674, 23693,
            23696, 23702, 23688, 23704, 23705, 23697, 23706,
            23708, 23733, 23714, 23741, 23724, 23723, 23729,
            23715, 23745, 23735, 23748, 23762, 23780, 23755,
            23781, 23810, 23811, 23847, 23846, 23854, 23844,
            23838, 23814, 23835, 23896, 23870, 23860, 23869,
            23916, 23899, 23919, 23901, 23915, 23883, 23882,
            23913, 23924, 23938, 23961, 23965, 35955, 23991,
            24005, 24435, 24439, 24450, 24455, 24457, 24460,
            24469, 24473, 24476, 24488, 24493, 24501, 24508,
            34914, 24417, 29357, 29360, 29364, 29367, 29368,
            29379, 29377, 29390, 29389, 29394, 29416, 29423,
            29417, 29426, 29428, 29431, 29441, 29427, 29443,
            29434, 37350, 37351, 37352, 37353, 37354, 37355,
            37356, 37357, 37358, 37359, 37360, 37361, 37362,
            37363, 37364, 37365, 37366, 37367, 37368, 37369,
            37370, 37371, 37372, 37373, 37374, 37375, 37376,
            37377, 37378, 37379, 37380, 37381, 37382, 37383,
            37384, 37385, 37386, 37387, 37388, 37389, 37390,
            37391, 37392, 37393, 37394, 37395, 37396, 37397,
            37398, 37399, 37400, 37401, 37402, 37403, 37404,
            37405, 37406, 37407, 37408, 37409, 37410, 37411,
            37412, 37413, 37414, 37415, 37416, 37417, 37418,
            37419, 37420, 37421, 37422, 37423, 37424, 37425,
            37426, 37427, 37428, 37429, 37430, 37431, 37432,
            37433, 37434, 37435, 37436, 37437, 37438, 37439,
            37440, 37441, 37442, 37443, 37444, 37445, 29435,
            29463, 29459, 29473, 29450, 29470, 29469, 29461,
            29474, 29497, 29477, 29484, 29496, 29489, 29520,
            29517, 29527, 29536, 29548, 29551, 29566, 33307,
            22821, 39143, 22820, 22786, 39267, 39271, 39272,
            39273, 39274, 39275, 39276, 39284, 39287, 39293,
            39296, 39300, 39303, 39306, 39309, 39312, 39313,
            39315, 39316, 39317, 24192, 24209, 24203, 24214,
            24229, 24224, 24249, 24245, 24254, 24243, 36179,
            24274, 24273, 24283, 24296, 24298, 33210, 24516,
            24521, 24534, 24527, 24579, 24558, 24580, 24545,
            24548, 24574, 24581, 24582, 24554, 24557, 24568,
            24601, 24629, 24614, 24603, 24591, 24589, 24617,
            24619, 24586, 24639, 24609, 24696, 24697, 24699,
            24698, 24642, 37446, 37447, 37448, 37449, 37450,
            37451, 37452, 37453, 37454, 37455, 37456, 37457,
            37458, 37459, 37460, 37461, 37462, 37463, 37464,
            37465, 37466, 37467, 37468, 37469, 37470, 37471,
            37472, 37473, 37474, 37475, 37476, 37477, 37478,
            37479, 37480, 37481, 37482, 37483, 37484, 37485,
            37486, 37487, 37488, 37489, 37490, 37491, 37493,
            37494, 37495, 37496, 37497, 37498, 37499, 37500,
            37501, 37502, 37503, 37504, 37505, 37506, 37507,
            37508, 37509, 37510, 37511, 37512, 37513, 37514,
            37515, 37516, 37517, 37519, 37520, 37521, 37522,
            37523, 37524, 37525, 37526, 37527, 37528, 37529,
            37530, 37531, 37532, 37533, 37534, 37535, 37536,
            37537, 37538, 37539, 37540, 37541, 37542, 37543,
            24682, 24701, 24726, 24730, 24749, 24733, 24707,
            24722, 24716, 24731, 24812, 24763, 24753, 24797,
            24792, 24774, 24794, 24756, 24864, 24870, 24853,
            24867, 24820, 24832, 24846, 24875, 24906, 24949,
            25004, 24980, 24999, 25015, 25044, 25077, 24541,
            38579, 38377, 38379, 38385, 38387, 38389, 38390,
            38396, 38398, 38403, 38404, 38406, 38408, 38410,
            38411, 38412, 38413, 38415, 38418, 38421, 38422,
            38423, 38425, 38426, 20012, 29247, 25109, 27701,
            27732, 27740, 27722, 27811, 27781, 27792, 27796,
            27788, 27752, 27753, 27764, 27766, 27782, 27817,
            27856, 27860, 27821, 27895, 27896, 27889, 27863,
            27826, 27872, 27862, 27898, 27883, 27886, 27825,
            27859, 27887, 27902, 37544, 37545, 37546, 37547,
            37548, 37549, 37551, 37552, 37553, 37554, 37555,
            37556, 37557, 37558, 37559, 37560, 37561, 37562,
            37563, 37564, 37565, 37566, 37567, 37568, 37569,
            37570, 37571, 37572, 37573, 37574, 37575, 37577,
            37578, 37579, 37580, 37581, 37582, 37583, 37584,
            37585, 37586, 37587, 37588, 37589, 37590, 37591,
            37592, 37593, 37594, 37595, 37596, 37597, 37598,
            37599, 37600, 37601, 37602, 37603, 37604, 37605,
            37606, 37607, 37608, 37609, 37610, 37611, 37612,
            37613, 37614, 37615, 37616, 37617, 37618, 37619,
            37620, 37621, 37622, 37623, 37624, 37625, 37626,
            37627, 37628, 37629, 37630, 37631, 37632, 37633,
            37634, 37635, 37636, 37637, 37638, 37639, 37640,
            37641, 27961, 27943, 27916, 27971, 27976, 27911,
            27908, 27929, 27918, 27947, 27981, 27950, 27957,
            27930, 27983, 27986, 27988, 27955, 28049, 28015,
            28062, 28064, 27998, 28051, 28052, 27996, 28000,
            28028, 28003, 28186, 28103, 28101, 28126, 28174,
            28095, 28128, 28177, 28134, 28125, 28121, 28182,
            28075, 28172, 28078, 28203, 28270, 28238, 28267,
            28338, 28255, 28294, 28243, 28244, 28210, 28197,
            28228, 28383, 28337, 28312, 28384, 28461, 28386,
            28325, 28327, 28349, 28347, 28343, 28375, 28340,
            28367, 28303, 28354, 28319, 28514, 28486, 28487,
            28452, 28437, 28409, 28463, 28470, 28491, 28532,
            28458, 28425, 28457, 28553, 28557, 28556, 28536,
            28530, 28540, 28538, 28625, 37642, 37643, 37644,
            37645, 37646, 37647, 37648, 37649, 37650, 37651,
            37652, 37653, 37654, 37655, 37656, 37657, 37658,
            37659, 37660, 37661, 37662, 37663, 37664, 37665,
            37666, 37667, 37668, 37669, 37670, 37671, 37672,
            37673, 37674, 37675, 37676, 37677, 37678, 37679,
            37680, 37681, 37682, 37683, 37684, 37685, 37686,
            37687, 37688, 37689, 37690, 37691, 37692, 37693,
            37695, 37696, 37697, 37698, 37699, 37700, 37701,
            37702, 37703, 37704, 37705, 37706, 37707, 37708,
            37709, 37710, 37711, 37712, 37713, 37714, 37715,
            37716, 37717, 37718, 37719, 37720, 37721, 37722,
            37723, 37724, 37725, 37726, 37727, 37728, 37729,
            37730, 37731, 37732, 37733, 37734, 37735, 37736,
            37737, 37739, 28617, 28583, 28601, 28598, 28610,
            28641, 28654, 28638, 28640, 28655, 28698, 28707,
            28699, 28729, 28725, 28751, 28766, 23424, 23428,
            23445, 23443, 23461, 23480, 29999, 39582, 25652,
            23524, 23534, 35120, 23536, 36423, 35591, 36790,
            36819, 36821, 36837, 36846, 36836, 36841, 36838,
            36851, 36840, 36869, 36868, 36875, 36902, 36881,
            36877, 36886, 36897, 36917, 36918, 36909, 36911,
            36932, 36945, 36946, 36944, 36968, 36952, 36962,
            36955, 26297, 36980, 36989, 36994, 37000, 36995,
            37003, 24400, 24407, 24406, 24408, 23611, 21675,
            23632, 23641, 23409, 23651, 23654, 32700, 24362,
            24361, 24365, 33396, 24380, 39739, 23662, 22913,
            22915, 22925, 22953, 22954, 22947, 37740, 37741,
            37742, 37743, 37744, 37745, 37746, 37747, 37748,
            37749, 37750, 37751, 37752, 37753, 37754, 37755,
            37756, 37757, 37758, 37759, 37760, 37761, 37762,
            37763, 37764, 37765, 37766, 37767, 37768, 37769,
            37770, 37771, 37772, 37773, 37774, 37776, 37777,
            37778, 37779, 37780, 37781, 37782, 37783, 37784,
            37785, 37786, 37787, 37788, 37789, 37790, 37791,
            37792, 37793, 37794, 37795, 37796, 37797, 37798,
            37799, 37800, 37801, 37802, 37803, 37804, 37805,
            37806, 37807, 37808, 37809, 37810, 37811, 37812,
            37813, 37814, 37815, 37816, 37817, 37818, 37819,
            37820, 37821, 37822, 37823, 37824, 37825, 37826,
            37827, 37828, 37829, 37830, 37831, 37832, 37833,
            37835, 37836, 37837, 22935, 22986, 22955, 22942,
            22948, 22994, 22962, 22959, 22999, 22974, 23045,
            23046, 23005, 23048, 23011, 23000, 23033, 23052,
            23049, 23090, 23092, 23057, 23075, 23059, 23104,
            23143, 23114, 23125, 23100, 23138, 23157, 33004,
            23210, 23195, 23159, 23162, 23230, 23275, 23218,
            23250, 23252, 23224, 23264, 23267, 23281, 23254,
            23270, 23256, 23260, 23305, 23319, 23318, 23346,
            23351, 23360, 23573, 23580, 23386, 23397, 23411,
            23377, 23379, 23394, 39541, 39543, 39544, 39546,
            39551, 39549, 39552, 39553, 39557, 39560, 39562,
            39568, 39570, 39571, 39574, 39576, 39579, 39580,
            39581, 39583, 39584, 39586, 39587, 39589, 39591,
            32415, 32417, 32419, 32421, 32424, 32425, 37838,
            37839, 37840, 37841, 37842, 37843, 37844, 37845,
            37847, 37848, 37849, 37850, 37851, 37852, 37853,
            37854, 37855, 37856, 37857, 37858, 37859, 37860,
            37861, 37862, 37863, 37864, 37865, 37866, 37867,
            37868, 37869, 37870, 37871, 37872, 37873, 37874,
            37875, 37876, 37877, 37878, 37879, 37880, 37881,
            37882, 37883, 37884, 37885, 37886, 37887, 37888,
            37889, 37890, 37891, 37892, 37893, 37894, 37895,
            37896, 37897, 37898, 37899, 37900, 37901, 37902,
            37903, 37904, 37905, 37906, 37907, 37908, 37909,
            37910, 37911, 37912, 37913, 37914, 37915, 37916,
            37917, 37918, 37919, 37920, 37921, 37922, 37923,
            37924, 37925, 37926, 37927, 37928, 37929, 37930,
            37931, 37932, 37933, 37934, 32429, 32432, 32446,
            32448, 32449, 32450, 32457, 32459, 32460, 32464,
            32468, 32471, 32475, 32480, 32481, 32488, 32491,
            32494, 32495, 32497, 32498, 32525, 32502, 32506,
            32507, 32510, 32513, 32514, 32515, 32519, 32520,
            32523, 32524, 32527, 32529, 32530, 32535, 32537,
            32540, 32539, 32543, 32545, 32546, 32547, 32548,
            32549, 32550, 32551, 32554, 32555, 32556, 32557,
            32559, 32560, 32561, 32562, 32563, 32565, 24186,
            30079, 24027, 30014, 37013, 29582, 29585, 29614,
            29602, 29599, 29647, 29634, 29649, 29623, 29619,
            29632, 29641, 29640, 29669, 29657, 39036, 29706,
            29673, 29671, 29662, 29626, 29682, 29711, 29738,
            29787, 29734, 29733, 29736, 29744, 29742, 29740,
            37935, 37936, 37937, 37938, 37939, 37940, 37941,
            37942, 37943, 37944, 37945, 37946, 37947, 37948,
            37949, 37951, 37952, 37953, 37954, 37955, 37956,
            37957, 37958, 37959, 37960, 37961, 37962, 37963,
            37964, 37965, 37966, 37967, 37968, 37969, 37970,
            37971, 37972, 37973, 37974, 37975, 37976, 37977,
            37978, 37979, 37980, 37981, 37982, 37983, 37984,
            37985, 37986, 37987, 37988, 37989, 37990, 37991,
            37992, 37993, 37994, 37996, 37997, 37998, 37999,
            38000, 38001, 38002, 38003, 38004, 38005, 38006,
            38007, 38008, 38009, 38010, 38011, 38012, 38013,
            38014, 38015, 38016, 38017, 38018, 38019, 38020,
            38033, 38038, 38040, 38087, 38095, 38099, 38100,
            38106, 38118, 38139, 38172, 38176, 29723, 29722,
            29761, 29788, 29783, 29781, 29785, 29815, 29805,
            29822, 29852, 29838, 29824, 29825, 29831, 29835,
            29854, 29864, 29865, 29840, 29863, 29906, 29882,
            38890, 38891, 38892, 26444, 26451, 26462, 26440,
            26473, 26533, 26503, 26474, 26483, 26520, 26535,
            26485, 26536, 26526, 26541, 26507, 26487, 26492,
            26608, 26633, 26584, 26634, 26601, 26544, 26636,
            26585, 26549, 26586, 26547, 26589, 26624, 26563,
            26552, 26594, 26638, 26561, 26621, 26674, 26675,
            26720, 26721, 26702, 26722, 26692, 26724, 26755,
            26653, 26709, 26726, 26689, 26727, 26688, 26686,
            26698, 26697, 26665, 26805, 26767, 26740, 26743,
            26771, 26731, 26818, 26990, 26876, 26911, 26912,
            26873, 38183, 38195, 38205, 38211, 38216, 38219,
            38229, 38234, 38240, 38254, 38260, 38261, 38263,
            38264, 38265, 38266, 38267, 38268, 38269, 38270,
            38272, 38273, 38274, 38275, 38276, 38277, 38278,
            38279, 38280, 38281, 38282, 38283, 38284, 38285,
            38286, 38287, 38288, 38289, 38290, 38291, 38292,
            38293, 38294, 38295, 38296, 38297, 38298, 38299,
            38300, 38301, 38302, 38303, 38304, 38305, 38306,
            38307, 38308, 38309, 38310, 38311, 38312, 38313,
            38314, 38315, 38316, 38317, 38318, 38319, 38320,
            38321, 38322, 38323, 38324, 38325, 38326, 38327,
            38328, 38329, 38330, 38331, 38332, 38333, 38334,
            38335, 38336, 38337, 38338, 38339, 38340, 38341,
            38342, 38343, 38344, 38345, 38346, 38347, 26916,
            26864, 26891, 26881, 26967, 26851, 26896, 26993,
            26937, 26976, 26946, 26973, 27012, 26987, 27008,
            27032, 27000, 26932, 27084, 27015, 27016, 27086,
            27017, 26982, 26979, 27001, 27035, 27047, 27067,
            27051, 27053, 27092, 27057, 27073, 27082, 27103,
            27029, 27104, 27021, 27135, 27183, 27117, 27159,
            27160, 27237, 27122, 27204, 27198, 27296, 27216,
            27227, 27189, 27278, 27257, 27197, 27176, 27224,
            27260, 27281, 27280, 27305, 27287, 27307, 29495,
            29522, 27521, 27522, 27527, 27524, 27538, 27539,
            27533, 27546, 27547, 27553, 27562, 36715, 36717,
            36721, 36722, 36723, 36725, 36726, 36728, 36727,
            36729, 36730, 36732, 36734, 36737, 36738, 36740,
            36743, 36747, 38348, 38349, 38350, 38351, 38352,
            38353, 38354, 38355, 38356, 38357, 38358, 38359,
            38360, 38361, 38362, 38363, 38364, 38365, 38366,
            38367, 38368, 38369, 38370, 38371, 38372, 38373,
            38374, 38375, 38380, 38399, 38407, 38419, 38424,
            38427, 38430, 38432, 38435, 38436, 38437, 38438,
            38439, 38440, 38441, 38443, 38444, 38445, 38447,
            38448, 38455, 38456, 38457, 38458, 38462, 38465,
            38467, 38474, 38478, 38479, 38481, 38482, 38483,
            38486, 38487, 38488, 38489, 38490, 38492, 38493,
            38494, 38496, 38499, 38501, 38502, 38507, 38509,
            38510, 38511, 38512, 38513, 38515, 38520, 38521,
            38522, 38523, 38524, 38525, 38526, 38527, 38528,
            38529, 38530, 38531, 38532, 38535, 38537, 38538,
            36749, 36750, 36751, 36760, 36762, 36558, 25099,
            25111, 25115, 25119, 25122, 25121, 25125, 25124,
            25132, 33255, 29935, 29940, 29951, 29967, 29969,
            29971, 25908, 26094, 26095, 26096, 26122, 26137,
            26482, 26115, 26133, 26112, 28805, 26359, 26141,
            26164, 26161, 26166, 26165, 32774, 26207, 26196,
            26177, 26191, 26198, 26209, 26199, 26231, 26244,
            26252, 26279, 26269, 26302, 26331, 26332, 26342,
            26345, 36146, 36147, 36150, 36155, 36157, 36160,
            36165, 36166, 36168, 36169, 36167, 36173, 36181,
            36185, 35271, 35274, 35275, 35276, 35278, 35279,
            35280, 35281, 29294, 29343, 29277, 29286, 29295,
            29310, 29311, 29316, 29323, 29325, 29327, 29330,
            25352, 25394, 25520, 38540, 38542, 38545, 38546,
            38547, 38549, 38550, 38554, 38555, 38557, 38558,
            38559, 38560, 38561, 38562, 38563, 38564, 38565,
            38566, 38568, 38569, 38570, 38571, 38572, 38573,
            38574, 38575, 38577, 38578, 38580, 38581, 38583,
            38584, 38586, 38587, 38591, 38594, 38595, 38600,
            38602, 38603, 38608, 38609, 38611, 38612, 38614,
            38615, 38616, 38617, 38618, 38619, 38620, 38621,
            38622, 38623, 38625, 38626, 38627, 38628, 38629,
            38630, 38631, 38635, 38636, 38637, 38638, 38640,
            38641, 38642, 38644, 38645, 38648, 38650, 38651,
            38652, 38653, 38655, 38658, 38659, 38661, 38666,
            38667, 38668, 38672, 38673, 38674, 38676, 38677,
            38679, 38680, 38681, 38682, 38683, 38685, 38687,
            38688, 25663, 25816, 32772, 27626, 27635, 27645,
            27637, 27641, 27653, 27655, 27654, 27661, 27669,
            27672, 27673, 27674, 27681, 27689, 27684, 27690,
            27698, 25909, 25941, 25963, 29261, 29266, 29270,
            29232, 34402, 21014, 32927, 32924, 32915, 32956,
            26378, 32957, 32945, 32939, 32941, 32948, 32951,
            32999, 33000, 33001, 33002, 32987, 32962, 32964,
            32985, 32973, 32983, 26384, 32989, 33003, 33009,
            33012, 33005, 33037, 33038, 33010, 33020, 26389,
            33042, 35930, 33078, 33054, 33068, 33048, 33074,
            33096, 33100, 33107, 33140, 33113, 33114, 33137,
            33120, 33129, 33148, 33149, 33133, 33127, 22605,
            23221, 33160, 33154, 33169, 28373, 33187, 33194,
            33228, 26406, 33226, 33211, 38689, 38690, 38691,
            38692, 38693, 38694, 38695, 38696, 38697, 38699,
            38700, 38702, 38703, 38705, 38707, 38708, 38709,
            38710, 38711, 38714, 38715, 38716, 38717, 38719,
            38720, 38721, 38722, 38723, 38724, 38725, 38726,
            38727, 38728, 38729, 38730, 38731, 38732, 38733,
            38734, 38735, 38736, 38737, 38740, 38741, 38743,
            38744, 38746, 38748, 38749, 38751, 38755, 38756,
            38758, 38759, 38760, 38762, 38763, 38764, 38765,
            38766, 38767, 38768, 38769, 38770, 38773, 38775,
            38776, 38777, 38778, 38779, 38781, 38782, 38783,
            38784, 38785, 38786, 38787, 38788, 38790, 38791,
            38792, 38793, 38794, 38796, 38798, 38799, 38800,
            38803, 38805, 38806, 38807, 38809, 38810, 38811,
            38812, 38813, 33217, 33190, 27428, 27447, 27449,
            27459, 27462, 27481, 39121, 39122, 39123, 39125,
            39129, 39130, 27571, 24384, 27586, 35315, 26000,
            40785, 26003, 26044, 26054, 26052, 26051, 26060,
            26062, 26066, 26070, 28800, 28828, 28822, 28829,
            28859, 28864, 28855, 28843, 28849, 28904, 28874,
            28944, 28947, 28950, 28975, 28977, 29043, 29020,
            29032, 28997, 29042, 29002, 29048, 29050, 29080,
            29107, 29109, 29096, 29088, 29152, 29140, 29159,
            29177, 29213, 29224, 28780, 28952, 29030, 29113,
            25150, 25149, 25155, 25160, 25161, 31035, 31040,
            31046, 31049, 31067, 31068, 31059, 31066, 31074,
            31063, 31072, 31087, 31079, 31098, 31109, 31114,
            31130, 31143, 31155, 24529, 24528, 38814, 38815,
            38817, 38818, 38820, 38821, 38822, 38823, 38824,
            38825, 38826, 38828, 38830, 38832, 38833, 38835,
            38837, 38838, 38839, 38840, 38841, 38842, 38843,
            38844, 38845, 38846, 38847, 38848, 38849, 38850,
            38851, 38852, 38853, 38854, 38855, 38856, 38857,
            38858, 38859, 38860, 38861, 38862, 38863, 38864,
            38865, 38866, 38867, 38868, 38869, 38870, 38871,
            38872, 38873, 38874, 38875, 38876, 38877, 38878,
            38879, 38880, 38881, 38882, 38883, 38884, 38885,
            38888, 38894, 38895, 38896, 38897, 38898, 38900,
            38903, 38904, 38905, 38906, 38907, 38908, 38909,
            38910, 38911, 38912, 38913, 38914, 38915, 38916,
            38917, 38918, 38919, 38920, 38921, 38922, 38923,
            38924, 38925, 38926, 24636, 24669, 24666, 24679,
            24641, 24665, 24675, 24747, 24838, 24845, 24925,
            25001, 24989, 25035, 25041, 25094, 32896, 32895,
            27795, 27894, 28156, 30710, 30712, 30720, 30729,
            30743, 30744, 30737, 26027, 30765, 30748, 30749,
            30777, 30778, 30779, 30751, 30780, 30757, 30764,
            30755, 30761, 30798, 30829, 30806, 30807, 30758,
            30800, 30791, 30796, 30826, 30875, 30867, 30874,
            30855, 30876, 30881, 30883, 30898, 30905, 30885,
            30932, 30937, 30921, 30956, 30962, 30981, 30964,
            30995, 31012, 31006, 31028, 40859, 40697, 40699,
            40700, 30449, 30468, 30477, 30457, 30471, 30472,
            30490, 30498, 30489, 30509, 30502, 30517, 30520,
            30544, 30545, 30535, 30531, 30554, 30568, 38927,
            38928, 38929, 38930, 38931, 38932, 38933, 38934,
            38935, 38936, 38937, 38938, 38939, 38940, 38941,
            38942, 38943, 38944, 38945, 38946, 38947, 38948,
            38949, 38950, 38951, 38952, 38953, 38954, 38955,
            38956, 38957, 38958, 38959, 38960, 38961, 38962,
            38963, 38964, 38965, 38966, 38967, 38968, 38969,
            38970, 38971, 38972, 38973, 38974, 38975, 38976,
            38977, 38978, 38979, 38980, 38981, 38982, 38983,
            38984, 38985, 38986, 38987, 38988, 38989, 38990,
            38991, 38992, 38993, 38994, 38995, 38996, 38997,
            38998, 38999, 39000, 39001, 39002, 39003, 39004,
            39005, 39006, 39007, 39008, 39009, 39010, 39011,
            39012, 39013, 39014, 39015, 39016, 39017, 39018,
            39019, 39020, 39021, 39022, 30562, 30565, 30591,
            30605, 30589, 30592, 30604, 30609, 30623, 30624,
            30640, 30645, 30653, 30010, 30016, 30030, 30027,
            30024, 30043, 30066, 30073, 30083, 32600, 32609,
            32607, 35400, 32616, 32628, 32625, 32633, 32641,
            32638, 30413, 30437, 34866, 38021, 38022, 38023,
            38027, 38026, 38028, 38029, 38031, 38032, 38036,
            38039, 38037, 38042, 38043, 38044, 38051, 38052,
            38059, 38058, 38061, 38060, 38063, 38064, 38066,
            38068, 38070, 38071, 38072, 38073, 38074, 38076,
            38077, 38079, 38084, 38088, 38089, 38090, 38091,
            38092, 38093, 38094, 38096, 38097, 38098, 38101,
            38102, 38103, 38105, 38104, 38107, 38110, 38111,
            38112, 38114, 38116, 38117, 38119, 38120, 38122,
            39023, 39024, 39025, 39026, 39027, 39028, 39051,
            39054, 39058, 39061, 39065, 39075, 39080, 39081,
            39082, 39083, 39084, 39085, 39086, 39087, 39088,
            39089, 39090, 39091, 39092, 39093, 39094, 39095,
            39096, 39097, 39098, 39099, 39100, 39101, 39102,
            39103, 39104, 39105, 39106, 39107, 39108, 39109,
            39110, 39111, 39112, 39113, 39114, 39115, 39116,
            39117, 39119, 39120, 39124, 39126, 39127, 39131,
            39132, 39133, 39136, 39137, 39138, 39139, 39140,
            39141, 39142, 39145, 39146, 39147, 39148, 39149,
            39150, 39151, 39152, 39153, 39154, 39155, 39156,
            39157, 39158, 39159, 39160, 39161, 39162, 39163,
            39164, 39165, 39166, 39167, 39168, 39169, 39170,
            39171, 39172, 39173, 39174, 39175, 38121, 38123,
            38126, 38127, 38131, 38132, 38133, 38135, 38137,
            38140, 38141, 38143, 38147, 38146, 38150, 38151,
            38153, 38154, 38157, 38158, 38159, 38162, 38163,
            38164, 38165, 38166, 38168, 38171, 38173, 38174,
            38175, 38178, 38186, 38187, 38185, 38188, 38193,
            38194, 38196, 38198, 38199, 38200, 38204, 38206,
            38207, 38210, 38197, 38212, 38213, 38214, 38217,
            38220, 38222, 38223, 38226, 38227, 38228, 38230,
            38231, 38232, 38233, 38235, 38238, 38239, 38237,
            38241, 38242, 38244, 38245, 38246, 38247, 38248,
            38249, 38250, 38251, 38252, 38255, 38257, 38258,
            38259, 38202, 30695, 30700, 38601, 31189, 31213,
            31203, 31211, 31238, 23879, 31235, 31234, 31262,
            31252, 39176, 39177, 39178, 39179, 39180, 39182,
            39183, 39185, 39186, 39187, 39188, 39189, 39190,
            39191, 39192, 39193, 39194, 39195, 39196, 39197,
            39198, 39199, 39200, 39201, 39202, 39203, 39204,
            39205, 39206, 39207, 39208, 39209, 39210, 39211,
            39212, 39213, 39215, 39216, 39217, 39218, 39219,
            39220, 39221, 39222, 39223, 39224, 39225, 39226,
            39227, 39228, 39229, 39230, 39231, 39232, 39233,
            39234, 39235, 39236, 39237, 39238, 39239, 39240,
            39241, 39242, 39243, 39244, 39245, 39246, 39247,
            39248, 39249, 39250, 39251, 39254, 39255, 39256,
            39257, 39258, 39259, 39260, 39261, 39262, 39263,
            39264, 39265, 39266, 39268, 39270, 39283, 39288,
            39289, 39291, 39294, 39298, 39299, 39305, 31289,
            31287, 31313, 40655, 39333, 31344, 30344, 30350,
            30355, 30361, 30372, 29918, 29920, 29996, 40480,
            40482, 40488, 40489, 40490, 40491, 40492, 40498,
            40497, 40502, 40504, 40503, 40505, 40506, 40510,
            40513, 40514, 40516, 40518, 40519, 40520, 40521,
            40523, 40524, 40526, 40529, 40533, 40535, 40538,
            40539, 40540, 40542, 40547, 40550, 40551, 40552,
            40553, 40554, 40555, 40556, 40561, 40557, 40563,
            30098, 30100, 30102, 30112, 30109, 30124, 30115,
            30131, 30132, 30136, 30148, 30129, 30128, 30147,
            30146, 30166, 30157, 30179, 30184, 30182, 30180,
            30187, 30183, 30211, 30193, 30204, 30207, 30224,
            30208, 30213, 30220, 30231, 30218, 30245, 30232,
            30229, 30233, 39308, 39310, 39322, 39323, 39324,
            39325, 39326, 39327, 39328, 39329, 39330, 39331,
            39332, 39334, 39335, 39337, 39338, 39339, 39340,
            39341, 39342, 39343, 39344, 39345, 39346, 39347,
            39348, 39349, 39350, 39351, 39352, 39353, 39354,
            39355, 39356, 39357, 39358, 39359, 39360, 39361,
            39362, 39363, 39364, 39365, 39366, 39367, 39368,
            39369, 39370, 39371, 39372, 39373, 39374, 39375,
            39376, 39377, 39378, 39379, 39380, 39381, 39382,
            39383, 39384, 39385, 39386, 39387, 39388, 39389,
            39390, 39391, 39392, 39393, 39394, 39395, 39396,
            39397, 39398, 39399, 39400, 39401, 39402, 39403,
            39404, 39405, 39406, 39407, 39408, 39409, 39410,
            39411, 39412, 39413, 39414, 39415, 39416, 39417,
            30235, 30268, 30242, 30240, 30272, 30253, 30256,
            30271, 30261, 30275, 30270, 30259, 30285, 30302,
            30292, 30300, 30294, 30315, 30319, 32714, 31462,
            31352, 31353, 31360, 31366, 31368, 31381, 31398,
            31392, 31404, 31400, 31405, 31411, 34916, 34921,
            34930, 34941, 34943, 34946, 34978, 35014, 34999,
            35004, 35017, 35042, 35022, 35043, 35045, 35057,
            35098, 35068, 35048, 35070, 35056, 35105, 35097,
            35091, 35099, 35082, 35124, 35115, 35126, 35137,
            35174, 35195, 30091, 32997, 30386, 30388, 30684,
            32786, 32788, 32790, 32796, 32800, 32802, 32805,
            32806, 32807, 32809, 32808, 32817, 32779, 32821,
            32835, 32838, 32845, 32850, 32873, 32881, 35203,
            39032, 39040, 39043, 39418, 39419, 39420, 39421,
            39422, 39423, 39424, 39425, 39426, 39427, 39428,
            39429, 39430, 39431, 39432, 39433, 39434, 39435,
            39436, 39437, 39438, 39439, 39440, 39441, 39442,
            39443, 39444, 39445, 39446, 39447, 39448, 39449,
            39450, 39451, 39452, 39453, 39454, 39455, 39456,
            39457, 39458, 39459, 39460, 39461, 39462, 39463,
            39464, 39465, 39466, 39467, 39468, 39469, 39470,
            39471, 39472, 39473, 39474, 39475, 39476, 39477,
            39478, 39479, 39480, 39481, 39482, 39483, 39484,
            39485, 39486, 39487, 39488, 39489, 39490, 39491,
            39492, 39493, 39494, 39495, 39496, 39497, 39498,
            39499, 39500, 39501, 39502, 39503, 39504, 39505,
            39506, 39507, 39508, 39509, 39510, 39511, 39512,
            39513, 39049, 39052, 39053, 39055, 39060, 39066,
            39067, 39070, 39071, 39073, 39074, 39077, 39078,
            34381, 34388, 34412, 34414, 34431, 34426, 34428,
            34427, 34472, 34445, 34443, 34476, 34461, 34471,
            34467, 34474, 34451, 34473, 34486, 34500, 34485,
            34510, 34480, 34490, 34481, 34479, 34505, 34511,
            34484, 34537, 34545, 34546, 34541, 34547, 34512,
            34579, 34526, 34548, 34527, 34520, 34513, 34563,
            34567, 34552, 34568, 34570, 34573, 34569, 34595,
            34619, 34590, 34597, 34606, 34586, 34622, 34632,
            34612, 34609, 34601, 34615, 34623, 34690, 34594,
            34685, 34686, 34683, 34656, 34672, 34636, 34670,
            34699, 34643, 34659, 34684, 34660, 34649, 34661,
            34707, 34735, 34728, 34770, 39514, 39515, 39516,
            39517, 39518, 39519, 39520, 39521, 39522, 39523,
            39524, 39525, 39526, 39527, 39528, 39529, 39530,
            39531, 39538, 39555, 39561, 39565, 39566, 39572,
            39573, 39577, 39590, 39593, 39594, 39595, 39596,
            39597, 39598, 39599, 39602, 39603, 39604, 39605,
            39609, 39611, 39613, 39614, 39615, 39619, 39620,
            39622, 39623, 39624, 39625, 39626, 39629, 39630,
            39631, 39632, 39634, 39636, 39637, 39638, 39639,
            39641, 39642, 39643, 39644, 39645, 39646, 39648,
            39650, 39651, 39652, 39653, 39655, 39656, 39657,
            39658, 39660, 39662, 39664, 39665, 39666, 39667,
            39668, 39669, 39670, 39671, 39672, 39674, 39676,
            39677, 39678, 39679, 39680, 39681, 39682, 39684,
            39685, 39686, 34758, 34696, 34693, 34733, 34711,
            34691, 34731, 34789, 34732, 34741, 34739, 34763,
            34771, 34749, 34769, 34752, 34762, 34779, 34794,
            34784, 34798, 34838, 34835, 34814, 34826, 34843,
            34849, 34873, 34876, 32566, 32578, 32580, 32581,
            33296, 31482, 31485, 31496, 31491, 31492, 31509,
            31498, 31531, 31503, 31559, 31544, 31530, 31513,
            31534, 31537, 31520, 31525, 31524, 31539, 31550,
            31518, 31576, 31578, 31557, 31605, 31564, 31581,
            31584, 31598, 31611, 31586, 31602, 31601, 31632,
            31654, 31655, 31672, 31660, 31645, 31656, 31621,
            31658, 31644, 31650, 31659, 31668, 31697, 31681,
            31692, 31709, 31706, 31717, 31718, 31722, 31756,
            31742, 31740, 31759, 31766, 31755, 39687, 39689,
            39690, 39691, 39692, 39693, 39694, 39696, 39697,
            39698, 39700, 39701, 39702, 39703, 39704, 39705,
            39706, 39707, 39708, 39709, 39710, 39712, 39713,
            39714, 39716, 39717, 39718, 39719, 39720, 39721,
            39722, 39723, 39724, 39725, 39726, 39728, 39729,
            39731, 39732, 39733, 39734, 39735, 39736, 39737,
            39738, 39741, 39742, 39743, 39744, 39750, 39754,
            39755, 39756, 39758, 39760, 39762, 39763, 39765,
            39766, 39767, 39768, 39769, 39770, 39771, 39772,
            39773, 39774, 39775, 39776, 39777, 39778, 39779,
            39780, 39781, 39782, 39783, 39784, 39785, 39786,
            39787, 39788, 39789, 39790, 39791, 39792, 39793,
            39794, 39795, 39796, 39797, 39798, 39799, 39800,
            39801, 39802, 39803, 31775, 31786, 31782, 31800,
            31809, 31808, 33278, 33281, 33282, 33284, 33260,
            34884, 33313, 33314, 33315, 33325, 33327, 33320,
            33323, 33336, 33339, 33331, 33332, 33342, 33348,
            33353, 33355, 33359, 33370, 33375, 33384, 34942,
            34949, 34952, 35032, 35039, 35166, 32669, 32671,
            32679, 32687, 32688, 32690, 31868, 25929, 31889,
            31901, 31900, 31902, 31906, 31922, 31932, 31933,
            31937, 31943, 31948, 31949, 31944, 31941, 31959,
            31976, 33390, 26280, 32703, 32718, 32725, 32741,
            32737, 32742, 32745, 32750, 32755, 31992, 32119,
            32166, 32174, 32327, 32411, 40632, 40628, 36211,
            36228, 36244, 36241, 36273, 36199, 36205, 35911,
            35913, 37194, 37200, 37198, 37199, 37220, 39804,
            39805, 39806, 39807, 39808, 39809, 39810, 39811,
            39812, 39813, 39814, 39815, 39816, 39817, 39818,
            39819, 39820, 39821, 39822, 39823, 39824, 39825,
            39826, 39827, 39828, 39829, 39830, 39831, 39832,
            39833, 39834, 39835, 39836, 39837, 39838, 39839,
            39840, 39841, 39842, 39843, 39844, 39845, 39846,
            39847, 39848, 39849, 39850, 39851, 39852, 39853,
            39854, 39855, 39856, 39857, 39858, 39859, 39860,
            39861, 39862, 39863, 39864, 39865, 39866, 39867,
            39868, 39869, 39870, 39871, 39872, 39873, 39874,
            39875, 39876, 39877, 39878, 39879, 39880, 39881,
            39882, 39883, 39884, 39885, 39886, 39887, 39888,
            39889, 39890, 39891, 39892, 39893, 39894, 39895,
            39896, 39897, 39898, 39899, 37218, 37217, 37232,
            37225, 37231, 37245, 37246, 37234, 37236, 37241,
            37260, 37253, 37264, 37261, 37265, 37282, 37283,
            37290, 37293, 37294, 37295, 37301, 37300, 37306,
            35925, 40574, 36280, 36331, 36357, 36441, 36457,
            36277, 36287, 36284, 36282, 36292, 36310, 36311,
            36314, 36318, 36302, 36303, 36315, 36294, 36332,
            36343, 36344, 36323, 36345, 36347, 36324, 36361,
            36349, 36372, 36381, 36383, 36396, 36398, 36387,
            36399, 36410, 36416, 36409, 36405, 36413, 36401,
            36425, 36417, 36418, 36433, 36434, 36426, 36464,
            36470, 36476, 36463, 36468, 36485, 36495, 36500,
            36496, 36508, 36510, 35960, 35970, 35978, 35973,
            35992, 35988, 26011, 35286, 35294, 35290, 35292,
            39900, 39901, 39902, 39903, 39904, 39905, 39906,
            39907, 39908, 39909, 39910, 39911, 39912, 39913,
            39914, 39915, 39916, 39917, 39918, 39919, 39920,
            39921, 39922, 39923, 39924, 39925, 39926, 39927,
            39928, 39929, 39930, 39931, 39932, 39933, 39934,
            39935, 39936, 39937, 39938, 39939, 39940, 39941,
            39942, 39943, 39944, 39945, 39946, 39947, 39948,
            39949, 39950, 39951, 39952, 39953, 39954, 39955,
            39956, 39957, 39958, 39959, 39960, 39961, 39962,
            39963, 39964, 39965, 39966, 39967, 39968, 39969,
            39970, 39971, 39972, 39973, 39974, 39975, 39976,
            39977, 39978, 39979, 39980, 39981, 39982, 39983,
            39984, 39985, 39986, 39987, 39988, 39989, 39990,
            39991, 39992, 39993, 39994, 39995, 35301, 35307,
            35311, 35390, 35622, 38739, 38633, 38643, 38639,
            38662, 38657, 38664, 38671, 38670, 38698, 38701,
            38704, 38718, 40832, 40835, 40837, 40838, 40839,
            40840, 40841, 40842, 40844, 40702, 40715, 40717,
            38585, 38588, 38589, 38606, 38610, 30655, 38624,
            37518, 37550, 37576, 37694, 37738, 37834, 37775,
            37950, 37995, 40063, 40066, 40069, 40070, 40071,
            40072, 31267, 40075, 40078, 40080, 40081, 40082,
            40084, 40085, 40090, 40091, 40094, 40095, 40096,
            40097, 40098, 40099, 40101, 40102, 40103, 40104,
            40105, 40107, 40109, 40110, 40112, 40113, 40114,
            40115, 40116, 40117, 40118, 40119, 40122, 40123,
            40124, 40125, 40132, 40133, 40134, 40135, 40138,
            40139, 39996, 39997, 39998, 39999, 40000, 40001,
            40002, 40003, 40004, 40005, 40006, 40007, 40008,
            40009, 40010, 40011, 40012, 40013, 40014, 40015,
            40016, 40017, 40018, 40019, 40020, 40021, 40022,
            40023, 40024, 40025, 40026, 40027, 40028, 40029,
            40030, 40031, 40032, 40033, 40034, 40035, 40036,
            40037, 40038, 40039, 40040, 40041, 40042, 40043,
            40044, 40045, 40046, 40047, 40048, 40049, 40050,
            40051, 40052, 40053, 40054, 40055, 40056, 40057,
            40058, 40059, 40061, 40062, 40064, 40067, 40068,
            40073, 40074, 40076, 40079, 40083, 40086, 40087,
            40088, 40089, 40093, 40106, 40108, 40111, 40121,
            40126, 40127, 40128, 40129, 40130, 40136, 40137,
            40145, 40146, 40154, 40155, 40160, 40161, 40140,
            40141, 40142, 40143, 40144, 40147, 40148, 40149,
            40151, 40152, 40153, 40156, 40157, 40159, 40162,
            38780, 38789, 38801, 38802, 38804, 38831, 38827,
            38819, 38834, 38836, 39601, 39600, 39607, 40536,
            39606, 39610, 39612, 39617, 39616, 39621, 39618,
            39627, 39628, 39633, 39749, 39747, 39751, 39753,
            39752, 39757, 39761, 39144, 39181, 39214, 39253,
            39252, 39647, 39649, 39654, 39663, 39659, 39675,
            39661, 39673, 39688, 39695, 39699, 39711, 39715,
            40637, 40638, 32315, 40578, 40583, 40584, 40587,
            40594, 37846, 40605, 40607, 40667, 40668, 40669,
            40672, 40671, 40674, 40681, 40679, 40677, 40682,
            40687, 40738, 40748, 40751, 40761, 40759, 40765,
            40766, 40772, 40163, 40164, 40165, 40166, 40167,
            40168, 40169, 40170, 40171, 40172, 40173, 40174,
            40175, 40176, 40177, 40178, 40179, 40180, 40181,
            40182, 40183, 40184, 40185, 40186, 40187, 40188,
            40189, 40190, 40191, 40192, 40193, 40194, 40195,
            40196, 40197, 40198, 40199, 40200, 40201, 40202,
            40203, 40204, 40205, 40206, 40207, 40208, 40209,
            40210, 40211, 40212, 40213, 40214, 40215, 40216,
            40217, 40218, 40219, 40220, 40221, 40222, 40223,
            40224, 40225, 40226, 40227, 40228, 40229, 40230,
            40231, 40232, 40233, 40234, 40235, 40236, 40237,
            40238, 40239, 40240, 40241, 40242, 40243, 40244,
            40245, 40246, 40247, 40248, 40249, 40250, 40251,
            40252, 40253, 40254, 40255, 40256, 40257, 40258,
            57908, 57909, 57910, 57911, 57912, 57913, 57914,
            57915, 57916, 57917, 57918, 57919, 57920, 57921,
            57922, 57923, 57924, 57925, 57926, 57927, 57928,
            57929, 57930, 57931, 57932, 57933, 57934, 57935,
            57936, 57937, 57938, 57939, 57940, 57941, 57942,
            57943, 57944, 57945, 57946, 57947, 57948, 57949,
            57950, 57951, 57952, 57953, 57954, 57955, 57956,
            57957, 57958, 57959, 57960, 57961, 57962, 57963,
            57964, 57965, 57966, 57967, 57968, 57969, 57970,
            57971, 57972, 57973, 57974, 57975, 57976, 57977,
            57978, 57979, 57980, 57981, 57982, 57983, 57984,
            57985, 57986, 57987, 57988, 57989, 57990, 57991,
            57992, 57993, 57994, 57995, 57996, 57997, 57998,
            57999, 58000, 58001, 40259, 40260, 40261, 40262,
            40263, 40264, 40265, 40266, 40267, 40268, 40269,
            40270, 40271, 40272, 40273, 40274, 40275, 40276,
            40277, 40278, 40279, 40280, 40281, 40282, 40283,
            40284, 40285, 40286, 40287, 40288, 40289, 40290,
            40291, 40292, 40293, 40294, 40295, 40296, 40297,
            40298, 40299, 40300, 40301, 40302, 40303, 40304,
            40305, 40306, 40307, 40308, 40309, 40310, 40311,
            40312, 40313, 40314, 40315, 40316, 40317, 40318,
            40319, 40320, 40321, 40322, 40323, 40324, 40325,
            40326, 40327, 40328, 40329, 40330, 40331, 40332,
            40333, 40334, 40335, 40336, 40337, 40338, 40339,
            40340, 40341, 40342, 40343, 40344, 40345, 40346,
            40347, 40348, 40349, 40350, 40351, 40352, 40353,
            40354, 58002, 58003, 58004, 58005, 58006, 58007,
            58008, 58009, 58010, 58011, 58012, 58013, 58014,
            58015, 58016, 58017, 58018, 58019, 58020, 58021,
            58022, 58023, 58024, 58025, 58026, 58027, 58028,
            58029, 58030, 58031, 58032, 58033, 58034, 58035,
            58036, 58037, 58038, 58039, 58040, 58041, 58042,
            58043, 58044, 58045, 58046, 58047, 58048, 58049,
            58050, 58051, 58052, 58053, 58054, 58055, 58056,
            58057, 58058, 58059, 58060, 58061, 58062, 58063,
            58064, 58065, 58066, 58067, 58068, 58069, 58070,
            58071, 58072, 58073, 58074, 58075, 58076, 58077,
            58078, 58079, 58080, 58081, 58082, 58083, 58084,
            58085, 58086, 58087, 58088, 58089, 58090, 58091,
            58092, 58093, 58094, 58095, 40355, 40356, 40357,
            40358, 40359, 40360, 40361, 40362, 40363, 40364,
            40365, 40366, 40367, 40368, 40369, 40370, 40371,
            40372, 40373, 40374, 40375, 40376, 40377, 40378,
            40379, 40380, 40381, 40382, 40383, 40384, 40385,
            40386, 40387, 40388, 40389, 40390, 40391, 40392,
            40393, 40394, 40395, 40396, 40397, 40398, 40399,
            40400, 40401, 40402, 40403, 40404, 40405, 40406,
            40407, 40408, 40409, 40410, 40411, 40412, 40413,
            40414, 40415, 40416, 40417, 40418, 40419, 40420,
            40421, 40422, 40423, 40424, 40425, 40426, 40427,
            40428, 40429, 40430, 40431, 40432, 40433, 40434,
            40435, 40436, 40437, 40438, 40439, 40440, 40441,
            40442, 40443, 40444, 40445, 40446, 40447, 40448,
            40449, 40450, 58096, 58097, 58098, 58099, 58100,
            58101, 58102, 58103, 58104, 58105, 58106, 58107,
            58108, 58109, 58110, 58111, 58112, 58113, 58114,
            58115, 58116, 58117, 58118, 58119, 58120, 58121,
            58122, 58123, 58124, 58125, 58126, 58127, 58128,
            58129, 58130, 58131, 58132, 58133, 58134, 58135,
            58136, 58137, 58138, 58139, 58140, 58141, 58142,
            58143, 58144, 58145, 58146, 58147, 58148, 58149,
            58150, 58151, 58152, 58153, 58154, 58155, 58156,
            58157, 58158, 58159, 58160, 58161, 58162, 58163,
            58164, 58165, 58166, 58167, 58168, 58169, 58170,
            58171, 58172, 58173, 58174, 58175, 58176, 58177,
            58178, 58179, 58180, 58181, 58182, 58183, 58184,
            58185, 58186, 58187, 58188, 58189, 40451, 40452,
            40453, 40454, 40455, 40456, 40457, 40458, 40459,
            40460, 40461, 40462, 40463, 40464, 40465, 40466,
            40467, 40468, 40469, 40470, 40471, 40472, 40473,
            40474, 40475, 40476, 40477, 40478, 40484, 40487,
            40494, 40496, 40500, 40507, 40508, 40512, 40525,
            40528, 40530, 40531, 40532, 40534, 40537, 40541,
            40543, 40544, 40545, 40546, 40549, 40558, 40559,
            40562, 40564, 40565, 40566, 40567, 40568, 40569,
            40570, 40571, 40572, 40573, 40576, 40577, 40579,
            40580, 40581, 40582, 40585, 40586, 40588, 40589,
            40590, 40591, 40592, 40593, 40596, 40597, 40598,
            40599, 40600, 40601, 40602, 40603, 40604, 40606,
            40608, 40609, 40610, 40611, 40612, 40613, 40615,
            40616, 40617, 40618, 58190, 58191, 58192, 58193,
            58194, 58195, 58196, 58197, 58198, 58199, 58200,
            58201, 58202, 58203, 58204, 58205, 58206, 58207,
            58208, 58209, 58210, 58211, 58212, 58213, 58214,
            58215, 58216, 58217, 58218, 58219, 58220, 58221,
            58222, 58223, 58224, 58225, 58226, 58227, 58228,
            58229, 58230, 58231, 58232, 58233, 58234, 58235,
            58236, 58237, 58238, 58239, 58240, 58241, 58242,
            58243, 58244, 58245, 58246, 58247, 58248, 58249,
            58250, 58251, 58252, 58253, 58254, 58255, 58256,
            58257, 58258, 58259, 58260, 58261, 58262, 58263,
            58264, 58265, 58266, 58267, 58268, 58269, 58270,
            58271, 58272, 58273, 58274, 58275, 58276, 58277,
            58278, 58279, 58280, 58281, 58282, 58283, 40619,
            40620, 40621, 40622, 40623, 40624, 40625, 40626,
            40627, 40629, 40630, 40631, 40633, 40634, 40636,
            40639, 40640, 40641, 40642, 40643, 40645, 40646,
            40647, 40648, 40650, 40651, 40652, 40656, 40658,
            40659, 40661, 40662, 40663, 40665, 40666, 40670,
            40673, 40675, 40676, 40678, 40680, 40683, 40684,
            40685, 40686, 40688, 40689, 40690, 40691, 40692,
            40693, 40694, 40695, 40696, 40698, 40701, 40703,
            40704, 40705, 40706, 40707, 40708, 40709, 40710,
            40711, 40712, 40713, 40714, 40716, 40719, 40721,
            40722, 40724, 40725, 40726, 40728, 40730, 40731,
            40732, 40733, 40734, 40735, 40737, 40739, 40740,
            40741, 40742, 40743, 40744, 40745, 40746, 40747,
            40749, 40750, 40752, 40753, 58284, 58285, 58286,
            58287, 58288, 58289, 58290, 58291, 58292, 58293,
            58294, 58295, 58296, 58297, 58298, 58299, 58300,
            58301, 58302, 58303, 58304, 58305, 58306, 58307,
            58308, 58309, 58310, 58311, 58312, 58313, 58314,
            58315, 58316, 58317, 58318, 58319, 58320, 58321,
            58322, 58323, 58324, 58325, 58326, 58327, 58328,
            58329, 58330, 58331, 58332, 58333, 58334, 58335,
            58336, 58337, 58338, 58339, 58340, 58341, 58342,
            58343, 58344, 58345, 58346, 58347, 58348, 58349,
            58350, 58351, 58352, 58353, 58354, 58355, 58356,
            58357, 58358, 58359, 58360, 58361, 58362, 58363,
            58364, 58365, 58366, 58367, 58368, 58369, 58370,
            58371, 58372, 58373, 58374, 58375, 58376, 58377,
            40754, 40755, 40756, 40757, 40758, 40760, 40762,
            40764, 40767, 40768, 40769, 40770, 40771, 40773,
            40774, 40775, 40776, 40777, 40778, 40779, 40780,
            40781, 40782, 40783, 40786, 40787, 40788, 40789,
            40790, 40791, 40792, 40793, 40794, 40795, 40796,
            40797, 40798, 40799, 40800, 40801, 40802, 40803,
            40804, 40805, 40806, 40807, 40808, 40809, 40810,
            40811, 40812, 40813, 40814, 40815, 40816, 40817,
            40818, 40819, 40820, 40821, 40822, 40823, 40824,
            40825, 40826, 40827, 40828, 40829, 40830, 40833,
            40834, 40845, 40846, 40847, 40848, 40849, 40850,
            40851, 40852, 40853, 40854, 40855, 40856, 40860,
            40861, 40862, 40865, 40866, 40867, 40868, 40869,
            63788, 63865, 63893, 63975, 63985, 58378, 58379,
            58380, 58381, 58382, 58383, 58384, 58385, 58386,
            58387, 58388, 58389, 58390, 58391, 58392, 58393,
            58394, 58395, 58396, 58397, 58398, 58399, 58400,
            58401, 58402, 58403, 58404, 58405, 58406, 58407,
            58408, 58409, 58410, 58411, 58412, 58413, 58414,
            58415, 58416, 58417, 58418, 58419, 58420, 58421,
            58422, 58423, 58424, 58425, 58426, 58427, 58428,
            58429, 58430, 58431, 58432, 58433, 58434, 58435,
            58436, 58437, 58438, 58439, 58440, 58441, 58442,
            58443, 58444, 58445, 58446, 58447, 58448, 58449,
            58450, 58451, 58452, 58453, 58454, 58455, 58456,
            58457, 58458, 58459, 58460, 58461, 58462, 58463,
            58464, 58465, 58466, 58467, 58468, 58469, 58470,
            58471, 64012, 64013, 64014, 64015, 64017, 64019,
            64020, 64024, 64031, 64032, 64033, 64035, 64036,
            64039, 64040, 64041, 11905, 59414, 59415, 59416,
            11908, 13427, 13383, 11912, 11915, 59422, 13726,
            13850, 13838, 11916, 11927, 14702, 14616, 59430,
            14799, 14815, 14963, 14800, 59435, 59436, 15182,
            15470, 15584, 11943, 59441, 59442, 11946, 16470,
            16735, 11950, 17207, 11955, 11958, 11959, 59451,
            17329, 17324, 11963, 17373, 17622, 18017, 17996,
            59459, 18211, 18217, 18300, 18317, 11978, 18759,
            18810, 18813, 18818, 18819, 18821, 18822, 18847,
            18843, 18871, 18870, 59476, 59477, 19619, 19615,
            19616, 19617, 19575, 19618, 19731, 19732, 19733,
            19734, 19735, 19736, 19737, 19886, 59492, 58472,
            58473, 58474, 58475, 58476, 58477, 58478, 58479,
            58480, 58481, 58482, 58483, 58484, 58485, 58486,
            58487, 58488, 58489, 58490, 58491, 58492, 58493,
            58494, 58495, 58496, 58497, 58498, 58499, 58500,
            58501, 58502, 58503, 58504, 58505, 58506, 58507,
            58508, 58509, 58510, 58511, 58512, 58513, 58514,
            58515, 58516, 58517, 58518, 58519, 58520, 58521,
            58522, 58523, 58524, 58525, 58526, 58527, 58528,
            58529, 58530, 58531, 58532, 58533, 58534, 58535,
            58536, 58537, 58538, 58539, 58540, 58541, 58542,
            58543, 58544, 58545, 58546, 58547, 58548, 58549,
            58550, 58551, 58552, 58553, 58554, 58555, 58556,
            58557, 58558, 58559, 58560, 58561, 58562, 58563,
            58564, 58565
        ],
        "gb18030-ranges": [
            [0, 128],
            [36, 165],
            [38, 169],
            [45, 178],
            [50, 184],
            [81, 216],
            [89, 226],
            [95, 235],
            [96, 238],
            [100, 244],
            [103, 248],
            [104, 251],
            [105, 253],
            [109, 258],
            [126, 276],
            [133, 284],
            [148, 300],
            [172, 325],
            [175, 329],
            [179, 334],
            [208, 364],
            [306, 463],
            [307, 465],
            [308, 467],
            [309, 469],
            [310, 471],
            [311, 473],
            [312, 475],
            [313, 477],
            [341, 506],
            [428, 594],
            [443, 610],
            [544, 712],
            [545, 716],
            [558, 730],
            [741, 930],
            [742, 938],
            [749, 962],
            [750, 970],
            [805, 1026],
            [819, 1104],
            [820, 1106],
            [7922, 8209],
            [7924, 8215],
            [7925, 8218],
            [7927, 8222],
            [7934, 8231],
            [7943, 8241],
            [7944, 8244],
            [7945, 8246],
            [7950, 8252],
            [8062, 8365],
            [8148, 8452],
            [8149, 8454],
            [8152, 8458],
            [8164, 8471],
            [8174, 8482],
            [8236, 8556],
            [8240, 8570],
            [8262, 8596],
            [8264, 8602],
            [8374, 8713],
            [8380, 8720],
            [8381, 8722],
            [8384, 8726],
            [8388, 8731],
            [8390, 8737],
            [8392, 8740],
            [8393, 8742],
            [8394, 8748],
            [8396, 8751],
            [8401, 8760],
            [8406, 8766],
            [8416, 8777],
            [8419, 8781],
            [8424, 8787],
            [8437, 8802],
            [8439, 8808],
            [8445, 8816],
            [8482, 8854],
            [8485, 8858],
            [8496, 8870],
            [8521, 8896],
            [8603, 8979],
            [8936, 9322],
            [8946, 9372],
            [9046, 9548],
            [9050, 9588],
            [9063, 9616],
            [9066, 9622],
            [9076, 9634],
            [9092, 9652],
            [9100, 9662],
            [9108, 9672],
            [9111, 9676],
            [9113, 9680],
            [9131, 9702],
            [9162, 9735],
            [9164, 9738],
            [9218, 9793],
            [9219, 9795],
            [11329, 11906],
            [11331, 11909],
            [11334, 11913],
            [11336, 11917],
            [11346, 11928],
            [11361, 11944],
            [11363, 11947],
            [11366, 11951],
            [11370, 11956],
            [11372, 11960],
            [11375, 11964],
            [11389, 11979],
            [11682, 12284],
            [11686, 12292],
            [11687, 12312],
            [11692, 12319],
            [11694, 12330],
            [11714, 12351],
            [11716, 12436],
            [11723, 12447],
            [11725, 12535],
            [11730, 12543],
            [11736, 12586],
            [11982, 12842],
            [11989, 12850],
            [12102, 12964],
            [12336, 13200],
            [12348, 13215],
            [12350, 13218],
            [12384, 13253],
            [12393, 13263],
            [12395, 13267],
            [12397, 13270],
            [12510, 13384],
            [12553, 13428],
            [12851, 13727],
            [12962, 13839],
            [12973, 13851],
            [13738, 14617],
            [13823, 14703],
            [13919, 14801],
            [13933, 14816],
            [14080, 14964],
            [14298, 15183],
            [14585, 15471],
            [14698, 15585],
            [15583, 16471],
            [15847, 16736],
            [16318, 17208],
            [16434, 17325],
            [16438, 17330],
            [16481, 17374],
            [16729, 17623],
            [17102, 17997],
            [17122, 18018],
            [17315, 18212],
            [17320, 18218],
            [17402, 18301],
            [17418, 18318],
            [17859, 18760],
            [17909, 18811],
            [17911, 18814],
            [17915, 18820],
            [17916, 18823],
            [17936, 18844],
            [17939, 18848],
            [17961, 18872],
            [18664, 19576],
            [18703, 19620],
            [18814, 19738],
            [18962, 19887],
            [19043, 40870],
            [33469, 59244],
            [33470, 59336],
            [33471, 59367],
            [33484, 59413],
            [33485, 59417],
            [33490, 59423],
            [33497, 59431],
            [33501, 59437],
            [33505, 59443],
            [33513, 59452],
            [33520, 59460],
            [33536, 59478],
            [33550, 59493],
            [37845, 63789],
            [37921, 63866],
            [37948, 63894],
            [38029, 63976],
            [38038, 63986],
            [38064, 64016],
            [38065, 64018],
            [38066, 64021],
            [38069, 64025],
            [38075, 64034],
            [38076, 64037],
            [38078, 64042],
            [39108, 65074],
            [39109, 65093],
            [39113, 65107],
            [39114, 65112],
            [39115, 65127],
            [39116, 65132],
            [39265, 65375],
            [39394, 65510],
            [189000, 65536]
        ],
        "jis0208": [12288, 12289, 12290, 65292, 65294, 12539, 65306,
            65307, 65311, 65281, 12443, 12444, 180, 65344, 168,
            65342, 65507, 65343, 12541, 12542, 12445, 12446,
            12291, 20189, 12293, 12294, 12295, 12540, 8213,
            8208, 65295, 65340, 65374, 8741, 65372, 8230, 8229,
            8216, 8217, 8220, 8221, 65288, 65289, 12308, 12309,
            65339, 65341, 65371, 65373, 12296, 12297, 12298,
            12299, 12300, 12301, 12302, 12303, 12304, 12305,
            65291, 65293, 177, 215, 247, 65309, 8800, 65308,
            65310, 8806, 8807, 8734, 8756, 9794, 9792, 176,
            8242, 8243, 8451, 65509, 65284, 65504, 65505, 65285,
            65283, 65286, 65290, 65312, 167, 9734, 9733, 9675,
            9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650,
            9661, 9660, 8251, 12306, 8594, 8592, 8593, 8595,
            12307, null, null, null, null, null, null, null,
            null, null, null, null, 8712, 8715, 8838, 8839,
            8834, 8835, 8746, 8745, null, null, null, null,
            null, null, null, null, 8743, 8744, 65506, 8658,
            8660, 8704, 8707, null, null, null, null, null,
            null, null, null, null, null, null, 8736, 8869,
            8978, 8706, 8711, 8801, 8786, 8810, 8811, 8730,
            8765, 8733, 8757, 8747, 8748, null, null, null,
            null, null, null, null, 8491, 8240, 9839, 9837,
            9834, 8224, 8225, 182, null, null, null, null, 9711,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 65296,
            65297, 65298, 65299, 65300, 65301, 65302, 65303,
            65304, 65305, null, null, null, null, null, null,
            null, 65313, 65314, 65315, 65316, 65317, 65318,
            65319, 65320, 65321, 65322, 65323, 65324, 65325,
            65326, 65327, 65328, 65329, 65330, 65331, 65332,
            65333, 65334, 65335, 65336, 65337, 65338, null,
            null, null, null, null, null, 65345, 65346, 65347,
            65348, 65349, 65350, 65351, 65352, 65353, 65354,
            65355, 65356, 65357, 65358, 65359, 65360, 65361,
            65362, 65363, 65364, 65365, 65366, 65367, 65368,
            65369, 65370, null, null, null, null, 12353, 12354,
            12355, 12356, 12357, 12358, 12359, 12360, 12361,
            12362, 12363, 12364, 12365, 12366, 12367, 12368,
            12369, 12370, 12371, 12372, 12373, 12374, 12375,
            12376, 12377, 12378, 12379, 12380, 12381, 12382,
            12383, 12384, 12385, 12386, 12387, 12388, 12389,
            12390, 12391, 12392, 12393, 12394, 12395, 12396,
            12397, 12398, 12399, 12400, 12401, 12402, 12403,
            12404, 12405, 12406, 12407, 12408, 12409, 12410,
            12411, 12412, 12413, 12414, 12415, 12416, 12417,
            12418, 12419, 12420, 12421, 12422, 12423, 12424,
            12425, 12426, 12427, 12428, 12429, 12430, 12431,
            12432, 12433, 12434, 12435, null, null, null, null,
            null, null, null, null, null, null, null, 12449,
            12450, 12451, 12452, 12453, 12454, 12455, 12456,
            12457, 12458, 12459, 12460, 12461, 12462, 12463,
            12464, 12465, 12466, 12467, 12468, 12469, 12470,
            12471, 12472, 12473, 12474, 12475, 12476, 12477,
            12478, 12479, 12480, 12481, 12482, 12483, 12484,
            12485, 12486, 12487, 12488, 12489, 12490, 12491,
            12492, 12493, 12494, 12495, 12496, 12497, 12498,
            12499, 12500, 12501, 12502, 12503, 12504, 12505,
            12506, 12507, 12508, 12509, 12510, 12511, 12512,
            12513, 12514, 12515, 12516, 12517, 12518, 12519,
            12520, 12521, 12522, 12523, 12524, 12525, 12526,
            12527, 12528, 12529, 12530, 12531, 12532, 12533,
            12534, null, null, null, null, null, null, null,
            null, 913, 914, 915, 916, 917, 918, 919, 920, 921,
            922, 923, 924, 925, 926, 927, 928, 929, 931, 932,
            933, 934, 935, 936, 937, null, null, null, null,
            null, null, null, null, 945, 946, 947, 948, 949,
            950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
            960, 961, 963, 964, 965, 966, 967, 968, 969, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 1040, 1041, 1042,
            1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049,
            1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
            1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
            1066, 1067, 1068, 1069, 1070, 1071, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 1072, 1073, 1074,
            1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081,
            1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
            1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
            1098, 1099, 1100, 1101, 1102, 1103, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 9472, 9474, 9484, 9488, 9496,
            9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475,
            9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531,
            9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520,
            9509, 9528, 9538, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
            9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326,
            9327, 9328, 9329, 9330, 9331, 8544, 8545, 8546,
            8547, 8548, 8549, 8550, 8551, 8552, 8553, null,
            13129, 13076, 13090, 13133, 13080, 13095, 13059,
            13110, 13137, 13143, 13069, 13094, 13091, 13099,
            13130, 13115, 13212, 13213, 13214, 13198, 13199,
            13252, 13217, null, null, null, null, null, null,
            null, null, 13179, 12317, 12319, 8470, 13261, 8481,
            12964, 12965, 12966, 12967, 12968, 12849, 12850,
            12857, 13182, 13181, 13180, 8786, 8801, 8747, 8750,
            8721, 8730, 8869, 8736, 8735, 8895, 8757, 8745,
            8746, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 20124,
            21782, 23043, 38463, 21696, 24859, 25384, 23030,
            36898, 33909, 33564, 31312, 24746, 25569, 28197,
            26093, 33894, 33446, 39925, 26771, 22311, 26017,
            25201, 23451, 22992, 34427, 39156, 32098, 32190,
            39822, 25110, 31903, 34999, 23433, 24245, 25353,
            26263, 26696, 38343, 38797, 26447, 20197, 20234,
            20301, 20381, 20553, 22258, 22839, 22996, 23041,
            23561, 24799, 24847, 24944, 26131, 26885, 28858,
            30031, 30064, 31227, 32173, 32239, 32963, 33806,
            34915, 35586, 36949, 36986, 21307, 20117, 20133,
            22495, 32946, 37057, 30959, 19968, 22769, 28322,
            36920, 31282, 33576, 33419, 39983, 20801, 21360,
            21693, 21729, 22240, 23035, 24341, 39154, 28139,
            32996, 34093, 38498, 38512, 38560, 38907, 21515,
            21491, 23431, 28879, 32701, 36802, 38632, 21359,
            40284, 31418, 19985, 30867, 33276, 28198, 22040,
            21764, 27421, 34074, 39995, 23013, 21417, 28006,
            29916, 38287, 22082, 20113, 36939, 38642, 33615,
            39180, 21473, 21942, 23344, 24433, 26144, 26355,
            26628, 27704, 27891, 27945, 29787, 30408, 31310,
            38964, 33521, 34907, 35424, 37613, 28082, 30123,
            30410, 39365, 24742, 35585, 36234, 38322, 27022,
            21421, 20870, 22290, 22576, 22852, 23476, 24310,
            24616, 25513, 25588, 27839, 28436, 28814, 28948,
            29017, 29141, 29503, 32257, 33398, 33489, 34199,
            36960, 37467, 40219, 22633, 26044, 27738, 29989,
            20985, 22830, 22885, 24448, 24540, 25276, 26106,
            27178, 27431, 27572, 29579, 32705, 35158, 40236,
            40206, 40644, 23713, 27798, 33659, 20740, 23627,
            25014, 33222, 26742, 29281, 20057, 20474, 21368,
            24681, 28201, 31311, 38899, 19979, 21270, 20206,
            20309, 20285, 20385, 20339, 21152, 21487, 22025,
            22799, 23233, 23478, 23521, 31185, 26247, 26524,
            26550, 27468, 27827, 28779, 29634, 31117, 31166,
            31292, 31623, 33457, 33499, 33540, 33655, 33775,
            33747, 34662, 35506, 22057, 36008, 36838, 36942,
            38686, 34442, 20420, 23784, 25105, 29273, 30011,
            33253, 33469, 34558, 36032, 38597, 39187, 39381,
            20171, 20250, 35299, 22238, 22602, 22730, 24315,
            24555, 24618, 24724, 24674, 25040, 25106, 25296,
            25913, 39745, 26214, 26800, 28023, 28784, 30028,
            30342, 32117, 33445, 34809, 38283, 38542, 35997,
            20977, 21182, 22806, 21683, 23475, 23830, 24936,
            27010, 28079, 30861, 33995, 34903, 35442, 37799,
            39608, 28012, 39336, 34521, 22435, 26623, 34510,
            37390, 21123, 22151, 21508, 24275, 25313, 25785,
            26684, 26680, 27579, 29554, 30906, 31339, 35226,
            35282, 36203, 36611, 37101, 38307, 38548, 38761,
            23398, 23731, 27005, 38989, 38990, 25499, 31520,
            27179, 27263, 26806, 39949, 28511, 21106, 21917,
            24688, 25324, 27963, 28167, 28369, 33883, 35088,
            36676, 19988, 39993, 21494, 26907, 27194, 38788,
            26666, 20828, 31427, 33970, 37340, 37772, 22107,
            40232, 26658, 33541, 33841, 31909, 21000, 33477,
            29926, 20094, 20355, 20896, 23506, 21002, 21208,
            21223, 24059, 21914, 22570, 23014, 23436, 23448,
            23515, 24178, 24185, 24739, 24863, 24931, 25022,
            25563, 25954, 26577, 26707, 26874, 27454, 27475,
            27735, 28450, 28567, 28485, 29872, 29976, 30435,
            30475, 31487, 31649, 31777, 32233, 32566, 32752,
            32925, 33382, 33694, 35251, 35532, 36011, 36996,
            37969, 38291, 38289, 38306, 38501, 38867, 39208,
            33304, 20024, 21547, 23736, 24012, 29609, 30284,
            30524, 23721, 32747, 36107, 38593, 38929, 38996,
            39000, 20225, 20238, 21361, 21916, 22120, 22522,
            22855, 23305, 23492, 23696, 24076, 24190, 24524,
            25582, 26426, 26071, 26082, 26399, 26827, 26820,
            27231, 24112, 27589, 27671, 27773, 30079, 31048,
            23395, 31232, 32000, 24509, 35215, 35352, 36020,
            36215, 36556, 36637, 39138, 39438, 39740, 20096,
            20605, 20736, 22931, 23452, 25135, 25216, 25836,
            27450, 29344, 30097, 31047, 32681, 34811, 35516,
            35696, 25516, 33738, 38816, 21513, 21507, 21931,
            26708, 27224, 35440, 30759, 26485, 40653, 21364,
            23458, 33050, 34384, 36870, 19992, 20037, 20167,
            20241, 21450, 21560, 23470, 24339, 24613, 25937,
            26429, 27714, 27762, 27875, 28792, 29699, 31350,
            31406, 31496, 32026, 31998, 32102, 26087, 29275,
            21435, 23621, 24040, 25298, 25312, 25369, 28192,
            34394, 35377, 36317, 37624, 28417, 31142, 39770,
            20136, 20139, 20140, 20379, 20384, 20689, 20807,
            31478, 20849, 20982, 21332, 21281, 21375, 21483,
            21932, 22659, 23777, 24375, 24394, 24623, 24656,
            24685, 25375, 25945, 27211, 27841, 29378, 29421,
            30703, 33016, 33029, 33288, 34126, 37111, 37857,
            38911, 39255, 39514, 20208, 20957, 23597, 26241,
            26989, 23616, 26354, 26997, 29577, 26704, 31873,
            20677, 21220, 22343, 24062, 37670, 26020, 27427,
            27453, 29748, 31105, 31165, 31563, 32202, 33465,
            33740, 34943, 35167, 35641, 36817, 37329, 21535,
            37504, 20061, 20534, 21477, 21306, 29399, 29590,
            30697, 33510, 36527, 39366, 39368, 39378, 20855,
            24858, 34398, 21936, 31354, 20598, 23507, 36935,
            38533, 20018, 27355, 37351, 23633, 23624, 25496,
            31391, 27795, 38772, 36705, 31402, 29066, 38536,
            31874, 26647, 32368, 26705, 37740, 21234, 21531,
            34219, 35347, 32676, 36557, 37089, 21350, 34952,
            31041, 20418, 20670, 21009, 20804, 21843, 22317,
            29674, 22411, 22865, 24418, 24452, 24693, 24950,
            24935, 25001, 25522, 25658, 25964, 26223, 26690,
            28179, 30054, 31293, 31995, 32076, 32153, 32331,
            32619, 33550, 33610, 34509, 35336, 35427, 35686,
            36605, 38938, 40335, 33464, 36814, 39912, 21127,
            25119, 25731, 28608, 38553, 26689, 20625, 27424,
            27770, 28500, 31348, 32080, 34880, 35363, 26376,
            20214, 20537, 20518, 20581, 20860, 21048, 21091,
            21927, 22287, 22533, 23244, 24314, 25010, 25080,
            25331, 25458, 26908, 27177, 29309, 29356, 29486,
            30740, 30831, 32121, 30476, 32937, 35211, 35609,
            36066, 36562, 36963, 37749, 38522, 38997, 39443,
            40568, 20803, 21407, 21427, 24187, 24358, 28187,
            28304, 29572, 29694, 32067, 33335, 35328, 35578,
            38480, 20046, 20491, 21476, 21628, 22266, 22993,
            23396, 24049, 24235, 24359, 25144, 25925, 26543,
            28246, 29392, 31946, 34996, 32929, 32993, 33776,
            34382, 35463, 36328, 37431, 38599, 39015, 40723,
            20116, 20114, 20237, 21320, 21577, 21566, 23087,
            24460, 24481, 24735, 26791, 27278, 29786, 30849,
            35486, 35492, 35703, 37264, 20062, 39881, 20132,
            20348, 20399, 20505, 20502, 20809, 20844, 21151,
            21177, 21246, 21402, 21475, 21521, 21518, 21897,
            22353, 22434, 22909, 23380, 23389, 23439, 24037,
            24039, 24055, 24184, 24195, 24218, 24247, 24344,
            24658, 24908, 25239, 25304, 25511, 25915, 26114,
            26179, 26356, 26477, 26657, 26775, 27083, 27743,
            27946, 28009, 28207, 28317, 30002, 30343, 30828,
            31295, 31968, 32005, 32024, 32094, 32177, 32789,
            32771, 32943, 32945, 33108, 33167, 33322, 33618,
            34892, 34913, 35611, 36002, 36092, 37066, 37237,
            37489, 30783, 37628, 38308, 38477, 38917, 39321,
            39640, 40251, 21083, 21163, 21495, 21512, 22741,
            25335, 28640, 35946, 36703, 40633, 20811, 21051,
            21578, 22269, 31296, 37239, 40288, 40658, 29508,
            28425, 33136, 29969, 24573, 24794, 39592, 29403,
            36796, 27492, 38915, 20170, 22256, 22372, 22718,
            23130, 24680, 25031, 26127, 26118, 26681, 26801,
            28151, 30165, 32058, 33390, 39746, 20123, 20304,
            21449, 21766, 23919, 24038, 24046, 26619, 27801,
            29811, 30722, 35408, 37782, 35039, 22352, 24231,
            25387, 20661, 20652, 20877, 26368, 21705, 22622,
            22971, 23472, 24425, 25165, 25505, 26685, 27507,
            28168, 28797, 37319, 29312, 30741, 30758, 31085,
            25998, 32048, 33756, 35009, 36617, 38555, 21092,
            22312, 26448, 32618, 36001, 20916, 22338, 38442,
            22586, 27018, 32948, 21682, 23822, 22524, 30869,
            40442, 20316, 21066, 21643, 25662, 26152, 26388,
            26613, 31364, 31574, 32034, 37679, 26716, 39853,
            31545, 21273, 20874, 21047, 23519, 25334, 25774,
            25830, 26413, 27578, 34217, 38609, 30352, 39894,
            25420, 37638, 39851, 30399, 26194, 19977, 20632,
            21442, 23665, 24808, 25746, 25955, 26719, 29158,
            29642, 29987, 31639, 32386, 34453, 35715, 36059,
            37240, 39184, 26028, 26283, 27531, 20181, 20180,
            20282, 20351, 21050, 21496, 21490, 21987, 22235,
            22763, 22987, 22985, 23039, 23376, 23629, 24066,
            24107, 24535, 24605, 25351, 25903, 23388, 26031,
            26045, 26088, 26525, 27490, 27515, 27663, 29509,
            31049, 31169, 31992, 32025, 32043, 32930, 33026,
            33267, 35222, 35422, 35433, 35430, 35468, 35566,
            36039, 36060, 38604, 39164, 27503, 20107, 20284,
            20365, 20816, 23383, 23546, 24904, 25345, 26178,
            27425, 28363, 27835, 29246, 29885, 30164, 30913,
            31034, 32780, 32819, 33258, 33940, 36766, 27728,
            40575, 24335, 35672, 40235, 31482, 36600, 23437,
            38635, 19971, 21489, 22519, 22833, 23241, 23460,
            24713, 28287, 28422, 30142, 36074, 23455, 34048,
            31712, 20594, 26612, 33437, 23649, 34122, 32286,
            33294, 20889, 23556, 25448, 36198, 26012, 29038,
            31038, 32023, 32773, 35613, 36554, 36974, 34503,
            37034, 20511, 21242, 23610, 26451, 28796, 29237,
            37196, 37320, 37675, 33509, 23490, 24369, 24825,
            20027, 21462, 23432, 25163, 26417, 27530, 29417,
            29664, 31278, 33131, 36259, 37202, 39318, 20754,
            21463, 21610, 23551, 25480, 27193, 32172, 38656,
            22234, 21454, 21608, 23447, 23601, 24030, 20462,
            24833, 25342, 27954, 31168, 31179, 32066, 32333,
            32722, 33261, 33311, 33936, 34886, 35186, 35728,
            36468, 36655, 36913, 37195, 37228, 38598, 37276,
            20160, 20303, 20805, 21313, 24467, 25102, 26580,
            27713, 28171, 29539, 32294, 37325, 37507, 21460,
            22809, 23487, 28113, 31069, 32302, 31899, 22654,
            29087, 20986, 34899, 36848, 20426, 23803, 26149,
            30636, 31459, 33308, 39423, 20934, 24490, 26092,
            26991, 27529, 28147, 28310, 28516, 30462, 32020,
            24033, 36981, 37255, 38918, 20966, 21021, 25152,
            26257, 26329, 28186, 24246, 32210, 32626, 26360,
            34223, 34295, 35576, 21161, 21465, 22899, 24207,
            24464, 24661, 37604, 38500, 20663, 20767, 21213,
            21280, 21319, 21484, 21736, 21830, 21809, 22039,
            22888, 22974, 23100, 23477, 23558, 23567, 23569,
            23578, 24196, 24202, 24288, 24432, 25215, 25220,
            25307, 25484, 25463, 26119, 26124, 26157, 26230,
            26494, 26786, 27167, 27189, 27836, 28040, 28169,
            28248, 28988, 28966, 29031, 30151, 30465, 30813,
            30977, 31077, 31216, 31456, 31505, 31911, 32057,
            32918, 33750, 33931, 34121, 34909, 35059, 35359,
            35388, 35412, 35443, 35937, 36062, 37284, 37478,
            37758, 37912, 38556, 38808, 19978, 19976, 19998,
            20055, 20887, 21104, 22478, 22580, 22732, 23330,
            24120, 24773, 25854, 26465, 26454, 27972, 29366,
            30067, 31331, 33976, 35698, 37304, 37664, 22065,
            22516, 39166, 25325, 26893, 27542, 29165, 32340,
            32887, 33394, 35302, 39135, 34645, 36785, 23611,
            20280, 20449, 20405, 21767, 23072, 23517, 23529,
            24515, 24910, 25391, 26032, 26187, 26862, 27035,
            28024, 28145, 30003, 30137, 30495, 31070, 31206,
            32051, 33251, 33455, 34218, 35242, 35386, 36523,
            36763, 36914, 37341, 38663, 20154, 20161, 20995,
            22645, 22764, 23563, 29978, 23613, 33102, 35338,
            36805, 38499, 38765, 31525, 35535, 38920, 37218,
            22259, 21416, 36887, 21561, 22402, 24101, 25512,
            27700, 28810, 30561, 31883, 32736, 34928, 36930,
            37204, 37648, 37656, 38543, 29790, 39620, 23815,
            23913, 25968, 26530, 36264, 38619, 25454, 26441,
            26905, 33733, 38935, 38592, 35070, 28548, 25722,
            23544, 19990, 28716, 30045, 26159, 20932, 21046,
            21218, 22995, 24449, 24615, 25104, 25919, 25972,
            26143, 26228, 26866, 26646, 27491, 28165, 29298,
            29983, 30427, 31934, 32854, 22768, 35069, 35199,
            35488, 35475, 35531, 36893, 37266, 38738, 38745,
            25993, 31246, 33030, 38587, 24109, 24796, 25114,
            26021, 26132, 26512, 30707, 31309, 31821, 32318,
            33034, 36012, 36196, 36321, 36447, 30889, 20999,
            25305, 25509, 25666, 25240, 35373, 31363, 31680,
            35500, 38634, 32118, 33292, 34633, 20185, 20808,
            21315, 21344, 23459, 23554, 23574, 24029, 25126,
            25159, 25776, 26643, 26676, 27849, 27973, 27927,
            26579, 28508, 29006, 29053, 26059, 31359, 31661,
            32218, 32330, 32680, 33146, 33307, 33337, 34214,
            35438, 36046, 36341, 36984, 36983, 37549, 37521,
            38275, 39854, 21069, 21892, 28472, 28982, 20840,
            31109, 32341, 33203, 31950, 22092, 22609, 23720,
            25514, 26366, 26365, 26970, 29401, 30095, 30094,
            30990, 31062, 31199, 31895, 32032, 32068, 34311,
            35380, 38459, 36961, 40736, 20711, 21109, 21452,
            21474, 20489, 21930, 22766, 22863, 29245, 23435,
            23652, 21277, 24803, 24819, 25436, 25475, 25407,
            25531, 25805, 26089, 26361, 24035, 27085, 27133,
            28437, 29157, 20105, 30185, 30456, 31379, 31967,
            32207, 32156, 32865, 33609, 33624, 33900, 33980,
            34299, 35013, 36208, 36865, 36973, 37783, 38684,
            39442, 20687, 22679, 24974, 33235, 34101, 36104,
            36896, 20419, 20596, 21063, 21363, 24687, 25417,
            26463, 28204, 36275, 36895, 20439, 23646, 36042,
            26063, 32154, 21330, 34966, 20854, 25539, 23384,
            23403, 23562, 25613, 26449, 36956, 20182, 22810,
            22826, 27760, 35409, 21822, 22549, 22949, 24816,
            25171, 26561, 33333, 26965, 38464, 39364, 39464,
            20307, 22534, 23550, 32784, 23729, 24111, 24453,
            24608, 24907, 25140, 26367, 27888, 28382, 32974,
            33151, 33492, 34955, 36024, 36864, 36910, 38538,
            40667, 39899, 20195, 21488, 22823, 31532, 37261,
            38988, 40441, 28381, 28711, 21331, 21828, 23429,
            25176, 25246, 25299, 27810, 28655, 29730, 35351,
            37944, 28609, 35582, 33592, 20967, 34552, 21482,
            21481, 20294, 36948, 36784, 22890, 33073, 24061,
            31466, 36799, 26842, 35895, 29432, 40008, 27197,
            35504, 20025, 21336, 22022, 22374, 25285, 25506,
            26086, 27470, 28129, 28251, 28845, 30701, 31471,
            31658, 32187, 32829, 32966, 34507, 35477, 37723,
            22243, 22727, 24382, 26029, 26262, 27264, 27573,
            30007, 35527, 20516, 30693, 22320, 24347, 24677,
            26234, 27744, 30196, 31258, 32622, 33268, 34584,
            36933, 39347, 31689, 30044, 31481, 31569, 33988,
            36880, 31209, 31378, 33590, 23265, 30528, 20013,
            20210, 23449, 24544, 25277, 26172, 26609, 27880,
            34411, 34935, 35387, 37198, 37619, 39376, 27159,
            28710, 29482, 33511, 33879, 36015, 19969, 20806,
            20939, 21899, 23541, 24086, 24115, 24193, 24340,
            24373, 24427, 24500, 25074, 25361, 26274, 26397,
            28526, 29266, 30010, 30522, 32884, 33081, 33144,
            34678, 35519, 35548, 36229, 36339, 37530, 38263,
            38914, 40165, 21189, 25431, 30452, 26389, 27784,
            29645, 36035, 37806, 38515, 27941, 22684, 26894,
            27084, 36861, 37786, 30171, 36890, 22618, 26626,
            25524, 27131, 20291, 28460, 26584, 36795, 34086,
            32180, 37716, 26943, 28528, 22378, 22775, 23340,
            32044, 29226, 21514, 37347, 40372, 20141, 20302,
            20572, 20597, 21059, 35998, 21576, 22564, 23450,
            24093, 24213, 24237, 24311, 24351, 24716, 25269,
            25402, 25552, 26799, 27712, 30855, 31118, 31243,
            32224, 33351, 35330, 35558, 36420, 36883, 37048,
            37165, 37336, 40718, 27877, 25688, 25826, 25973,
            28404, 30340, 31515, 36969, 37841, 28346, 21746,
            24505, 25764, 36685, 36845, 37444, 20856, 22635,
            22825, 23637, 24215, 28155, 32399, 29980, 36028,
            36578, 39003, 28857, 20253, 27583, 28593, 30000,
            38651, 20814, 21520, 22581, 22615, 22956, 23648,
            24466, 26007, 26460, 28193, 30331, 33759, 36077,
            36884, 37117, 37709, 30757, 30778, 21162, 24230,
            22303, 22900, 24594, 20498, 20826, 20908, 20941,
            20992, 21776, 22612, 22616, 22871, 23445, 23798,
            23947, 24764, 25237, 25645, 26481, 26691, 26812,
            26847, 30423, 28120, 28271, 28059, 28783, 29128,
            24403, 30168, 31095, 31561, 31572, 31570, 31958,
            32113, 21040, 33891, 34153, 34276, 35342, 35588,
            35910, 36367, 36867, 36879, 37913, 38518, 38957,
            39472, 38360, 20685, 21205, 21516, 22530, 23566,
            24999, 25758, 27934, 30643, 31461, 33012, 33796,
            36947, 37509, 23776, 40199, 21311, 24471, 24499,
            28060, 29305, 30563, 31167, 31716, 27602, 29420,
            35501, 26627, 27233, 20984, 31361, 26932, 23626,
            40182, 33515, 23493, 37193, 28702, 22136, 23663,
            24775, 25958, 27788, 35930, 36929, 38931, 21585,
            26311, 37389, 22856, 37027, 20869, 20045, 20970,
            34201, 35598, 28760, 25466, 37707, 26978, 39348,
            32260, 30071, 21335, 26976, 36575, 38627, 27741,
            20108, 23612, 24336, 36841, 21250, 36049, 32905,
            34425, 24319, 26085, 20083, 20837, 22914, 23615,
            38894, 20219, 22922, 24525, 35469, 28641, 31152,
            31074, 23527, 33905, 29483, 29105, 24180, 24565,
            25467, 25754, 29123, 31896, 20035, 24316, 20043,
            22492, 22178, 24745, 28611, 32013, 33021, 33075,
            33215, 36786, 35223, 34468, 24052, 25226, 25773,
            35207, 26487, 27874, 27966, 29750, 30772, 23110,
            32629, 33453, 39340, 20467, 24259, 25309, 25490,
            25943, 26479, 30403, 29260, 32972, 32954, 36649,
            37197, 20493, 22521, 23186, 26757, 26995, 29028,
            29437, 36023, 22770, 36064, 38506, 36889, 34687,
            31204, 30695, 33833, 20271, 21093, 21338, 25293,
            26575, 27850, 30333, 31636, 31893, 33334, 34180,
            36843, 26333, 28448, 29190, 32283, 33707, 39361,
            40614, 20989, 31665, 30834, 31672, 32903, 31560,
            27368, 24161, 32908, 30033, 30048, 20843, 37474,
            28300, 30330, 37271, 39658, 20240, 32624, 25244,
            31567, 38309, 40169, 22138, 22617, 34532, 38588,
            20276, 21028, 21322, 21453, 21467, 24070, 25644,
            26001, 26495, 27710, 27726, 29256, 29359, 29677,
            30036, 32321, 33324, 34281, 36009, 31684, 37318,
            29033, 38930, 39151, 25405, 26217, 30058, 30436,
            30928, 34115, 34542, 21290, 21329, 21542, 22915,
            24199, 24444, 24754, 25161, 25209, 25259, 26000,
            27604, 27852, 30130, 30382, 30865, 31192, 32203,
            32631, 32933, 34987, 35513, 36027, 36991, 38750,
            39131, 27147, 31800, 20633, 23614, 24494, 26503,
            27608, 29749, 30473, 32654, 40763, 26570, 31255,
            21305, 30091, 39661, 24422, 33181, 33777, 32920,
            24380, 24517, 30050, 31558, 36924, 26727, 23019,
            23195, 32016, 30334, 35628, 20469, 24426, 27161,
            27703, 28418, 29922, 31080, 34920, 35413, 35961,
            24287, 25551, 30149, 31186, 33495, 37672, 37618,
            33948, 34541, 39981, 21697, 24428, 25996, 27996,
            28693, 36007, 36051, 38971, 25935, 29942, 19981,
            20184, 22496, 22827, 23142, 23500, 20904, 24067,
            24220, 24598, 25206, 25975, 26023, 26222, 28014,
            29238, 31526, 33104, 33178, 33433, 35676, 36000,
            36070, 36212, 38428, 38468, 20398, 25771, 27494,
            33310, 33889, 34154, 37096, 23553, 26963, 39080,
            33914, 34135, 20239, 21103, 24489, 24133, 26381,
            31119, 33145, 35079, 35206, 28149, 24343, 25173,
            27832, 20175, 29289, 39826, 20998, 21563, 22132,
            22707, 24996, 25198, 28954, 22894, 31881, 31966,
            32027, 38640, 25991, 32862, 19993, 20341, 20853,
            22592, 24163, 24179, 24330, 26564, 20006, 34109,
            38281, 38491, 31859, 38913, 20731, 22721, 30294,
            30887, 21029, 30629, 34065, 31622, 20559, 22793,
            29255, 31687, 32232, 36794, 36820, 36941, 20415,
            21193, 23081, 24321, 38829, 20445, 33303, 37610,
            22275, 25429, 27497, 29995, 35036, 36628, 31298,
            21215, 22675, 24917, 25098, 26286, 27597, 31807,
            33769, 20515, 20472, 21253, 21574, 22577, 22857,
            23453, 23792, 23791, 23849, 24214, 25265, 25447,
            25918, 26041, 26379, 27861, 27873, 28921, 30770,
            32299, 32990, 33459, 33804, 34028, 34562, 35090,
            35370, 35914, 37030, 37586, 39165, 40179, 40300,
            20047, 20129, 20621, 21078, 22346, 22952, 24125,
            24536, 24537, 25151, 26292, 26395, 26576, 26834,
            20882, 32033, 32938, 33192, 35584, 35980, 36031,
            37502, 38450, 21536, 38956, 21271, 20693, 21340,
            22696, 25778, 26420, 29287, 30566, 31302, 37350,
            21187, 27809, 27526, 22528, 24140, 22868, 26412,
            32763, 20961, 30406, 25705, 30952, 39764, 40635,
            22475, 22969, 26151, 26522, 27598, 21737, 27097,
            24149, 33180, 26517, 39850, 26622, 40018, 26717,
            20134, 20451, 21448, 25273, 26411, 27819, 36804,
            20397, 32365, 40639, 19975, 24930, 28288, 28459,
            34067, 21619, 26410, 39749, 24051, 31637, 23724,
            23494, 34588, 28234, 34001, 31252, 33032, 22937,
            31885, 27665, 30496, 21209, 22818, 28961, 29279,
            30683, 38695, 40289, 26891, 23167, 23064, 20901,
            21517, 21629, 26126, 30431, 36855, 37528, 40180,
            23018, 29277, 28357, 20813, 26825, 32191, 32236,
            38754, 40634, 25720, 27169, 33538, 22916, 23391,
            27611, 29467, 30450, 32178, 32791, 33945, 20786,
            26408, 40665, 30446, 26466, 21247, 39173, 23588,
            25147, 31870, 36016, 21839, 24758, 32011, 38272,
            21249, 20063, 20918, 22812, 29242, 32822, 37326,
            24357, 30690, 21380, 24441, 32004, 34220, 35379,
            36493, 38742, 26611, 34222, 37971, 24841, 24840,
            27833, 30290, 35565, 36664, 21807, 20305, 20778,
            21191, 21451, 23461, 24189, 24736, 24962, 25558,
            26377, 26586, 28263, 28044, 29494, 29495, 30001,
            31056, 35029, 35480, 36938, 37009, 37109, 38596,
            34701, 22805, 20104, 20313, 19982, 35465, 36671,
            38928, 20653, 24188, 22934, 23481, 24248, 25562,
            25594, 25793, 26332, 26954, 27096, 27915, 28342,
            29076, 29992, 31407, 32650, 32768, 33865, 33993,
            35201, 35617, 36362, 36965, 38525, 39178, 24958,
            25233, 27442, 27779, 28020, 32716, 32764, 28096,
            32645, 34746, 35064, 26469, 33713, 38972, 38647,
            27931, 32097, 33853, 37226, 20081, 21365, 23888,
            27396, 28651, 34253, 34349, 35239, 21033, 21519,
            23653, 26446, 26792, 29702, 29827, 30178, 35023,
            35041, 37324, 38626, 38520, 24459, 29575, 31435,
            33870, 25504, 30053, 21129, 27969, 28316, 29705,
            30041, 30827, 31890, 38534, 31452, 40845, 20406,
            24942, 26053, 34396, 20102, 20142, 20698, 20001,
            20940, 23534, 26009, 26753, 28092, 29471, 30274,
            30637, 31260, 31975, 33391, 35538, 36988, 37327,
            38517, 38936, 21147, 32209, 20523, 21400, 26519,
            28107, 29136, 29747, 33256, 36650, 38563, 40023,
            40607, 29792, 22593, 28057, 32047, 39006, 20196,
            20278, 20363, 20919, 21169, 23994, 24604, 29618,
            31036, 33491, 37428, 38583, 38646, 38666, 40599,
            40802, 26278, 27508, 21015, 21155, 28872, 35010,
            24265, 24651, 24976, 28451, 29001, 31806, 32244,
            32879, 34030, 36899, 37676, 21570, 39791, 27347,
            28809, 36034, 36335, 38706, 21172, 23105, 24266,
            24324, 26391, 27004, 27028, 28010, 28431, 29282,
            29436, 31725, 32769, 32894, 34635, 37070, 20845,
            40595, 31108, 32907, 37682, 35542, 20525, 21644,
            35441, 27498, 36036, 33031, 24785, 26528, 40434,
            20121, 20120, 39952, 35435, 34241, 34152, 26880,
            28286, 30871, 33109, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 24332, 19984,
            19989, 20010, 20017, 20022, 20028, 20031, 20034,
            20054, 20056, 20098, 20101, 35947, 20106, 33298,
            24333, 20110, 20126, 20127, 20128, 20130, 20144,
            20147, 20150, 20174, 20173, 20164, 20166, 20162,
            20183, 20190, 20205, 20191, 20215, 20233, 20314,
            20272, 20315, 20317, 20311, 20295, 20342, 20360,
            20367, 20376, 20347, 20329, 20336, 20369, 20335,
            20358, 20374, 20760, 20436, 20447, 20430, 20440,
            20443, 20433, 20442, 20432, 20452, 20453, 20506,
            20520, 20500, 20522, 20517, 20485, 20252, 20470,
            20513, 20521, 20524, 20478, 20463, 20497, 20486,
            20547, 20551, 26371, 20565, 20560, 20552, 20570,
            20566, 20588, 20600, 20608, 20634, 20613, 20660,
            20658, 20681, 20682, 20659, 20674, 20694, 20702,
            20709, 20717, 20707, 20718, 20729, 20725, 20745,
            20737, 20738, 20758, 20757, 20756, 20762, 20769,
            20794, 20791, 20796, 20795, 20799, 20800, 20818,
            20812, 20820, 20834, 31480, 20841, 20842, 20846,
            20864, 20866, 22232, 20876, 20873, 20879, 20881,
            20883, 20885, 20886, 20900, 20902, 20898, 20905,
            20906, 20907, 20915, 20913, 20914, 20912, 20917,
            20925, 20933, 20937, 20955, 20960, 34389, 20969,
            20973, 20976, 20981, 20990, 20996, 21003, 21012,
            21006, 21031, 21034, 21038, 21043, 21049, 21071,
            21060, 21067, 21068, 21086, 21076, 21098, 21108,
            21097, 21107, 21119, 21117, 21133, 21140, 21138,
            21105, 21128, 21137, 36776, 36775, 21164, 21165,
            21180, 21173, 21185, 21197, 21207, 21214, 21219,
            21222, 39149, 21216, 21235, 21237, 21240, 21241,
            21254, 21256, 30008, 21261, 21264, 21263, 21269,
            21274, 21283, 21295, 21297, 21299, 21304, 21312,
            21318, 21317, 19991, 21321, 21325, 20950, 21342,
            21353, 21358, 22808, 21371, 21367, 21378, 21398,
            21408, 21414, 21413, 21422, 21424, 21430, 21443,
            31762, 38617, 21471, 26364, 29166, 21486, 21480,
            21485, 21498, 21505, 21565, 21568, 21548, 21549,
            21564, 21550, 21558, 21545, 21533, 21582, 21647,
            21621, 21646, 21599, 21617, 21623, 21616, 21650,
            21627, 21632, 21622, 21636, 21648, 21638, 21703,
            21666, 21688, 21669, 21676, 21700, 21704, 21672,
            21675, 21698, 21668, 21694, 21692, 21720, 21733,
            21734, 21775, 21780, 21757, 21742, 21741, 21754,
            21730, 21817, 21824, 21859, 21836, 21806, 21852,
            21829, 21846, 21847, 21816, 21811, 21853, 21913,
            21888, 21679, 21898, 21919, 21883, 21886, 21912,
            21918, 21934, 21884, 21891, 21929, 21895, 21928,
            21978, 21957, 21983, 21956, 21980, 21988, 21972,
            22036, 22007, 22038, 22014, 22013, 22043, 22009,
            22094, 22096, 29151, 22068, 22070, 22066, 22072,
            22123, 22116, 22063, 22124, 22122, 22150, 22144,
            22154, 22176, 22164, 22159, 22181, 22190, 22198,
            22196, 22210, 22204, 22209, 22211, 22208, 22216,
            22222, 22225, 22227, 22231, 22254, 22265, 22272,
            22271, 22276, 22281, 22280, 22283, 22285, 22291,
            22296, 22294, 21959, 22300, 22310, 22327, 22328,
            22350, 22331, 22336, 22351, 22377, 22464, 22408,
            22369, 22399, 22409, 22419, 22432, 22451, 22436,
            22442, 22448, 22467, 22470, 22484, 22482, 22483,
            22538, 22486, 22499, 22539, 22553, 22557, 22642,
            22561, 22626, 22603, 22640, 27584, 22610, 22589,
            22649, 22661, 22713, 22687, 22699, 22714, 22750,
            22715, 22712, 22702, 22725, 22739, 22737, 22743,
            22745, 22744, 22757, 22748, 22756, 22751, 22767,
            22778, 22777, 22779, 22780, 22781, 22786, 22794,
            22800, 22811, 26790, 22821, 22828, 22829, 22834,
            22840, 22846, 31442, 22869, 22864, 22862, 22874,
            22872, 22882, 22880, 22887, 22892, 22889, 22904,
            22913, 22941, 20318, 20395, 22947, 22962, 22982,
            23016, 23004, 22925, 23001, 23002, 23077, 23071,
            23057, 23068, 23049, 23066, 23104, 23148, 23113,
            23093, 23094, 23138, 23146, 23194, 23228, 23230,
            23243, 23234, 23229, 23267, 23255, 23270, 23273,
            23254, 23290, 23291, 23308, 23307, 23318, 23346,
            23248, 23338, 23350, 23358, 23363, 23365, 23360,
            23377, 23381, 23386, 23387, 23397, 23401, 23408,
            23411, 23413, 23416, 25992, 23418, 23424, 23427,
            23462, 23480, 23491, 23495, 23497, 23508, 23504,
            23524, 23526, 23522, 23518, 23525, 23531, 23536,
            23542, 23539, 23557, 23559, 23560, 23565, 23571,
            23584, 23586, 23592, 23608, 23609, 23617, 23622,
            23630, 23635, 23632, 23631, 23409, 23660, 23662,
            20066, 23670, 23673, 23692, 23697, 23700, 22939,
            23723, 23739, 23734, 23740, 23735, 23749, 23742,
            23751, 23769, 23785, 23805, 23802, 23789, 23948,
            23786, 23819, 23829, 23831, 23900, 23839, 23835,
            23825, 23828, 23842, 23834, 23833, 23832, 23884,
            23890, 23886, 23883, 23916, 23923, 23926, 23943,
            23940, 23938, 23970, 23965, 23980, 23982, 23997,
            23952, 23991, 23996, 24009, 24013, 24019, 24018,
            24022, 24027, 24043, 24050, 24053, 24075, 24090,
            24089, 24081, 24091, 24118, 24119, 24132, 24131,
            24128, 24142, 24151, 24148, 24159, 24162, 24164,
            24135, 24181, 24182, 24186, 40636, 24191, 24224,
            24257, 24258, 24264, 24272, 24271, 24278, 24291,
            24285, 24282, 24283, 24290, 24289, 24296, 24297,
            24300, 24305, 24307, 24304, 24308, 24312, 24318,
            24323, 24329, 24413, 24412, 24331, 24337, 24342,
            24361, 24365, 24376, 24385, 24392, 24396, 24398,
            24367, 24401, 24406, 24407, 24409, 24417, 24429,
            24435, 24439, 24451, 24450, 24447, 24458, 24456,
            24465, 24455, 24478, 24473, 24472, 24480, 24488,
            24493, 24508, 24534, 24571, 24548, 24568, 24561,
            24541, 24755, 24575, 24609, 24672, 24601, 24592,
            24617, 24590, 24625, 24603, 24597, 24619, 24614,
            24591, 24634, 24666, 24641, 24682, 24695, 24671,
            24650, 24646, 24653, 24675, 24643, 24676, 24642,
            24684, 24683, 24665, 24705, 24717, 24807, 24707,
            24730, 24708, 24731, 24726, 24727, 24722, 24743,
            24715, 24801, 24760, 24800, 24787, 24756, 24560,
            24765, 24774, 24757, 24792, 24909, 24853, 24838,
            24822, 24823, 24832, 24820, 24826, 24835, 24865,
            24827, 24817, 24845, 24846, 24903, 24894, 24872,
            24871, 24906, 24895, 24892, 24876, 24884, 24893,
            24898, 24900, 24947, 24951, 24920, 24921, 24922,
            24939, 24948, 24943, 24933, 24945, 24927, 24925,
            24915, 24949, 24985, 24982, 24967, 25004, 24980,
            24986, 24970, 24977, 25003, 25006, 25036, 25034,
            25033, 25079, 25032, 25027, 25030, 25018, 25035,
            32633, 25037, 25062, 25059, 25078, 25082, 25076,
            25087, 25085, 25084, 25086, 25088, 25096, 25097,
            25101, 25100, 25108, 25115, 25118, 25121, 25130,
            25134, 25136, 25138, 25139, 25153, 25166, 25182,
            25187, 25179, 25184, 25192, 25212, 25218, 25225,
            25214, 25234, 25235, 25238, 25300, 25219, 25236,
            25303, 25297, 25275, 25295, 25343, 25286, 25812,
            25288, 25308, 25292, 25290, 25282, 25287, 25243,
            25289, 25356, 25326, 25329, 25383, 25346, 25352,
            25327, 25333, 25424, 25406, 25421, 25628, 25423,
            25494, 25486, 25472, 25515, 25462, 25507, 25487,
            25481, 25503, 25525, 25451, 25449, 25534, 25577,
            25536, 25542, 25571, 25545, 25554, 25590, 25540,
            25622, 25652, 25606, 25619, 25638, 25654, 25885,
            25623, 25640, 25615, 25703, 25711, 25718, 25678,
            25898, 25749, 25747, 25765, 25769, 25736, 25788,
            25818, 25810, 25797, 25799, 25787, 25816, 25794,
            25841, 25831, 33289, 25824, 25825, 25260, 25827,
            25839, 25900, 25846, 25844, 25842, 25850, 25856,
            25853, 25880, 25884, 25861, 25892, 25891, 25899,
            25908, 25909, 25911, 25910, 25912, 30027, 25928,
            25942, 25941, 25933, 25944, 25950, 25949, 25970,
            25976, 25986, 25987, 35722, 26011, 26015, 26027,
            26039, 26051, 26054, 26049, 26052, 26060, 26066,
            26075, 26073, 26080, 26081, 26097, 26482, 26122,
            26115, 26107, 26483, 26165, 26166, 26164, 26140,
            26191, 26180, 26185, 26177, 26206, 26205, 26212,
            26215, 26216, 26207, 26210, 26224, 26243, 26248,
            26254, 26249, 26244, 26264, 26269, 26305, 26297,
            26313, 26302, 26300, 26308, 26296, 26326, 26330,
            26336, 26175, 26342, 26345, 26352, 26357, 26359,
            26383, 26390, 26398, 26406, 26407, 38712, 26414,
            26431, 26422, 26433, 26424, 26423, 26438, 26462,
            26464, 26457, 26467, 26468, 26505, 26480, 26537,
            26492, 26474, 26508, 26507, 26534, 26529, 26501,
            26551, 26607, 26548, 26604, 26547, 26601, 26552,
            26596, 26590, 26589, 26594, 26606, 26553, 26574,
            26566, 26599, 27292, 26654, 26694, 26665, 26688,
            26701, 26674, 26702, 26803, 26667, 26713, 26723,
            26743, 26751, 26783, 26767, 26797, 26772, 26781,
            26779, 26755, 27310, 26809, 26740, 26805, 26784,
            26810, 26895, 26765, 26750, 26881, 26826, 26888,
            26840, 26914, 26918, 26849, 26892, 26829, 26836,
            26855, 26837, 26934, 26898, 26884, 26839, 26851,
            26917, 26873, 26848, 26863, 26920, 26922, 26906,
            26915, 26913, 26822, 27001, 26999, 26972, 27000,
            26987, 26964, 27006, 26990, 26937, 26996, 26941,
            26969, 26928, 26977, 26974, 26973, 27009, 26986,
            27058, 27054, 27088, 27071, 27073, 27091, 27070,
            27086, 23528, 27082, 27101, 27067, 27075, 27047,
            27182, 27025, 27040, 27036, 27029, 27060, 27102,
            27112, 27138, 27163, 27135, 27402, 27129, 27122,
            27111, 27141, 27057, 27166, 27117, 27156, 27115,
            27146, 27154, 27329, 27171, 27155, 27204, 27148,
            27250, 27190, 27256, 27207, 27234, 27225, 27238,
            27208, 27192, 27170, 27280, 27277, 27296, 27268,
            27298, 27299, 27287, 34327, 27323, 27331, 27330,
            27320, 27315, 27308, 27358, 27345, 27359, 27306,
            27354, 27370, 27387, 27397, 34326, 27386, 27410,
            27414, 39729, 27423, 27448, 27447, 30428, 27449,
            39150, 27463, 27459, 27465, 27472, 27481, 27476,
            27483, 27487, 27489, 27512, 27513, 27519, 27520,
            27524, 27523, 27533, 27544, 27541, 27550, 27556,
            27562, 27563, 27567, 27570, 27569, 27571, 27575,
            27580, 27590, 27595, 27603, 27615, 27628, 27627,
            27635, 27631, 40638, 27656, 27667, 27668, 27675,
            27684, 27683, 27742, 27733, 27746, 27754, 27778,
            27789, 27802, 27777, 27803, 27774, 27752, 27763,
            27794, 27792, 27844, 27889, 27859, 27837, 27863,
            27845, 27869, 27822, 27825, 27838, 27834, 27867,
            27887, 27865, 27882, 27935, 34893, 27958, 27947,
            27965, 27960, 27929, 27957, 27955, 27922, 27916,
            28003, 28051, 28004, 27994, 28025, 27993, 28046,
            28053, 28644, 28037, 28153, 28181, 28170, 28085,
            28103, 28134, 28088, 28102, 28140, 28126, 28108,
            28136, 28114, 28101, 28154, 28121, 28132, 28117,
            28138, 28142, 28205, 28270, 28206, 28185, 28274,
            28255, 28222, 28195, 28267, 28203, 28278, 28237,
            28191, 28227, 28218, 28238, 28196, 28415, 28189,
            28216, 28290, 28330, 28312, 28361, 28343, 28371,
            28349, 28335, 28356, 28338, 28372, 28373, 28303,
            28325, 28354, 28319, 28481, 28433, 28748, 28396,
            28408, 28414, 28479, 28402, 28465, 28399, 28466,
            28364, 28478, 28435, 28407, 28550, 28538, 28536,
            28545, 28544, 28527, 28507, 28659, 28525, 28546,
            28540, 28504, 28558, 28561, 28610, 28518, 28595,
            28579, 28577, 28580, 28601, 28614, 28586, 28639,
            28629, 28652, 28628, 28632, 28657, 28654, 28635,
            28681, 28683, 28666, 28689, 28673, 28687, 28670,
            28699, 28698, 28532, 28701, 28696, 28703, 28720,
            28734, 28722, 28753, 28771, 28825, 28818, 28847,
            28913, 28844, 28856, 28851, 28846, 28895, 28875,
            28893, 28889, 28937, 28925, 28956, 28953, 29029,
            29013, 29064, 29030, 29026, 29004, 29014, 29036,
            29071, 29179, 29060, 29077, 29096, 29100, 29143,
            29113, 29118, 29138, 29129, 29140, 29134, 29152,
            29164, 29159, 29173, 29180, 29177, 29183, 29197,
            29200, 29211, 29224, 29229, 29228, 29232, 29234,
            29243, 29244, 29247, 29248, 29254, 29259, 29272,
            29300, 29310, 29314, 29313, 29319, 29330, 29334,
            29346, 29351, 29369, 29362, 29379, 29382, 29380,
            29390, 29394, 29410, 29408, 29409, 29433, 29431,
            20495, 29463, 29450, 29468, 29462, 29469, 29492,
            29487, 29481, 29477, 29502, 29518, 29519, 40664,
            29527, 29546, 29544, 29552, 29560, 29557, 29563,
            29562, 29640, 29619, 29646, 29627, 29632, 29669,
            29678, 29662, 29858, 29701, 29807, 29733, 29688,
            29746, 29754, 29781, 29759, 29791, 29785, 29761,
            29788, 29801, 29808, 29795, 29802, 29814, 29822,
            29835, 29854, 29863, 29898, 29903, 29908, 29681,
            29920, 29923, 29927, 29929, 29934, 29938, 29936,
            29937, 29944, 29943, 29956, 29955, 29957, 29964,
            29966, 29965, 29973, 29971, 29982, 29990, 29996,
            30012, 30020, 30029, 30026, 30025, 30043, 30022,
            30042, 30057, 30052, 30055, 30059, 30061, 30072,
            30070, 30086, 30087, 30068, 30090, 30089, 30082,
            30100, 30106, 30109, 30117, 30115, 30146, 30131,
            30147, 30133, 30141, 30136, 30140, 30129, 30157,
            30154, 30162, 30169, 30179, 30174, 30206, 30207,
            30204, 30209, 30192, 30202, 30194, 30195, 30219,
            30221, 30217, 30239, 30247, 30240, 30241, 30242,
            30244, 30260, 30256, 30267, 30279, 30280, 30278,
            30300, 30296, 30305, 30306, 30312, 30313, 30314,
            30311, 30316, 30320, 30322, 30326, 30328, 30332,
            30336, 30339, 30344, 30347, 30350, 30358, 30355,
            30361, 30362, 30384, 30388, 30392, 30393, 30394,
            30402, 30413, 30422, 30418, 30430, 30433, 30437,
            30439, 30442, 34351, 30459, 30472, 30471, 30468,
            30505, 30500, 30494, 30501, 30502, 30491, 30519,
            30520, 30535, 30554, 30568, 30571, 30555, 30565,
            30591, 30590, 30585, 30606, 30603, 30609, 30624,
            30622, 30640, 30646, 30649, 30655, 30652, 30653,
            30651, 30663, 30669, 30679, 30682, 30684, 30691,
            30702, 30716, 30732, 30738, 31014, 30752, 31018,
            30789, 30862, 30836, 30854, 30844, 30874, 30860,
            30883, 30901, 30890, 30895, 30929, 30918, 30923,
            30932, 30910, 30908, 30917, 30922, 30956, 30951,
            30938, 30973, 30964, 30983, 30994, 30993, 31001,
            31020, 31019, 31040, 31072, 31063, 31071, 31066,
            31061, 31059, 31098, 31103, 31114, 31133, 31143,
            40779, 31146, 31150, 31155, 31161, 31162, 31177,
            31189, 31207, 31212, 31201, 31203, 31240, 31245,
            31256, 31257, 31264, 31263, 31104, 31281, 31291,
            31294, 31287, 31299, 31319, 31305, 31329, 31330,
            31337, 40861, 31344, 31353, 31357, 31368, 31383,
            31381, 31384, 31382, 31401, 31432, 31408, 31414,
            31429, 31428, 31423, 36995, 31431, 31434, 31437,
            31439, 31445, 31443, 31449, 31450, 31453, 31457,
            31458, 31462, 31469, 31472, 31490, 31503, 31498,
            31494, 31539, 31512, 31513, 31518, 31541, 31528,
            31542, 31568, 31610, 31492, 31565, 31499, 31564,
            31557, 31605, 31589, 31604, 31591, 31600, 31601,
            31596, 31598, 31645, 31640, 31647, 31629, 31644,
            31642, 31627, 31634, 31631, 31581, 31641, 31691,
            31681, 31692, 31695, 31668, 31686, 31709, 31721,
            31761, 31764, 31718, 31717, 31840, 31744, 31751,
            31763, 31731, 31735, 31767, 31757, 31734, 31779,
            31783, 31786, 31775, 31799, 31787, 31805, 31820,
            31811, 31828, 31823, 31808, 31824, 31832, 31839,
            31844, 31830, 31845, 31852, 31861, 31875, 31888,
            31908, 31917, 31906, 31915, 31905, 31912, 31923,
            31922, 31921, 31918, 31929, 31933, 31936, 31941,
            31938, 31960, 31954, 31964, 31970, 39739, 31983,
            31986, 31988, 31990, 31994, 32006, 32002, 32028,
            32021, 32010, 32069, 32075, 32046, 32050, 32063,
            32053, 32070, 32115, 32086, 32078, 32114, 32104,
            32110, 32079, 32099, 32147, 32137, 32091, 32143,
            32125, 32155, 32186, 32174, 32163, 32181, 32199,
            32189, 32171, 32317, 32162, 32175, 32220, 32184,
            32159, 32176, 32216, 32221, 32228, 32222, 32251,
            32242, 32225, 32261, 32266, 32291, 32289, 32274,
            32305, 32287, 32265, 32267, 32290, 32326, 32358,
            32315, 32309, 32313, 32323, 32311, 32306, 32314,
            32359, 32349, 32342, 32350, 32345, 32346, 32377,
            32362, 32361, 32380, 32379, 32387, 32213, 32381,
            36782, 32383, 32392, 32393, 32396, 32402, 32400,
            32403, 32404, 32406, 32398, 32411, 32412, 32568,
            32570, 32581, 32588, 32589, 32590, 32592, 32593,
            32597, 32596, 32600, 32607, 32608, 32616, 32617,
            32615, 32632, 32642, 32646, 32643, 32648, 32647,
            32652, 32660, 32670, 32669, 32666, 32675, 32687,
            32690, 32697, 32686, 32694, 32696, 35697, 32709,
            32710, 32714, 32725, 32724, 32737, 32742, 32745,
            32755, 32761, 39132, 32774, 32772, 32779, 32786,
            32792, 32793, 32796, 32801, 32808, 32831, 32827,
            32842, 32838, 32850, 32856, 32858, 32863, 32866,
            32872, 32883, 32882, 32880, 32886, 32889, 32893,
            32895, 32900, 32902, 32901, 32923, 32915, 32922,
            32941, 20880, 32940, 32987, 32997, 32985, 32989,
            32964, 32986, 32982, 33033, 33007, 33009, 33051,
            33065, 33059, 33071, 33099, 38539, 33094, 33086,
            33107, 33105, 33020, 33137, 33134, 33125, 33126,
            33140, 33155, 33160, 33162, 33152, 33154, 33184,
            33173, 33188, 33187, 33119, 33171, 33193, 33200,
            33205, 33214, 33208, 33213, 33216, 33218, 33210,
            33225, 33229, 33233, 33241, 33240, 33224, 33242,
            33247, 33248, 33255, 33274, 33275, 33278, 33281,
            33282, 33285, 33287, 33290, 33293, 33296, 33302,
            33321, 33323, 33336, 33331, 33344, 33369, 33368,
            33373, 33370, 33375, 33380, 33378, 33384, 33386,
            33387, 33326, 33393, 33399, 33400, 33406, 33421,
            33426, 33451, 33439, 33467, 33452, 33505, 33507,
            33503, 33490, 33524, 33523, 33530, 33683, 33539,
            33531, 33529, 33502, 33542, 33500, 33545, 33497,
            33589, 33588, 33558, 33586, 33585, 33600, 33593,
            33616, 33605, 33583, 33579, 33559, 33560, 33669,
            33690, 33706, 33695, 33698, 33686, 33571, 33678,
            33671, 33674, 33660, 33717, 33651, 33653, 33696,
            33673, 33704, 33780, 33811, 33771, 33742, 33789,
            33795, 33752, 33803, 33729, 33783, 33799, 33760,
            33778, 33805, 33826, 33824, 33725, 33848, 34054,
            33787, 33901, 33834, 33852, 34138, 33924, 33911,
            33899, 33965, 33902, 33922, 33897, 33862, 33836,
            33903, 33913, 33845, 33994, 33890, 33977, 33983,
            33951, 34009, 33997, 33979, 34010, 34000, 33985,
            33990, 34006, 33953, 34081, 34047, 34036, 34071,
            34072, 34092, 34079, 34069, 34068, 34044, 34112,
            34147, 34136, 34120, 34113, 34306, 34123, 34133,
            34176, 34212, 34184, 34193, 34186, 34216, 34157,
            34196, 34203, 34282, 34183, 34204, 34167, 34174,
            34192, 34249, 34234, 34255, 34233, 34256, 34261,
            34269, 34277, 34268, 34297, 34314, 34323, 34315,
            34302, 34298, 34310, 34338, 34330, 34352, 34367,
            34381, 20053, 34388, 34399, 34407, 34417, 34451,
            34467, 34473, 34474, 34443, 34444, 34486, 34479,
            34500, 34502, 34480, 34505, 34851, 34475, 34516,
            34526, 34537, 34540, 34527, 34523, 34543, 34578,
            34566, 34568, 34560, 34563, 34555, 34577, 34569,
            34573, 34553, 34570, 34612, 34623, 34615, 34619,
            34597, 34601, 34586, 34656, 34655, 34680, 34636,
            34638, 34676, 34647, 34664, 34670, 34649, 34643,
            34659, 34666, 34821, 34722, 34719, 34690, 34735,
            34763, 34749, 34752, 34768, 38614, 34731, 34756,
            34739, 34759, 34758, 34747, 34799, 34802, 34784,
            34831, 34829, 34814, 34806, 34807, 34830, 34770,
            34833, 34838, 34837, 34850, 34849, 34865, 34870,
            34873, 34855, 34875, 34884, 34882, 34898, 34905,
            34910, 34914, 34923, 34945, 34942, 34974, 34933,
            34941, 34997, 34930, 34946, 34967, 34962, 34990,
            34969, 34978, 34957, 34980, 34992, 35007, 34993,
            35011, 35012, 35028, 35032, 35033, 35037, 35065,
            35074, 35068, 35060, 35048, 35058, 35076, 35084,
            35082, 35091, 35139, 35102, 35109, 35114, 35115,
            35137, 35140, 35131, 35126, 35128, 35148, 35101,
            35168, 35166, 35174, 35172, 35181, 35178, 35183,
            35188, 35191, 35198, 35203, 35208, 35210, 35219,
            35224, 35233, 35241, 35238, 35244, 35247, 35250,
            35258, 35261, 35263, 35264, 35290, 35292, 35293,
            35303, 35316, 35320, 35331, 35350, 35344, 35340,
            35355, 35357, 35365, 35382, 35393, 35419, 35410,
            35398, 35400, 35452, 35437, 35436, 35426, 35461,
            35458, 35460, 35496, 35489, 35473, 35493, 35494,
            35482, 35491, 35524, 35533, 35522, 35546, 35563,
            35571, 35559, 35556, 35569, 35604, 35552, 35554,
            35575, 35550, 35547, 35596, 35591, 35610, 35553,
            35606, 35600, 35607, 35616, 35635, 38827, 35622,
            35627, 35646, 35624, 35649, 35660, 35663, 35662,
            35657, 35670, 35675, 35674, 35691, 35679, 35692,
            35695, 35700, 35709, 35712, 35724, 35726, 35730,
            35731, 35734, 35737, 35738, 35898, 35905, 35903,
            35912, 35916, 35918, 35920, 35925, 35938, 35948,
            35960, 35962, 35970, 35977, 35973, 35978, 35981,
            35982, 35988, 35964, 35992, 25117, 36013, 36010,
            36029, 36018, 36019, 36014, 36022, 36040, 36033,
            36068, 36067, 36058, 36093, 36090, 36091, 36100,
            36101, 36106, 36103, 36111, 36109, 36112, 40782,
            36115, 36045, 36116, 36118, 36199, 36205, 36209,
            36211, 36225, 36249, 36290, 36286, 36282, 36303,
            36314, 36310, 36300, 36315, 36299, 36330, 36331,
            36319, 36323, 36348, 36360, 36361, 36351, 36381,
            36382, 36368, 36383, 36418, 36405, 36400, 36404,
            36426, 36423, 36425, 36428, 36432, 36424, 36441,
            36452, 36448, 36394, 36451, 36437, 36470, 36466,
            36476, 36481, 36487, 36485, 36484, 36491, 36490,
            36499, 36497, 36500, 36505, 36522, 36513, 36524,
            36528, 36550, 36529, 36542, 36549, 36552, 36555,
            36571, 36579, 36604, 36603, 36587, 36606, 36618,
            36613, 36629, 36626, 36633, 36627, 36636, 36639,
            36635, 36620, 36646, 36659, 36667, 36665, 36677,
            36674, 36670, 36684, 36681, 36678, 36686, 36695,
            36700, 36706, 36707, 36708, 36764, 36767, 36771,
            36781, 36783, 36791, 36826, 36837, 36834, 36842,
            36847, 36999, 36852, 36869, 36857, 36858, 36881,
            36885, 36897, 36877, 36894, 36886, 36875, 36903,
            36918, 36917, 36921, 36856, 36943, 36944, 36945,
            36946, 36878, 36937, 36926, 36950, 36952, 36958,
            36968, 36975, 36982, 38568, 36978, 36994, 36989,
            36993, 36992, 37002, 37001, 37007, 37032, 37039,
            37041, 37045, 37090, 37092, 25160, 37083, 37122,
            37138, 37145, 37170, 37168, 37194, 37206, 37208,
            37219, 37221, 37225, 37235, 37234, 37259, 37257,
            37250, 37282, 37291, 37295, 37290, 37301, 37300,
            37306, 37312, 37313, 37321, 37323, 37328, 37334,
            37343, 37345, 37339, 37372, 37365, 37366, 37406,
            37375, 37396, 37420, 37397, 37393, 37470, 37463,
            37445, 37449, 37476, 37448, 37525, 37439, 37451,
            37456, 37532, 37526, 37523, 37531, 37466, 37583,
            37561, 37559, 37609, 37647, 37626, 37700, 37678,
            37657, 37666, 37658, 37667, 37690, 37685, 37691,
            37724, 37728, 37756, 37742, 37718, 37808, 37804,
            37805, 37780, 37817, 37846, 37847, 37864, 37861,
            37848, 37827, 37853, 37840, 37832, 37860, 37914,
            37908, 37907, 37891, 37895, 37904, 37942, 37931,
            37941, 37921, 37946, 37953, 37970, 37956, 37979,
            37984, 37986, 37982, 37994, 37417, 38000, 38005,
            38007, 38013, 37978, 38012, 38014, 38017, 38015,
            38274, 38279, 38282, 38292, 38294, 38296, 38297,
            38304, 38312, 38311, 38317, 38332, 38331, 38329,
            38334, 38346, 28662, 38339, 38349, 38348, 38357,
            38356, 38358, 38364, 38369, 38373, 38370, 38433,
            38440, 38446, 38447, 38466, 38476, 38479, 38475,
            38519, 38492, 38494, 38493, 38495, 38502, 38514,
            38508, 38541, 38552, 38549, 38551, 38570, 38567,
            38577, 38578, 38576, 38580, 38582, 38584, 38585,
            38606, 38603, 38601, 38605, 35149, 38620, 38669,
            38613, 38649, 38660, 38662, 38664, 38675, 38670,
            38673, 38671, 38678, 38681, 38692, 38698, 38704,
            38713, 38717, 38718, 38724, 38726, 38728, 38722,
            38729, 38748, 38752, 38756, 38758, 38760, 21202,
            38763, 38769, 38777, 38789, 38780, 38785, 38778,
            38790, 38795, 38799, 38800, 38812, 38824, 38822,
            38819, 38835, 38836, 38851, 38854, 38856, 38859,
            38876, 38893, 40783, 38898, 31455, 38902, 38901,
            38927, 38924, 38968, 38948, 38945, 38967, 38973,
            38982, 38991, 38987, 39019, 39023, 39024, 39025,
            39028, 39027, 39082, 39087, 39089, 39094, 39108,
            39107, 39110, 39145, 39147, 39171, 39177, 39186,
            39188, 39192, 39201, 39197, 39198, 39204, 39200,
            39212, 39214, 39229, 39230, 39234, 39241, 39237,
            39248, 39243, 39249, 39250, 39244, 39253, 39319,
            39320, 39333, 39341, 39342, 39356, 39391, 39387,
            39389, 39384, 39377, 39405, 39406, 39409, 39410,
            39419, 39416, 39425, 39439, 39429, 39394, 39449,
            39467, 39479, 39493, 39490, 39488, 39491, 39486,
            39509, 39501, 39515, 39511, 39519, 39522, 39525,
            39524, 39529, 39531, 39530, 39597, 39600, 39612,
            39616, 39631, 39633, 39635, 39636, 39646, 39647,
            39650, 39651, 39654, 39663, 39659, 39662, 39668,
            39665, 39671, 39675, 39686, 39704, 39706, 39711,
            39714, 39715, 39717, 39719, 39720, 39721, 39722,
            39726, 39727, 39730, 39748, 39747, 39759, 39757,
            39758, 39761, 39768, 39796, 39827, 39811, 39825,
            39830, 39831, 39839, 39840, 39848, 39860, 39872,
            39882, 39865, 39878, 39887, 39889, 39890, 39907,
            39906, 39908, 39892, 39905, 39994, 39922, 39921,
            39920, 39957, 39956, 39945, 39955, 39948, 39942,
            39944, 39954, 39946, 39940, 39982, 39963, 39973,
            39972, 39969, 39984, 40007, 39986, 40006, 39998,
            40026, 40032, 40039, 40054, 40056, 40167, 40172,
            40176, 40201, 40200, 40171, 40195, 40198, 40234,
            40230, 40367, 40227, 40223, 40260, 40213, 40210,
            40257, 40255, 40254, 40262, 40264, 40285, 40286,
            40292, 40273, 40272, 40281, 40306, 40329, 40327,
            40363, 40303, 40314, 40346, 40356, 40361, 40370,
            40388, 40385, 40379, 40376, 40378, 40390, 40399,
            40386, 40409, 40403, 40440, 40422, 40429, 40431,
            40445, 40474, 40475, 40478, 40565, 40569, 40573,
            40577, 40584, 40587, 40588, 40594, 40597, 40593,
            40605, 40613, 40617, 40632, 40618, 40621, 38753,
            40652, 40654, 40655, 40656, 40660, 40668, 40670,
            40669, 40672, 40677, 40680, 40687, 40692, 40694,
            40695, 40697, 40699, 40700, 40701, 40711, 40712,
            30391, 40725, 40737, 40748, 40766, 40778, 40786,
            40788, 40803, 40799, 40800, 40801, 40806, 40807,
            40812, 40810, 40823, 40818, 40822, 40853, 40860,
            40864, 22575, 27079, 36953, 29796, 20956, 29081,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            32394, 35100, 37704, 37512, 34012, 20425, 28859,
            26161, 26824, 37625, 26363, 24389, 20008, 20193,
            20220, 20224, 20227, 20281, 20310, 20370, 20362,
            20378, 20372, 20429, 20544, 20514, 20479, 20510,
            20550, 20592, 20546, 20628, 20724, 20696, 20810,
            20836, 20893, 20926, 20972, 21013, 21148, 21158,
            21184, 21211, 21248, 21255, 21284, 21362, 21395,
            21426, 21469, 64014, 21660, 21642, 21673, 21759,
            21894, 22361, 22373, 22444, 22472, 22471, 64015,
            64016, 22686, 22706, 22795, 22867, 22875, 22877,
            22883, 22948, 22970, 23382, 23488, 29999, 23512,
            23532, 23582, 23718, 23738, 23797, 23847, 23891,
            64017, 23874, 23917, 23992, 23993, 24016, 24353,
            24372, 24423, 24503, 24542, 24669, 24709, 24714,
            24798, 24789, 24864, 24818, 24849, 24887, 24880,
            24984, 25107, 25254, 25589, 25696, 25757, 25806,
            25934, 26112, 26133, 26171, 26121, 26158, 26142,
            26148, 26213, 26199, 26201, 64018, 26227, 26265,
            26272, 26290, 26303, 26362, 26382, 63785, 26470,
            26555, 26706, 26560, 26625, 26692, 26831, 64019,
            26984, 64020, 27032, 27106, 27184, 27243, 27206,
            27251, 27262, 27362, 27364, 27606, 27711, 27740,
            27782, 27759, 27866, 27908, 28039, 28015, 28054,
            28076, 28111, 28152, 28146, 28156, 28217, 28252,
            28199, 28220, 28351, 28552, 28597, 28661, 28677,
            28679, 28712, 28805, 28843, 28943, 28932, 29020,
            28998, 28999, 64021, 29121, 29182, 29361, 29374,
            29476, 64022, 29559, 29629, 29641, 29654, 29667,
            29650, 29703, 29685, 29734, 29738, 29737, 29742,
            29794, 29833, 29855, 29953, 30063, 30338, 30364,
            30366, 30363, 30374, 64023, 30534, 21167, 30753,
            30798, 30820, 30842, 31024, 64024, 64025, 64026,
            31124, 64027, 31131, 31441, 31463, 64028, 31467,
            31646, 64029, 32072, 32092, 32183, 32160, 32214,
            32338, 32583, 32673, 64030, 33537, 33634, 33663,
            33735, 33782, 33864, 33972, 34131, 34137, 34155,
            64031, 34224, 64032, 64033, 34823, 35061, 35346,
            35383, 35449, 35495, 35518, 35551, 64034, 35574,
            35667, 35711, 36080, 36084, 36114, 36214, 64035,
            36559, 64036, 64037, 36967, 37086, 64038, 37141,
            37159, 37338, 37335, 37342, 37357, 37358, 37348,
            37349, 37382, 37392, 37386, 37434, 37440, 37436,
            37454, 37465, 37457, 37433, 37479, 37543, 37495,
            37496, 37607, 37591, 37593, 37584, 64039, 37589,
            37600, 37587, 37669, 37665, 37627, 64040, 37662,
            37631, 37661, 37634, 37744, 37719, 37796, 37830,
            37854, 37880, 37937, 37957, 37960, 38290, 63964,
            64041, 38557, 38575, 38707, 38715, 38723, 38733,
            38735, 38737, 38741, 38999, 39013, 64042, 64043,
            39207, 64044, 39326, 39502, 39641, 39644, 39797,
            39794, 39823, 39857, 39867, 39936, 40304, 40299,
            64045, 40473, 40657, null, null, 8560, 8561, 8562,
            8563, 8564, 8565, 8566, 8567, 8568, 8569, 65506,
            65508, 65287, 65282, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, 8560,
            8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568,
            8569, 8544, 8545, 8546, 8547, 8548, 8549, 8550,
            8551, 8552, 8553, 65506, 65508, 65287, 65282, 12849,
            8470, 8481, 8757, 32394, 35100, 37704, 37512, 34012,
            20425, 28859, 26161, 26824, 37625, 26363, 24389,
            20008, 20193, 20220, 20224, 20227, 20281, 20310,
            20370, 20362, 20378, 20372, 20429, 20544, 20514,
            20479, 20510, 20550, 20592, 20546, 20628, 20724,
            20696, 20810, 20836, 20893, 20926, 20972, 21013,
            21148, 21158, 21184, 21211, 21248, 21255, 21284,
            21362, 21395, 21426, 21469, 64014, 21660, 21642,
            21673, 21759, 21894, 22361, 22373, 22444, 22472,
            22471, 64015, 64016, 22686, 22706, 22795, 22867,
            22875, 22877, 22883, 22948, 22970, 23382, 23488,
            29999, 23512, 23532, 23582, 23718, 23738, 23797,
            23847, 23891, 64017, 23874, 23917, 23992, 23993,
            24016, 24353, 24372, 24423, 24503, 24542, 24669,
            24709, 24714, 24798, 24789, 24864, 24818, 24849,
            24887, 24880, 24984, 25107, 25254, 25589, 25696,
            25757, 25806, 25934, 26112, 26133, 26171, 26121,
            26158, 26142, 26148, 26213, 26199, 26201, 64018,
            26227, 26265, 26272, 26290, 26303, 26362, 26382,
            63785, 26470, 26555, 26706, 26560, 26625, 26692,
            26831, 64019, 26984, 64020, 27032, 27106, 27184,
            27243, 27206, 27251, 27262, 27362, 27364, 27606,
            27711, 27740, 27782, 27759, 27866, 27908, 28039,
            28015, 28054, 28076, 28111, 28152, 28146, 28156,
            28217, 28252, 28199, 28220, 28351, 28552, 28597,
            28661, 28677, 28679, 28712, 28805, 28843, 28943,
            28932, 29020, 28998, 28999, 64021, 29121, 29182,
            29361, 29374, 29476, 64022, 29559, 29629, 29641,
            29654, 29667, 29650, 29703, 29685, 29734, 29738,
            29737, 29742, 29794, 29833, 29855, 29953, 30063,
            30338, 30364, 30366, 30363, 30374, 64023, 30534,
            21167, 30753, 30798, 30820, 30842, 31024, 64024,
            64025, 64026, 31124, 64027, 31131, 31441, 31463,
            64028, 31467, 31646, 64029, 32072, 32092, 32183,
            32160, 32214, 32338, 32583, 32673, 64030, 33537,
            33634, 33663, 33735, 33782, 33864, 33972, 34131,
            34137, 34155, 64031, 34224, 64032, 64033, 34823,
            35061, 35346, 35383, 35449, 35495, 35518, 35551,
            64034, 35574, 35667, 35711, 36080, 36084, 36114,
            36214, 64035, 36559, 64036, 64037, 36967, 37086,
            64038, 37141, 37159, 37338, 37335, 37342, 37357,
            37358, 37348, 37349, 37382, 37392, 37386, 37434,
            37440, 37436, 37454, 37465, 37457, 37433, 37479,
            37543, 37495, 37496, 37607, 37591, 37593, 37584,
            64039, 37589, 37600, 37587, 37669, 37665, 37627,
            64040, 37662, 37631, 37661, 37634, 37744, 37719,
            37796, 37830, 37854, 37880, 37937, 37957, 37960,
            38290, 63964, 64041, 38557, 38575, 38707, 38715,
            38723, 38733, 38735, 38737, 38741, 38999, 39013,
            64042, 64043, 39207, 64044, 39326, 39502, 39641,
            39644, 39797, 39794, 39823, 39857, 39867, 39936,
            40304, 40299, 64045, 40473, 40657, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null
        ],
        "jis0212": [null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 728, 711, 184, 729, 733,
            175, 731, 730, 65374, 900, 901, null, null, null,
            null, null, null, null, null, 161, 166, 191, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, 186, 170, 169, 174,
            8482, 164, 8470, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, 902, 904, 905, 906, 938, null, 908, null, 910,
            939, null, 911, null, null, null, null, 940, 941,
            942, 943, 970, 912, 972, 962, 973, 971, 944, 974,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 1026, 1027, 1028, 1029, 1030,
            1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 1106, 1107, 1108, 1109, 1110,
            1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, 198, 272, null,
            294, null, 306, null, 321, 319, null, 330, 216, 338,
            null, 358, 222, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, 230, 273, 240, 295, 305, 307, 312, 322,
            320, 329, 331, 248, 339, 223, 359, 254, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 193, 192, 196, 194, 258,
            461, 256, 260, 197, 195, 262, 264, 268, 199, 266,
            270, 201, 200, 203, 202, 282, 278, 274, 280, null,
            284, 286, 290, 288, 292, 205, 204, 207, 206, 463,
            304, 298, 302, 296, 308, 310, 313, 317, 315, 323,
            327, 325, 209, 211, 210, 214, 212, 465, 336, 332,
            213, 340, 344, 342, 346, 348, 352, 350, 356, 354,
            218, 217, 220, 219, 364, 467, 368, 362, 370, 366,
            360, 471, 475, 473, 469, 372, 221, 376, 374, 377,
            381, 379, null, null, null, null, null, null, null,
            225, 224, 228, 226, 259, 462, 257, 261, 229, 227,
            263, 265, 269, 231, 267, 271, 233, 232, 235, 234,
            283, 279, 275, 281, 501, 285, 287, null, 289, 293,
            237, 236, 239, 238, 464, null, 299, 303, 297, 309,
            311, 314, 318, 316, 324, 328, 326, 241, 243, 242,
            246, 244, 466, 337, 333, 245, 341, 345, 343, 347,
            349, 353, 351, 357, 355, 250, 249, 252, 251, 365,
            468, 369, 363, 371, 367, 361, 472, 476, 474, 470,
            373, 253, 255, 375, 378, 382, 380, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 19970, 19972, 19973, 19980,
            19986, 19999, 20003, 20004, 20008, 20011, 20014,
            20015, 20016, 20021, 20032, 20033, 20036, 20039,
            20049, 20058, 20060, 20067, 20072, 20073, 20084,
            20085, 20089, 20095, 20109, 20118, 20119, 20125,
            20143, 20153, 20163, 20176, 20186, 20187, 20192,
            20193, 20194, 20200, 20207, 20209, 20211, 20213,
            20221, 20222, 20223, 20224, 20226, 20227, 20232,
            20235, 20236, 20242, 20245, 20246, 20247, 20249,
            20270, 20273, 20320, 20275, 20277, 20279, 20281,
            20283, 20286, 20288, 20290, 20296, 20297, 20299,
            20300, 20306, 20308, 20310, 20312, 20319, 20323,
            20330, 20332, 20334, 20337, 20343, 20344, 20345,
            20346, 20349, 20350, 20353, 20354, 20356, 20357,
            20361, 20362, 20364, 20366, 20368, 20370, 20371,
            20372, 20375, 20377, 20378, 20382, 20383, 20402,
            20407, 20409, 20411, 20412, 20413, 20414, 20416,
            20417, 20421, 20422, 20424, 20425, 20427, 20428,
            20429, 20431, 20434, 20444, 20448, 20450, 20464,
            20466, 20476, 20477, 20479, 20480, 20481, 20484,
            20487, 20490, 20492, 20494, 20496, 20499, 20503,
            20504, 20507, 20508, 20509, 20510, 20514, 20519,
            20526, 20528, 20530, 20531, 20533, 20544, 20545,
            20546, 20549, 20550, 20554, 20556, 20558, 20561,
            20562, 20563, 20567, 20569, 20575, 20576, 20578,
            20579, 20582, 20583, 20586, 20589, 20592, 20593,
            20539, 20609, 20611, 20612, 20614, 20618, 20622,
            20623, 20624, 20626, 20627, 20628, 20630, 20635,
            20636, 20638, 20639, 20640, 20641, 20642, 20650,
            20655, 20656, 20665, 20666, 20669, 20672, 20675,
            20676, 20679, 20684, 20686, 20688, 20691, 20692,
            20696, 20700, 20701, 20703, 20706, 20708, 20710,
            20712, 20713, 20719, 20721, 20726, 20730, 20734,
            20739, 20742, 20743, 20744, 20747, 20748, 20749,
            20750, 20722, 20752, 20759, 20761, 20763, 20764,
            20765, 20766, 20771, 20775, 20776, 20780, 20781,
            20783, 20785, 20787, 20788, 20789, 20792, 20793,
            20802, 20810, 20815, 20819, 20821, 20823, 20824,
            20831, 20836, 20838, 20862, 20867, 20868, 20875,
            20878, 20888, 20893, 20897, 20899, 20909, 20920,
            20922, 20924, 20926, 20927, 20930, 20936, 20943,
            20945, 20946, 20947, 20949, 20952, 20958, 20962,
            20965, 20974, 20978, 20979, 20980, 20983, 20993,
            20994, 20997, 21010, 21011, 21013, 21014, 21016,
            21026, 21032, 21041, 21042, 21045, 21052, 21061,
            21065, 21077, 21079, 21080, 21082, 21084, 21087,
            21088, 21089, 21094, 21102, 21111, 21112, 21113,
            21120, 21122, 21125, 21130, 21132, 21139, 21141,
            21142, 21143, 21144, 21146, 21148, 21156, 21157,
            21158, 21159, 21167, 21168, 21174, 21175, 21176,
            21178, 21179, 21181, 21184, 21188, 21190, 21192,
            21196, 21199, 21201, 21204, 21206, 21211, 21212,
            21217, 21221, 21224, 21225, 21226, 21228, 21232,
            21233, 21236, 21238, 21239, 21248, 21251, 21258,
            21259, 21260, 21265, 21267, 21272, 21275, 21276,
            21278, 21279, 21285, 21287, 21288, 21289, 21291,
            21292, 21293, 21296, 21298, 21301, 21308, 21309,
            21310, 21314, 21324, 21323, 21337, 21339, 21345,
            21347, 21349, 21356, 21357, 21362, 21369, 21374,
            21379, 21383, 21384, 21390, 21395, 21396, 21401,
            21405, 21409, 21412, 21418, 21419, 21423, 21426,
            21428, 21429, 21431, 21432, 21434, 21437, 21440,
            21445, 21455, 21458, 21459, 21461, 21466, 21469,
            21470, 21472, 21478, 21479, 21493, 21506, 21523,
            21530, 21537, 21543, 21544, 21546, 21551, 21553,
            21556, 21557, 21571, 21572, 21575, 21581, 21583,
            21598, 21602, 21604, 21606, 21607, 21609, 21611,
            21613, 21614, 21620, 21631, 21633, 21635, 21637,
            21640, 21641, 21645, 21649, 21653, 21654, 21660,
            21663, 21665, 21670, 21671, 21673, 21674, 21677,
            21678, 21681, 21687, 21689, 21690, 21691, 21695,
            21702, 21706, 21709, 21710, 21728, 21738, 21740,
            21743, 21750, 21756, 21758, 21759, 21760, 21761,
            21765, 21768, 21769, 21772, 21773, 21774, 21781,
            21802, 21803, 21810, 21813, 21814, 21819, 21820,
            21821, 21825, 21831, 21833, 21834, 21837, 21840,
            21841, 21848, 21850, 21851, 21854, 21856, 21857,
            21860, 21862, 21887, 21889, 21890, 21894, 21896,
            21902, 21903, 21905, 21906, 21907, 21908, 21911,
            21923, 21924, 21933, 21938, 21951, 21953, 21955,
            21958, 21961, 21963, 21964, 21966, 21969, 21970,
            21971, 21975, 21976, 21979, 21982, 21986, 21993,
            22006, 22015, 22021, 22024, 22026, 22029, 22030,
            22031, 22032, 22033, 22034, 22041, 22060, 22064,
            22067, 22069, 22071, 22073, 22075, 22076, 22077,
            22079, 22080, 22081, 22083, 22084, 22086, 22089,
            22091, 22093, 22095, 22100, 22110, 22112, 22113,
            22114, 22115, 22118, 22121, 22125, 22127, 22129,
            22130, 22133, 22148, 22149, 22152, 22155, 22156,
            22165, 22169, 22170, 22173, 22174, 22175, 22182,
            22183, 22184, 22185, 22187, 22188, 22189, 22193,
            22195, 22199, 22206, 22213, 22217, 22218, 22219,
            22223, 22224, 22220, 22221, 22233, 22236, 22237,
            22239, 22241, 22244, 22245, 22246, 22247, 22248,
            22257, 22251, 22253, 22262, 22263, 22273, 22274,
            22279, 22282, 22284, 22289, 22293, 22298, 22299,
            22301, 22304, 22306, 22307, 22308, 22309, 22313,
            22314, 22316, 22318, 22319, 22323, 22324, 22333,
            22334, 22335, 22341, 22342, 22348, 22349, 22354,
            22370, 22373, 22375, 22376, 22379, 22381, 22382,
            22383, 22384, 22385, 22387, 22388, 22389, 22391,
            22393, 22394, 22395, 22396, 22398, 22401, 22403,
            22412, 22420, 22423, 22425, 22426, 22428, 22429,
            22430, 22431, 22433, 22421, 22439, 22440, 22441,
            22444, 22456, 22461, 22471, 22472, 22476, 22479,
            22485, 22493, 22494, 22500, 22502, 22503, 22505,
            22509, 22512, 22517, 22518, 22520, 22525, 22526,
            22527, 22531, 22532, 22536, 22537, 22497, 22540,
            22541, 22555, 22558, 22559, 22560, 22566, 22567,
            22573, 22578, 22585, 22591, 22601, 22604, 22605,
            22607, 22608, 22613, 22623, 22625, 22628, 22631,
            22632, 22648, 22652, 22655, 22656, 22657, 22663,
            22664, 22665, 22666, 22668, 22669, 22671, 22672,
            22676, 22678, 22685, 22688, 22689, 22690, 22694,
            22697, 22705, 22706, 22724, 22716, 22722, 22728,
            22733, 22734, 22736, 22738, 22740, 22742, 22746,
            22749, 22753, 22754, 22761, 22771, 22789, 22790,
            22795, 22796, 22802, 22803, 22804, 34369, 22813,
            22817, 22819, 22820, 22824, 22831, 22832, 22835,
            22837, 22838, 22847, 22851, 22854, 22866, 22867,
            22873, 22875, 22877, 22878, 22879, 22881, 22883,
            22891, 22893, 22895, 22898, 22901, 22902, 22905,
            22907, 22908, 22923, 22924, 22926, 22930, 22933,
            22935, 22943, 22948, 22951, 22957, 22958, 22959,
            22960, 22963, 22967, 22970, 22972, 22977, 22979,
            22980, 22984, 22986, 22989, 22994, 23005, 23006,
            23007, 23011, 23012, 23015, 23022, 23023, 23025,
            23026, 23028, 23031, 23040, 23044, 23052, 23053,
            23054, 23058, 23059, 23070, 23075, 23076, 23079,
            23080, 23082, 23085, 23088, 23108, 23109, 23111,
            23112, 23116, 23120, 23125, 23134, 23139, 23141,
            23143, 23149, 23159, 23162, 23163, 23166, 23179,
            23184, 23187, 23190, 23193, 23196, 23198, 23199,
            23200, 23202, 23207, 23212, 23217, 23218, 23219,
            23221, 23224, 23226, 23227, 23231, 23236, 23238,
            23240, 23247, 23258, 23260, 23264, 23269, 23274,
            23278, 23285, 23286, 23293, 23296, 23297, 23304,
            23319, 23348, 23321, 23323, 23325, 23329, 23333,
            23341, 23352, 23361, 23371, 23372, 23378, 23382,
            23390, 23400, 23406, 23407, 23420, 23421, 23422,
            23423, 23425, 23428, 23430, 23434, 23438, 23440,
            23441, 23443, 23444, 23446, 23464, 23465, 23468,
            23469, 23471, 23473, 23474, 23479, 23482, 23484,
            23488, 23489, 23501, 23503, 23510, 23511, 23512,
            23513, 23514, 23520, 23535, 23537, 23540, 23549,
            23564, 23575, 23582, 23583, 23587, 23590, 23593,
            23595, 23596, 23598, 23600, 23602, 23605, 23606,
            23641, 23642, 23644, 23650, 23651, 23655, 23656,
            23657, 23661, 23664, 23668, 23669, 23674, 23675,
            23676, 23677, 23687, 23688, 23690, 23695, 23698,
            23709, 23711, 23712, 23714, 23715, 23718, 23722,
            23730, 23732, 23733, 23738, 23753, 23755, 23762,
            23773, 23767, 23790, 23793, 23794, 23796, 23809,
            23814, 23821, 23826, 23851, 23843, 23844, 23846,
            23847, 23857, 23860, 23865, 23869, 23871, 23874,
            23875, 23878, 23880, 23893, 23889, 23897, 23882,
            23903, 23904, 23905, 23906, 23908, 23914, 23917,
            23920, 23929, 23930, 23934, 23935, 23937, 23939,
            23944, 23946, 23954, 23955, 23956, 23957, 23961,
            23963, 23967, 23968, 23975, 23979, 23984, 23988,
            23992, 23993, 24003, 24007, 24011, 24016, 24014,
            24024, 24025, 24032, 24036, 24041, 24056, 24057,
            24064, 24071, 24077, 24082, 24084, 24085, 24088,
            24095, 24096, 24110, 24104, 24114, 24117, 24126,
            24139, 24144, 24137, 24145, 24150, 24152, 24155,
            24156, 24158, 24168, 24170, 24171, 24172, 24173,
            24174, 24176, 24192, 24203, 24206, 24226, 24228,
            24229, 24232, 24234, 24236, 24241, 24243, 24253,
            24254, 24255, 24262, 24268, 24267, 24270, 24273,
            24274, 24276, 24277, 24284, 24286, 24293, 24299,
            24322, 24326, 24327, 24328, 24334, 24345, 24348,
            24349, 24353, 24354, 24355, 24356, 24360, 24363,
            24364, 24366, 24368, 24372, 24374, 24379, 24381,
            24383, 24384, 24388, 24389, 24391, 24397, 24400,
            24404, 24408, 24411, 24416, 24419, 24420, 24423,
            24431, 24434, 24436, 24437, 24440, 24442, 24445,
            24446, 24457, 24461, 24463, 24470, 24476, 24477,
            24482, 24487, 24491, 24484, 24492, 24495, 24496,
            24497, 24504, 24516, 24519, 24520, 24521, 24523,
            24528, 24529, 24530, 24531, 24532, 24542, 24545,
            24546, 24552, 24553, 24554, 24556, 24557, 24558,
            24559, 24562, 24563, 24566, 24570, 24572, 24583,
            24586, 24589, 24595, 24596, 24599, 24600, 24602,
            24607, 24612, 24621, 24627, 24629, 24640, 24647,
            24648, 24649, 24652, 24657, 24660, 24662, 24663,
            24669, 24673, 24679, 24689, 24702, 24703, 24706,
            24710, 24712, 24714, 24718, 24721, 24723, 24725,
            24728, 24733, 24734, 24738, 24740, 24741, 24744,
            24752, 24753, 24759, 24763, 24766, 24770, 24772,
            24776, 24777, 24778, 24779, 24782, 24783, 24788,
            24789, 24793, 24795, 24797, 24798, 24802, 24805,
            24818, 24821, 24824, 24828, 24829, 24834, 24839,
            24842, 24844, 24848, 24849, 24850, 24851, 24852,
            24854, 24855, 24857, 24860, 24862, 24866, 24874,
            24875, 24880, 24881, 24885, 24886, 24887, 24889,
            24897, 24901, 24902, 24905, 24926, 24928, 24940,
            24946, 24952, 24955, 24956, 24959, 24960, 24961,
            24963, 24964, 24971, 24973, 24978, 24979, 24983,
            24984, 24988, 24989, 24991, 24992, 24997, 25000,
            25002, 25005, 25016, 25017, 25020, 25024, 25025,
            25026, 25038, 25039, 25045, 25052, 25053, 25054,
            25055, 25057, 25058, 25063, 25065, 25061, 25068,
            25069, 25071, 25089, 25091, 25092, 25095, 25107,
            25109, 25116, 25120, 25122, 25123, 25127, 25129,
            25131, 25145, 25149, 25154, 25155, 25156, 25158,
            25164, 25168, 25169, 25170, 25172, 25174, 25178,
            25180, 25188, 25197, 25199, 25203, 25210, 25213,
            25229, 25230, 25231, 25232, 25254, 25256, 25267,
            25270, 25271, 25274, 25278, 25279, 25284, 25294,
            25301, 25302, 25306, 25322, 25330, 25332, 25340,
            25341, 25347, 25348, 25354, 25355, 25357, 25360,
            25363, 25366, 25368, 25385, 25386, 25389, 25397,
            25398, 25401, 25404, 25409, 25410, 25411, 25412,
            25414, 25418, 25419, 25422, 25426, 25427, 25428,
            25432, 25435, 25445, 25446, 25452, 25453, 25457,
            25460, 25461, 25464, 25468, 25469, 25471, 25474,
            25476, 25479, 25482, 25488, 25492, 25493, 25497,
            25498, 25502, 25508, 25510, 25517, 25518, 25519,
            25533, 25537, 25541, 25544, 25550, 25553, 25555,
            25556, 25557, 25564, 25568, 25573, 25578, 25580,
            25586, 25587, 25589, 25592, 25593, 25609, 25610,
            25616, 25618, 25620, 25624, 25630, 25632, 25634,
            25636, 25637, 25641, 25642, 25647, 25648, 25653,
            25661, 25663, 25675, 25679, 25681, 25682, 25683,
            25684, 25690, 25691, 25692, 25693, 25695, 25696,
            25697, 25699, 25709, 25715, 25716, 25723, 25725,
            25733, 25735, 25743, 25744, 25745, 25752, 25753,
            25755, 25757, 25759, 25761, 25763, 25766, 25768,
            25772, 25779, 25789, 25790, 25791, 25796, 25801,
            25802, 25803, 25804, 25806, 25808, 25809, 25813,
            25815, 25828, 25829, 25833, 25834, 25837, 25840,
            25845, 25847, 25851, 25855, 25857, 25860, 25864,
            25865, 25866, 25871, 25875, 25876, 25878, 25881,
            25883, 25886, 25887, 25890, 25894, 25897, 25902,
            25905, 25914, 25916, 25917, 25923, 25927, 25929,
            25936, 25938, 25940, 25951, 25952, 25959, 25963,
            25978, 25981, 25985, 25989, 25994, 26002, 26005,
            26008, 26013, 26016, 26019, 26022, 26030, 26034,
            26035, 26036, 26047, 26050, 26056, 26057, 26062,
            26064, 26068, 26070, 26072, 26079, 26096, 26098,
            26100, 26101, 26105, 26110, 26111, 26112, 26116,
            26120, 26121, 26125, 26129, 26130, 26133, 26134,
            26141, 26142, 26145, 26146, 26147, 26148, 26150,
            26153, 26154, 26155, 26156, 26158, 26160, 26161,
            26163, 26169, 26167, 26176, 26181, 26182, 26186,
            26188, 26193, 26190, 26199, 26200, 26201, 26203,
            26204, 26208, 26209, 26363, 26218, 26219, 26220,
            26238, 26227, 26229, 26239, 26231, 26232, 26233,
            26235, 26240, 26236, 26251, 26252, 26253, 26256,
            26258, 26265, 26266, 26267, 26268, 26271, 26272,
            26276, 26285, 26289, 26290, 26293, 26299, 26303,
            26304, 26306, 26307, 26312, 26316, 26318, 26319,
            26324, 26331, 26335, 26344, 26347, 26348, 26350,
            26362, 26373, 26375, 26382, 26387, 26393, 26396,
            26400, 26402, 26419, 26430, 26437, 26439, 26440,
            26444, 26452, 26453, 26461, 26470, 26476, 26478,
            26484, 26486, 26491, 26497, 26500, 26510, 26511,
            26513, 26515, 26518, 26520, 26521, 26523, 26544,
            26545, 26546, 26549, 26555, 26556, 26557, 26617,
            26560, 26562, 26563, 26565, 26568, 26569, 26578,
            26583, 26585, 26588, 26593, 26598, 26608, 26610,
            26614, 26615, 26706, 26644, 26649, 26653, 26655,
            26664, 26663, 26668, 26669, 26671, 26672, 26673,
            26675, 26683, 26687, 26692, 26693, 26698, 26700,
            26709, 26711, 26712, 26715, 26731, 26734, 26735,
            26736, 26737, 26738, 26741, 26745, 26746, 26747,
            26748, 26754, 26756, 26758, 26760, 26774, 26776,
            26778, 26780, 26785, 26787, 26789, 26793, 26794,
            26798, 26802, 26811, 26821, 26824, 26828, 26831,
            26832, 26833, 26835, 26838, 26841, 26844, 26845,
            26853, 26856, 26858, 26859, 26860, 26861, 26864,
            26865, 26869, 26870, 26875, 26876, 26877, 26886,
            26889, 26890, 26896, 26897, 26899, 26902, 26903,
            26929, 26931, 26933, 26936, 26939, 26946, 26949,
            26953, 26958, 26967, 26971, 26979, 26980, 26981,
            26982, 26984, 26985, 26988, 26992, 26993, 26994,
            27002, 27003, 27007, 27008, 27021, 27026, 27030,
            27032, 27041, 27045, 27046, 27048, 27051, 27053,
            27055, 27063, 27064, 27066, 27068, 27077, 27080,
            27089, 27094, 27095, 27106, 27109, 27118, 27119,
            27121, 27123, 27125, 27134, 27136, 27137, 27139,
            27151, 27153, 27157, 27162, 27165, 27168, 27172,
            27176, 27184, 27186, 27188, 27191, 27195, 27198,
            27199, 27205, 27206, 27209, 27210, 27214, 27216,
            27217, 27218, 27221, 27222, 27227, 27236, 27239,
            27242, 27249, 27251, 27262, 27265, 27267, 27270,
            27271, 27273, 27275, 27281, 27291, 27293, 27294,
            27295, 27301, 27307, 27311, 27312, 27313, 27316,
            27325, 27326, 27327, 27334, 27337, 27336, 27340,
            27344, 27348, 27349, 27350, 27356, 27357, 27364,
            27367, 27372, 27376, 27377, 27378, 27388, 27389,
            27394, 27395, 27398, 27399, 27401, 27407, 27408,
            27409, 27415, 27419, 27422, 27428, 27432, 27435,
            27436, 27439, 27445, 27446, 27451, 27455, 27462,
            27466, 27469, 27474, 27478, 27480, 27485, 27488,
            27495, 27499, 27502, 27504, 27509, 27517, 27518,
            27522, 27525, 27543, 27547, 27551, 27552, 27554,
            27555, 27560, 27561, 27564, 27565, 27566, 27568,
            27576, 27577, 27581, 27582, 27587, 27588, 27593,
            27596, 27606, 27610, 27617, 27619, 27622, 27623,
            27630, 27633, 27639, 27641, 27647, 27650, 27652,
            27653, 27657, 27661, 27662, 27664, 27666, 27673,
            27679, 27686, 27687, 27688, 27692, 27694, 27699,
            27701, 27702, 27706, 27707, 27711, 27722, 27723,
            27725, 27727, 27730, 27732, 27737, 27739, 27740,
            27755, 27757, 27759, 27764, 27766, 27768, 27769,
            27771, 27781, 27782, 27783, 27785, 27796, 27797,
            27799, 27800, 27804, 27807, 27824, 27826, 27828,
            27842, 27846, 27853, 27855, 27856, 27857, 27858,
            27860, 27862, 27866, 27868, 27872, 27879, 27881,
            27883, 27884, 27886, 27890, 27892, 27908, 27911,
            27914, 27918, 27919, 27921, 27923, 27930, 27942,
            27943, 27944, 27751, 27950, 27951, 27953, 27961,
            27964, 27967, 27991, 27998, 27999, 28001, 28005,
            28007, 28015, 28016, 28028, 28034, 28039, 28049,
            28050, 28052, 28054, 28055, 28056, 28074, 28076,
            28084, 28087, 28089, 28093, 28095, 28100, 28104,
            28106, 28110, 28111, 28118, 28123, 28125, 28127,
            28128, 28130, 28133, 28137, 28143, 28144, 28148,
            28150, 28156, 28160, 28164, 28190, 28194, 28199,
            28210, 28214, 28217, 28219, 28220, 28228, 28229,
            28232, 28233, 28235, 28239, 28241, 28242, 28243,
            28244, 28247, 28252, 28253, 28254, 28258, 28259,
            28264, 28275, 28283, 28285, 28301, 28307, 28313,
            28320, 28327, 28333, 28334, 28337, 28339, 28347,
            28351, 28352, 28353, 28355, 28359, 28360, 28362,
            28365, 28366, 28367, 28395, 28397, 28398, 28409,
            28411, 28413, 28420, 28424, 28426, 28428, 28429,
            28438, 28440, 28442, 28443, 28454, 28457, 28458,
            28463, 28464, 28467, 28470, 28475, 28476, 28461,
            28495, 28497, 28498, 28499, 28503, 28505, 28506,
            28509, 28510, 28513, 28514, 28520, 28524, 28541,
            28542, 28547, 28551, 28552, 28555, 28556, 28557,
            28560, 28562, 28563, 28564, 28566, 28570, 28575,
            28576, 28581, 28582, 28583, 28584, 28590, 28591,
            28592, 28597, 28598, 28604, 28613, 28615, 28616,
            28618, 28634, 28638, 28648, 28649, 28656, 28661,
            28665, 28668, 28669, 28672, 28677, 28678, 28679,
            28685, 28695, 28704, 28707, 28719, 28724, 28727,
            28729, 28732, 28739, 28740, 28744, 28745, 28746,
            28747, 28756, 28757, 28765, 28766, 28750, 28772,
            28773, 28780, 28782, 28789, 28790, 28798, 28801,
            28805, 28806, 28820, 28821, 28822, 28823, 28824,
            28827, 28836, 28843, 28848, 28849, 28852, 28855,
            28874, 28881, 28883, 28884, 28885, 28886, 28888,
            28892, 28900, 28922, 28931, 28932, 28933, 28934,
            28935, 28939, 28940, 28943, 28958, 28960, 28971,
            28973, 28975, 28976, 28977, 28984, 28993, 28997,
            28998, 28999, 29002, 29003, 29008, 29010, 29015,
            29018, 29020, 29022, 29024, 29032, 29049, 29056,
            29061, 29063, 29068, 29074, 29082, 29083, 29088,
            29090, 29103, 29104, 29106, 29107, 29114, 29119,
            29120, 29121, 29124, 29131, 29132, 29139, 29142,
            29145, 29146, 29148, 29176, 29182, 29184, 29191,
            29192, 29193, 29203, 29207, 29210, 29213, 29215,
            29220, 29227, 29231, 29236, 29240, 29241, 29249,
            29250, 29251, 29253, 29262, 29263, 29264, 29267,
            29269, 29270, 29274, 29276, 29278, 29280, 29283,
            29288, 29291, 29294, 29295, 29297, 29303, 29304,
            29307, 29308, 29311, 29316, 29321, 29325, 29326,
            29331, 29339, 29352, 29357, 29358, 29361, 29364,
            29374, 29377, 29383, 29385, 29388, 29397, 29398,
            29400, 29407, 29413, 29427, 29428, 29434, 29435,
            29438, 29442, 29444, 29445, 29447, 29451, 29453,
            29458, 29459, 29464, 29465, 29470, 29474, 29476,
            29479, 29480, 29484, 29489, 29490, 29493, 29498,
            29499, 29501, 29507, 29517, 29520, 29522, 29526,
            29528, 29533, 29534, 29535, 29536, 29542, 29543,
            29545, 29547, 29548, 29550, 29551, 29553, 29559,
            29561, 29564, 29568, 29569, 29571, 29573, 29574,
            29582, 29584, 29587, 29589, 29591, 29592, 29596,
            29598, 29599, 29600, 29602, 29605, 29606, 29610,
            29611, 29613, 29621, 29623, 29625, 29628, 29629,
            29631, 29637, 29638, 29641, 29643, 29644, 29647,
            29650, 29651, 29654, 29657, 29661, 29665, 29667,
            29670, 29671, 29673, 29684, 29685, 29687, 29689,
            29690, 29691, 29693, 29695, 29696, 29697, 29700,
            29703, 29706, 29713, 29722, 29723, 29732, 29734,
            29736, 29737, 29738, 29739, 29740, 29741, 29742,
            29743, 29744, 29745, 29753, 29760, 29763, 29764,
            29766, 29767, 29771, 29773, 29777, 29778, 29783,
            29789, 29794, 29798, 29799, 29800, 29803, 29805,
            29806, 29809, 29810, 29824, 29825, 29829, 29830,
            29831, 29833, 29839, 29840, 29841, 29842, 29848,
            29849, 29850, 29852, 29855, 29856, 29857, 29859,
            29862, 29864, 29865, 29866, 29867, 29870, 29871,
            29873, 29874, 29877, 29881, 29883, 29887, 29896,
            29897, 29900, 29904, 29907, 29912, 29914, 29915,
            29918, 29919, 29924, 29928, 29930, 29931, 29935,
            29940, 29946, 29947, 29948, 29951, 29958, 29970,
            29974, 29975, 29984, 29985, 29988, 29991, 29993,
            29994, 29999, 30006, 30009, 30013, 30014, 30015,
            30016, 30019, 30023, 30024, 30030, 30032, 30034,
            30039, 30046, 30047, 30049, 30063, 30065, 30073,
            30074, 30075, 30076, 30077, 30078, 30081, 30085,
            30096, 30098, 30099, 30101, 30105, 30108, 30114,
            30116, 30132, 30138, 30143, 30144, 30145, 30148,
            30150, 30156, 30158, 30159, 30167, 30172, 30175,
            30176, 30177, 30180, 30183, 30188, 30190, 30191,
            30193, 30201, 30208, 30210, 30211, 30212, 30215,
            30216, 30218, 30220, 30223, 30226, 30227, 30229,
            30230, 30233, 30235, 30236, 30237, 30238, 30243,
            30245, 30246, 30249, 30253, 30258, 30259, 30261,
            30264, 30265, 30266, 30268, 30282, 30272, 30273,
            30275, 30276, 30277, 30281, 30283, 30293, 30297,
            30303, 30308, 30309, 30317, 30318, 30319, 30321,
            30324, 30337, 30341, 30348, 30349, 30357, 30363,
            30364, 30365, 30367, 30368, 30370, 30371, 30372,
            30373, 30374, 30375, 30376, 30378, 30381, 30397,
            30401, 30405, 30409, 30411, 30412, 30414, 30420,
            30425, 30432, 30438, 30440, 30444, 30448, 30449,
            30454, 30457, 30460, 30464, 30470, 30474, 30478,
            30482, 30484, 30485, 30487, 30489, 30490, 30492,
            30498, 30504, 30509, 30510, 30511, 30516, 30517,
            30518, 30521, 30525, 30526, 30530, 30533, 30534,
            30538, 30541, 30542, 30543, 30546, 30550, 30551,
            30556, 30558, 30559, 30560, 30562, 30564, 30567,
            30570, 30572, 30576, 30578, 30579, 30580, 30586,
            30589, 30592, 30596, 30604, 30605, 30612, 30613,
            30614, 30618, 30623, 30626, 30631, 30634, 30638,
            30639, 30641, 30645, 30654, 30659, 30665, 30673,
            30674, 30677, 30681, 30686, 30687, 30688, 30692,
            30694, 30698, 30700, 30704, 30705, 30708, 30712,
            30715, 30725, 30726, 30729, 30733, 30734, 30737,
            30749, 30753, 30754, 30755, 30765, 30766, 30768,
            30773, 30775, 30787, 30788, 30791, 30792, 30796,
            30798, 30802, 30812, 30814, 30816, 30817, 30819,
            30820, 30824, 30826, 30830, 30842, 30846, 30858,
            30863, 30868, 30872, 30881, 30877, 30878, 30879,
            30884, 30888, 30892, 30893, 30896, 30897, 30898,
            30899, 30907, 30909, 30911, 30919, 30920, 30921,
            30924, 30926, 30930, 30931, 30933, 30934, 30948,
            30939, 30943, 30944, 30945, 30950, 30954, 30962,
            30963, 30976, 30966, 30967, 30970, 30971, 30975,
            30982, 30988, 30992, 31002, 31004, 31006, 31007,
            31008, 31013, 31015, 31017, 31021, 31025, 31028,
            31029, 31035, 31037, 31039, 31044, 31045, 31046,
            31050, 31051, 31055, 31057, 31060, 31064, 31067,
            31068, 31079, 31081, 31083, 31090, 31097, 31099,
            31100, 31102, 31115, 31116, 31121, 31123, 31124,
            31125, 31126, 31128, 31131, 31132, 31137, 31144,
            31145, 31147, 31151, 31153, 31156, 31160, 31163,
            31170, 31172, 31175, 31176, 31178, 31183, 31188,
            31190, 31194, 31197, 31198, 31200, 31202, 31205,
            31210, 31211, 31213, 31217, 31224, 31228, 31234,
            31235, 31239, 31241, 31242, 31244, 31249, 31253,
            31259, 31262, 31265, 31271, 31275, 31277, 31279,
            31280, 31284, 31285, 31288, 31289, 31290, 31300,
            31301, 31303, 31304, 31308, 31317, 31318, 31321,
            31324, 31325, 31327, 31328, 31333, 31335, 31338,
            31341, 31349, 31352, 31358, 31360, 31362, 31365,
            31366, 31370, 31371, 31376, 31377, 31380, 31390,
            31392, 31395, 31404, 31411, 31413, 31417, 31419,
            31420, 31430, 31433, 31436, 31438, 31441, 31451,
            31464, 31465, 31467, 31468, 31473, 31476, 31483,
            31485, 31486, 31495, 31508, 31519, 31523, 31527,
            31529, 31530, 31531, 31533, 31534, 31535, 31536,
            31537, 31540, 31549, 31551, 31552, 31553, 31559,
            31566, 31573, 31584, 31588, 31590, 31593, 31594,
            31597, 31599, 31602, 31603, 31607, 31620, 31625,
            31630, 31632, 31633, 31638, 31643, 31646, 31648,
            31653, 31660, 31663, 31664, 31666, 31669, 31670,
            31674, 31675, 31676, 31677, 31682, 31685, 31688,
            31690, 31700, 31702, 31703, 31705, 31706, 31707,
            31720, 31722, 31730, 31732, 31733, 31736, 31737,
            31738, 31740, 31742, 31745, 31746, 31747, 31748,
            31750, 31753, 31755, 31756, 31758, 31759, 31769,
            31771, 31776, 31781, 31782, 31784, 31788, 31793,
            31795, 31796, 31798, 31801, 31802, 31814, 31818,
            31829, 31825, 31826, 31827, 31833, 31834, 31835,
            31836, 31837, 31838, 31841, 31843, 31847, 31849,
            31853, 31854, 31856, 31858, 31865, 31868, 31869,
            31878, 31879, 31887, 31892, 31902, 31904, 31910,
            31920, 31926, 31927, 31930, 31931, 31932, 31935,
            31940, 31943, 31944, 31945, 31949, 31951, 31955,
            31956, 31957, 31959, 31961, 31962, 31965, 31974,
            31977, 31979, 31989, 32003, 32007, 32008, 32009,
            32015, 32017, 32018, 32019, 32022, 32029, 32030,
            32035, 32038, 32042, 32045, 32049, 32060, 32061,
            32062, 32064, 32065, 32071, 32072, 32077, 32081,
            32083, 32087, 32089, 32090, 32092, 32093, 32101,
            32103, 32106, 32112, 32120, 32122, 32123, 32127,
            32129, 32130, 32131, 32133, 32134, 32136, 32139,
            32140, 32141, 32145, 32150, 32151, 32157, 32158,
            32166, 32167, 32170, 32179, 32182, 32183, 32185,
            32194, 32195, 32196, 32197, 32198, 32204, 32205,
            32206, 32215, 32217, 32256, 32226, 32229, 32230,
            32234, 32235, 32237, 32241, 32245, 32246, 32249,
            32250, 32264, 32272, 32273, 32277, 32279, 32284,
            32285, 32288, 32295, 32296, 32300, 32301, 32303,
            32307, 32310, 32319, 32324, 32325, 32327, 32334,
            32336, 32338, 32344, 32351, 32353, 32354, 32357,
            32363, 32366, 32367, 32371, 32376, 32382, 32385,
            32390, 32391, 32394, 32397, 32401, 32405, 32408,
            32410, 32413, 32414, 32572, 32571, 32573, 32574,
            32575, 32579, 32580, 32583, 32591, 32594, 32595,
            32603, 32604, 32605, 32609, 32611, 32612, 32613,
            32614, 32621, 32625, 32637, 32638, 32639, 32640,
            32651, 32653, 32655, 32656, 32657, 32662, 32663,
            32668, 32673, 32674, 32678, 32682, 32685, 32692,
            32700, 32703, 32704, 32707, 32712, 32718, 32719,
            32731, 32735, 32739, 32741, 32744, 32748, 32750,
            32751, 32754, 32762, 32765, 32766, 32767, 32775,
            32776, 32778, 32781, 32782, 32783, 32785, 32787,
            32788, 32790, 32797, 32798, 32799, 32800, 32804,
            32806, 32812, 32814, 32816, 32820, 32821, 32823,
            32825, 32826, 32828, 32830, 32832, 32836, 32864,
            32868, 32870, 32877, 32881, 32885, 32897, 32904,
            32910, 32924, 32926, 32934, 32935, 32939, 32952,
            32953, 32968, 32973, 32975, 32978, 32980, 32981,
            32983, 32984, 32992, 33005, 33006, 33008, 33010,
            33011, 33014, 33017, 33018, 33022, 33027, 33035,
            33046, 33047, 33048, 33052, 33054, 33056, 33060,
            33063, 33068, 33072, 33077, 33082, 33084, 33093,
            33095, 33098, 33100, 33106, 33111, 33120, 33121,
            33127, 33128, 33129, 33133, 33135, 33143, 33153,
            33168, 33156, 33157, 33158, 33163, 33166, 33174,
            33176, 33179, 33182, 33186, 33198, 33202, 33204,
            33211, 33227, 33219, 33221, 33226, 33230, 33231,
            33237, 33239, 33243, 33245, 33246, 33249, 33252,
            33259, 33260, 33264, 33265, 33266, 33269, 33270,
            33272, 33273, 33277, 33279, 33280, 33283, 33295,
            33299, 33300, 33305, 33306, 33309, 33313, 33314,
            33320, 33330, 33332, 33338, 33347, 33348, 33349,
            33350, 33355, 33358, 33359, 33361, 33366, 33372,
            33376, 33379, 33383, 33389, 33396, 33403, 33405,
            33407, 33408, 33409, 33411, 33412, 33415, 33417,
            33418, 33422, 33425, 33428, 33430, 33432, 33434,
            33435, 33440, 33441, 33443, 33444, 33447, 33448,
            33449, 33450, 33454, 33456, 33458, 33460, 33463,
            33466, 33468, 33470, 33471, 33478, 33488, 33493,
            33498, 33504, 33506, 33508, 33512, 33514, 33517,
            33519, 33526, 33527, 33533, 33534, 33536, 33537,
            33543, 33544, 33546, 33547, 33620, 33563, 33565,
            33566, 33567, 33569, 33570, 33580, 33581, 33582,
            33584, 33587, 33591, 33594, 33596, 33597, 33602,
            33603, 33604, 33607, 33613, 33614, 33617, 33621,
            33622, 33623, 33648, 33656, 33661, 33663, 33664,
            33666, 33668, 33670, 33677, 33682, 33684, 33685,
            33688, 33689, 33691, 33692, 33693, 33702, 33703,
            33705, 33708, 33726, 33727, 33728, 33735, 33737,
            33743, 33744, 33745, 33748, 33757, 33619, 33768,
            33770, 33782, 33784, 33785, 33788, 33793, 33798,
            33802, 33807, 33809, 33813, 33817, 33709, 33839,
            33849, 33861, 33863, 33864, 33866, 33869, 33871,
            33873, 33874, 33878, 33880, 33881, 33882, 33884,
            33888, 33892, 33893, 33895, 33898, 33904, 33907,
            33908, 33910, 33912, 33916, 33917, 33921, 33925,
            33938, 33939, 33941, 33950, 33958, 33960, 33961,
            33962, 33967, 33969, 33972, 33978, 33981, 33982,
            33984, 33986, 33991, 33992, 33996, 33999, 34003,
            34012, 34023, 34026, 34031, 34032, 34033, 34034,
            34039, 34098, 34042, 34043, 34045, 34050, 34051,
            34055, 34060, 34062, 34064, 34076, 34078, 34082,
            34083, 34084, 34085, 34087, 34090, 34091, 34095,
            34099, 34100, 34102, 34111, 34118, 34127, 34128,
            34129, 34130, 34131, 34134, 34137, 34140, 34141,
            34142, 34143, 34144, 34145, 34146, 34148, 34155,
            34159, 34169, 34170, 34171, 34173, 34175, 34177,
            34181, 34182, 34185, 34187, 34188, 34191, 34195,
            34200, 34205, 34207, 34208, 34210, 34213, 34215,
            34228, 34230, 34231, 34232, 34236, 34237, 34238,
            34239, 34242, 34247, 34250, 34251, 34254, 34221,
            34264, 34266, 34271, 34272, 34278, 34280, 34285,
            34291, 34294, 34300, 34303, 34304, 34308, 34309,
            34317, 34318, 34320, 34321, 34322, 34328, 34329,
            34331, 34334, 34337, 34343, 34345, 34358, 34360,
            34362, 34364, 34365, 34368, 34370, 34374, 34386,
            34387, 34390, 34391, 34392, 34393, 34397, 34400,
            34401, 34402, 34403, 34404, 34409, 34412, 34415,
            34421, 34422, 34423, 34426, 34445, 34449, 34454,
            34456, 34458, 34460, 34465, 34470, 34471, 34472,
            34477, 34481, 34483, 34484, 34485, 34487, 34488,
            34489, 34495, 34496, 34497, 34499, 34501, 34513,
            34514, 34517, 34519, 34522, 34524, 34528, 34531,
            34533, 34535, 34440, 34554, 34556, 34557, 34564,
            34565, 34567, 34571, 34574, 34575, 34576, 34579,
            34580, 34585, 34590, 34591, 34593, 34595, 34600,
            34606, 34607, 34609, 34610, 34617, 34618, 34620,
            34621, 34622, 34624, 34627, 34629, 34637, 34648,
            34653, 34657, 34660, 34661, 34671, 34673, 34674,
            34683, 34691, 34692, 34693, 34694, 34695, 34696,
            34697, 34699, 34700, 34704, 34707, 34709, 34711,
            34712, 34713, 34718, 34720, 34723, 34727, 34732,
            34733, 34734, 34737, 34741, 34750, 34751, 34753,
            34760, 34761, 34762, 34766, 34773, 34774, 34777,
            34778, 34780, 34783, 34786, 34787, 34788, 34794,
            34795, 34797, 34801, 34803, 34808, 34810, 34815,
            34817, 34819, 34822, 34825, 34826, 34827, 34832,
            34841, 34834, 34835, 34836, 34840, 34842, 34843,
            34844, 34846, 34847, 34856, 34861, 34862, 34864,
            34866, 34869, 34874, 34876, 34881, 34883, 34885,
            34888, 34889, 34890, 34891, 34894, 34897, 34901,
            34902, 34904, 34906, 34908, 34911, 34912, 34916,
            34921, 34929, 34937, 34939, 34944, 34968, 34970,
            34971, 34972, 34975, 34976, 34984, 34986, 35002,
            35005, 35006, 35008, 35018, 35019, 35020, 35021,
            35022, 35025, 35026, 35027, 35035, 35038, 35047,
            35055, 35056, 35057, 35061, 35063, 35073, 35078,
            35085, 35086, 35087, 35093, 35094, 35096, 35097,
            35098, 35100, 35104, 35110, 35111, 35112, 35120,
            35121, 35122, 35125, 35129, 35130, 35134, 35136,
            35138, 35141, 35142, 35145, 35151, 35154, 35159,
            35162, 35163, 35164, 35169, 35170, 35171, 35179,
            35182, 35184, 35187, 35189, 35194, 35195, 35196,
            35197, 35209, 35213, 35216, 35220, 35221, 35227,
            35228, 35231, 35232, 35237, 35248, 35252, 35253,
            35254, 35255, 35260, 35284, 35285, 35286, 35287,
            35288, 35301, 35305, 35307, 35309, 35313, 35315,
            35318, 35321, 35325, 35327, 35332, 35333, 35335,
            35343, 35345, 35346, 35348, 35349, 35358, 35360,
            35362, 35364, 35366, 35371, 35372, 35375, 35381,
            35383, 35389, 35390, 35392, 35395, 35397, 35399,
            35401, 35405, 35406, 35411, 35414, 35415, 35416,
            35420, 35421, 35425, 35429, 35431, 35445, 35446,
            35447, 35449, 35450, 35451, 35454, 35455, 35456,
            35459, 35462, 35467, 35471, 35472, 35474, 35478,
            35479, 35481, 35487, 35495, 35497, 35502, 35503,
            35507, 35510, 35511, 35515, 35518, 35523, 35526,
            35528, 35529, 35530, 35537, 35539, 35540, 35541,
            35543, 35549, 35551, 35564, 35568, 35572, 35573,
            35574, 35580, 35583, 35589, 35590, 35595, 35601,
            35612, 35614, 35615, 35594, 35629, 35632, 35639,
            35644, 35650, 35651, 35652, 35653, 35654, 35656,
            35666, 35667, 35668, 35673, 35661, 35678, 35683,
            35693, 35702, 35704, 35705, 35708, 35710, 35713,
            35716, 35717, 35723, 35725, 35727, 35732, 35733,
            35740, 35742, 35743, 35896, 35897, 35901, 35902,
            35909, 35911, 35913, 35915, 35919, 35921, 35923,
            35924, 35927, 35928, 35931, 35933, 35929, 35939,
            35940, 35942, 35944, 35945, 35949, 35955, 35957,
            35958, 35963, 35966, 35974, 35975, 35979, 35984,
            35986, 35987, 35993, 35995, 35996, 36004, 36025,
            36026, 36037, 36038, 36041, 36043, 36047, 36054,
            36053, 36057, 36061, 36065, 36072, 36076, 36079,
            36080, 36082, 36085, 36087, 36088, 36094, 36095,
            36097, 36099, 36105, 36114, 36119, 36123, 36197,
            36201, 36204, 36206, 36223, 36226, 36228, 36232,
            36237, 36240, 36241, 36245, 36254, 36255, 36256,
            36262, 36267, 36268, 36271, 36274, 36277, 36279,
            36281, 36283, 36288, 36293, 36294, 36295, 36296,
            36298, 36302, 36305, 36308, 36309, 36311, 36313,
            36324, 36325, 36327, 36332, 36336, 36284, 36337,
            36338, 36340, 36349, 36353, 36356, 36357, 36358,
            36363, 36369, 36372, 36374, 36384, 36385, 36386,
            36387, 36390, 36391, 36401, 36403, 36406, 36407,
            36408, 36409, 36413, 36416, 36417, 36427, 36429,
            36430, 36431, 36436, 36443, 36444, 36445, 36446,
            36449, 36450, 36457, 36460, 36461, 36463, 36464,
            36465, 36473, 36474, 36475, 36482, 36483, 36489,
            36496, 36498, 36501, 36506, 36507, 36509, 36510,
            36514, 36519, 36521, 36525, 36526, 36531, 36533,
            36538, 36539, 36544, 36545, 36547, 36548, 36551,
            36559, 36561, 36564, 36572, 36584, 36590, 36592,
            36593, 36599, 36601, 36602, 36589, 36608, 36610,
            36615, 36616, 36623, 36624, 36630, 36631, 36632,
            36638, 36640, 36641, 36643, 36645, 36647, 36648,
            36652, 36653, 36654, 36660, 36661, 36662, 36663,
            36666, 36672, 36673, 36675, 36679, 36687, 36689,
            36690, 36691, 36692, 36693, 36696, 36701, 36702,
            36709, 36765, 36768, 36769, 36772, 36773, 36774,
            36789, 36790, 36792, 36798, 36800, 36801, 36806,
            36810, 36811, 36813, 36816, 36818, 36819, 36821,
            36832, 36835, 36836, 36840, 36846, 36849, 36853,
            36854, 36859, 36862, 36866, 36868, 36872, 36876,
            36888, 36891, 36904, 36905, 36911, 36906, 36908,
            36909, 36915, 36916, 36919, 36927, 36931, 36932,
            36940, 36955, 36957, 36962, 36966, 36967, 36972,
            36976, 36980, 36985, 36997, 37000, 37003, 37004,
            37006, 37008, 37013, 37015, 37016, 37017, 37019,
            37024, 37025, 37026, 37029, 37040, 37042, 37043,
            37044, 37046, 37053, 37068, 37054, 37059, 37060,
            37061, 37063, 37064, 37077, 37079, 37080, 37081,
            37084, 37085, 37087, 37093, 37074, 37110, 37099,
            37103, 37104, 37108, 37118, 37119, 37120, 37124,
            37125, 37126, 37128, 37133, 37136, 37140, 37142,
            37143, 37144, 37146, 37148, 37150, 37152, 37157,
            37154, 37155, 37159, 37161, 37166, 37167, 37169,
            37172, 37174, 37175, 37177, 37178, 37180, 37181,
            37187, 37191, 37192, 37199, 37203, 37207, 37209,
            37210, 37211, 37217, 37220, 37223, 37229, 37236,
            37241, 37242, 37243, 37249, 37251, 37253, 37254,
            37258, 37262, 37265, 37267, 37268, 37269, 37272,
            37278, 37281, 37286, 37288, 37292, 37293, 37294,
            37296, 37297, 37298, 37299, 37302, 37307, 37308,
            37309, 37311, 37314, 37315, 37317, 37331, 37332,
            37335, 37337, 37338, 37342, 37348, 37349, 37353,
            37354, 37356, 37357, 37358, 37359, 37360, 37361,
            37367, 37369, 37371, 37373, 37376, 37377, 37380,
            37381, 37382, 37383, 37385, 37386, 37388, 37392,
            37394, 37395, 37398, 37400, 37404, 37405, 37411,
            37412, 37413, 37414, 37416, 37422, 37423, 37424,
            37427, 37429, 37430, 37432, 37433, 37434, 37436,
            37438, 37440, 37442, 37443, 37446, 37447, 37450,
            37453, 37454, 37455, 37457, 37464, 37465, 37468,
            37469, 37472, 37473, 37477, 37479, 37480, 37481,
            37486, 37487, 37488, 37493, 37494, 37495, 37496,
            37497, 37499, 37500, 37501, 37503, 37512, 37513,
            37514, 37517, 37518, 37522, 37527, 37529, 37535,
            37536, 37540, 37541, 37543, 37544, 37547, 37551,
            37554, 37558, 37560, 37562, 37563, 37564, 37565,
            37567, 37568, 37569, 37570, 37571, 37573, 37574,
            37575, 37576, 37579, 37580, 37581, 37582, 37584,
            37587, 37589, 37591, 37592, 37593, 37596, 37597,
            37599, 37600, 37601, 37603, 37605, 37607, 37608,
            37612, 37614, 37616, 37625, 37627, 37631, 37632,
            37634, 37640, 37645, 37649, 37652, 37653, 37660,
            37661, 37662, 37663, 37665, 37668, 37669, 37671,
            37673, 37674, 37683, 37684, 37686, 37687, 37703,
            37704, 37705, 37712, 37713, 37714, 37717, 37719,
            37720, 37722, 37726, 37732, 37733, 37735, 37737,
            37738, 37741, 37743, 37744, 37745, 37747, 37748,
            37750, 37754, 37757, 37759, 37760, 37761, 37762,
            37768, 37770, 37771, 37773, 37775, 37778, 37781,
            37784, 37787, 37790, 37793, 37795, 37796, 37798,
            37800, 37803, 37812, 37813, 37814, 37818, 37801,
            37825, 37828, 37829, 37830, 37831, 37833, 37834,
            37835, 37836, 37837, 37843, 37849, 37852, 37854,
            37855, 37858, 37862, 37863, 37881, 37879, 37880,
            37882, 37883, 37885, 37889, 37890, 37892, 37896,
            37897, 37901, 37902, 37903, 37909, 37910, 37911,
            37919, 37934, 37935, 37937, 37938, 37939, 37940,
            37947, 37951, 37949, 37955, 37957, 37960, 37962,
            37964, 37973, 37977, 37980, 37983, 37985, 37987,
            37992, 37995, 37997, 37998, 37999, 38001, 38002,
            38020, 38019, 38264, 38265, 38270, 38276, 38280,
            38284, 38285, 38286, 38301, 38302, 38303, 38305,
            38310, 38313, 38315, 38316, 38324, 38326, 38330,
            38333, 38335, 38342, 38344, 38345, 38347, 38352,
            38353, 38354, 38355, 38361, 38362, 38365, 38366,
            38367, 38368, 38372, 38374, 38429, 38430, 38434,
            38436, 38437, 38438, 38444, 38449, 38451, 38455,
            38456, 38457, 38458, 38460, 38461, 38465, 38482,
            38484, 38486, 38487, 38488, 38497, 38510, 38516,
            38523, 38524, 38526, 38527, 38529, 38530, 38531,
            38532, 38537, 38545, 38550, 38554, 38557, 38559,
            38564, 38565, 38566, 38569, 38574, 38575, 38579,
            38586, 38602, 38610, 23986, 38616, 38618, 38621,
            38622, 38623, 38633, 38639, 38641, 38650, 38658,
            38659, 38661, 38665, 38682, 38683, 38685, 38689,
            38690, 38691, 38696, 38705, 38707, 38721, 38723,
            38730, 38734, 38735, 38741, 38743, 38744, 38746,
            38747, 38755, 38759, 38762, 38766, 38771, 38774,
            38775, 38776, 38779, 38781, 38783, 38784, 38793,
            38805, 38806, 38807, 38809, 38810, 38814, 38815,
            38818, 38828, 38830, 38833, 38834, 38837, 38838,
            38840, 38841, 38842, 38844, 38846, 38847, 38849,
            38852, 38853, 38855, 38857, 38858, 38860, 38861,
            38862, 38864, 38865, 38868, 38871, 38872, 38873,
            38877, 38878, 38880, 38875, 38881, 38884, 38895,
            38897, 38900, 38903, 38904, 38906, 38919, 38922,
            38937, 38925, 38926, 38932, 38934, 38940, 38942,
            38944, 38947, 38950, 38955, 38958, 38959, 38960,
            38962, 38963, 38965, 38949, 38974, 38980, 38983,
            38986, 38993, 38994, 38995, 38998, 38999, 39001,
            39002, 39010, 39011, 39013, 39014, 39018, 39020,
            39083, 39085, 39086, 39088, 39092, 39095, 39096,
            39098, 39099, 39103, 39106, 39109, 39112, 39116,
            39137, 39139, 39141, 39142, 39143, 39146, 39155,
            39158, 39170, 39175, 39176, 39185, 39189, 39190,
            39191, 39194, 39195, 39196, 39199, 39202, 39206,
            39207, 39211, 39217, 39218, 39219, 39220, 39221,
            39225, 39226, 39227, 39228, 39232, 39233, 39238,
            39239, 39240, 39245, 39246, 39252, 39256, 39257,
            39259, 39260, 39262, 39263, 39264, 39323, 39325,
            39327, 39334, 39344, 39345, 39346, 39349, 39353,
            39354, 39357, 39359, 39363, 39369, 39379, 39380,
            39385, 39386, 39388, 39390, 39399, 39402, 39403,
            39404, 39408, 39412, 39413, 39417, 39421, 39422,
            39426, 39427, 39428, 39435, 39436, 39440, 39441,
            39446, 39454, 39456, 39458, 39459, 39460, 39463,
            39469, 39470, 39475, 39477, 39478, 39480, 39495,
            39489, 39492, 39498, 39499, 39500, 39502, 39505,
            39508, 39510, 39517, 39594, 39596, 39598, 39599,
            39602, 39604, 39605, 39606, 39609, 39611, 39614,
            39615, 39617, 39619, 39622, 39624, 39630, 39632,
            39634, 39637, 39638, 39639, 39643, 39644, 39648,
            39652, 39653, 39655, 39657, 39660, 39666, 39667,
            39669, 39673, 39674, 39677, 39679, 39680, 39681,
            39682, 39683, 39684, 39685, 39688, 39689, 39691,
            39692, 39693, 39694, 39696, 39698, 39702, 39705,
            39707, 39708, 39712, 39718, 39723, 39725, 39731,
            39732, 39733, 39735, 39737, 39738, 39741, 39752,
            39755, 39756, 39765, 39766, 39767, 39771, 39774,
            39777, 39779, 39781, 39782, 39784, 39786, 39787,
            39788, 39789, 39790, 39795, 39797, 39799, 39800,
            39801, 39807, 39808, 39812, 39813, 39814, 39815,
            39817, 39818, 39819, 39821, 39823, 39824, 39828,
            39834, 39837, 39838, 39846, 39847, 39849, 39852,
            39856, 39857, 39858, 39863, 39864, 39867, 39868,
            39870, 39871, 39873, 39879, 39880, 39886, 39888,
            39895, 39896, 39901, 39903, 39909, 39911, 39914,
            39915, 39919, 39923, 39927, 39928, 39929, 39930,
            39933, 39935, 39936, 39938, 39947, 39951, 39953,
            39958, 39960, 39961, 39962, 39964, 39966, 39970,
            39971, 39974, 39975, 39976, 39977, 39978, 39985,
            39989, 39990, 39991, 39997, 40001, 40003, 40004,
            40005, 40009, 40010, 40014, 40015, 40016, 40019,
            40020, 40022, 40024, 40027, 40029, 40030, 40031,
            40035, 40041, 40042, 40028, 40043, 40040, 40046,
            40048, 40050, 40053, 40055, 40059, 40166, 40178,
            40183, 40185, 40203, 40194, 40209, 40215, 40216,
            40220, 40221, 40222, 40239, 40240, 40242, 40243,
            40244, 40250, 40252, 40261, 40253, 40258, 40259,
            40263, 40266, 40275, 40276, 40287, 40291, 40290,
            40293, 40297, 40298, 40299, 40304, 40310, 40311,
            40315, 40316, 40318, 40323, 40324, 40326, 40330,
            40333, 40334, 40338, 40339, 40341, 40342, 40343,
            40344, 40353, 40362, 40364, 40366, 40369, 40373,
            40377, 40380, 40383, 40387, 40391, 40393, 40394,
            40404, 40405, 40406, 40407, 40410, 40414, 40415,
            40416, 40421, 40423, 40425, 40427, 40430, 40432,
            40435, 40436, 40446, 40458, 40450, 40455, 40462,
            40464, 40465, 40466, 40469, 40470, 40473, 40476,
            40477, 40570, 40571, 40572, 40576, 40578, 40579,
            40580, 40581, 40583, 40590, 40591, 40598, 40600,
            40603, 40606, 40612, 40616, 40620, 40622, 40623,
            40624, 40627, 40628, 40629, 40646, 40648, 40651,
            40661, 40671, 40676, 40679, 40684, 40685, 40686,
            40688, 40689, 40690, 40693, 40696, 40703, 40706,
            40707, 40713, 40719, 40720, 40721, 40722, 40724,
            40726, 40727, 40729, 40730, 40731, 40735, 40738,
            40742, 40746, 40747, 40751, 40753, 40754, 40756,
            40759, 40761, 40762, 40764, 40765, 40767, 40769,
            40771, 40772, 40773, 40774, 40775, 40787, 40789,
            40790, 40791, 40792, 40794, 40797, 40798, 40808,
            40809, 40813, 40814, 40815, 40816, 40817, 40819,
            40821, 40826, 40829, 40847, 40848, 40849, 40850,
            40852, 40854, 40855, 40862, 40865, 40866, 40867,
            40869, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null
        ],
        "ibm866": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
            1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
            1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
            1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
            1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
            1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
            9617, 9618, 9619, 9474, 9508, 9569, 9570, 9558,
            9557, 9571, 9553, 9559, 9565, 9564, 9563, 9488,
            9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567,
            9562, 9556, 9577, 9574, 9568, 9552, 9580, 9575,
            9576, 9572, 9573, 9561, 9560, 9554, 9555, 9579,
            9578, 9496, 9484, 9608, 9604, 9612, 9616, 9600,
            1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
            1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
            1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176,
            8729, 183, 8730, 8470, 164, 9632, 160
        ],
        "iso-8859-2": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 728, 321, 164, 317, 346,
            167, 168, 352, 350, 356, 377, 173, 381, 379, 176,
            261, 731, 322, 180, 318, 347, 711, 184, 353, 351,
            357, 378, 733, 382, 380, 340, 193, 194, 258, 196,
            313, 262, 199, 268, 201, 280, 203, 282, 205, 206,
            270, 272, 323, 327, 211, 212, 336, 214, 215, 344,
            366, 218, 368, 220, 221, 354, 223, 341, 225, 226,
            259, 228, 314, 263, 231, 269, 233, 281, 235, 283,
            237, 238, 271, 273, 324, 328, 243, 244, 337, 246,
            247, 345, 367, 250, 369, 252, 253, 355, 729
        ],
        "iso-8859-3": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 294, 728, 163, 164, null, 292,
            167, 168, 304, 350, 286, 308, 173, null, 379, 176,
            295, 178, 179, 180, 181, 293, 183, 184, 305, 351,
            287, 309, 189, null, 380, 192, 193, 194, null, 196,
            266, 264, 199, 200, 201, 202, 203, 204, 205, 206,
            207, null, 209, 210, 211, 212, 288, 214, 215, 284,
            217, 218, 219, 220, 364, 348, 223, 224, 225, 226,
            null, 228, 267, 265, 231, 232, 233, 234, 235, 236,
            237, 238, 239, null, 241, 242, 243, 244, 289, 246,
            247, 285, 249, 250, 251, 252, 365, 349, 729
        ],
        "iso-8859-4": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 312, 342, 164, 296, 315,
            167, 168, 352, 274, 290, 358, 173, 381, 175, 176,
            261, 731, 343, 180, 297, 316, 711, 184, 353, 275,
            291, 359, 330, 382, 331, 256, 193, 194, 195, 196,
            197, 198, 302, 268, 201, 280, 203, 278, 205, 206,
            298, 272, 325, 332, 310, 212, 213, 214, 215, 216,
            370, 218, 219, 220, 360, 362, 223, 257, 225, 226,
            227, 228, 229, 230, 303, 269, 233, 281, 235, 279,
            237, 238, 299, 273, 326, 333, 311, 244, 245, 246,
            247, 248, 371, 250, 251, 252, 361, 363, 729
        ],
        "iso-8859-5": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 1025, 1026, 1027, 1028, 1029,
            1030, 1031, 1032, 1033, 1034, 1035, 1036, 173, 1038,
            1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
            1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
            1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
            1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
            1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
            1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
            1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
            1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
            1103, 8470, 1105, 1106, 1107, 1108, 1109, 1110,
            1111, 1112, 1113, 1114, 1115, 1116, 167, 1118, 1119
        ],
        "iso-8859-6": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, null, null, null, 164, null,
            null, null, null, null, null, null, 1548, 173, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, 1563, null, null, null,
            1567, null, 1569, 1570, 1571, 1572, 1573, 1574,
            1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
            1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
            1591, 1592, 1593, 1594, null, null, null, null,
            null, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
            1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
            1615, 1616, 1617, 1618, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null
        ],
        "iso-8859-7": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 8216, 8217, 163, 8364, 8367,
            166, 167, 168, 169, 890, 171, 172, 173, null, 8213,
            176, 177, 178, 179, 900, 901, 902, 183, 904, 905,
            906, 187, 908, 189, 910, 911, 912, 913, 914, 915,
            916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
            926, 927, 928, 929, null, 931, 932, 933, 934, 935,
            936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
            946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
            956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
            966, 967, 968, 969, 970, 971, 972, 973, 974, null
        ],
        "iso-8859-8": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, null, 162, 163, 164, 165, 166,
            167, 168, 169, 215, 171, 172, 173, 174, 175, 176,
            177, 178, 179, 180, 181, 182, 183, 184, 185, 247,
            187, 188, 189, 190, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null,
            null, null, null, 8215, 1488, 1489, 1490, 1491,
            1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
            1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
            1508, 1509, 1510, 1511, 1512, 1513, 1514, null,
            null, 8206, 8207, null
        ],
        "iso-8859-10": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 274, 290, 298, 296, 310,
            167, 315, 272, 352, 358, 381, 173, 362, 330, 176,
            261, 275, 291, 299, 297, 311, 183, 316, 273, 353,
            359, 382, 8213, 363, 331, 256, 193, 194, 195, 196,
            197, 198, 302, 268, 201, 280, 203, 278, 205, 206,
            207, 208, 325, 332, 211, 212, 213, 214, 360, 216,
            370, 218, 219, 220, 221, 222, 223, 257, 225, 226,
            227, 228, 229, 230, 303, 269, 233, 281, 235, 279,
            237, 238, 239, 240, 326, 333, 243, 244, 245, 246,
            361, 248, 371, 250, 251, 252, 253, 254, 312
        ],
        "iso-8859-13": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 8221, 162, 163, 164, 8222, 166,
            167, 216, 169, 342, 171, 172, 173, 174, 198, 176,
            177, 178, 179, 8220, 181, 182, 183, 248, 185, 343,
            187, 188, 189, 190, 230, 260, 302, 256, 262, 196,
            197, 280, 274, 268, 201, 377, 278, 290, 310, 298,
            315, 352, 323, 325, 211, 332, 213, 214, 215, 370,
            321, 346, 362, 220, 379, 381, 223, 261, 303, 257,
            263, 228, 229, 281, 275, 269, 233, 378, 279, 291,
            311, 299, 316, 353, 324, 326, 243, 333, 245, 246,
            247, 371, 322, 347, 363, 252, 380, 382, 8217
        ],
        "iso-8859-14": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 7682, 7683, 163, 266, 267, 7690,
            167, 7808, 169, 7810, 7691, 7922, 173, 174, 376,
            7710, 7711, 288, 289, 7744, 7745, 182, 7766, 7809,
            7767, 7811, 7776, 7923, 7812, 7813, 7777, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 372, 209, 210, 211, 212, 213,
            214, 7786, 216, 217, 218, 219, 220, 221, 374, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 373, 241, 242, 243,
            244, 245, 246, 7787, 248, 249, 250, 251, 252, 253,
            375, 255
        ],
        "iso-8859-15": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 161, 162, 163, 8364, 165, 352,
            167, 353, 169, 170, 171, 172, 173, 174, 175, 176,
            177, 178, 179, 381, 181, 182, 183, 382, 185, 186,
            187, 338, 339, 376, 191, 192, 193, 194, 195, 196,
            197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
            207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
            217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
            227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
            237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
            247, 248, 249, 250, 251, 252, 253, 254, 255
        ],
        "iso-8859-16": [128, 129, 130, 131, 132, 133, 134, 135, 136,
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
            147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 260, 261, 321, 8364, 8222, 352,
            167, 353, 169, 536, 171, 377, 173, 378, 379, 176,
            177, 268, 322, 381, 8221, 182, 183, 382, 269, 537,
            187, 338, 339, 376, 380, 192, 193, 194, 258, 196,
            262, 198, 199, 200, 201, 202, 203, 204, 205, 206,
            207, 272, 323, 210, 211, 212, 336, 214, 346, 368,
            217, 218, 219, 220, 280, 538, 223, 224, 225, 226,
            259, 228, 263, 230, 231, 232, 233, 234, 235, 236,
            237, 238, 239, 273, 324, 242, 243, 244, 337, 246,
            347, 369, 249, 250, 251, 252, 281, 539, 255
        ],
        "koi8-r": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508,
            9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616,
            9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776,
            8804, 8805, 160, 8993, 176, 178, 183, 247, 9552,
            9553, 9554, 1105, 9555, 9556, 9557, 9558, 9559,
            9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
            9568, 9569, 1025, 9570, 9571, 9572, 9573, 9574,
            9575, 9576, 9577, 9578, 9579, 9580, 169, 1102, 1072,
            1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103,
            1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099,
            1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040,
            1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048,
            1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071,
            1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067,
            1047, 1064, 1069, 1065, 1063, 1066
        ],
        "koi8-u": [9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508,
            9516, 9524, 9532, 9600, 9604, 9608, 9612, 9616,
            9617, 9618, 9619, 8992, 9632, 8729, 8730, 8776,
            8804, 8805, 160, 8993, 176, 178, 183, 247, 9552,
            9553, 9554, 1105, 1108, 9556, 1110, 1111, 9559,
            9560, 9561, 9562, 9563, 1169, 9565, 9566, 9567,
            9568, 9569, 1025, 1028, 9571, 1030, 1031, 9574,
            9575, 9576, 9577, 9578, 1168, 9580, 169, 1102, 1072,
            1073, 1094, 1076, 1077, 1092, 1075, 1093, 1080,
            1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103,
            1088, 1089, 1090, 1091, 1078, 1074, 1100, 1099,
            1079, 1096, 1101, 1097, 1095, 1098, 1070, 1040,
            1041, 1062, 1044, 1045, 1060, 1043, 1061, 1048,
            1049, 1050, 1051, 1052, 1053, 1054, 1055, 1071,
            1056, 1057, 1058, 1059, 1046, 1042, 1068, 1067,
            1047, 1064, 1069, 1065, 1063, 1066
        ],
        "macintosh": [196, 197, 199, 201, 209, 214, 220, 225, 224,
            226, 228, 227, 229, 231, 233, 232, 234, 235, 237,
            236, 238, 239, 241, 243, 242, 244, 246, 245, 250,
            249, 251, 252, 8224, 176, 162, 163, 167, 8226, 182,
            223, 174, 169, 8482, 180, 168, 8800, 198, 216, 8734,
            177, 8804, 8805, 165, 181, 8706, 8721, 8719, 960,
            8747, 170, 186, 937, 230, 248, 191, 161, 172, 8730,
            402, 8776, 8710, 171, 187, 8230, 160, 192, 195, 213,
            338, 339, 8211, 8212, 8220, 8221, 8216, 8217, 247,
            9674, 255, 376, 8260, 8364, 8249, 8250, 64257,
            64258, 8225, 183, 8218, 8222, 8240, 194, 202, 193,
            203, 200, 205, 206, 207, 204, 211, 212, 63743, 210,
            218, 219, 217, 305, 710, 732, 175, 728, 729, 730,
            184, 733, 731, 711
        ],
        "windows-874": [8364, 129, 130, 131, 132, 8230, 134, 135,
            136, 137, 138, 139, 140, 141, 142, 143, 144, 8216,
            8217, 8220, 8221, 8226, 8211, 8212, 152, 153, 154,
            155, 156, 157, 158, 159, 160, 3585, 3586, 3587,
            3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595,
            3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603,
            3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611,
            3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619,
            3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627,
            3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635,
            3636, 3637, 3638, 3639, 3640, 3641, 3642, null,
            null, null, null, 3647, 3648, 3649, 3650, 3651,
            3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
            3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667,
            3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675,
            null, null, null, null
        ],
        "windows-1250": [8364, 129, 8218, 131, 8222, 8230, 8224,
            8225, 136, 8240, 352, 8249, 346, 356, 381, 377, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            353, 8250, 347, 357, 382, 378, 160, 711, 728, 321,
            164, 260, 166, 167, 168, 169, 350, 171, 172, 173,
            174, 379, 176, 177, 731, 322, 180, 181, 182, 183,
            184, 261, 351, 187, 317, 733, 318, 380, 340, 193,
            194, 258, 196, 313, 262, 199, 268, 201, 280, 203,
            282, 205, 206, 270, 272, 323, 327, 211, 212, 336,
            214, 215, 344, 366, 218, 368, 220, 221, 354, 223,
            341, 225, 226, 259, 228, 314, 263, 231, 269, 233,
            281, 235, 283, 237, 238, 271, 273, 324, 328, 243,
            244, 337, 246, 247, 345, 367, 250, 369, 252, 253,
            355, 729
        ],
        "windows-1251": [1026, 1027, 8218, 1107, 8222, 8230, 8224,
            8225, 8364, 8240, 1033, 8249, 1034, 1036, 1035,
            1039, 1106, 8216, 8217, 8220, 8221, 8226, 8211,
            8212, 152, 8482, 1113, 8250, 1114, 1116, 1115, 1119,
            160, 1038, 1118, 1032, 164, 1168, 166, 167, 1025,
            169, 1028, 171, 172, 173, 174, 1031, 176, 177, 1030,
            1110, 1169, 181, 182, 183, 1105, 8470, 1108, 187,
            1112, 1029, 1109, 1111, 1040, 1041, 1042, 1043,
            1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
            1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
            1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
            1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
            1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
            1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
            1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
            1100, 1101, 1102, 1103
        ],
        "windows-1252": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            353, 8250, 339, 157, 382, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
            214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
            244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
            254, 255
        ],
        "windows-1253": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 136, 8240, 138, 8249, 140, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            154, 8250, 156, 157, 158, 159, 160, 901, 902, 163,
            164, 165, 166, 167, 168, 169, null, 171, 172, 173,
            174, 8213, 176, 177, 178, 179, 900, 181, 182, 183,
            904, 905, 906, 187, 908, 189, 910, 911, 912, 913,
            914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
            924, 925, 926, 927, 928, 929, null, 931, 932, 933,
            934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
            944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
            954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
            964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
            974, null
        ],
        "windows-1254": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 352, 8249, 338, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            353, 8250, 339, 157, 158, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
            204, 205, 206, 207, 286, 209, 210, 211, 212, 213,
            214, 215, 216, 217, 218, 219, 220, 304, 350, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
            234, 235, 236, 237, 238, 239, 287, 241, 242, 243,
            244, 245, 246, 247, 248, 249, 250, 251, 252, 305,
            351, 255
        ],
        "windows-1255": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 138, 8249, 140, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            154, 8250, 156, 157, 158, 159, 160, 161, 162, 163,
            8362, 165, 166, 167, 168, 169, 215, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 247, 187, 188, 189, 190, 191, 1456, 1457,
            1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
            null, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
            1474, 1475, 1520, 1521, 1522, 1523, 1524, null,
            null, null, null, null, null, null, 1488, 1489,
            1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
            1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
            1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
            1514, null, null, 8206, 8207, null
        ],
        "windows-1256": [8364, 1662, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 1657, 8249, 338, 1670, 1688, 1672,
            1711, 8216, 8217, 8220, 8221, 8226, 8211, 8212,
            1705, 8482, 1681, 8250, 339, 8204, 8205, 1722, 160,
            1548, 162, 163, 164, 165, 166, 167, 168, 169, 1726,
            171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
            181, 182, 183, 184, 185, 1563, 187, 188, 189, 190,
            1567, 1729, 1569, 1570, 1571, 1572, 1573, 1574,
            1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
            1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 215,
            1591, 1592, 1593, 1594, 1600, 1601, 1602, 1603, 224,
            1604, 226, 1605, 1606, 1607, 1608, 231, 232, 233,
            234, 235, 1609, 1610, 238, 239, 1611, 1612, 1613,
            1614, 244, 1615, 1616, 247, 1617, 249, 1618, 251,
            252, 8206, 8207, 1746
        ],
        "windows-1257": [8364, 129, 8218, 131, 8222, 8230, 8224,
            8225, 136, 8240, 138, 8249, 140, 168, 711, 184, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 152, 8482,
            154, 8250, 156, 175, 731, 159, 160, null, 162, 163,
            164, null, 166, 167, 216, 169, 342, 171, 172, 173,
            174, 198, 176, 177, 178, 179, 180, 181, 182, 183,
            248, 185, 343, 187, 188, 189, 190, 230, 260, 302,
            256, 262, 196, 197, 280, 274, 268, 201, 377, 278,
            290, 310, 298, 315, 352, 323, 325, 211, 332, 213,
            214, 215, 370, 321, 346, 362, 220, 379, 381, 223,
            261, 303, 257, 263, 228, 229, 281, 275, 269, 233,
            378, 279, 291, 311, 299, 316, 353, 324, 326, 243,
            333, 245, 246, 247, 371, 322, 347, 363, 252, 380,
            382, 729
        ],
        "windows-1258": [8364, 129, 8218, 402, 8222, 8230, 8224,
            8225, 710, 8240, 138, 8249, 338, 141, 142, 143, 144,
            8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482,
            154, 8250, 339, 157, 158, 376, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
            174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
            184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
            194, 258, 196, 197, 198, 199, 200, 201, 202, 203,
            768, 205, 206, 207, 272, 209, 777, 211, 212, 416,
            214, 215, 216, 217, 218, 219, 220, 431, 771, 223,
            224, 225, 226, 259, 228, 229, 230, 231, 232, 233,
            234, 235, 769, 237, 238, 239, 273, 241, 803, 243,
            244, 417, 246, 247, 248, 249, 250, 251, 252, 432,
            8363, 255
        ],
        "x-mac-cyrillic": [1040, 1041, 1042, 1043, 1044, 1045, 1046,
            1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
            1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
            1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
            1071, 8224, 176, 1168, 163, 167, 8226, 182, 1030,
            174, 169, 8482, 1026, 1106, 8800, 1027, 1107, 8734,
            177, 8804, 8805, 1110, 181, 1169, 1032, 1028, 1108,
            1031, 1111, 1033, 1113, 1034, 1114, 1112, 1029, 172,
            8730, 402, 8776, 8710, 171, 187, 8230, 160, 1035,
            1115, 1036, 1116, 1109, 8211, 8212, 8220, 8221,
            8216, 8217, 247, 8222, 1038, 1118, 1039, 1119, 8470,
            1025, 1105, 1103, 1072, 1073, 1074, 1075, 1076,
            1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
            1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
            1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
            1101, 1102, 8364
        ]
    };

    //
    // Utilities
    //

    /**
     * @param {number} a The number to test.
     * @param {number} min The minimum value in the range, inclusive.
     * @param {number} max The maximum value in the range, inclusive.
     * @return {boolean} True if a >= min and a <= max.
     */
    function inRange(a, min, max) {
        return min <= a && a <= max;
    }

    /**
     * @param {number} n The numerator.
     * @param {number} d The denominator.
     * @return {number} The result of the integer division of n by d.
     */
    function div(n, d) {
        return Math.floor(n / d);
    }


    //
    // Implementation of Encoding specification
    // http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html
    //

    //
    // 3. Terminology
    //

    //
    // 4. Encodings
    //

    /** @const */
    var EOF_byte = -1;
    /** @const */
    var EOF_code_point = -1;

    /**
     * @constructor
     * @param {Uint8Array} bytes Array of bytes that provide the stream.
     */
    function ByteInputStream(bytes) {
        /** @type {number} */
        var pos = 0;

        /**
         * @this {ByteInputStream}
         * @return {number} Get the next byte from the stream.
         */
        this.get = function() {
            return (pos >= bytes.length) ? EOF_byte : Number(bytes[
                pos]);
        };

        /** @param {number} n Number (positive or negative) by which to
         *      offset the byte pointer. */
        this.offset = function(n) {
            pos += n;
            if (pos < 0) {
                throw new Error('Seeking past start of the buffer');
            }
            if (pos > bytes.length) {
                throw new Error('Seeking past EOF');
            }
        };

        /**
         * @param {Array.<number>} test Array of bytes to compare against.
         * @return {boolean} True if the start of the stream matches the test
         *     bytes.
         */
        this.match = function(test) {
            if (test.length > pos + bytes.length) {
                return false;
            }
            var i;
            for (i = 0; i < test.length; i += 1) {
                if (Number(bytes[pos + i]) !== test[i]) {
                    return false;
                }
            }
            return true;
        };
    }

    /**
     * @constructor
     * @param {Array.<number>} bytes The array to write bytes into.
     */
    function ByteOutputStream(bytes) {
        /** @type {number} */
        var pos = 0;

        /**
         * @param {...number} var_args The byte or bytes to emit into the stream.
         * @return {number} The last byte emitted.
         */
        this.emit = function(var_args) {
            /** @type {number} */
            var last = EOF_byte;
            var i;
            for (i = 0; i < arguments.length; ++i) {
                last = Number(arguments[i]);
                bytes[pos++] = last;
            }
            return last;
        };
    }

    /**
     * @constructor
     * @param {string} string The source of code units for the stream.
     */
    function CodePointInputStream(string) {
        /**
         * @param {string} string Input string of UTF-16 code units.
         * @return {Array.<number>} Code points.
         */
        function stringToCodePoints(string) {
            /** @type {Array.<number>} */
            var cps = [];
            // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
            var i = 0,
                n = string.length;
            while (i < string.length) {
                var c = string.charCodeAt(i);
                if (!inRange(c, 0xD800, 0xDFFF)) {
                    cps.push(c);
                } else if (inRange(c, 0xDC00, 0xDFFF)) {
                    cps.push(0xFFFD);
                } else { // (inRange(cu, 0xD800, 0xDBFF))
                    if (i === n - 1) {
                        cps.push(0xFFFD);
                    } else {
                        var d = string.charCodeAt(i + 1);
                        if (inRange(d, 0xDC00, 0xDFFF)) {
                            var a = c & 0x3FF;
                            var b = d & 0x3FF;
                            i += 1;
                            cps.push(0x10000 + (a << 10) + b);
                        } else {
                            cps.push(0xFFFD);
                        }
                    }
                }
                i += 1;
            }
            return cps;
        }

        /** @type {number} */
        var pos = 0;
        /** @type {Array.<number>} */
        var cps = stringToCodePoints(string);

        /** @param {number} n The number of bytes (positive or negative)
         *      to advance the code point pointer by.*/
        this.offset = function(n) {
            pos += n;
            if (pos < 0) {
                throw new Error('Seeking past start of the buffer');
            }
            if (pos > cps.length) {
                throw new Error('Seeking past EOF');
            }
        };


        /** @return {number} Get the next code point from the stream. */
        this.get = function() {
            if (pos >= cps.length) {
                return EOF_code_point;
            }
            return cps[pos];
        };
    }

    /**
     * @constructor
     */
    function CodePointOutputStream() {
        /** @type {string} */
        var string = '';

        /** @return {string} The accumulated string. */
        this.string = function() {
            return string;
        };

        /** @param {number} c The code point to encode into the stream. */
        this.emit = function(c) {
            if (c <= 0xFFFF) {
                string += String.fromCharCode(c);
            } else {
                c -= 0x10000;
                string += String.fromCharCode(0xD800 + ((c >> 10) &
                    0x3ff));
                string += String.fromCharCode(0xDC00 + (c & 0x3ff));
            }
        };
    }

    /**
     * @constructor
     * @param {string} message Description of the error.
     */
    function EncodingError(message) {
        this.name = 'EncodingError';
        this.message = message;
        this.code = 0;
    }
    EncodingError.prototype = Error.prototype;

    /**
     * @param {boolean} fatal If true, decoding errors raise an exception.
     * @param {number=} opt_code_point Override the standard fallback code point.
     * @return {number} The code point to insert on a decoding error.
     */
    function decoderError(fatal, opt_code_point) {
        if (fatal) {
            throw new EncodingError('Decoder error');
        }
        return opt_code_point || 0xFFFD;
    }

    /**
     * @param {number} code_point The code point that could not be encoded.
     * @return {number} Always throws, no value is actually returned.
     */
    function encoderError(code_point) {
        throw new EncodingError('The code point ' + code_point +
            ' could not be encoded.');
    }

    /**
     * @param {string} label The encoding label.
     * @return {?{name:string,labels:Array.<string>}}
     */
    function getEncoding(label) {
        label = String(label).trim().toLowerCase();
        if (Object.prototype.hasOwnProperty.call(label_to_encoding,
                label)) {
            return label_to_encoding[label];
        }
        return null;
    }

    /** @type {Array.<{encodings: Array.<{name:string,labels:Array.<string>}>,
     *      heading: string}>} */
    var encodings = [{
        "encodings": [{
            "labels": [
                "unicode-1-1-utf-8",
                "utf-8",
                "utf8"
            ],
            "name": "utf-8"
        }],
        "heading": "The Encoding"
    }, {
        "encodings": [{
            "labels": [
                "866",
                "cp866",
                "csibm866",
                "ibm866"
            ],
            "name": "ibm866"
        }, {
            "labels": [
                "csisolatin2",
                "iso-8859-2",
                "iso-ir-101",
                "iso8859-2",
                "iso88592",
                "iso_8859-2",
                "iso_8859-2:1987",
                "l2",
                "latin2"
            ],
            "name": "iso-8859-2"
        }, {
            "labels": [
                "csisolatin3",
                "iso-8859-3",
                "iso-ir-109",
                "iso8859-3",
                "iso88593",
                "iso_8859-3",
                "iso_8859-3:1988",
                "l3",
                "latin3"
            ],
            "name": "iso-8859-3"
        }, {
            "labels": [
                "csisolatin4",
                "iso-8859-4",
                "iso-ir-110",
                "iso8859-4",
                "iso88594",
                "iso_8859-4",
                "iso_8859-4:1988",
                "l4",
                "latin4"
            ],
            "name": "iso-8859-4"
        }, {
            "labels": [
                "csisolatincyrillic",
                "cyrillic",
                "iso-8859-5",
                "iso-ir-144",
                "iso8859-5",
                "iso88595",
                "iso_8859-5",
                "iso_8859-5:1988"
            ],
            "name": "iso-8859-5"
        }, {
            "labels": [
                "arabic",
                "asmo-708",
                "csiso88596e",
                "csiso88596i",
                "csisolatinarabic",
                "ecma-114",
                "iso-8859-6",
                "iso-8859-6-e",
                "iso-8859-6-i",
                "iso-ir-127",
                "iso8859-6",
                "iso88596",
                "iso_8859-6",
                "iso_8859-6:1987"
            ],
            "name": "iso-8859-6"
        }, {
            "labels": [
                "csisolatingreek",
                "ecma-118",
                "elot_928",
                "greek",
                "greek8",
                "iso-8859-7",
                "iso-ir-126",
                "iso8859-7",
                "iso88597",
                "iso_8859-7",
                "iso_8859-7:1987",
                "sun_eu_greek"
            ],
            "name": "iso-8859-7"
        }, {
            "labels": [
                "csiso88598e",
                "csisolatinhebrew",
                "hebrew",
                "iso-8859-8",
                "iso-8859-8-e",
                "iso-ir-138",
                "iso8859-8",
                "iso88598",
                "iso_8859-8",
                "iso_8859-8:1988",
                "visual"
            ],
            "name": "iso-8859-8"
        }, {
            "labels": [
                "csiso88598i",
                "iso-8859-8-i",
                "logical"
            ],
            "name": "iso-8859-8-i"
        }, {
            "labels": [
                "csisolatin6",
                "iso-8859-10",
                "iso-ir-157",
                "iso8859-10",
                "iso885910",
                "l6",
                "latin6"
            ],
            "name": "iso-8859-10"
        }, {
            "labels": [
                "iso-8859-13",
                "iso8859-13",
                "iso885913"
            ],
            "name": "iso-8859-13"
        }, {
            "labels": [
                "iso-8859-14",
                "iso8859-14",
                "iso885914"
            ],
            "name": "iso-8859-14"
        }, {
            "labels": [
                "csisolatin9",
                "iso-8859-15",
                "iso8859-15",
                "iso885915",
                "iso_8859-15",
                "l9"
            ],
            "name": "iso-8859-15"
        }, {
            "labels": [
                "iso-8859-16"
            ],
            "name": "iso-8859-16"
        }, {
            "labels": [
                "cskoi8r",
                "koi",
                "koi8",
                "koi8-r",
                "koi8_r"
            ],
            "name": "koi8-r"
        }, {
            "labels": [
                "koi8-u"
            ],
            "name": "koi8-u"
        }, {
            "labels": [
                "csmacintosh",
                "mac",
                "macintosh",
                "x-mac-roman"
            ],
            "name": "macintosh"
        }, {
            "labels": [
                "dos-874",
                "iso-8859-11",
                "iso8859-11",
                "iso885911",
                "tis-620",
                "windows-874"
            ],
            "name": "windows-874"
        }, {
            "labels": [
                "cp1250",
                "windows-1250",
                "x-cp1250"
            ],
            "name": "windows-1250"
        }, {
            "labels": [
                "cp1251",
                "windows-1251",
                "x-cp1251"
            ],
            "name": "windows-1251"
        }, {
            "labels": [
                "ansi_x3.4-1968",
                "ascii",
                "cp1252",
                "cp819",
                "csisolatin1",
                "ibm819",
                "iso-8859-1",
                "iso-ir-100",
                "iso8859-1",
                "iso88591",
                "iso_8859-1",
                "iso_8859-1:1987",
                "l1",
                "latin1",
                "us-ascii",
                "windows-1252",
                "x-cp1252"
            ],
            "name": "windows-1252"
        }, {
            "labels": [
                "cp1253",
                "windows-1253",
                "x-cp1253"
            ],
            "name": "windows-1253"
        }, {
            "labels": [
                "cp1254",
                "csisolatin5",
                "iso-8859-9",
                "iso-ir-148",
                "iso8859-9",
                "iso88599",
                "iso_8859-9",
                "iso_8859-9:1989",
                "l5",
                "latin5",
                "windows-1254",
                "x-cp1254"
            ],
            "name": "windows-1254"
        }, {
            "labels": [
                "cp1255",
                "windows-1255",
                "x-cp1255"
            ],
            "name": "windows-1255"
        }, {
            "labels": [
                "cp1256",
                "windows-1256",
                "x-cp1256"
            ],
            "name": "windows-1256"
        }, {
            "labels": [
                "cp1257",
                "windows-1257",
                "x-cp1257"
            ],
            "name": "windows-1257"
        }, {
            "labels": [
                "cp1258",
                "windows-1258",
                "x-cp1258"
            ],
            "name": "windows-1258"
        }, {
            "labels": [
                "x-mac-cyrillic",
                "x-mac-ukrainian"
            ],
            "name": "x-mac-cyrillic"
        }],
        "heading": "Legacy single-byte encodings"
    }, {
        "encodings": [{
            "labels": [
                "chinese",
                "csgb2312",
                "csiso58gb231280",
                "gb18030",
                "gb2312",
                "gb_2312",
                "gb_2312-80",
                "gbk",
                "iso-ir-58",
                "x-gbk"
            ],
            "name": "gb18030"
        }, {
            "labels": [
                "hz-gb-2312"
            ],
            "name": "hz-gb-2312"
        }],
        "heading": "Legacy multi-byte Chinese (simplified) encodings"
    }, {
        "encodings": [{
            "labels": [
                "big5",
                "big5-hkscs",
                "cn-big5",
                "csbig5",
                "x-x-big5"
            ],
            "name": "big5"
        }],
        "heading": "Legacy multi-byte Chinese (traditional) encodings"
    }, {
        "encodings": [{
            "labels": [
                "cseucpkdfmtjapanese",
                "euc-jp",
                "x-euc-jp"
            ],
            "name": "euc-jp"
        }, {
            "labels": [
                "csiso2022jp",
                "iso-2022-jp"
            ],
            "name": "iso-2022-jp"
        }, {
            "labels": [
                "csshiftjis",
                "ms_kanji",
                "shift-jis",
                "shift_jis",
                "sjis",
                "windows-31j",
                "x-sjis"
            ],
            "name": "shift_jis"
        }],
        "heading": "Legacy multi-byte Japanese encodings"
    }, {
        "encodings": [{
            "labels": [
                "cseuckr",
                "csksc56011987",
                "euc-kr",
                "iso-ir-149",
                "korean",
                "ks_c_5601-1987",
                "ks_c_5601-1989",
                "ksc5601",
                "ksc_5601",
                "windows-949"
            ],
            "name": "euc-kr"
        }],
        "heading": "Legacy multi-byte Korean encodings"
    }, {
        "encodings": [{
            "labels": [
                "csiso2022kr",
                "iso-2022-cn",
                "iso-2022-cn-ext",
                "iso-2022-kr"
            ],
            "name": "replacement"
        }, {
            "labels": [
                "utf-16be"
            ],
            "name": "utf-16be"
        }, {
            "labels": [
                "utf-16",
                "utf-16le"
            ],
            "name": "utf-16le"
        }, {
            "labels": [
                "x-user-defined"
            ],
            "name": "x-user-defined"
        }],
        "heading": "Legacy miscellaneous encodings"
    }];

    var name_to_encoding = {};
    var label_to_encoding = {};
    encodings.forEach(function(category) {
        category.encodings.forEach(function(encoding) {
            name_to_encoding[encoding.name] = encoding;
            encoding.labels.forEach(function(label) {
                label_to_encoding[label] =
                    encoding;
            });
        });
    });

    //
    // 5. Indexes
    //

    /**
     * @param {number} pointer The |pointer| to search for.
     * @param {Array.<?number>|undefined} index The |index| to search within.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in |index|.
     */
    function indexCodePointFor(pointer, index) {
        if (!index) return null;
        return index[pointer] || null;
    }

    /**
     * @param {number} code_point The |code point| to search for.
     * @param {Array.<?number>} index The |index| to search within.
     * @return {?number} The first pointer corresponding to |code point| in
     *     |index|, or null if |code point| is not in |index|.
     */
    function indexPointerFor(code_point, index) {
        var pointer = index.indexOf(code_point);
        return pointer === -1 ? null : pointer;
    }

    /**
     * @param {string} name Name of the index.
     * @return {(Array.<number>|Array.<Array.<number>>)}
     *  */
    function index(name) {
        return ENCODING_INDEXES[name];
    }

    /**
     * @param {number} pointer The |pointer| to search for in the gb18030 index.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in the gb18030 index.
     */
    function indexGB18030CodePointFor(pointer) {
        if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575)) {
            return null;
        }
        var /** @type {number} */ offset = 0,
            /** @type {number} */
            code_point_offset = 0,
            /** @type {Array.<Array.<number>>} */
            idx = index('gb18030');
        var i;
        for (i = 0; i < idx.length; ++i) {
            var entry = idx[i];
            if (entry[0] <= pointer) {
                offset = entry[0];
                code_point_offset = entry[1];
            } else {
                break;
            }
        }
        return code_point_offset + pointer - offset;
    }

    /**
     * @param {number} code_point The |code point| to locate in the gb18030 index.
     * @return {number} The first pointer corresponding to |code point| in the
     *     gb18030 index.
     */
    function indexGB18030PointerFor(code_point) {
        var /** @type {number} */ offset = 0,
            /** @type {number} */
            pointer_offset = 0,
            /** @type {Array.<Array.<number>>} */
            idx = index('gb18030');
        var i;
        for (i = 0; i < idx.length; ++i) {
            var entry = idx[i];
            if (entry[1] <= code_point) {
                offset = entry[1];
                pointer_offset = entry[0];
            } else {
                break;
            }
        }
        return pointer_offset + code_point - offset;
    }


    //
    // 7. API
    //

    /** @const */
    var DEFAULT_ENCODING = 'utf-8';

    // 7.1 Interface TextDecoder

    /**
     * @constructor
     * @param {string=} opt_encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {{fatal: boolean}=} options
     */
    function TextDecoder(opt_encoding, options) {
        if (!(this instanceof TextDecoder)) {
            return new TextDecoder(opt_encoding, options);
        }
        opt_encoding = opt_encoding ? String(opt_encoding) :
            DEFAULT_ENCODING;
        options = Object(options);
        /** @private */
        this._encoding = getEncoding(opt_encoding);
        if (this._encoding === null || this._encoding.name ===
            'replacement')
            throw new TypeError('Unknown encoding: ' + opt_encoding);

        /** @private @type {boolean} */
        this._streaming = false;
        /** @private @type {boolean} */
        this._BOMseen = false;
        /** @private */
        this._decoder = null;
        /** @private @type {{fatal: boolean}=} */
        this._options = {
            fatal: Boolean(options.fatal)
        };

        if (Object.defineProperty) {
            Object.defineProperty(
                this, 'encoding', {
                    get: function() {
                        return this._encoding.name;
                    }
                });
        } else {
            this.encoding = this._encoding.name;
        }

        return this;
    }

    // TODO: Issue if input byte stream is offset by decoder
    // TODO: BOM detection will not work if stream header spans multiple calls
    // (last N bytes of previous stream may need to be retained?)
    TextDecoder.prototype = {
        /**
         * @param {ArrayBufferView=} opt_view The buffer of bytes to decode.
         * @param {{stream: boolean}=} options
         */
        decode: function decode(opt_view, options) {
            if (opt_view && !('buffer' in opt_view &&
                    'byteOffset' in opt_view &&
                    'byteLength' in opt_view)) {
                throw new TypeError('Expected ArrayBufferView');
            } else if (!opt_view) {
                opt_view = new Uint8Array(0);
            }
            options = Object(options);

            if (!this._streaming) {
                this._decoder = this._encoding.getDecoder(this._options);
                this._BOMseen = false;
            }
            this._streaming = Boolean(options.stream);

            var bytes = new Uint8Array(opt_view.buffer,
                opt_view.byteOffset,
                opt_view.byteLength);
            var input_stream = new ByteInputStream(bytes);

            var output_stream = new CodePointOutputStream();

            /** @type {number} */
            var code_point;

            while (input_stream.get() !== EOF_byte) {
                code_point = this._decoder.decode(input_stream);
                if (code_point !== null && code_point !==
                    EOF_code_point) {
                    output_stream.emit(code_point);
                }
            }
            if (!this._streaming) {
                do {
                    code_point = this._decoder.decode(
                        input_stream);
                    if (code_point !== null && code_point !==
                        EOF_code_point) {
                        output_stream.emit(code_point);
                    }
                } while (code_point !== EOF_code_point &&
                    input_stream.get() != EOF_byte);
                this._decoder = null;
            }

            var result = output_stream.string();
            if (!this._BOMseen && result.length) {
                this._BOMseen = true;
                if (['utf-8', 'utf-16le', 'utf-16be'].indexOf(
                        this.encoding) !== -1 &&
                    result.charCodeAt(0) === 0xFEFF) {
                    result = result.substring(1);
                }
            }

            return result;
        }
    };

    // 7.2 Interface TextEncoder

    /**
     * @constructor
     * @param {string=} opt_encoding The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {{fatal: boolean}=} options
     */
    function TextEncoder(opt_encoding, options) {
        if (!(this instanceof TextEncoder)) {
            return new TextEncoder(opt_encoding, options);
        }
        opt_encoding = opt_encoding ? String(opt_encoding) :
            DEFAULT_ENCODING;
        options = Object(options);
        /** @private */
        this._encoding = getEncoding(opt_encoding);
        if (this._encoding === null || (this._encoding.name !== 'utf-8' &&
                this._encoding.name !== 'utf-16le' &&
                this._encoding.name !== 'utf-16be'))
            throw new TypeError('Unknown encoding: ' + opt_encoding);
        /** @private @type {boolean} */
        this._streaming = false;
        /** @private */
        this._encoder = null;
        /** @private @type {{fatal: boolean}=} */
        this._options = {
            fatal: Boolean(options.fatal)
        };

        if (Object.defineProperty) {
            Object.defineProperty(
                this, 'encoding', {
                    get: function() {
                        return this._encoding.name;
                    }
                });
        } else {
            this.encoding = this._encoding.name;
        }

        return this;
    }

    TextEncoder.prototype = {
        /**
         * @param {string=} opt_string The string to encode.
         * @param {{stream: boolean}=} options
         */
        encode: function encode(opt_string, options) {
            opt_string = opt_string ? String(opt_string) : '';
            options = Object(options);
            // TODO: any options?
            if (!this._streaming) {
                this._encoder = this._encoding.getEncoder(this._options);
            }
            this._streaming = Boolean(options.stream);

            var bytes = [];
            var output_stream = new ByteOutputStream(bytes);
            var input_stream = new CodePointInputStream(
                opt_string);
            while (input_stream.get() !== EOF_code_point) {
                this._encoder.encode(output_stream,
                    input_stream);
            }
            if (!this._streaming) {
                /** @type {number} */
                var last_byte;
                do {
                    last_byte = this._encoder.encode(
                        output_stream, input_stream);
                } while (last_byte !== EOF_byte);
                this._encoder = null;
            }
            return new Uint8Array(bytes);
        }
    };


    //
    // 8. The encoding
    //

    // 8.1 utf-8

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function UTF8Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ utf8_code_point = 0,
            /** @type {number} */
            utf8_bytes_needed = 0,
            /** @type {number} */
            utf8_bytes_seen = 0,
            /** @type {number} */
            utf8_lower_boundary = 0;

        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                if (utf8_bytes_needed !== 0) {
                    return decoderError(fatal);
                }
                return EOF_code_point;
            }
            byte_pointer.offset(1);

            if (utf8_bytes_needed === 0) {
                if (inRange(bite, 0x00, 0x7F)) {
                    return bite;
                }
                if (inRange(bite, 0xC2, 0xDF)) {
                    utf8_bytes_needed = 1;
                    utf8_lower_boundary = 0x80;
                    utf8_code_point = bite - 0xC0;
                } else if (inRange(bite, 0xE0, 0xEF)) {
                    utf8_bytes_needed = 2;
                    utf8_lower_boundary = 0x800;
                    utf8_code_point = bite - 0xE0;
                } else if (inRange(bite, 0xF0, 0xF4)) {
                    utf8_bytes_needed = 3;
                    utf8_lower_boundary = 0x10000;
                    utf8_code_point = bite - 0xF0;
                } else {
                    return decoderError(fatal);
                }
                utf8_code_point = utf8_code_point * Math.pow(64,
                    utf8_bytes_needed);
                return null;
            }
            if (!inRange(bite, 0x80, 0xBF)) {
                utf8_code_point = 0;
                utf8_bytes_needed = 0;
                utf8_bytes_seen = 0;
                utf8_lower_boundary = 0;
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            utf8_bytes_seen += 1;
            utf8_code_point = utf8_code_point + (bite - 0x80) *
                Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
            if (utf8_bytes_seen !== utf8_bytes_needed) {
                return null;
            }
            var code_point = utf8_code_point;
            var lower_boundary = utf8_lower_boundary;
            utf8_code_point = 0;
            utf8_bytes_needed = 0;
            utf8_bytes_seen = 0;
            utf8_lower_boundary = 0;
            if (inRange(code_point, lower_boundary, 0x10FFFF) &&
                !inRange(code_point, 0xD800, 0xDFFF)) {
                return code_point;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function UTF8Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            /** @type {number} */
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0xD800, 0xDFFF)) {
                return encoderError(code_point);
            }
            if (inRange(code_point, 0x0000, 0x007f)) {
                return output_byte_stream.emit(code_point);
            }
            var count, offset;
            if (inRange(code_point, 0x0080, 0x07FF)) {
                count = 1;
                offset = 0xC0;
            } else if (inRange(code_point, 0x0800, 0xFFFF)) {
                count = 2;
                offset = 0xE0;
            } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
                count = 3;
                offset = 0xF0;
            }
            var result = output_byte_stream.emit(
                div(code_point, Math.pow(64, count)) + offset);
            while (count > 0) {
                var temp = div(code_point, Math.pow(64, count - 1));
                result = output_byte_stream.emit(0x80 + (temp % 64));
                count -= 1;
            }
            return result;
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-8'].getEncoder = function(options) {
        return new UTF8Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-8'].getDecoder = function(options) {
        return new UTF8Decoder(options);
    };

    //
    // 9. Legacy single-byte encodings
    //

    /**
     * @constructor
     * @param {Array.<number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteDecoder(index, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                return EOF_code_point;
            }
            byte_pointer.offset(1);
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            var code_point = index[bite - 0x80];
            if (code_point === null) {
                return decoderError(fatal);
            }
            return code_point;
        };
    }

    /**
     * @constructor
     * @param {Array.<?number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteEncoder(index, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index);
            if (pointer === null) {
                encoderError(code_point);
            }
            return output_byte_stream.emit(pointer + 0x80);
        };
    }

    (function() {
        encodings.forEach(function(category) {
            if (category.heading !==
                'Legacy single-byte encodings')
                return;
            category.encodings.forEach(function(encoding) {
                var idx = index(encoding.name);
                /** @param {{fatal: boolean}} options */
                encoding.getDecoder = function(
                    options) {
                    return new SingleByteDecoder(
                        idx, options);
                };
                /** @param {{fatal: boolean}} options */
                encoding.getEncoder = function(
                    options) {
                    return new SingleByteEncoder(
                        idx, options);
                };
            });
        });
    }());

    //
    // 10. Legacy multi-byte Chinese (simplified) encodings
    //

    // 9.1 gb18030

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function GB18030Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ gb18030_first = 0x00,
            /** @type {number} */
            gb18030_second = 0x00,
            /** @type {number} */
            gb18030_third = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && gb18030_first === 0x00 &&
                gb18030_second === 0x00 && gb18030_third === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte &&
                (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||
                    gb18030_third !== 0x00)) {
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                gb18030_third = 0x00;
                decoderError(fatal);
            }
            byte_pointer.offset(1);
            var code_point;
            if (gb18030_third !== 0x00) {
                code_point = null;
                if (inRange(bite, 0x30, 0x39)) {
                    code_point = indexGB18030CodePointFor(
                        (((gb18030_first - 0x81) * 10 + (
                                gb18030_second - 0x30)) * 126 +
                            (gb18030_third - 0x81)) * 10 + bite -
                        0x30);
                }
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                gb18030_third = 0x00;
                if (code_point === null) {
                    byte_pointer.offset(-3);
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (gb18030_second !== 0x00) {
                if (inRange(bite, 0x81, 0xFE)) {
                    gb18030_third = bite;
                    return null;
                }
                byte_pointer.offset(-2);
                gb18030_first = 0x00;
                gb18030_second = 0x00;
                return decoderError(fatal);
            }
            if (gb18030_first !== 0x00) {
                if (inRange(bite, 0x30, 0x39)) {
                    gb18030_second = bite;
                    return null;
                }
                var lead = gb18030_first;
                var pointer = null;
                gb18030_first = 0x00;
                var offset = bite < 0x7F ? 0x40 : 0x41;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80,
                        0xFE)) {
                    pointer = (lead - 0x81) * 190 + (bite - offset);
                }
                code_point = pointer === null ? null :
                    indexCodePointFor(pointer, index('gb18030'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (bite === 0x80) {
                return 0x20AC;
            }
            if (inRange(bite, 0x81, 0xFE)) {
                gb18030_first = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function GB18030Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index(
                'gb18030'));
            if (pointer !== null) {
                var lead = div(pointer, 190) + 0x81;
                var trail = pointer % 190;
                var offset = trail < 0x3F ? 0x40 : 0x41;
                return output_byte_stream.emit(lead, trail + offset);
            }
            pointer = indexGB18030PointerFor(code_point);
            var byte1 = div(div(div(pointer, 10), 126), 10);
            pointer = pointer - byte1 * 10 * 126 * 10;
            var byte2 = div(div(pointer, 10), 126);
            pointer = pointer - byte2 * 10 * 126;
            var byte3 = div(pointer, 10);
            var byte4 = pointer - byte3 * 10;
            return output_byte_stream.emit(byte1 + 0x81,
                byte2 + 0x30,
                byte3 + 0x81,
                byte4 + 0x30);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['gb18030'].getEncoder = function(options) {
        return new GB18030Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['gb18030'].getDecoder = function(options) {
        return new GB18030Decoder(options);
    };

    // 10.2 hz-gb-2312

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function HZGB2312Decoder(options) {
        var fatal = options.fatal;
        var /** @type {boolean} */ hzgb2312 = false,
            /** @type {number} */
            hzgb2312_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && hzgb2312_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && hzgb2312_lead !== 0x00) {
                hzgb2312_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (hzgb2312_lead === 0x7E) {
                hzgb2312_lead = 0x00;
                if (bite === 0x7B) {
                    hzgb2312 = true;
                    return null;
                }
                if (bite === 0x7D) {
                    hzgb2312 = false;
                    return null;
                }
                if (bite === 0x7E) {
                    return 0x007E;
                }
                if (bite === 0x0A) {
                    return null;
                }
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            if (hzgb2312_lead !== 0x00) {
                var lead = hzgb2312_lead;
                hzgb2312_lead = 0x00;
                var code_point = null;
                if (inRange(bite, 0x21, 0x7E)) {
                    code_point = indexCodePointFor((lead - 1) * 190 +
                        (bite + 0x3F), index('gb18030'));
                }
                if (bite === 0x0A) {
                    hzgb2312 = false;
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (bite === 0x7E) {
                hzgb2312_lead = 0x7E;
                return null;
            }
            if (hzgb2312) {
                if (inRange(bite, 0x20, 0x7F)) {
                    hzgb2312_lead = bite;
                    return null;
                }
                if (bite === 0x0A) {
                    hzgb2312 = false;
                }
                return decoderError(fatal);
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function HZGB2312Encoder(options) {
        var fatal = options.fatal;
        /** @type {boolean} */
        var hzgb2312 = false;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F) && hzgb2312) {
                code_point_pointer.offset(-1);
                hzgb2312 = false;
                return output_byte_stream.emit(0x7E, 0x7D);
            }
            if (code_point === 0x007E) {
                return output_byte_stream.emit(0x7E, 0x7E);
            }
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (!hzgb2312) {
                code_point_pointer.offset(-1);
                hzgb2312 = true;
                return output_byte_stream.emit(0x7E, 0x7B);
            }
            var pointer = indexPointerFor(code_point, index(
                'gb18030'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 190) + 1;
            var trail = pointer % 190 - 0x3F;
            if (!inRange(lead, 0x21, 0x7E) || !inRange(trail, 0x21,
                    0x7E)) {
                return encoderError(code_point);
            }
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['hz-gb-2312'].getEncoder = function(options) {
        return new HZGB2312Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['hz-gb-2312'].getDecoder = function(options) {
        return new HZGB2312Decoder(options);
    };

    //
    // 11. Legacy multi-byte Chinese (traditional) encodings
    //

    // 11.1 big5

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function Big5Decoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ big5_lead = 0x00,
            /** @type {?number} */
            big5_pending = null;

        /**
         * @param {ByteInputStream} byte_pointer The byte steram to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            // NOTE: Hack to support emitting two code points
            if (big5_pending !== null) {
                var pending = big5_pending;
                big5_pending = null;
                return pending;
            }
            var bite = byte_pointer.get();
            if (bite === EOF_byte && big5_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && big5_lead !== 0x00) {
                big5_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (big5_lead !== 0x00) {
                var lead = big5_lead;
                var pointer = null;
                big5_lead = 0x00;
                var offset = bite < 0x7F ? 0x40 : 0x62;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1,
                        0xFE)) {
                    pointer = (lead - 0x81) * 157 + (bite - offset);
                }
                if (pointer === 1133) {
                    big5_pending = 0x0304;
                    return 0x00CA;
                }
                if (pointer === 1135) {
                    big5_pending = 0x030C;
                    return 0x00CA;
                }
                if (pointer === 1164) {
                    big5_pending = 0x0304;
                    return 0x00EA;
                }
                if (pointer === 1166) {
                    big5_pending = 0x030C;
                    return 0x00EA;
                }
                var code_point = (pointer === null) ? null :
                    indexCodePointFor(pointer, index('big5'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (inRange(bite, 0x81, 0xFE)) {
                big5_lead = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function Big5Encoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index('big5'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 157) + 0x81;
            //if (lead < 0xA1) {
            //  return encoderError(code_point);
            //}
            var trail = pointer % 157;
            var offset = trail < 0x3F ? 0x40 : 0x62;
            return output_byte_stream.emit(lead, trail + offset);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['big5'].getEncoder = function(options) {
        return new Big5Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['big5'].getDecoder = function(options) {
        return new Big5Decoder(options);
    };


    //
    // 12. Legacy multi-byte Japanese encodings
    //

    // 12.1 euc.jp

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCJPDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ eucjp_first = 0x00,
            /** @type {number} */
            eucjp_second = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte) {
                if (eucjp_first === 0x00 && eucjp_second === 0x00) {
                    return EOF_code_point;
                }
                eucjp_first = 0x00;
                eucjp_second = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);

            var lead, code_point;
            if (eucjp_second !== 0x00) {
                lead = eucjp_second;
                eucjp_second = 0x00;
                code_point = null;
                if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1,
                        0xFE)) {
                    code_point = indexCodePointFor((lead - 0xA1) *
                        94 + bite - 0xA1,
                        index('jis0212'));
                }
                if (!inRange(bite, 0xA1, 0xFE)) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (eucjp_first === 0x8E && inRange(bite, 0xA1, 0xDF)) {
                eucjp_first = 0x00;
                return 0xFF61 + bite - 0xA1;
            }
            if (eucjp_first === 0x8F && inRange(bite, 0xA1, 0xFE)) {
                eucjp_first = 0x00;
                eucjp_second = bite;
                return null;
            }
            if (eucjp_first !== 0x00) {
                lead = eucjp_first;
                eucjp_first = 0x00;
                code_point = null;
                if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1,
                        0xFE)) {
                    code_point = indexCodePointFor((lead - 0xA1) *
                        94 + bite - 0xA1,
                        index('jis0208'));
                }
                if (!inRange(bite, 0xA1, 0xFE)) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }
            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }
            if (bite === 0x8E || bite === 0x8F || (inRange(bite,
                    0xA1, 0xFE))) {
                eucjp_first = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCJPEncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(0x8E, code_point -
                    0xFF61 + 0xA1);
            }

            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 94) + 0xA1;
            var trail = pointer % 94 + 0xA1;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-jp'].getEncoder = function(options) {
        return new EUCJPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-jp'].getDecoder = function(options) {
        return new EUCJPDecoder(options);
    };

    // 12.2 iso-2022-jp

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPDecoder(options) {
        var fatal = options.fatal;
        /** @enum */
        var state = {
            ASCII: 0,
            escape_start: 1,
            escape_middle: 2,
            escape_final: 3,
            lead: 4,
            trail: 5,
            Katakana: 6
        };
        var /** @type {number} */ iso2022jp_state = state.ASCII,
            /** @type {boolean} */
            iso2022jp_jis0212 = false,
            /** @type {number} */
            iso2022jp_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite !== EOF_byte) {
                byte_pointer.offset(1);
            }
            switch (iso2022jp_state) {
                default:
                    case state.ASCII:
                    if (bite === 0x1B) {
                        iso2022jp_state = state.escape_start;
                        return null;
                    }
                if (inRange(bite, 0x00, 0x7F)) {
                    return bite;
                }
                if (bite === EOF_byte) {
                    return EOF_code_point;
                }
                return decoderError(fatal);

                case state.escape_start:
                        if (bite === 0x24 || bite === 0x28) {
                            iso2022jp_lead = bite;
                            iso2022jp_state = state.escape_middle;
                            return null;
                        }
                    if (bite !== EOF_byte) {
                        byte_pointer.offset(-1);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.escape_middle:
                        var lead = iso2022jp_lead;
                    iso2022jp_lead = 0x00;
                    if (lead === 0x24 && (bite === 0x40 || bite ===
                            0x42)) {
                        iso2022jp_jis0212 = false;
                        iso2022jp_state = state.lead;
                        return null;
                    }
                    if (lead === 0x24 && bite === 0x28) {
                        iso2022jp_state = state.escape_final;
                        return null;
                    }
                    if (lead === 0x28 && (bite === 0x42 || bite ===
                            0x4A)) {
                        iso2022jp_state = state.ASCII;
                        return null;
                    }
                    if (lead === 0x28 && bite === 0x49) {
                        iso2022jp_state = state.Katakana;
                        return null;
                    }
                    if (bite === EOF_byte) {
                        byte_pointer.offset(-1);
                    } else {
                        byte_pointer.offset(-2);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.escape_final:
                        if (bite === 0x44) {
                            iso2022jp_jis0212 = true;
                            iso2022jp_state = state.lead;
                            return null;
                        }
                    if (bite === EOF_byte) {
                        byte_pointer.offset(-2);
                    } else {
                        byte_pointer.offset(-3);
                    }
                    iso2022jp_state = state.ASCII;
                    return decoderError(fatal);

                case state.lead:
                        if (bite === 0x0A) {
                            iso2022jp_state = state.ASCII;
                            return decoderError(fatal, 0x000A);
                        }
                    if (bite === 0x1B) {
                        iso2022jp_state = state.escape_start;
                        return null;
                    }
                    if (bite === EOF_byte) {
                        return EOF_code_point;
                    }
                    iso2022jp_lead = bite;
                    iso2022jp_state = state.trail;
                    return null;

                case state.trail:
                        iso2022jp_state = state.lead;
                    if (bite === EOF_byte) {
                        return decoderError(fatal);
                    }
                    var code_point = null;
                    var pointer = (iso2022jp_lead - 0x21) * 94 +
                        bite - 0x21;
                    if (inRange(iso2022jp_lead, 0x21, 0x7E) &&
                        inRange(bite, 0x21, 0x7E)) {
                        code_point = (iso2022jp_jis0212 === false) ?
                            indexCodePointFor(pointer, index(
                                'jis0208')) :
                            indexCodePointFor(pointer, index(
                                'jis0212'));
                    }
                    if (code_point === null) {
                        return decoderError(fatal);
                    }
                    return code_point;

                case state.Katakana:
                        if (bite === 0x1B) {
                            iso2022jp_state = state.escape_start;
                            return null;
                        }
                    if (inRange(bite, 0x21, 0x5F)) {
                        return 0xFF61 + bite - 0x21;
                    }
                    if (bite === EOF_byte) {
                        return EOF_code_point;
                    }
                    return decoderError(fatal);
            }
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPEncoder(options) {
        var fatal = options.fatal;
        /** @enum */
        var state = {
            ASCII: 0,
            lead: 1,
            Katakana: 2
        };
        var /** @type {number} */ iso2022jp_state = state.ASCII;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if ((inRange(code_point, 0x0000, 0x007F) ||
                    code_point === 0x00A5 || code_point === 0x203E) &&
                iso2022jp_state !== state.ASCII) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.ASCII;
                return output_byte_stream.emit(0x1B, 0x28, 0x42);
            }
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F) &&
                iso2022jp_state !== state.Katakana) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.Katakana;
                return output_byte_stream.emit(0x1B, 0x28, 0x49);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(code_point - 0xFF61 -
                    0x21);
            }
            if (iso2022jp_state !== state.lead) {
                code_point_pointer.offset(-1);
                iso2022jp_state = state.lead;
                return output_byte_stream.emit(0x1B, 0x24, 0x42);
            }
            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 94) + 0x21;
            var trail = pointer % 94 + 0x21;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['iso-2022-jp'].getEncoder = function(options) {
        return new ISO2022JPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['iso-2022-jp'].getDecoder = function(options) {
        return new ISO2022JPDecoder(options);
    };

    // 12.3 shift_jis

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ShiftJISDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ shiftjis_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && shiftjis_lead === 0x00) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && shiftjis_lead !== 0x00) {
                shiftjis_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (shiftjis_lead !== 0x00) {
                var lead = shiftjis_lead;
                shiftjis_lead = 0x00;
                if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80,
                        0xFC)) {
                    var offset = (bite < 0x7F) ? 0x40 : 0x41;
                    var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;
                    var code_point = indexCodePointFor((lead -
                            lead_offset) * 188 +
                        bite - offset, index('jis0208'));
                    if (code_point === null) {
                        return decoderError(fatal);
                    }
                    return code_point;
                }
                byte_pointer.offset(-1);
                return decoderError(fatal);
            }
            if (inRange(bite, 0x00, 0x80)) {
                return bite;
            }
            if (inRange(bite, 0xA1, 0xDF)) {
                return 0xFF61 + bite - 0xA1;
            }
            if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0,
                    0xFC)) {
                shiftjis_lead = bite;
                return null;
            }
            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function ShiftJISEncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x0080)) {
                return output_byte_stream.emit(code_point);
            }
            if (code_point === 0x00A5) {
                return output_byte_stream.emit(0x5C);
            }
            if (code_point === 0x203E) {
                return output_byte_stream.emit(0x7E);
            }
            if (inRange(code_point, 0xFF61, 0xFF9F)) {
                return output_byte_stream.emit(code_point - 0xFF61 +
                    0xA1);
            }
            var pointer = indexPointerFor(code_point, index(
                'jis0208'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead = div(pointer, 188);
            var lead_offset = lead < 0x1F ? 0x81 : 0xC1;
            var trail = pointer % 188;
            var offset = trail < 0x3F ? 0x40 : 0x41;
            return output_byte_stream.emit(lead + lead_offset,
                trail + offset);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['shift_jis'].getEncoder = function(options) {
        return new ShiftJISEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['shift_jis'].getDecoder = function(options) {
        return new ShiftJISDecoder(options);
    };

    //
    // 13. Legacy multi-byte Korean encodings
    //

    // 13.1 euc-kr

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCKRDecoder(options) {
        var fatal = options.fatal;
        var /** @type {number} */ euckr_lead = 0x00;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && euckr_lead === 0) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && euckr_lead !== 0) {
                euckr_lead = 0x00;
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (euckr_lead !== 0x00) {
                var lead = euckr_lead;
                var pointer = null;
                euckr_lead = 0x00;

                if (inRange(lead, 0x81, 0xC6)) {
                    var temp = (26 + 26 + 126) * (lead - 0x81);
                    if (inRange(bite, 0x41, 0x5A)) {
                        pointer = temp + bite - 0x41;
                    } else if (inRange(bite, 0x61, 0x7A)) {
                        pointer = temp + 26 + bite - 0x61;
                    } else if (inRange(bite, 0x81, 0xFE)) {
                        pointer = temp + 26 + 26 + bite - 0x81;
                    }
                }

                if (inRange(lead, 0xC7, 0xFD) && inRange(bite, 0xA1,
                        0xFE)) {
                    pointer = (26 + 26 + 126) * (0xC7 - 0x81) + (
                            lead - 0xC7) * 94 +
                        (bite - 0xA1);
                }

                var code_point = (pointer === null) ? null :
                    indexCodePointFor(pointer, index('euc-kr'));
                if (pointer === null) {
                    byte_pointer.offset(-1);
                }
                if (code_point === null) {
                    return decoderError(fatal);
                }
                return code_point;
            }

            if (inRange(bite, 0x00, 0x7F)) {
                return bite;
            }

            if (inRange(bite, 0x81, 0xFD)) {
                euckr_lead = bite;
                return null;
            }

            return decoderError(fatal);
        };
    }

    /**
     * @constructor
     * @param {{fatal: boolean}} options
     */
    function EUCKREncoder(options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0x0000, 0x007F)) {
                return output_byte_stream.emit(code_point);
            }
            var pointer = indexPointerFor(code_point, index(
                'euc-kr'));
            if (pointer === null) {
                return encoderError(code_point);
            }
            var lead, trail;
            if (pointer < ((26 + 26 + 126) * (0xC7 - 0x81))) {
                lead = div(pointer, (26 + 26 + 126)) + 0x81;
                trail = pointer % (26 + 26 + 126);
                var offset = trail < 26 ? 0x41 : trail < 26 + 26 ?
                    0x47 : 0x4D;
                return output_byte_stream.emit(lead, trail + offset);
            }
            pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);
            lead = div(pointer, 94) + 0xC7;
            trail = pointer % 94 + 0xA1;
            return output_byte_stream.emit(lead, trail);
        };
    }

    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-kr'].getEncoder = function(options) {
        return new EUCKREncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['euc-kr'].getDecoder = function(options) {
        return new EUCKRDecoder(options);
    };


    //
    // 14. Legacy miscellaneous encodings
    //

    // 14.1 replacement

    // Not needed - API throws TypeError

    // 14.2 utf-16

    /**
     * @constructor
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Decoder(utf16_be, options) {
        var fatal = options.fatal;
        var /** @type {?number} */ utf16_lead_byte = null,
            /** @type {?number} */
            utf16_lead_surrogate = null;
        /**
         * @param {ByteInputStream} byte_pointer The byte stream to decode.
         * @return {?number} The next code point decoded, or null if not enough
         *     data exists in the input stream to decode a complete code point.
         */
        this.decode = function(byte_pointer) {
            var bite = byte_pointer.get();
            if (bite === EOF_byte && utf16_lead_byte === null &&
                utf16_lead_surrogate === null) {
                return EOF_code_point;
            }
            if (bite === EOF_byte && (utf16_lead_byte !== null ||
                    utf16_lead_surrogate !== null)) {
                return decoderError(fatal);
            }
            byte_pointer.offset(1);
            if (utf16_lead_byte === null) {
                utf16_lead_byte = bite;
                return null;
            }
            var code_point;
            if (utf16_be) {
                code_point = (utf16_lead_byte << 8) + bite;
            } else {
                code_point = (bite << 8) + utf16_lead_byte;
            }
            utf16_lead_byte = null;
            if (utf16_lead_surrogate !== null) {
                var lead_surrogate = utf16_lead_surrogate;
                utf16_lead_surrogate = null;
                if (inRange(code_point, 0xDC00, 0xDFFF)) {
                    return 0x10000 + (lead_surrogate - 0xD800) *
                        0x400 +
                        (code_point - 0xDC00);
                }
                byte_pointer.offset(-2);
                return decoderError(fatal);
            }
            if (inRange(code_point, 0xD800, 0xDBFF)) {
                utf16_lead_surrogate = code_point;
                return null;
            }
            if (inRange(code_point, 0xDC00, 0xDFFF)) {
                return decoderError(fatal);
            }
            return code_point;
        };
    }

    /**
     * @constructor
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Encoder(utf16_be, options) {
        var fatal = options.fatal;
        /**
         * @param {ByteOutputStream} output_byte_stream Output byte stream.
         * @param {CodePointInputStream} code_point_pointer Input stream.
         * @return {number} The last byte emitted.
         */
        this.encode = function(output_byte_stream, code_point_pointer) {
            /**
             * @param {number} code_unit
             * @return {number} last byte emitted
             */
            function convert_to_bytes(code_unit) {
                var byte1 = code_unit >> 8;
                var byte2 = code_unit & 0x00FF;
                if (utf16_be) {
                    return output_byte_stream.emit(byte1, byte2);
                }
                return output_byte_stream.emit(byte2, byte1);
            }
            var code_point = code_point_pointer.get();
            if (code_point === EOF_code_point) {
                return EOF_byte;
            }
            code_point_pointer.offset(1);
            if (inRange(code_point, 0xD800, 0xDFFF)) {
                encoderError(code_point);
            }
            if (code_point <= 0xFFFF) {
                return convert_to_bytes(code_point);
            }
            var lead = div((code_point - 0x10000), 0x400) + 0xD800;
            var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;
            convert_to_bytes(lead);
            return convert_to_bytes(trail);
        };
    }

    // 14.3 utf-16be
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16be'].getEncoder = function(options) {
        return new UTF16Encoder(true, options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16be'].getDecoder = function(options) {
        return new UTF16Decoder(true, options);
    };

    // 14.4 utf-16le
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16le'].getEncoder = function(options) {
        return new UTF16Encoder(false, options);
    };
    /** @param {{fatal: boolean}} options */
    name_to_encoding['utf-16le'].getDecoder = function(options) {
        return new UTF16Decoder(false, options);
    };

    // 14.5 x-user-defined
    // TODO: Implement this encoding.

    // NOTE: currently unused
    /**
     * @param {string} label The encoding label.
     * @param {ByteInputStream} input_stream The byte stream to test.
     */
    function detectEncoding(label, input_stream) {
        if (input_stream.match([0xFF, 0xFE])) {
            input_stream.offset(2);
            return 'utf-16le';
        }
        if (input_stream.match([0xFE, 0xFF])) {
            input_stream.offset(2);
            return 'utf-16be';
        }
        if (input_stream.match([0xEF, 0xBB, 0xBF])) {
            input_stream.offset(3);
            return 'utf-8';
        }
        return label;
    }

    return {
        TextEncoder: TextEncoder,
        TextDecoder: TextDecoder
    };

}));

// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';
    if (false) {
        define(factory);
    } else if (false) {
        module.exports = factory();
    } else {
        root['emailjs-mime-types'] = factory();
    }
}(this, function() {
    'use strict';

    /**
     * Returns file extension for a content type string. If no suitable extensions
     * are found, 'bin' is used as the default extension
     *
     * @param {String} mimeType Content type to be checked for
     * @return {String} File extension
     */
    function detectExtension(mimeType) {
        mimeType = (mimeType || '').toString().toLowerCase().replace(/\s/g, '');
        if (!(mimeType in mimetypesList)) {
            return 'bin';
        }

        if (typeof mimetypesList[mimeType] === 'string') {
            return mimetypesList[mimeType];
        }

        var mimeParts = mimeType.split('/');

        // search for name match
        for (var i = 0, len = mimetypesList[mimeType].length; i < len; i++) {
            if (mimeParts[1] === mimetypesList[mimeType][i]) {
                return mimetypesList[mimeType][i];
            }
        }

        // use the first one
        return mimetypesList[mimeType][0];
    }

    /**
     * Returns content type for a file extension. If no suitable content types
     * are found, 'application/octet-stream' is used as the default content type
     *
     * @param {String} extension Extension to be checked for
     * @return {String} File extension
     */
    function detectMimeType(extension) {
        extension = (extension || '').toString().toLowerCase().replace(/\s/g, '').replace(/^\./g, '');

        if (!(extension in mimetypesExtensions)) {
            return 'application/octet-stream';
        }

        if (typeof mimetypesExtensions[extension] === 'string') {
            return mimetypesExtensions[extension];
        }

        var mimeParts;

        // search for name match
        for (var i = 0, len = mimetypesExtensions[extension].length; i < len; i++) {
            mimeParts = mimetypesExtensions[extension][i].split('/');
            if (mimeParts[1] === extension) {
                return mimetypesExtensions[extension][i];
            }
        }

        // use the first one
        return mimetypesExtensions[extension][0];
    }

    var mimetypesList = {
        'application/acad': 'dwg',
        'application/andrew-inset': '',
        'application/applixware': 'aw',
        'application/arj': 'arj',
        'application/atom+xml': 'xml',
        'application/atomcat+xml': 'atomcat',
        'application/atomsvc+xml': 'atomsvc',
        'application/base64': ['mm', 'mme'],
        'application/binhex': 'hqx',
        'application/binhex4': 'hqx',
        'application/book': ['boo', 'book'],
        'application/ccxml+xml,': 'ccxml',
        'application/cdf': 'cdf',
        'application/cdmi-capability': 'cdmia',
        'application/cdmi-container': 'cdmic',
        'application/cdmi-domain': 'cdmid',
        'application/cdmi-object': 'cdmio',
        'application/cdmi-queue': 'cdmiq',
        'application/clariscad': 'ccad',
        'application/commonground': 'dp',
        'application/cu-seeme': 'cu',
        'application/davmount+xml': 'davmount',
        'application/drafting': 'drw',
        'application/dsptype': 'tsp',
        'application/dssc+der': 'dssc',
        'application/dssc+xml': 'xdssc',
        'application/dxf': 'dxf',
        'application/ecmascript': ['js', 'es'],
        'application/emma+xml': 'emma',
        'application/envoy': 'evy',
        'application/epub+zip': 'epub',
        'application/excel': ['xl', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xls', 'xlt', 'xlv', 'xlw'],
        'application/exi': 'exi',
        'application/font-tdpfr': 'pfr',
        'application/fractals': 'fif',
        'application/freeloader': 'frl',
        'application/futuresplash': 'spl',
        'application/gnutar': 'tgz',
        'application/groupwise': 'vew',
        'application/hlp': 'hlp',
        'application/hta': 'hta',
        'application/hyperstudio': 'stk',
        'application/i-deas': 'unv',
        'application/iges': ['iges', 'igs'],
        'application/inf': 'inf',
        'application/internet-property-stream': 'acx',
        'application/ipfix': 'ipfix',
        'application/java': 'class',
        'application/java-archive': 'jar',
        'application/java-byte-code': 'class',
        'application/java-serialized-object': 'ser',
        'application/java-vm': 'class',
        'application/javascript': 'js',
        'application/json': 'json',
        'application/lha': 'lha',
        'application/lzx': 'lzx',
        'application/mac-binary': 'bin',
        'application/mac-binhex': 'hqx',
        'application/mac-binhex40': 'hqx',
        'application/mac-compactpro': 'cpt',
        'application/macbinary': 'bin',
        'application/mads+xml': 'mads',
        'application/marc': 'mrc',
        'application/marcxml+xml': 'mrcx',
        'application/mathematica': 'ma',
        'application/mathml+xml': 'mathml',
        'application/mbedlet': 'mbd',
        'application/mbox': 'mbox',
        'application/mcad': 'mcd',
        'application/mediaservercontrol+xml': 'mscml',
        'application/metalink4+xml': 'meta4',
        'application/mets+xml': 'mets',
        'application/mime': 'aps',
        'application/mods+xml': 'mods',
        'application/mp21': 'm21',
        'application/mp4': 'mp4',
        'application/mspowerpoint': ['pot', 'pps', 'ppt', 'ppz'],
        'application/msword': ['doc', 'dot', 'w6w', 'wiz', 'word'],
        'application/mswrite': 'wri',
        'application/mxf': 'mxf',
        'application/netmc': 'mcp',
        'application/octet-stream': ['*'],
        'application/oda': 'oda',
        'application/oebps-package+xml': 'opf',
        'application/ogg': 'ogx',
        'application/olescript': 'axs',
        'application/onenote': 'onetoc',
        'application/patch-ops-error+xml': 'xer',
        'application/pdf': 'pdf',
        'application/pgp-encrypted': '',
        'application/pgp-signature': 'pgp',
        'application/pics-rules': 'prf',
        'application/pkcs-12': 'p12',
        'application/pkcs-crl': 'crl',
        'application/pkcs10': 'p10',
        'application/pkcs7-mime': ['p7c', 'p7m'],
        'application/pkcs7-signature': 'p7s',
        'application/pkcs8': 'p8',
        'application/pkix-attr-cert': 'ac',
        'application/pkix-cert': ['cer', 'crt'],
        'application/pkix-crl': 'crl',
        'application/pkix-pkipath': 'pkipath',
        'application/pkixcmp': 'pki',
        'application/plain': 'text',
        'application/pls+xml': 'pls',
        'application/postscript': ['ai', 'eps', 'ps'],
        'application/powerpoint': 'ppt',
        'application/pro_eng': ['part', 'prt'],
        'application/prs.cww': 'cww',
        'application/pskc+xml': 'pskcxml',
        'application/rdf+xml': 'rdf',
        'application/reginfo+xml': 'rif',
        'application/relax-ng-compact-syntax': 'rnc',
        'application/resource-lists+xml': 'rl',
        'application/resource-lists-diff+xml': 'rld',
        'application/ringing-tones': 'rng',
        'application/rls-services+xml': 'rs',
        'application/rsd+xml': 'rsd',
        'application/rss+xml': 'xml',
        'application/rtf': ['rtf', 'rtx'],
        'application/sbml+xml': 'sbml',
        'application/scvp-cv-request': 'scq',
        'application/scvp-cv-response': 'scs',
        'application/scvp-vp-request': 'spq',
        'application/scvp-vp-response': 'spp',
        'application/sdp': 'sdp',
        'application/sea': 'sea',
        'application/set': 'set',
        'application/set-payment-initiation': 'setpay',
        'application/set-registration-initiation': 'setreg',
        'application/shf+xml': 'shf',
        'application/sla': 'stl',
        'application/smil': ['smi', 'smil'],
        'application/smil+xml': 'smi',
        'application/solids': 'sol',
        'application/sounder': 'sdr',
        'application/sparql-query': 'rq',
        'application/sparql-results+xml': 'srx',
        'application/srgs': 'gram',
        'application/srgs+xml': 'grxml',
        'application/sru+xml': 'sru',
        'application/ssml+xml': 'ssml',
        'application/step': ['step', 'stp'],
        'application/streamingmedia': 'ssm',
        'application/tei+xml': 'tei',
        'application/thraud+xml': 'tfi',
        'application/timestamped-data': 'tsd',
        'application/toolbook': 'tbk',
        'application/vda': 'vda',
        'application/vnd.3gpp.pic-bw-large': 'plb',
        'application/vnd.3gpp.pic-bw-small': 'psb',
        'application/vnd.3gpp.pic-bw-var': 'pvb',
        'application/vnd.3gpp2.tcap': 'tcap',
        'application/vnd.3m.post-it-notes': 'pwn',
        'application/vnd.accpac.simply.aso': 'aso',
        'application/vnd.accpac.simply.imp': 'imp',
        'application/vnd.acucobol': 'acu',
        'application/vnd.acucorp': 'atc',
        'application/vnd.adobe.air-application-installer-package+zip': 'air',
        'application/vnd.adobe.fxp': 'fxp',
        'application/vnd.adobe.xdp+xml': 'xdp',
        'application/vnd.adobe.xfdf': 'xfdf',
        'application/vnd.ahead.space': 'ahead',
        'application/vnd.airzip.filesecure.azf': 'azf',
        'application/vnd.airzip.filesecure.azs': 'azs',
        'application/vnd.amazon.ebook': 'azw',
        'application/vnd.americandynamics.acc': 'acc',
        'application/vnd.amiga.ami': 'ami',
        'application/vnd.android.package-archive': 'apk',
        'application/vnd.anser-web-certificate-issue-initiation': 'cii',
        'application/vnd.anser-web-funds-transfer-initiation': 'fti',
        'application/vnd.antix.game-component': 'atx',
        'application/vnd.apple.installer+xml': 'mpkg',
        'application/vnd.apple.mpegurl': 'm3u8',
        'application/vnd.aristanetworks.swi': 'swi',
        'application/vnd.audiograph': 'aep',
        'application/vnd.blueice.multipass': 'mpm',
        'application/vnd.bmi': 'bmi',
        'application/vnd.businessobjects': 'rep',
        'application/vnd.chemdraw+xml': 'cdxml',
        'application/vnd.chipnuts.karaoke-mmd': 'mmd',
        'application/vnd.cinderella': 'cdy',
        'application/vnd.claymore': 'cla',
        'application/vnd.cloanto.rp9': 'rp9',
        'application/vnd.clonk.c4group': 'c4g',
        'application/vnd.cluetrust.cartomobile-config': 'c11amc',
        'application/vnd.cluetrust.cartomobile-config-pkg': 'c11amz',
        'application/vnd.commonspace': 'csp',
        'application/vnd.contact.cmsg': 'cdbcmsg',
        'application/vnd.cosmocaller': 'cmc',
        'application/vnd.crick.clicker': 'clkx',
        'application/vnd.crick.clicker.keyboard': 'clkk',
        'application/vnd.crick.clicker.palette': 'clkp',
        'application/vnd.crick.clicker.template': 'clkt',
        'application/vnd.crick.clicker.wordbank': 'clkw',
        'application/vnd.criticaltools.wbs+xml': 'wbs',
        'application/vnd.ctc-posml': 'pml',
        'application/vnd.cups-ppd': 'ppd',
        'application/vnd.curl.car': 'car',
        'application/vnd.curl.pcurl': 'pcurl',
        'application/vnd.data-vision.rdz': 'rdz',
        'application/vnd.denovo.fcselayout-link': 'fe_launch',
        'application/vnd.dna': 'dna',
        'application/vnd.dolby.mlp': 'mlp',
        'application/vnd.dpgraph': 'dpg',
        'application/vnd.dreamfactory': 'dfac',
        'application/vnd.dvb.ait': 'ait',
        'application/vnd.dvb.service': 'svc',
        'application/vnd.dynageo': 'geo',
        'application/vnd.ecowin.chart': 'mag',
        'application/vnd.enliven': 'nml',
        'application/vnd.epson.esf': 'esf',
        'application/vnd.epson.msf': 'msf',
        'application/vnd.epson.quickanime': 'qam',
        'application/vnd.epson.salt': 'slt',
        'application/vnd.epson.ssf': 'ssf',
        'application/vnd.eszigno3+xml': 'es3',
        'application/vnd.ezpix-album': 'ez2',
        'application/vnd.ezpix-package': 'ez3',
        'application/vnd.fdf': 'fdf',
        'application/vnd.fdsn.seed': 'seed',
        'application/vnd.flographit': 'gph',
        'application/vnd.fluxtime.clip': 'ftc',
        'application/vnd.framemaker': 'fm',
        'application/vnd.frogans.fnc': 'fnc',
        'application/vnd.frogans.ltf': 'ltf',
        'application/vnd.fsc.weblaunch': 'fsc',
        'application/vnd.fujitsu.oasys': 'oas',
        'application/vnd.fujitsu.oasys2': 'oa2',
        'application/vnd.fujitsu.oasys3': 'oa3',
        'application/vnd.fujitsu.oasysgp': 'fg5',
        'application/vnd.fujitsu.oasysprs': 'bh2',
        'application/vnd.fujixerox.ddd': 'ddd',
        'application/vnd.fujixerox.docuworks': 'xdw',
        'application/vnd.fujixerox.docuworks.binder': 'xbd',
        'application/vnd.fuzzysheet': 'fzs',
        'application/vnd.genomatix.tuxedo': 'txd',
        'application/vnd.geogebra.file': 'ggb',
        'application/vnd.geogebra.tool': 'ggt',
        'application/vnd.geometry-explorer': 'gex',
        'application/vnd.geonext': 'gxt',
        'application/vnd.geoplan': 'g2w',
        'application/vnd.geospace': 'g3w',
        'application/vnd.gmx': 'gmx',
        'application/vnd.google-earth.kml+xml': 'kml',
        'application/vnd.google-earth.kmz': 'kmz',
        'application/vnd.grafeq': 'gqf',
        'application/vnd.groove-account': 'gac',
        'application/vnd.groove-help': 'ghf',
        'application/vnd.groove-identity-message': 'gim',
        'application/vnd.groove-injector': 'grv',
        'application/vnd.groove-tool-message': 'gtm',
        'application/vnd.groove-tool-template': 'tpl',
        'application/vnd.groove-vcard': 'vcg',
        'application/vnd.hal+xml': 'hal',
        'application/vnd.handheld-entertainment+xml': 'zmm',
        'application/vnd.hbci': 'hbci',
        'application/vnd.hhe.lesson-player': 'les',
        'application/vnd.hp-hpgl': ['hgl', 'hpg', 'hpgl'],
        'application/vnd.hp-hpid': 'hpid',
        'application/vnd.hp-hps': 'hps',
        'application/vnd.hp-jlyt': 'jlt',
        'application/vnd.hp-pcl': 'pcl',
        'application/vnd.hp-pclxl': 'pclxl',
        'application/vnd.hydrostatix.sof-data': 'sfd-hdstx',
        'application/vnd.hzn-3d-crossword': 'x3d',
        'application/vnd.ibm.minipay': 'mpy',
        'application/vnd.ibm.modcap': 'afp',
        'application/vnd.ibm.rights-management': 'irm',
        'application/vnd.ibm.secure-container': 'sc',
        'application/vnd.iccprofile': 'icc',
        'application/vnd.igloader': 'igl',
        'application/vnd.immervision-ivp': 'ivp',
        'application/vnd.immervision-ivu': 'ivu',
        'application/vnd.insors.igm': 'igm',
        'application/vnd.intercon.formnet': 'xpw',
        'application/vnd.intergeo': 'i2g',
        'application/vnd.intu.qbo': 'qbo',
        'application/vnd.intu.qfx': 'qfx',
        'application/vnd.ipunplugged.rcprofile': 'rcprofile',
        'application/vnd.irepository.package+xml': 'irp',
        'application/vnd.is-xpr': 'xpr',
        'application/vnd.isac.fcs': 'fcs',
        'application/vnd.jam': 'jam',
        'application/vnd.jcp.javame.midlet-rms': 'rms',
        'application/vnd.jisp': 'jisp',
        'application/vnd.joost.joda-archive': 'joda',
        'application/vnd.kahootz': 'ktz',
        'application/vnd.kde.karbon': 'karbon',
        'application/vnd.kde.kchart': 'chrt',
        'application/vnd.kde.kformula': 'kfo',
        'application/vnd.kde.kivio': 'flw',
        'application/vnd.kde.kontour': 'kon',
        'application/vnd.kde.kpresenter': 'kpr',
        'application/vnd.kde.kspread': 'ksp',
        'application/vnd.kde.kword': 'kwd',
        'application/vnd.kenameaapp': 'htke',
        'application/vnd.kidspiration': 'kia',
        'application/vnd.kinar': 'kne',
        'application/vnd.koan': 'skp',
        'application/vnd.kodak-descriptor': 'sse',
        'application/vnd.las.las+xml': 'lasxml',
        'application/vnd.llamagraphics.life-balance.desktop': 'lbd',
        'application/vnd.llamagraphics.life-balance.exchange+xml': 'lbe',
        'application/vnd.lotus-1-2-3': '123',
        'application/vnd.lotus-approach': 'apr',
        'application/vnd.lotus-freelance': 'pre',
        'application/vnd.lotus-notes': 'nsf',
        'application/vnd.lotus-organizer': 'org',
        'application/vnd.lotus-screencam': 'scm',
        'application/vnd.lotus-wordpro': 'lwp',
        'application/vnd.macports.portpkg': 'portpkg',
        'application/vnd.mcd': 'mcd',
        'application/vnd.medcalcdata': 'mc1',
        'application/vnd.mediastation.cdkey': 'cdkey',
        'application/vnd.mfer': 'mwf',
        'application/vnd.mfmp': 'mfm',
        'application/vnd.micrografx.flo': 'flo',
        'application/vnd.micrografx.igx': 'igx',
        'application/vnd.mif': 'mif',
        'application/vnd.mobius.daf': 'daf',
        'application/vnd.mobius.dis': 'dis',
        'application/vnd.mobius.mbk': 'mbk',
        'application/vnd.mobius.mqy': 'mqy',
        'application/vnd.mobius.msl': 'msl',
        'application/vnd.mobius.plc': 'plc',
        'application/vnd.mobius.txf': 'txf',
        'application/vnd.mophun.application': 'mpn',
        'application/vnd.mophun.certificate': 'mpc',
        'application/vnd.mozilla.xul+xml': 'xul',
        'application/vnd.ms-artgalry': 'cil',
        'application/vnd.ms-cab-compressed': 'cab',
        'application/vnd.ms-excel': ['xla', 'xlc', 'xlm', 'xls', 'xlt', 'xlw', 'xlb', 'xll'],
        'application/vnd.ms-excel.addin.macroenabled.12': 'xlam',
        'application/vnd.ms-excel.sheet.binary.macroenabled.12': 'xlsb',
        'application/vnd.ms-excel.sheet.macroenabled.12': 'xlsm',
        'application/vnd.ms-excel.template.macroenabled.12': 'xltm',
        'application/vnd.ms-fontobject': 'eot',
        'application/vnd.ms-htmlhelp': 'chm',
        'application/vnd.ms-ims': 'ims',
        'application/vnd.ms-lrm': 'lrm',
        'application/vnd.ms-officetheme': 'thmx',
        'application/vnd.ms-outlook': 'msg',
        'application/vnd.ms-pki.certstore': 'sst',
        'application/vnd.ms-pki.pko': 'pko',
        'application/vnd.ms-pki.seccat': 'cat',
        'application/vnd.ms-pki.stl': 'stl',
        'application/vnd.ms-pkicertstore': 'sst',
        'application/vnd.ms-pkiseccat': 'cat',
        'application/vnd.ms-pkistl': 'stl',
        'application/vnd.ms-powerpoint': ['pot', 'pps', 'ppt', 'ppa', 'pwz'],
        'application/vnd.ms-powerpoint.addin.macroenabled.12': 'ppam',
        'application/vnd.ms-powerpoint.presentation.macroenabled.12': 'pptm',
        'application/vnd.ms-powerpoint.slide.macroenabled.12': 'sldm',
        'application/vnd.ms-powerpoint.slideshow.macroenabled.12': 'ppsm',
        'application/vnd.ms-powerpoint.template.macroenabled.12': 'potm',
        'application/vnd.ms-project': 'mpp',
        'application/vnd.ms-word.document.macroenabled.12': 'docm',
        'application/vnd.ms-word.template.macroenabled.12': 'dotm',
        'application/vnd.ms-works': ['wcm', 'wdb', 'wks', 'wps'],
        'application/vnd.ms-wpl': 'wpl',
        'application/vnd.ms-xpsdocument': 'xps',
        'application/vnd.mseq': 'mseq',
        'application/vnd.musician': 'mus',
        'application/vnd.muvee.style': 'msty',
        'application/vnd.neurolanguage.nlu': 'nlu',
        'application/vnd.noblenet-directory': 'nnd',
        'application/vnd.noblenet-sealer': 'nns',
        'application/vnd.noblenet-web': 'nnw',
        'application/vnd.nokia.configuration-message': 'ncm',
        'application/vnd.nokia.n-gage.data': 'ngdat',
        'application/vnd.nokia.n-gage.symbian.install': 'n-gage',
        'application/vnd.nokia.radio-preset': 'rpst',
        'application/vnd.nokia.radio-presets': 'rpss',
        'application/vnd.nokia.ringing-tone': 'rng',
        'application/vnd.novadigm.edm': 'edm',
        'application/vnd.novadigm.edx': 'edx',
        'application/vnd.novadigm.ext': 'ext',
        'application/vnd.oasis.opendocument.chart': 'odc',
        'application/vnd.oasis.opendocument.chart-template': 'otc',
        'application/vnd.oasis.opendocument.database': 'odb',
        'application/vnd.oasis.opendocument.formula': 'odf',
        'application/vnd.oasis.opendocument.formula-template': 'odft',
        'application/vnd.oasis.opendocument.graphics': 'odg',
        'application/vnd.oasis.opendocument.graphics-template': 'otg',
        'application/vnd.oasis.opendocument.image': 'odi',
        'application/vnd.oasis.opendocument.image-template': 'oti',
        'application/vnd.oasis.opendocument.presentation': 'odp',
        'application/vnd.oasis.opendocument.presentation-template': 'otp',
        'application/vnd.oasis.opendocument.spreadsheet': 'ods',
        'application/vnd.oasis.opendocument.spreadsheet-template': 'ots',
        'application/vnd.oasis.opendocument.text': 'odt',
        'application/vnd.oasis.opendocument.text-master': 'odm',
        'application/vnd.oasis.opendocument.text-template': 'ott',
        'application/vnd.oasis.opendocument.text-web': 'oth',
        'application/vnd.olpc-sugar': 'xo',
        'application/vnd.oma.dd2+xml': 'dd2',
        'application/vnd.openofficeorg.extension': 'oxt',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'pptx',
        'application/vnd.openxmlformats-officedocument.presentationml.slide': 'sldx',
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow': 'ppsx',
        'application/vnd.openxmlformats-officedocument.presentationml.template': 'potx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template': 'xltx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template': 'dotx',
        'application/vnd.osgeo.mapguide.package': 'mgp',
        'application/vnd.osgi.dp': 'dp',
        'application/vnd.palm': 'pdb',
        'application/vnd.pawaafile': 'paw',
        'application/vnd.pg.format': 'str',
        'application/vnd.pg.osasli': 'ei6',
        'application/vnd.picsel': 'efif',
        'application/vnd.pmi.widget': 'wg',
        'application/vnd.pocketlearn': 'plf',
        'application/vnd.powerbuilder6': 'pbd',
        'application/vnd.previewsystems.box': 'box',
        'application/vnd.proteus.magazine': 'mgz',
        'application/vnd.publishare-delta-tree': 'qps',
        'application/vnd.pvi.ptid1': 'ptid',
        'application/vnd.quark.quarkxpress': 'qxd',
        'application/vnd.realvnc.bed': 'bed',
        'application/vnd.recordare.musicxml': 'mxl',
        'application/vnd.recordare.musicxml+xml': 'musicxml',
        'application/vnd.rig.cryptonote': 'cryptonote',
        'application/vnd.rim.cod': 'cod',
        'application/vnd.rn-realmedia': 'rm',
        'application/vnd.rn-realplayer': 'rnx',
        'application/vnd.route66.link66+xml': 'link66',
        'application/vnd.sailingtracker.track': 'st',
        'application/vnd.seemail': 'see',
        'application/vnd.sema': 'sema',
        'application/vnd.semd': 'semd',
        'application/vnd.semf': 'semf',
        'application/vnd.shana.informed.formdata': 'ifm',
        'application/vnd.shana.informed.formtemplate': 'itp',
        'application/vnd.shana.informed.interchange': 'iif',
        'application/vnd.shana.informed.package': 'ipk',
        'application/vnd.simtech-mindmapper': 'twd',
        'application/vnd.smaf': 'mmf',
        'application/vnd.smart.teacher': 'teacher',
        'application/vnd.solent.sdkm+xml': 'sdkm',
        'application/vnd.spotfire.dxp': 'dxp',
        'application/vnd.spotfire.sfs': 'sfs',
        'application/vnd.stardivision.calc': 'sdc',
        'application/vnd.stardivision.draw': 'sda',
        'application/vnd.stardivision.impress': 'sdd',
        'application/vnd.stardivision.math': 'smf',
        'application/vnd.stardivision.writer': 'sdw',
        'application/vnd.stardivision.writer-global': 'sgl',
        'application/vnd.stepmania.stepchart': 'sm',
        'application/vnd.sun.xml.calc': 'sxc',
        'application/vnd.sun.xml.calc.template': 'stc',
        'application/vnd.sun.xml.draw': 'sxd',
        'application/vnd.sun.xml.draw.template': 'std',
        'application/vnd.sun.xml.impress': 'sxi',
        'application/vnd.sun.xml.impress.template': 'sti',
        'application/vnd.sun.xml.math': 'sxm',
        'application/vnd.sun.xml.writer': 'sxw',
        'application/vnd.sun.xml.writer.global': 'sxg',
        'application/vnd.sun.xml.writer.template': 'stw',
        'application/vnd.sus-calendar': 'sus',
        'application/vnd.svd': 'svd',
        'application/vnd.symbian.install': 'sis',
        'application/vnd.syncml+xml': 'xsm',
        'application/vnd.syncml.dm+wbxml': 'bdm',
        'application/vnd.syncml.dm+xml': 'xdm',
        'application/vnd.tao.intent-module-archive': 'tao',
        'application/vnd.tmobile-livetv': 'tmo',
        'application/vnd.trid.tpt': 'tpt',
        'application/vnd.triscape.mxs': 'mxs',
        'application/vnd.trueapp': 'tra',
        'application/vnd.ufdl': 'ufd',
        'application/vnd.uiq.theme': 'utz',
        'application/vnd.umajin': 'umj',
        'application/vnd.unity': 'unityweb',
        'application/vnd.uoml+xml': 'uoml',
        'application/vnd.vcx': 'vcx',
        'application/vnd.visio': 'vsd',
        'application/vnd.visionary': 'vis',
        'application/vnd.vsf': 'vsf',
        'application/vnd.wap.wbxml': 'wbxml',
        'application/vnd.wap.wmlc': 'wmlc',
        'application/vnd.wap.wmlscriptc': 'wmlsc',
        'application/vnd.webturbo': 'wtb',
        'application/vnd.wolfram.player': 'nbp',
        'application/vnd.wordperfect': 'wpd',
        'application/vnd.wqd': 'wqd',
        'application/vnd.wt.stf': 'stf',
        'application/vnd.xara': ['web', 'xar'],
        'application/vnd.xfdl': 'xfdl',
        'application/vnd.yamaha.hv-dic': 'hvd',
        'application/vnd.yamaha.hv-script': 'hvs',
        'application/vnd.yamaha.hv-voice': 'hvp',
        'application/vnd.yamaha.openscoreformat': 'osf',
        'application/vnd.yamaha.openscoreformat.osfpvg+xml': 'osfpvg',
        'application/vnd.yamaha.smaf-audio': 'saf',
        'application/vnd.yamaha.smaf-phrase': 'spf',
        'application/vnd.yellowriver-custom-menu': 'cmp',
        'application/vnd.zul': 'zir',
        'application/vnd.zzazz.deck+xml': 'zaz',
        'application/vocaltec-media-desc': 'vmd',
        'application/vocaltec-media-file': 'vmf',
        'application/voicexml+xml': 'vxml',
        'application/widget': 'wgt',
        'application/winhlp': 'hlp',
        'application/wordperfect': ['wp', 'wp5', 'wp6', 'wpd'],
        'application/wordperfect6.0': ['w60', 'wp5'],
        'application/wordperfect6.1': 'w61',
        'application/wsdl+xml': 'wsdl',
        'application/wspolicy+xml': 'wspolicy',
        'application/x-123': 'wk1',
        'application/x-7z-compressed': '7z',
        'application/x-abiword': 'abw',
        'application/x-ace-compressed': 'ace',
        'application/x-aim': 'aim',
        'application/x-authorware-bin': 'aab',
        'application/x-authorware-map': 'aam',
        'application/x-authorware-seg': 'aas',
        'application/x-bcpio': 'bcpio',
        'application/x-binary': 'bin',
        'application/x-binhex40': 'hqx',
        'application/x-bittorrent': 'torrent',
        'application/x-bsh': ['bsh', 'sh', 'shar'],
        'application/x-bytecode.elisp': 'elc',
        'applicaiton/x-bytecode.python': 'pyc',
        'application/x-bzip': 'bz',
        'application/x-bzip2': ['boz', 'bz2'],
        'application/x-cdf': 'cdf',
        'application/x-cdlink': 'vcd',
        'application/x-chat': ['cha', 'chat'],
        'application/x-chess-pgn': 'pgn',
        'application/x-cmu-raster': 'ras',
        'application/x-cocoa': 'cco',
        'application/x-compactpro': 'cpt',
        'application/x-compress': 'z',
        'application/x-compressed': ['tgz', 'gz', 'z', 'zip'],
        'application/x-conference': 'nsc',
        'application/x-cpio': 'cpio',
        'application/x-cpt': 'cpt',
        'application/x-csh': 'csh',
        'application/x-debian-package': 'deb',
        'application/x-deepv': 'deepv',
        'application/x-director': ['dcr', 'dir', 'dxr'],
        'application/x-doom': 'wad',
        'application/x-dtbncx+xml': 'ncx',
        'application/x-dtbook+xml': 'dtb',
        'application/x-dtbresource+xml': 'res',
        'application/x-dvi': 'dvi',
        'application/x-elc': 'elc',
        'application/x-envoy': ['env', 'evy'],
        'application/x-esrehber': 'es',
        'application/x-excel': ['xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xls', 'xlt', 'xlv', 'xlw'],
        'application/x-font-bdf': 'bdf',
        'application/x-font-ghostscript': 'gsf',
        'application/x-font-linux-psf': 'psf',
        'application/x-font-otf': 'otf',
        'application/x-font-pcf': 'pcf',
        'application/x-font-snf': 'snf',
        'application/x-font-ttf': 'ttf',
        'application/x-font-type1': 'pfa',
        'application/x-font-woff': 'woff',
        'application/x-frame': 'mif',
        'application/x-freelance': 'pre',
        'application/x-futuresplash': 'spl',
        'application/x-gnumeric': 'gnumeric',
        'application/x-gsp': 'gsp',
        'application/x-gss': 'gss',
        'application/x-gtar': 'gtar',
        'application/x-gzip': ['gz', 'gzip'],
        'application/x-hdf': 'hdf',
        'application/x-helpfile': ['help', 'hlp'],
        'application/x-httpd-imap': 'imap',
        'application/x-ima': 'ima',
        'application/x-internet-signup': ['ins', 'isp'],
        'application/x-internett-signup': 'ins',
        'application/x-inventor': 'iv',
        'application/x-ip2': 'ip',
        'application/x-iphone': 'iii',
        'application/x-java-class': 'class',
        'application/x-java-commerce': 'jcm',
        'application/x-java-jnlp-file': 'jnlp',
        'application/x-javascript': 'js',
        'application/x-koan': ['skd', 'skm', 'skp', 'skt'],
        'application/x-ksh': 'ksh',
        'application/x-latex': ['latex', 'ltx'],
        'application/x-lha': 'lha',
        'application/x-lisp': 'lsp',
        'application/x-livescreen': 'ivy',
        'application/x-lotus': 'wq1',
        'application/x-lotusscreencam': 'scm',
        'application/x-lzh': 'lzh',
        'application/x-lzx': 'lzx',
        'application/x-mac-binhex40': 'hqx',
        'application/x-macbinary': 'bin',
        'application/x-magic-cap-package-1.0': 'mc$',
        'application/x-mathcad': 'mcd',
        'application/x-meme': 'mm',
        'application/x-midi': ['mid', 'midi'],
        'application/x-mif': 'mif',
        'application/x-mix-transfer': 'nix',
        'application/x-mobipocket-ebook': 'prc',
        'application/x-mplayer2': 'asx',
        'application/x-ms-application': 'application',
        'application/x-ms-wmd': 'wmd',
        'application/x-ms-wmz': 'wmz',
        'application/x-ms-xbap': 'xbap',
        'application/x-msaccess': 'mdb',
        'application/x-msbinder': 'obd',
        'application/x-mscardfile': 'crd',
        'application/x-msclip': 'clp',
        'application/x-msdownload': ['dll', 'exe'],
        'application/x-msexcel': ['xla', 'xls', 'xlw'],
        'application/x-msmediaview': ['m13', 'm14', 'mvb'],
        'application/x-msmetafile': 'wmf',
        'application/x-msmoney': 'mny',
        'application/x-mspowerpoint': 'ppt',
        'application/x-mspublisher': 'pub',
        'application/x-msschedule': 'scd',
        'application/x-msterminal': 'trm',
        'application/x-mswrite': 'wri',
        'application/x-navi-animation': 'ani',
        'application/x-navidoc': 'nvd',
        'application/x-navimap': 'map',
        'application/x-navistyle': 'stl',
        'application/x-netcdf': ['cdf', 'nc'],
        'application/x-newton-compatible-pkg': 'pkg',
        'application/x-nokia-9000-communicator-add-on-software': 'aos',
        'application/x-omc': 'omc',
        'application/x-omcdatamaker': 'omcd',
        'application/x-omcregerator': 'omcr',
        'application/x-pagemaker': ['pm4', 'pm5'],
        'application/x-pcl': 'pcl',
        'application/x-perfmon': ['pma', 'pmc', 'pml', 'pmr', 'pmw'],
        'application/x-pixclscript': 'plx',
        'application/x-pkcs10': 'p10',
        'application/x-pkcs12': ['p12', 'pfx'],
        'application/x-pkcs7-certificates': ['p7b', 'spc'],
        'application/x-pkcs7-certreqresp': 'p7r',
        'application/x-pkcs7-mime': ['p7c', 'p7m'],
        'application/x-pkcs7-signature': ['p7s', 'p7a'],
        'application/x-pointplus': 'css',
        'application/x-portable-anymap': 'pnm',
        'application/x-project': ['mpc', 'mpt', 'mpv', 'mpx'],
        'application/x-qpro': 'wb1',
        'application/x-rar-compressed': 'rar',
        'application/x-rtf': 'rtf',
        'application/x-sdp': 'sdp',
        'application/x-sea': 'sea',
        'application/x-seelogo': 'sl',
        'application/x-sh': 'sh',
        'application/x-shar': ['shar', 'sh'],
        'application/x-shockwave-flash': 'swf',
        'application/x-silverlight-app': 'xap',
        'application/x-sit': 'sit',
        'application/x-sprite': ['spr', 'sprite'],
        'application/x-stuffit': 'sit',
        'application/x-stuffitx': 'sitx',
        'application/x-sv4cpio': 'sv4cpio',
        'application/x-sv4crc': 'sv4crc',
        'application/x-tar': 'tar',
        'application/x-tbook': ['sbk', 'tbk'],
        'application/x-tcl': 'tcl',
        'application/x-tex': 'tex',
        'application/x-tex-tfm': 'tfm',
        'application/x-texinfo': ['texi', 'texinfo'],
        'application/x-troff': ['roff', 't', 'tr'],
        'application/x-troff-man': 'man',
        'application/x-troff-me': 'me',
        'application/x-troff-ms': 'ms',
        'application/x-troff-msvideo': 'avi',
        'application/x-ustar': 'ustar',
        'application/x-visio': ['vsd', 'vst', 'vsw'],
        'application/x-vnd.audioexplosion.mzz': 'mzz',
        'application/x-vnd.ls-xpix': 'xpix',
        'application/x-vrml': 'vrml',
        'application/x-wais-source': ['src', 'wsrc'],
        'application/x-winhelp': 'hlp',
        'application/x-wintalk': 'wtk',
        'application/x-world': ['svr', 'wrl'],
        'application/x-wpwin': 'wpd',
        'application/x-wri': 'wri',
        'application/x-x509-ca-cert': ['cer', 'crt', 'der'],
        'application/x-x509-user-cert': 'crt',
        'application/x-xfig': 'fig',
        'application/x-xpinstall': 'xpi',
        'application/x-zip-compressed': 'zip',
        'application/xcap-diff+xml': 'xdf',
        'application/xenc+xml': 'xenc',
        'application/xhtml+xml': 'xhtml',
        'application/xml': 'xml',
        'application/xml-dtd': 'dtd',
        'application/xop+xml': 'xop',
        'application/xslt+xml': 'xslt',
        'application/xspf+xml': 'xspf',
        'application/xv+xml': 'mxml',
        'application/yang': 'yang',
        'application/yin+xml': 'yin',
        'application/ynd.ms-pkipko': 'pko',
        'application/zip': 'zip',
        'audio/adpcm': 'adp',
        'audio/aiff': ['aif', 'aifc', 'aiff'],
        'audio/basic': ['au', 'snd'],
        'audio/it': 'it',
        'audio/make': ['funk', 'my', 'pfunk'],
        'audio/make.my.funk': 'pfunk',
        'audio/mid': ['mid', 'rmi'],
        'audio/midi': ['kar', 'mid', 'midi'],
        'audio/mod': 'mod',
        'audio/mp4': 'mp4a',
        'audio/mpeg': ['mp3', 'm2a', 'mp2', 'mpa', 'mpg', 'mpga'],
        'audio/mpeg3': 'mp3',
        'audio/nspaudio': ['la', 'lma'],
        'audio/ogg': 'oga',
        'audio/s3m': 's3m',
        'audio/tsp-audio': 'tsi',
        'audio/tsplayer': 'tsp',
        'audio/vnd.dece.audio': 'uva',
        'audio/vnd.digital-winds': 'eol',
        'audio/vnd.dra': 'dra',
        'audio/vnd.dts': 'dts',
        'audio/vnd.dts.hd': 'dtshd',
        'audio/vnd.lucent.voice': 'lvp',
        'audio/vnd.ms-playready.media.pya': 'pya',
        'audio/vnd.nuera.ecelp4800': 'ecelp4800',
        'audio/vnd.nuera.ecelp7470': 'ecelp7470',
        'audio/vnd.nuera.ecelp9600': 'ecelp9600',
        'audio/vnd.qcelp': 'qcp',
        'audio/vnd.rip': 'rip',
        'audio/voc': 'voc',
        'audio/voxware': 'vox',
        'audio/wav': 'wav',
        'audio/webm': 'weba',
        'audio/x-aac': 'aac',
        'audio/x-adpcm': 'snd',
        'audio/x-aiff': ['aif', 'aifc', 'aiff'],
        'audio/x-au': 'au',
        'audio/x-gsm': ['gsd', 'gsm'],
        'audio/x-jam': 'jam',
        'audio/x-liveaudio': 'lam',
        'audio/x-mid': ['mid', 'midi'],
        'audio/x-midi': ['mid', 'midi'],
        'audio/x-mod': 'mod',
        'audio/x-mpeg': 'mp2',
        'audio/x-mpeg-3': 'mp3',
        'audio/x-mpegurl': 'm3u',
        'audio/x-mpequrl': 'm3u',
        'audio/x-ms-wax': 'wax',
        'audio/x-ms-wma': 'wma',
        'audio/x-nspaudio': ['la', 'lma'],
        'audio/x-pn-realaudio': ['ra', 'ram', 'rm', 'rmm', 'rmp'],
        'audio/x-pn-realaudio-plugin': ['ra', 'rmp', 'rpm'],
        'audio/x-psid': 'sid',
        'audio/x-realaudio': 'ra',
        'audio/x-twinvq': 'vqf',
        'audio/x-twinvq-plugin': ['vqe', 'vql'],
        'audio/x-vnd.audioexplosion.mjuicemediafile': 'mjf',
        'audio/x-voc': 'voc',
        'audio/x-wav': 'wav',
        'audio/xm': 'xm',
        'chemical/x-cdx': 'cdx',
        'chemical/x-cif': 'cif',
        'chemical/x-cmdf': 'cmdf',
        'chemical/x-cml': 'cml',
        'chemical/x-csml': 'csml',
        'chemical/x-pdb': ['pdb', 'xyz'],
        'chemical/x-xyz': 'xyz',
        'drawing/x-dwf': 'dwf',
        'i-world/i-vrml': 'ivr',
        'image/bmp': ['bmp', 'bm'],
        'image/cgm': 'cgm',
        'image/cis-cod': 'cod',
        'image/cmu-raster': ['ras', 'rast'],
        'image/fif': 'fif',
        'image/florian': ['flo', 'turbot'],
        'image/g3fax': 'g3',
        'image/gif': 'gif',
        'image/ief': ['ief', 'iefs'],
        'image/jpeg': ['jpe', 'jpeg', 'jpg', 'jfif', 'jfif-tbnl'],
        'image/jutvision': 'jut',
        'image/ktx': 'ktx',
        'image/naplps': ['nap', 'naplps'],
        'image/pict': ['pic', 'pict'],
        'image/pipeg': 'jfif',
        'image/pjpeg': ['jfif', 'jpe', 'jpeg', 'jpg'],
        'image/png': ['png', 'x-png'],
        'image/prs.btif': 'btif',
        'image/svg+xml': 'svg',
        'image/tiff': ['tif', 'tiff'],
        'image/vasa': 'mcf',
        'image/vnd.adobe.photoshop': 'psd',
        'image/vnd.dece.graphic': 'uvi',
        'image/vnd.djvu': 'djvu',
        'image/vnd.dvb.subtitle': 'sub',
        'image/vnd.dwg': ['dwg', 'dxf', 'svf'],
        'image/vnd.dxf': 'dxf',
        'image/vnd.fastbidsheet': 'fbs',
        'image/vnd.fpx': 'fpx',
        'image/vnd.fst': 'fst',
        'image/vnd.fujixerox.edmics-mmr': 'mmr',
        'image/vnd.fujixerox.edmics-rlc': 'rlc',
        'image/vnd.ms-modi': 'mdi',
        'image/vnd.net-fpx': ['fpx', 'npx'],
        'image/vnd.rn-realflash': 'rf',
        'image/vnd.rn-realpix': 'rp',
        'image/vnd.wap.wbmp': 'wbmp',
        'image/vnd.xiff': 'xif',
        'image/webp': 'webp',
        'image/x-cmu-raster': 'ras',
        'image/x-cmx': 'cmx',
        'image/x-dwg': ['dwg', 'dxf', 'svf'],
        'image/x-freehand': 'fh',
        'image/x-icon': 'ico',
        'image/x-jg': 'art',
        'image/x-jps': 'jps',
        'image/x-niff': ['nif', 'niff'],
        'image/x-pcx': 'pcx',
        'image/x-pict': ['pct', 'pic'],
        'image/x-portable-anymap': 'pnm',
        'image/x-portable-bitmap': 'pbm',
        'image/x-portable-graymap': 'pgm',
        'image/x-portable-greymap': 'pgm',
        'image/x-portable-pixmap': 'ppm',
        'image/x-quicktime': ['qif', 'qti', 'qtif'],
        'image/x-rgb': 'rgb',
        'image/x-tiff': ['tif', 'tiff'],
        'image/x-windows-bmp': 'bmp',
        'image/x-xbitmap': 'xbm',
        'image/x-xbm': 'xbm',
        'image/x-xpixmap': ['xpm', 'pm'],
        'image/x-xwd': 'xwd',
        'image/x-xwindowdump': 'xwd',
        'image/xbm': 'xbm',
        'image/xpm': 'xpm',
        'message/rfc822': ['mht', 'mhtml', 'nws', 'mime', 'eml'],
        'model/iges': ['iges', 'igs'],
        'model/mesh': 'msh',
        'model/vnd.collada+xml': 'dae',
        'model/vnd.dwf': 'dwf',
        'model/vnd.gdl': 'gdl',
        'model/vnd.gtw': 'gtw',
        'model/vnd.mts': 'mts',
        'model/vnd.vtu': 'vtu',
        'model/vrml': ['vrml', 'wrl', 'wrz'],
        'model/x-pov': 'pov',
        'multipart/x-gzip': 'gzip',
        'multipart/x-ustar': 'ustar',
        'multipart/x-zip': 'zip',
        'music/crescendo': ['mid', 'midi'],
        'music/x-karaoke': 'kar',
        'paleovu/x-pv': 'pvu',
        'text/asp': 'asp',
        'text/calendar': 'ics',
        'text/css': 'css',
        'text/csv': 'csv',
        'text/ecmascript': 'js',
        'text/h323': '323',
        'text/html': ['htm', 'html', 'stm', 'acgi', 'htmls', 'htx', 'shtml'],
        'text/iuls': 'uls',
        'text/javascript': 'js',
        'text/mcf': 'mcf',
        'text/n3': 'n3',
        'text/pascal': 'pas',
        'text/plain': ['bas', 'c', 'h', 'txt', 'c++', 'cc', 'com', 'conf', 'cxx', 'def', 'f', 'f90', 'for', 'g', 'hh', 'idc', 'jav', 'java', 'list', 'log', 'lst', 'm', 'mar', 'pl', 'sdml', 'text'],
        'text/plain-bas': 'par',
        'text/prs.lines.tag': 'dsc',
        'text/richtext': ['rtx', 'rt', 'rtf'],
        'text/scriplet': 'wsc',
        'text/scriptlet': 'sct',
        'text/sgml': ['sgm', 'sgml'],
        'text/tab-separated-values': 'tsv',
        'text/troff': 't',
        'text/turtle': 'ttl',
        'text/uri-list': ['uni', 'unis', 'uri', 'uris'],
        'text/vnd.abc': 'abc',
        'text/vnd.curl': 'curl',
        'text/vnd.curl.dcurl': 'dcurl',
        'text/vnd.curl.mcurl': 'mcurl',
        'text/vnd.curl.scurl': 'scurl',
        'text/vnd.fly': 'fly',
        'text/vnd.fmi.flexstor': 'flx',
        'text/vnd.graphviz': 'gv',
        'text/vnd.in3d.3dml': '3dml',
        'text/vnd.in3d.spot': 'spot',
        'text/vnd.rn-realtext': 'rt',
        'text/vnd.sun.j2me.app-descriptor': 'jad',
        'text/vnd.wap.wml': 'wml',
        'text/vnd.wap.wmlscript': 'wmls',
        'text/webviewhtml': 'htt',
        'text/x-asm': ['asm', 's'],
        'text/x-audiosoft-intra': 'aip',
        'text/x-c': ['c', 'cc', 'cpp'],
        'text/x-component': 'htc',
        'text/x-fortran': ['f', 'f77', 'f90', 'for'],
        'text/x-h': ['h', 'hh'],
        'text/x-java-source': ['jav', 'java'],
        'text/x-java-source,java': 'java',
        'text/x-la-asf': 'lsx',
        'text/x-m': 'm',
        'text/x-pascal': 'p',
        'text/x-script': 'hlb',
        'text/x-script.csh': 'csh',
        'text/x-script.elisp': 'el',
        'text/x-script.guile': 'scm',
        'text/x-script.ksh': 'ksh',
        'text/x-script.lisp': 'lsp',
        'text/x-script.perl': 'pl',
        'text/x-script.perl-module': 'pm',
        'text/x-script.phyton': 'py',
        'text/x-script.rexx': 'rexx',
        'text/x-script.scheme': 'scm',
        'text/x-script.sh': 'sh',
        'text/x-script.tcl': 'tcl',
        'text/x-script.tcsh': 'tcsh',
        'text/x-script.zsh': 'zsh',
        'text/x-server-parsed-html': ['shtml', 'ssi'],
        'text/x-setext': 'etx',
        'text/x-sgml': ['sgm', 'sgml'],
        'text/x-speech': ['spc', 'talk'],
        'text/x-uil': 'uil',
        'text/x-uuencode': ['uu', 'uue'],
        'text/x-vcalendar': 'vcs',
        'text/x-vcard': 'vcf',
        'text/xml': 'xml',
        'video/3gpp': '3gp',
        'video/3gpp2': '3g2',
        'video/animaflex': 'afl',
        'video/avi': 'avi',
        'video/avs-video': 'avs',
        'video/dl': 'dl',
        'video/fli': 'fli',
        'video/gl': 'gl',
        'video/h261': 'h261',
        'video/h263': 'h263',
        'video/h264': 'h264',
        'video/jpeg': 'jpgv',
        'video/jpm': 'jpm',
        'video/mj2': 'mj2',
        'video/mp4': 'mp4',
        'video/mpeg': ['mp2', 'mpa', 'mpe', 'mpeg', 'mpg', 'mpv2', 'm1v', 'm2v', 'mp3'],
        'video/msvideo': 'avi',
        'video/ogg': 'ogv',
        'video/quicktime': ['mov', 'qt', 'moov'],
        'video/vdo': 'vdo',
        'video/vivo': ['viv', 'vivo'],
        'video/vnd.dece.hd': 'uvh',
        'video/vnd.dece.mobile': 'uvm',
        'video/vnd.dece.pd': 'uvp',
        'video/vnd.dece.sd': 'uvs',
        'video/vnd.dece.video': 'uvv',
        'video/vnd.fvt': 'fvt',
        'video/vnd.mpegurl': 'mxu',
        'video/vnd.ms-playready.media.pyv': 'pyv',
        'video/vnd.rn-realvideo': 'rv',
        'video/vnd.uvvu.mp4': 'uvu',
        'video/vnd.vivo': ['viv', 'vivo'],
        'video/vosaic': 'vos',
        'video/webm': 'webm',
        'video/x-amt-demorun': 'xdr',
        'video/x-amt-showrun': 'xsr',
        'video/x-atomic3d-feature': 'fmf',
        'video/x-dl': 'dl',
        'video/x-dv': ['dif', 'dv'],
        'video/x-f4v': 'f4v',
        'video/x-fli': 'fli',
        'video/x-flv': 'flv',
        'video/x-gl': 'gl',
        'video/x-isvideo': 'isu',
        'video/x-la-asf': ['lsf', 'lsx'],
        'video/x-m4v': 'm4v',
        'video/x-motion-jpeg': 'mjpg',
        'video/x-mpeg': ['mp2', 'mp3'],
        'video/x-mpeq2a': 'mp2',
        'video/x-ms-asf': ['asf', 'asr', 'asx'],
        'video/x-ms-asf-plugin': 'asx',
        'video/x-ms-wm': 'wm',
        'video/x-ms-wmv': 'wmv',
        'video/x-ms-wmx': 'wmx',
        'video/x-ms-wvx': 'wvx',
        'video/x-msvideo': 'avi',
        'video/x-qtc': 'qtc',
        'video/x-scm': 'scm',
        'video/x-sgi-movie': ['movie', 'mv'],
        'windows/metafile': 'wmf',
        'www/mime': 'mime',
        'x-conference/x-cooltalk': 'ice',
        'x-music/x-midi': ['mid', 'midi'],
        'x-world/x-3dmf': ['3dm', '3dmf', 'qd3', 'qd3d'],
        'x-world/x-svr': 'svr',
        'x-world/x-vrml': ['flr', 'vrml', 'wrl', 'wrz', 'xaf', 'xof'],
        'x-world/x-vrt': 'vrt',
        'xgl/drawing': 'xgz',
        'xgl/movie': 'xmz',
    };

    var mimetypesExtensions = {
        '': ['application/andrew-inset', 'application/pgp-encrypted'],
        '*': 'application/octet-stream',
        '123': 'application/vnd.lotus-1-2-3',
        '323': 'text/h323',
        '3dm': 'x-world/x-3dmf',
        '3dmf': 'x-world/x-3dmf',
        '3dml': 'text/vnd.in3d.3dml',
        '3g2': 'video/3gpp2',
        '3gp': 'video/3gpp',
        '7z': 'application/x-7z-compressed',
        'a': 'application/octet-stream',
        'aab': 'application/x-authorware-bin',
        'aac': 'audio/x-aac',
        'aam': 'application/x-authorware-map',
        'aas': 'application/x-authorware-seg',
        'abc': 'text/vnd.abc',
        'abw': 'application/x-abiword',
        'ac': 'application/pkix-attr-cert',
        'acc': 'application/vnd.americandynamics.acc',
        'ace': 'application/x-ace-compressed',
        'acgi': 'text/html',
        'acu': 'application/vnd.acucobol',
        'acx': 'application/internet-property-stream',
        'adp': 'audio/adpcm',
        'aep': 'application/vnd.audiograph',
        'afl': 'video/animaflex',
        'afp': 'application/vnd.ibm.modcap',
        'ahead': 'application/vnd.ahead.space',
        'ai': 'application/postscript',
        'aif': ['audio/aiff', 'audio/x-aiff'],
        'aifc': ['audio/aiff', 'audio/x-aiff'],
        'aiff': ['audio/aiff', 'audio/x-aiff'],
        'aim': 'application/x-aim',
        'aip': 'text/x-audiosoft-intra',
        'air': 'application/vnd.adobe.air-application-installer-package+zip',
        'ait': 'application/vnd.dvb.ait',
        'ami': 'application/vnd.amiga.ami',
        'ani': 'application/x-navi-animation',
        'aos': 'application/x-nokia-9000-communicator-add-on-software',
        'apk': 'application/vnd.android.package-archive',
        'application': 'application/x-ms-application',
        'apr': 'application/vnd.lotus-approach',
        'aps': 'application/mime',
        'arc': 'application/octet-stream',
        'arj': ['application/arj', 'application/octet-stream'],
        'art': 'image/x-jg',
        'asf': 'video/x-ms-asf',
        'asm': 'text/x-asm',
        'aso': 'application/vnd.accpac.simply.aso',
        'asp': 'text/asp',
        'asr': 'video/x-ms-asf',
        'asx': ['video/x-ms-asf', 'application/x-mplayer2', 'video/x-ms-asf-plugin'],
        'atc': 'application/vnd.acucorp',
        'atomcat': 'application/atomcat+xml',
        'atomsvc': 'application/atomsvc+xml',
        'atx': 'application/vnd.antix.game-component',
        'au': ['audio/basic', 'audio/x-au'],
        'avi': ['video/avi', 'video/msvideo', 'application/x-troff-msvideo', 'video/x-msvideo'],
        'avs': 'video/avs-video',
        'aw': 'application/applixware',
        'axs': 'application/olescript',
        'azf': 'application/vnd.airzip.filesecure.azf',
        'azs': 'application/vnd.airzip.filesecure.azs',
        'azw': 'application/vnd.amazon.ebook',
        'bas': 'text/plain',
        'bcpio': 'application/x-bcpio',
        'bdf': 'application/x-font-bdf',
        'bdm': 'application/vnd.syncml.dm+wbxml',
        'bed': 'application/vnd.realvnc.bed',
        'bh2': 'application/vnd.fujitsu.oasysprs',
        'bin': ['application/octet-stream', 'application/mac-binary', 'application/macbinary', 'application/x-macbinary', 'application/x-binary'],
        'bm': 'image/bmp',
        'bmi': 'application/vnd.bmi',
        'bmp': ['image/bmp', 'image/x-windows-bmp'],
        'boo': 'application/book',
        'book': 'application/book',
        'box': 'application/vnd.previewsystems.box',
        'boz': 'application/x-bzip2',
        'bsh': 'application/x-bsh',
        'btif': 'image/prs.btif',
        'bz': 'application/x-bzip',
        'bz2': 'application/x-bzip2',
        'c': ['text/plain', 'text/x-c'],
        'c++': 'text/plain',
        'c11amc': 'application/vnd.cluetrust.cartomobile-config',
        'c11amz': 'application/vnd.cluetrust.cartomobile-config-pkg',
        'c4g': 'application/vnd.clonk.c4group',
        'cab': 'application/vnd.ms-cab-compressed',
        'car': 'application/vnd.curl.car',
        'cat': ['application/vnd.ms-pkiseccat', 'application/vnd.ms-pki.seccat'],
        'cc': ['text/plain', 'text/x-c'],
        'ccad': 'application/clariscad',
        'cco': 'application/x-cocoa',
        'ccxml': 'application/ccxml+xml,',
        'cdbcmsg': 'application/vnd.contact.cmsg',
        'cdf': ['application/cdf', 'application/x-cdf', 'application/x-netcdf'],
        'cdkey': 'application/vnd.mediastation.cdkey',
        'cdmia': 'application/cdmi-capability',
        'cdmic': 'application/cdmi-container',
        'cdmid': 'application/cdmi-domain',
        'cdmio': 'application/cdmi-object',
        'cdmiq': 'application/cdmi-queue',
        'cdx': 'chemical/x-cdx',
        'cdxml': 'application/vnd.chemdraw+xml',
        'cdy': 'application/vnd.cinderella',
        'cer': ['application/pkix-cert', 'application/x-x509-ca-cert'],
        'cgm': 'image/cgm',
        'cha': 'application/x-chat',
        'chat': 'application/x-chat',
        'chm': 'application/vnd.ms-htmlhelp',
        'chrt': 'application/vnd.kde.kchart',
        'cif': 'chemical/x-cif',
        'cii': 'application/vnd.anser-web-certificate-issue-initiation',
        'cil': 'application/vnd.ms-artgalry',
        'cla': 'application/vnd.claymore',
        'class': ['application/octet-stream', 'application/java', 'application/java-byte-code', 'application/java-vm', 'application/x-java-class'],
        'clkk': 'application/vnd.crick.clicker.keyboard',
        'clkp': 'application/vnd.crick.clicker.palette',
        'clkt': 'application/vnd.crick.clicker.template',
        'clkw': 'application/vnd.crick.clicker.wordbank',
        'clkx': 'application/vnd.crick.clicker',
        'clp': 'application/x-msclip',
        'cmc': 'application/vnd.cosmocaller',
        'cmdf': 'chemical/x-cmdf',
        'cml': 'chemical/x-cml',
        'cmp': 'application/vnd.yellowriver-custom-menu',
        'cmx': 'image/x-cmx',
        'cod': ['image/cis-cod', 'application/vnd.rim.cod'],
        'com': ['application/octet-stream', 'text/plain'],
        'conf': 'text/plain',
        'cpio': 'application/x-cpio',
        'cpp': 'text/x-c',
        'cpt': ['application/mac-compactpro', 'application/x-compactpro', 'application/x-cpt'],
        'crd': 'application/x-mscardfile',
        'crl': ['application/pkix-crl', 'application/pkcs-crl'],
        'crt': ['application/pkix-cert', 'application/x-x509-user-cert', 'application/x-x509-ca-cert'],
        'cryptonote': 'application/vnd.rig.cryptonote',
        'csh': ['text/x-script.csh', 'application/x-csh'],
        'csml': 'chemical/x-csml',
        'csp': 'application/vnd.commonspace',
        'css': ['text/css', 'application/x-pointplus'],
        'csv': 'text/csv',
        'cu': 'application/cu-seeme',
        'curl': 'text/vnd.curl',
        'cww': 'application/prs.cww',
        'cxx': 'text/plain',
        'dae': 'model/vnd.collada+xml',
        'daf': 'application/vnd.mobius.daf',
        'davmount': 'application/davmount+xml',
        'dcr': 'application/x-director',
        'dcurl': 'text/vnd.curl.dcurl',
        'dd2': 'application/vnd.oma.dd2+xml',
        'ddd': 'application/vnd.fujixerox.ddd',
        'deb': 'application/x-debian-package',
        'deepv': 'application/x-deepv',
        'def': 'text/plain',
        'der': 'application/x-x509-ca-cert',
        'dfac': 'application/vnd.dreamfactory',
        'dif': 'video/x-dv',
        'dir': 'application/x-director',
        'dis': 'application/vnd.mobius.dis',
        'djvu': 'image/vnd.djvu',
        'dl': ['video/dl', 'video/x-dl'],
        'dll': 'application/x-msdownload',
        'dms': 'application/octet-stream',
        'dna': 'application/vnd.dna',
        'doc': 'application/msword',
        'docm': 'application/vnd.ms-word.document.macroenabled.12',
        'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'dot': 'application/msword',
        'dotm': 'application/vnd.ms-word.template.macroenabled.12',
        'dotx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
        'dp': ['application/commonground', 'application/vnd.osgi.dp'],
        'dpg': 'application/vnd.dpgraph',
        'dra': 'audio/vnd.dra',
        'drw': 'application/drafting',
        'dsc': 'text/prs.lines.tag',
        'dssc': 'application/dssc+der',
        'dtb': 'application/x-dtbook+xml',
        'dtd': 'application/xml-dtd',
        'dts': 'audio/vnd.dts',
        'dtshd': 'audio/vnd.dts.hd',
        'dump': 'application/octet-stream',
        'dv': 'video/x-dv',
        'dvi': 'application/x-dvi',
        'dwf': ['model/vnd.dwf', 'drawing/x-dwf'],
        'dwg': ['application/acad', 'image/vnd.dwg', 'image/x-dwg'],
        'dxf': ['application/dxf', 'image/vnd.dwg', 'image/vnd.dxf', 'image/x-dwg'],
        'dxp': 'application/vnd.spotfire.dxp',
        'dxr': 'application/x-director',
        'ecelp4800': 'audio/vnd.nuera.ecelp4800',
        'ecelp7470': 'audio/vnd.nuera.ecelp7470',
        'ecelp9600': 'audio/vnd.nuera.ecelp9600',
        'edm': 'application/vnd.novadigm.edm',
        'edx': 'application/vnd.novadigm.edx',
        'efif': 'application/vnd.picsel',
        'ei6': 'application/vnd.pg.osasli',
        'el': 'text/x-script.elisp',
        'elc': ['application/x-elc', 'application/x-bytecode.elisp'],
        'eml': 'message/rfc822',
        'emma': 'application/emma+xml',
        'env': 'application/x-envoy',
        'eol': 'audio/vnd.digital-winds',
        'eot': 'application/vnd.ms-fontobject',
        'eps': 'application/postscript',
        'epub': 'application/epub+zip',
        'es': ['application/ecmascript', 'application/x-esrehber'],
        'es3': 'application/vnd.eszigno3+xml',
        'esf': 'application/vnd.epson.esf',
        'etx': 'text/x-setext',
        'evy': ['application/envoy', 'application/x-envoy'],
        'exe': ['application/octet-stream', 'application/x-msdownload'],
        'exi': 'application/exi',
        'ext': 'application/vnd.novadigm.ext',
        'ez2': 'application/vnd.ezpix-album',
        'ez3': 'application/vnd.ezpix-package',
        'f': ['text/plain', 'text/x-fortran'],
        'f4v': 'video/x-f4v',
        'f77': 'text/x-fortran',
        'f90': ['text/plain', 'text/x-fortran'],
        'fbs': 'image/vnd.fastbidsheet',
        'fcs': 'application/vnd.isac.fcs',
        'fdf': 'application/vnd.fdf',
        'fe_launch': 'application/vnd.denovo.fcselayout-link',
        'fg5': 'application/vnd.fujitsu.oasysgp',
        'fh': 'image/x-freehand',
        'fif': ['application/fractals', 'image/fif'],
        'fig': 'application/x-xfig',
        'fli': ['video/fli', 'video/x-fli'],
        'flo': ['image/florian', 'application/vnd.micrografx.flo'],
        'flr': 'x-world/x-vrml',
        'flv': 'video/x-flv',
        'flw': 'application/vnd.kde.kivio',
        'flx': 'text/vnd.fmi.flexstor',
        'fly': 'text/vnd.fly',
        'fm': 'application/vnd.framemaker',
        'fmf': 'video/x-atomic3d-feature',
        'fnc': 'application/vnd.frogans.fnc',
        'for': ['text/plain', 'text/x-fortran'],
        'fpx': ['image/vnd.fpx', 'image/vnd.net-fpx'],
        'frl': 'application/freeloader',
        'fsc': 'application/vnd.fsc.weblaunch',
        'fst': 'image/vnd.fst',
        'ftc': 'application/vnd.fluxtime.clip',
        'fti': 'application/vnd.anser-web-funds-transfer-initiation',
        'funk': 'audio/make',
        'fvt': 'video/vnd.fvt',
        'fxp': 'application/vnd.adobe.fxp',
        'fzs': 'application/vnd.fuzzysheet',
        'g': 'text/plain',
        'g2w': 'application/vnd.geoplan',
        'g3': 'image/g3fax',
        'g3w': 'application/vnd.geospace',
        'gac': 'application/vnd.groove-account',
        'gdl': 'model/vnd.gdl',
        'geo': 'application/vnd.dynageo',
        'gex': 'application/vnd.geometry-explorer',
        'ggb': 'application/vnd.geogebra.file',
        'ggt': 'application/vnd.geogebra.tool',
        'ghf': 'application/vnd.groove-help',
        'gif': 'image/gif',
        'gim': 'application/vnd.groove-identity-message',
        'gl': ['video/gl', 'video/x-gl'],
        'gmx': 'application/vnd.gmx',
        'gnumeric': 'application/x-gnumeric',
        'gph': 'application/vnd.flographit',
        'gqf': 'application/vnd.grafeq',
        'gram': 'application/srgs',
        'grv': 'application/vnd.groove-injector',
        'grxml': 'application/srgs+xml',
        'gsd': 'audio/x-gsm',
        'gsf': 'application/x-font-ghostscript',
        'gsm': 'audio/x-gsm',
        'gsp': 'application/x-gsp',
        'gss': 'application/x-gss',
        'gtar': 'application/x-gtar',
        'gtm': 'application/vnd.groove-tool-message',
        'gtw': 'model/vnd.gtw',
        'gv': 'text/vnd.graphviz',
        'gxt': 'application/vnd.geonext',
        'gz': ['application/x-gzip', 'application/x-compressed'],
        'gzip': ['multipart/x-gzip', 'application/x-gzip'],
        'h': ['text/plain', 'text/x-h'],
        'h261': 'video/h261',
        'h263': 'video/h263',
        'h264': 'video/h264',
        'hal': 'application/vnd.hal+xml',
        'hbci': 'application/vnd.hbci',
        'hdf': 'application/x-hdf',
        'help': 'application/x-helpfile',
        'hgl': 'application/vnd.hp-hpgl',
        'hh': ['text/plain', 'text/x-h'],
        'hlb': 'text/x-script',
        'hlp': ['application/winhlp', 'application/hlp', 'application/x-helpfile', 'application/x-winhelp'],
        'hpg': 'application/vnd.hp-hpgl',
        'hpgl': 'application/vnd.hp-hpgl',
        'hpid': 'application/vnd.hp-hpid',
        'hps': 'application/vnd.hp-hps',
        'hqx': ['application/mac-binhex40', 'application/binhex', 'application/binhex4', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40'],
        'hta': 'application/hta',
        'htc': 'text/x-component',
        'htke': 'application/vnd.kenameaapp',
        'htm': 'text/html',
        'html': 'text/html',
        'htmls': 'text/html',
        'htt': 'text/webviewhtml',
        'htx': 'text/html',
        'hvd': 'application/vnd.yamaha.hv-dic',
        'hvp': 'application/vnd.yamaha.hv-voice',
        'hvs': 'application/vnd.yamaha.hv-script',
        'i2g': 'application/vnd.intergeo',
        'icc': 'application/vnd.iccprofile',
        'ice': 'x-conference/x-cooltalk',
        'ico': 'image/x-icon',
        'ics': 'text/calendar',
        'idc': 'text/plain',
        'ief': 'image/ief',
        'iefs': 'image/ief',
        'ifm': 'application/vnd.shana.informed.formdata',
        'iges': ['application/iges', 'model/iges'],
        'igl': 'application/vnd.igloader',
        'igm': 'application/vnd.insors.igm',
        'igs': ['application/iges', 'model/iges'],
        'igx': 'application/vnd.micrografx.igx',
        'iif': 'application/vnd.shana.informed.interchange',
        'iii': 'application/x-iphone',
        'ima': 'application/x-ima',
        'imap': 'application/x-httpd-imap',
        'imp': 'application/vnd.accpac.simply.imp',
        'ims': 'application/vnd.ms-ims',
        'inf': 'application/inf',
        'ins': ['application/x-internet-signup', 'application/x-internett-signup'],
        'ip': 'application/x-ip2',
        'ipfix': 'application/ipfix',
        'ipk': 'application/vnd.shana.informed.package',
        'irm': 'application/vnd.ibm.rights-management',
        'irp': 'application/vnd.irepository.package+xml',
        'isp': 'application/x-internet-signup',
        'isu': 'video/x-isvideo',
        'it': 'audio/it',
        'itp': 'application/vnd.shana.informed.formtemplate',
        'iv': 'application/x-inventor',
        'ivp': 'application/vnd.immervision-ivp',
        'ivr': 'i-world/i-vrml',
        'ivu': 'application/vnd.immervision-ivu',
        'ivy': 'application/x-livescreen',
        'jad': 'text/vnd.sun.j2me.app-descriptor',
        'jam': ['application/vnd.jam', 'audio/x-jam'],
        'jar': 'application/java-archive',
        'jav': ['text/plain', 'text/x-java-source'],
        'java': ['text/plain', 'text/x-java-source,java', 'text/x-java-source'],
        'jcm': 'application/x-java-commerce',
        'jfif': ['image/pipeg', 'image/jpeg', 'image/pjpeg'],
        'jfif-tbnl': 'image/jpeg',
        'jisp': 'application/vnd.jisp',
        'jlt': 'application/vnd.hp-jlyt',
        'jnlp': 'application/x-java-jnlp-file',
        'joda': 'application/vnd.joost.joda-archive',
        'jpe': ['image/jpeg', 'image/pjpeg'],
        'jpeg': ['image/jpeg', 'image/pjpeg'],
        'jpg': ['image/jpeg', 'image/pjpeg'],
        'jpgv': 'video/jpeg',
        'jpm': 'video/jpm',
        'jps': 'image/x-jps',
        'js': ['application/javascript', 'application/ecmascript', 'text/javascript', 'text/ecmascript', 'application/x-javascript'],
        'json': 'application/json',
        'jut': 'image/jutvision',
        'kar': ['audio/midi', 'music/x-karaoke'],
        'karbon': 'application/vnd.kde.karbon',
        'kfo': 'application/vnd.kde.kformula',
        'kia': 'application/vnd.kidspiration',
        'kml': 'application/vnd.google-earth.kml+xml',
        'kmz': 'application/vnd.google-earth.kmz',
        'kne': 'application/vnd.kinar',
        'kon': 'application/vnd.kde.kontour',
        'kpr': 'application/vnd.kde.kpresenter',
        'ksh': ['application/x-ksh', 'text/x-script.ksh'],
        'ksp': 'application/vnd.kde.kspread',
        'ktx': 'image/ktx',
        'ktz': 'application/vnd.kahootz',
        'kwd': 'application/vnd.kde.kword',
        'la': ['audio/nspaudio', 'audio/x-nspaudio'],
        'lam': 'audio/x-liveaudio',
        'lasxml': 'application/vnd.las.las+xml',
        'latex': 'application/x-latex',
        'lbd': 'application/vnd.llamagraphics.life-balance.desktop',
        'lbe': 'application/vnd.llamagraphics.life-balance.exchange+xml',
        'les': 'application/vnd.hhe.lesson-player',
        'lha': ['application/octet-stream', 'application/lha', 'application/x-lha'],
        'lhx': 'application/octet-stream',
        'link66': 'application/vnd.route66.link66+xml',
        'list': 'text/plain',
        'lma': ['audio/nspaudio', 'audio/x-nspaudio'],
        'log': 'text/plain',
        'lrm': 'application/vnd.ms-lrm',
        'lsf': 'video/x-la-asf',
        'lsp': ['application/x-lisp', 'text/x-script.lisp'],
        'lst': 'text/plain',
        'lsx': ['video/x-la-asf', 'text/x-la-asf'],
        'ltf': 'application/vnd.frogans.ltf',
        'ltx': 'application/x-latex',
        'lvp': 'audio/vnd.lucent.voice',
        'lwp': 'application/vnd.lotus-wordpro',
        'lzh': ['application/octet-stream', 'application/x-lzh'],
        'lzx': ['application/lzx', 'application/octet-stream', 'application/x-lzx'],
        'm': ['text/plain', 'text/x-m'],
        'm13': 'application/x-msmediaview',
        'm14': 'application/x-msmediaview',
        'm1v': 'video/mpeg',
        'm21': 'application/mp21',
        'm2a': 'audio/mpeg',
        'm2v': 'video/mpeg',
        'm3u': ['audio/x-mpegurl', 'audio/x-mpequrl'],
        'm3u8': 'application/vnd.apple.mpegurl',
        'm4v': 'video/x-m4v',
        'ma': 'application/mathematica',
        'mads': 'application/mads+xml',
        'mag': 'application/vnd.ecowin.chart',
        'man': 'application/x-troff-man',
        'map': 'application/x-navimap',
        'mar': 'text/plain',
        'mathml': 'application/mathml+xml',
        'mbd': 'application/mbedlet',
        'mbk': 'application/vnd.mobius.mbk',
        'mbox': 'application/mbox',
        'mc$': 'application/x-magic-cap-package-1.0',
        'mc1': 'application/vnd.medcalcdata',
        'mcd': ['application/mcad', 'application/vnd.mcd', 'application/x-mathcad'],
        'mcf': ['image/vasa', 'text/mcf'],
        'mcp': 'application/netmc',
        'mcurl': 'text/vnd.curl.mcurl',
        'mdb': 'application/x-msaccess',
        'mdi': 'image/vnd.ms-modi',
        'me': 'application/x-troff-me',
        'meta4': 'application/metalink4+xml',
        'mets': 'application/mets+xml',
        'mfm': 'application/vnd.mfmp',
        'mgp': 'application/vnd.osgeo.mapguide.package',
        'mgz': 'application/vnd.proteus.magazine',
        'mht': 'message/rfc822',
        'mhtml': 'message/rfc822',
        'mid': ['audio/mid', 'audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid'],
        'midi': ['audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid'],
        'mif': ['application/vnd.mif', 'application/x-mif', 'application/x-frame'],
        'mime': ['message/rfc822', 'www/mime'],
        'mj2': 'video/mj2',
        'mjf': 'audio/x-vnd.audioexplosion.mjuicemediafile',
        'mjpg': 'video/x-motion-jpeg',
        'mlp': 'application/vnd.dolby.mlp',
        'mm': ['application/base64', 'application/x-meme'],
        'mmd': 'application/vnd.chipnuts.karaoke-mmd',
        'mme': 'application/base64',
        'mmf': 'application/vnd.smaf',
        'mmr': 'image/vnd.fujixerox.edmics-mmr',
        'mny': 'application/x-msmoney',
        'mod': ['audio/mod', 'audio/x-mod'],
        'mods': 'application/mods+xml',
        'moov': 'video/quicktime',
        'mov': 'video/quicktime',
        'movie': 'video/x-sgi-movie',
        'mp2': ['video/mpeg', 'audio/mpeg', 'video/x-mpeg', 'audio/x-mpeg', 'video/x-mpeq2a'],
        'mp3': ['audio/mpeg', 'audio/mpeg3', 'video/mpeg', 'audio/x-mpeg-3', 'video/x-mpeg'],
        'mp4': ['video/mp4', 'application/mp4'],
        'mp4a': 'audio/mp4',
        'mpa': ['video/mpeg', 'audio/mpeg'],
        'mpc': ['application/vnd.mophun.certificate', 'application/x-project'],
        'mpe': 'video/mpeg',
        'mpeg': 'video/mpeg',
        'mpg': ['video/mpeg', 'audio/mpeg'],
        'mpga': 'audio/mpeg',
        'mpkg': 'application/vnd.apple.installer+xml',
        'mpm': 'application/vnd.blueice.multipass',
        'mpn': 'application/vnd.mophun.application',
        'mpp': 'application/vnd.ms-project',
        'mpt': 'application/x-project',
        'mpv': 'application/x-project',
        'mpv2': 'video/mpeg',
        'mpx': 'application/x-project',
        'mpy': 'application/vnd.ibm.minipay',
        'mqy': 'application/vnd.mobius.mqy',
        'mrc': 'application/marc',
        'mrcx': 'application/marcxml+xml',
        'ms': 'application/x-troff-ms',
        'mscml': 'application/mediaservercontrol+xml',
        'mseq': 'application/vnd.mseq',
        'msf': 'application/vnd.epson.msf',
        'msg': 'application/vnd.ms-outlook',
        'msh': 'model/mesh',
        'msl': 'application/vnd.mobius.msl',
        'msty': 'application/vnd.muvee.style',
        'mts': 'model/vnd.mts',
        'mus': 'application/vnd.musician',
        'musicxml': 'application/vnd.recordare.musicxml+xml',
        'mv': 'video/x-sgi-movie',
        'mvb': 'application/x-msmediaview',
        'mwf': 'application/vnd.mfer',
        'mxf': 'application/mxf',
        'mxl': 'application/vnd.recordare.musicxml',
        'mxml': 'application/xv+xml',
        'mxs': 'application/vnd.triscape.mxs',
        'mxu': 'video/vnd.mpegurl',
        'my': 'audio/make',
        'mzz': 'application/x-vnd.audioexplosion.mzz',
        'n-gage': 'application/vnd.nokia.n-gage.symbian.install',
        'n3': 'text/n3',
        'nap': 'image/naplps',
        'naplps': 'image/naplps',
        'nbp': 'application/vnd.wolfram.player',
        'nc': 'application/x-netcdf',
        'ncm': 'application/vnd.nokia.configuration-message',
        'ncx': 'application/x-dtbncx+xml',
        'ngdat': 'application/vnd.nokia.n-gage.data',
        'nif': 'image/x-niff',
        'niff': 'image/x-niff',
        'nix': 'application/x-mix-transfer',
        'nlu': 'application/vnd.neurolanguage.nlu',
        'nml': 'application/vnd.enliven',
        'nnd': 'application/vnd.noblenet-directory',
        'nns': 'application/vnd.noblenet-sealer',
        'nnw': 'application/vnd.noblenet-web',
        'npx': 'image/vnd.net-fpx',
        'nsc': 'application/x-conference',
        'nsf': 'application/vnd.lotus-notes',
        'nvd': 'application/x-navidoc',
        'nws': 'message/rfc822',
        'o': 'application/octet-stream',
        'oa2': 'application/vnd.fujitsu.oasys2',
        'oa3': 'application/vnd.fujitsu.oasys3',
        'oas': 'application/vnd.fujitsu.oasys',
        'obd': 'application/x-msbinder',
        'oda': 'application/oda',
        'odb': 'application/vnd.oasis.opendocument.database',
        'odc': 'application/vnd.oasis.opendocument.chart',
        'odf': 'application/vnd.oasis.opendocument.formula',
        'odft': 'application/vnd.oasis.opendocument.formula-template',
        'odg': 'application/vnd.oasis.opendocument.graphics',
        'odi': 'application/vnd.oasis.opendocument.image',
        'odm': 'application/vnd.oasis.opendocument.text-master',
        'odp': 'application/vnd.oasis.opendocument.presentation',
        'ods': 'application/vnd.oasis.opendocument.spreadsheet',
        'odt': 'application/vnd.oasis.opendocument.text',
        'oga': 'audio/ogg',
        'ogv': 'video/ogg',
        'ogx': 'application/ogg',
        'omc': 'application/x-omc',
        'omcd': 'application/x-omcdatamaker',
        'omcr': 'application/x-omcregerator',
        'onetoc': 'application/onenote',
        'opf': 'application/oebps-package+xml',
        'org': 'application/vnd.lotus-organizer',
        'osf': 'application/vnd.yamaha.openscoreformat',
        'osfpvg': 'application/vnd.yamaha.openscoreformat.osfpvg+xml',
        'otc': 'application/vnd.oasis.opendocument.chart-template',
        'otf': 'application/x-font-otf',
        'otg': 'application/vnd.oasis.opendocument.graphics-template',
        'oth': 'application/vnd.oasis.opendocument.text-web',
        'oti': 'application/vnd.oasis.opendocument.image-template',
        'otp': 'application/vnd.oasis.opendocument.presentation-template',
        'ots': 'application/vnd.oasis.opendocument.spreadsheet-template',
        'ott': 'application/vnd.oasis.opendocument.text-template',
        'oxt': 'application/vnd.openofficeorg.extension',
        'p': 'text/x-pascal',
        'p10': ['application/pkcs10', 'application/x-pkcs10'],
        'p12': ['application/pkcs-12', 'application/x-pkcs12'],
        'p7a': 'application/x-pkcs7-signature',
        'p7b': 'application/x-pkcs7-certificates',
        'p7c': ['application/pkcs7-mime', 'application/x-pkcs7-mime'],
        'p7m': ['application/pkcs7-mime', 'application/x-pkcs7-mime'],
        'p7r': 'application/x-pkcs7-certreqresp',
        'p7s': ['application/pkcs7-signature', 'application/x-pkcs7-signature'],
        'p8': 'application/pkcs8',
        'par': 'text/plain-bas',
        'part': 'application/pro_eng',
        'pas': 'text/pascal',
        'paw': 'application/vnd.pawaafile',
        'pbd': 'application/vnd.powerbuilder6',
        'pbm': 'image/x-portable-bitmap',
        'pcf': 'application/x-font-pcf',
        'pcl': ['application/vnd.hp-pcl', 'application/x-pcl'],
        'pclxl': 'application/vnd.hp-pclxl',
        'pct': 'image/x-pict',
        'pcurl': 'application/vnd.curl.pcurl',
        'pcx': 'image/x-pcx',
        'pdb': ['application/vnd.palm', 'chemical/x-pdb'],
        'pdf': 'application/pdf',
        'pfa': 'application/x-font-type1',
        'pfr': 'application/font-tdpfr',
        'pfunk': ['audio/make', 'audio/make.my.funk'],
        'pfx': 'application/x-pkcs12',
        'pgm': ['image/x-portable-graymap', 'image/x-portable-greymap'],
        'pgn': 'application/x-chess-pgn',
        'pgp': 'application/pgp-signature',
        'pic': ['image/pict', 'image/x-pict'],
        'pict': 'image/pict',
        'pkg': 'application/x-newton-compatible-pkg',
        'pki': 'application/pkixcmp',
        'pkipath': 'application/pkix-pkipath',
        'pko': ['application/ynd.ms-pkipko', 'application/vnd.ms-pki.pko'],
        'pl': ['text/plain', 'text/x-script.perl'],
        'plb': 'application/vnd.3gpp.pic-bw-large',
        'plc': 'application/vnd.mobius.plc',
        'plf': 'application/vnd.pocketlearn',
        'pls': 'application/pls+xml',
        'plx': 'application/x-pixclscript',
        'pm': ['text/x-script.perl-module', 'image/x-xpixmap'],
        'pm4': 'application/x-pagemaker',
        'pm5': 'application/x-pagemaker',
        'pma': 'application/x-perfmon',
        'pmc': 'application/x-perfmon',
        'pml': ['application/vnd.ctc-posml', 'application/x-perfmon'],
        'pmr': 'application/x-perfmon',
        'pmw': 'application/x-perfmon',
        'png': 'image/png',
        'pnm': ['application/x-portable-anymap', 'image/x-portable-anymap'],
        'portpkg': 'application/vnd.macports.portpkg',
        'pot': ['application/vnd.ms-powerpoint', 'application/mspowerpoint'],
        'potm': 'application/vnd.ms-powerpoint.template.macroenabled.12',
        'potx': 'application/vnd.openxmlformats-officedocument.presentationml.template',
        'pov': 'model/x-pov',
        'ppa': 'application/vnd.ms-powerpoint',
        'ppam': 'application/vnd.ms-powerpoint.addin.macroenabled.12',
        'ppd': 'application/vnd.cups-ppd',
        'ppm': 'image/x-portable-pixmap',
        'pps': ['application/vnd.ms-powerpoint', 'application/mspowerpoint'],
        'ppsm': 'application/vnd.ms-powerpoint.slideshow.macroenabled.12',
        'ppsx': 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
        'ppt': ['application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/powerpoint', 'application/x-mspowerpoint'],
        'pptm': 'application/vnd.ms-powerpoint.presentation.macroenabled.12',
        'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'ppz': 'application/mspowerpoint',
        'prc': 'application/x-mobipocket-ebook',
        'pre': ['application/vnd.lotus-freelance', 'application/x-freelance'],
        'prf': 'application/pics-rules',
        'prt': 'application/pro_eng',
        'ps': 'application/postscript',
        'psb': 'application/vnd.3gpp.pic-bw-small',
        'psd': ['application/octet-stream', 'image/vnd.adobe.photoshop'],
        'psf': 'application/x-font-linux-psf',
        'pskcxml': 'application/pskc+xml',
        'ptid': 'application/vnd.pvi.ptid1',
        'pub': 'application/x-mspublisher',
        'pvb': 'application/vnd.3gpp.pic-bw-var',
        'pvu': 'paleovu/x-pv',
        'pwn': 'application/vnd.3m.post-it-notes',
        'pwz': 'application/vnd.ms-powerpoint',
        'py': 'text/x-script.phyton',
        'pya': 'audio/vnd.ms-playready.media.pya',
        'pyc': 'applicaiton/x-bytecode.python',
        'pyv': 'video/vnd.ms-playready.media.pyv',
        'qam': 'application/vnd.epson.quickanime',
        'qbo': 'application/vnd.intu.qbo',
        'qcp': 'audio/vnd.qcelp',
        'qd3': 'x-world/x-3dmf',
        'qd3d': 'x-world/x-3dmf',
        'qfx': 'application/vnd.intu.qfx',
        'qif': 'image/x-quicktime',
        'qps': 'application/vnd.publishare-delta-tree',
        'qt': 'video/quicktime',
        'qtc': 'video/x-qtc',
        'qti': 'image/x-quicktime',
        'qtif': 'image/x-quicktime',
        'qxd': 'application/vnd.quark.quarkxpress',
        'ra': ['audio/x-realaudio', 'audio/x-pn-realaudio', 'audio/x-pn-realaudio-plugin'],
        'ram': 'audio/x-pn-realaudio',
        'rar': 'application/x-rar-compressed',
        'ras': ['image/cmu-raster', 'application/x-cmu-raster', 'image/x-cmu-raster'],
        'rast': 'image/cmu-raster',
        'rcprofile': 'application/vnd.ipunplugged.rcprofile',
        'rdf': 'application/rdf+xml',
        'rdz': 'application/vnd.data-vision.rdz',
        'rep': 'application/vnd.businessobjects',
        'res': 'application/x-dtbresource+xml',
        'rexx': 'text/x-script.rexx',
        'rf': 'image/vnd.rn-realflash',
        'rgb': 'image/x-rgb',
        'rif': 'application/reginfo+xml',
        'rip': 'audio/vnd.rip',
        'rl': 'application/resource-lists+xml',
        'rlc': 'image/vnd.fujixerox.edmics-rlc',
        'rld': 'application/resource-lists-diff+xml',
        'rm': ['application/vnd.rn-realmedia', 'audio/x-pn-realaudio'],
        'rmi': 'audio/mid',
        'rmm': 'audio/x-pn-realaudio',
        'rmp': ['audio/x-pn-realaudio-plugin', 'audio/x-pn-realaudio'],
        'rms': 'application/vnd.jcp.javame.midlet-rms',
        'rnc': 'application/relax-ng-compact-syntax',
        'rng': ['application/ringing-tones', 'application/vnd.nokia.ringing-tone'],
        'rnx': 'application/vnd.rn-realplayer',
        'roff': 'application/x-troff',
        'rp': 'image/vnd.rn-realpix',
        'rp9': 'application/vnd.cloanto.rp9',
        'rpm': 'audio/x-pn-realaudio-plugin',
        'rpss': 'application/vnd.nokia.radio-presets',
        'rpst': 'application/vnd.nokia.radio-preset',
        'rq': 'application/sparql-query',
        'rs': 'application/rls-services+xml',
        'rsd': 'application/rsd+xml',
        'rt': ['text/richtext', 'text/vnd.rn-realtext'],
        'rtf': ['application/rtf', 'text/richtext', 'application/x-rtf'],
        'rtx': ['text/richtext', 'application/rtf'],
        'rv': 'video/vnd.rn-realvideo',
        's': 'text/x-asm',
        's3m': 'audio/s3m',
        'saf': 'application/vnd.yamaha.smaf-audio',
        'saveme': 'application/octet-stream',
        'sbk': 'application/x-tbook',
        'sbml': 'application/sbml+xml',
        'sc': 'application/vnd.ibm.secure-container',
        'scd': 'application/x-msschedule',
        'scm': ['application/vnd.lotus-screencam', 'video/x-scm', 'text/x-script.guile', 'application/x-lotusscreencam', 'text/x-script.scheme'],
        'scq': 'application/scvp-cv-request',
        'scs': 'application/scvp-cv-response',
        'sct': 'text/scriptlet',
        'scurl': 'text/vnd.curl.scurl',
        'sda': 'application/vnd.stardivision.draw',
        'sdc': 'application/vnd.stardivision.calc',
        'sdd': 'application/vnd.stardivision.impress',
        'sdkm': 'application/vnd.solent.sdkm+xml',
        'sdml': 'text/plain',
        'sdp': ['application/sdp', 'application/x-sdp'],
        'sdr': 'application/sounder',
        'sdw': 'application/vnd.stardivision.writer',
        'sea': ['application/sea', 'application/x-sea'],
        'see': 'application/vnd.seemail',
        'seed': 'application/vnd.fdsn.seed',
        'sema': 'application/vnd.sema',
        'semd': 'application/vnd.semd',
        'semf': 'application/vnd.semf',
        'ser': 'application/java-serialized-object',
        'set': 'application/set',
        'setpay': 'application/set-payment-initiation',
        'setreg': 'application/set-registration-initiation',
        'sfd-hdstx': 'application/vnd.hydrostatix.sof-data',
        'sfs': 'application/vnd.spotfire.sfs',
        'sgl': 'application/vnd.stardivision.writer-global',
        'sgm': ['text/sgml', 'text/x-sgml'],
        'sgml': ['text/sgml', 'text/x-sgml'],
        'sh': ['application/x-shar', 'application/x-bsh', 'application/x-sh', 'text/x-script.sh'],
        'shar': ['application/x-bsh', 'application/x-shar'],
        'shf': 'application/shf+xml',
        'shtml': ['text/html', 'text/x-server-parsed-html'],
        'sid': 'audio/x-psid',
        'sis': 'application/vnd.symbian.install',
        'sit': ['application/x-stuffit', 'application/x-sit'],
        'sitx': 'application/x-stuffitx',
        'skd': 'application/x-koan',
        'skm': 'application/x-koan',
        'skp': ['application/vnd.koan', 'application/x-koan'],
        'skt': 'application/x-koan',
        'sl': 'application/x-seelogo',
        'sldm': 'application/vnd.ms-powerpoint.slide.macroenabled.12',
        'sldx': 'application/vnd.openxmlformats-officedocument.presentationml.slide',
        'slt': 'application/vnd.epson.salt',
        'sm': 'application/vnd.stepmania.stepchart',
        'smf': 'application/vnd.stardivision.math',
        'smi': ['application/smil', 'application/smil+xml'],
        'smil': 'application/smil',
        'snd': ['audio/basic', 'audio/x-adpcm'],
        'snf': 'application/x-font-snf',
        'sol': 'application/solids',
        'spc': ['text/x-speech', 'application/x-pkcs7-certificates'],
        'spf': 'application/vnd.yamaha.smaf-phrase',
        'spl': ['application/futuresplash', 'application/x-futuresplash'],
        'spot': 'text/vnd.in3d.spot',
        'spp': 'application/scvp-vp-response',
        'spq': 'application/scvp-vp-request',
        'spr': 'application/x-sprite',
        'sprite': 'application/x-sprite',
        'src': 'application/x-wais-source',
        'sru': 'application/sru+xml',
        'srx': 'application/sparql-results+xml',
        'sse': 'application/vnd.kodak-descriptor',
        'ssf': 'application/vnd.epson.ssf',
        'ssi': 'text/x-server-parsed-html',
        'ssm': 'application/streamingmedia',
        'ssml': 'application/ssml+xml',
        'sst': ['application/vnd.ms-pkicertstore', 'application/vnd.ms-pki.certstore'],
        'st': 'application/vnd.sailingtracker.track',
        'stc': 'application/vnd.sun.xml.calc.template',
        'std': 'application/vnd.sun.xml.draw.template',
        'step': 'application/step',
        'stf': 'application/vnd.wt.stf',
        'sti': 'application/vnd.sun.xml.impress.template',
        'stk': 'application/hyperstudio',
        'stl': ['application/vnd.ms-pkistl', 'application/sla', 'application/vnd.ms-pki.stl', 'application/x-navistyle'],
        'stm': 'text/html',
        'stp': 'application/step',
        'str': 'application/vnd.pg.format',
        'stw': 'application/vnd.sun.xml.writer.template',
        'sub': 'image/vnd.dvb.subtitle',
        'sus': 'application/vnd.sus-calendar',
        'sv4cpio': 'application/x-sv4cpio',
        'sv4crc': 'application/x-sv4crc',
        'svc': 'application/vnd.dvb.service',
        'svd': 'application/vnd.svd',
        'svf': ['image/vnd.dwg', 'image/x-dwg'],
        'svg': 'image/svg+xml',
        'svr': ['x-world/x-svr', 'application/x-world'],
        'swf': 'application/x-shockwave-flash',
        'swi': 'application/vnd.aristanetworks.swi',
        'sxc': 'application/vnd.sun.xml.calc',
        'sxd': 'application/vnd.sun.xml.draw',
        'sxg': 'application/vnd.sun.xml.writer.global',
        'sxi': 'application/vnd.sun.xml.impress',
        'sxm': 'application/vnd.sun.xml.math',
        'sxw': 'application/vnd.sun.xml.writer',
        't': ['text/troff', 'application/x-troff'],
        'talk': 'text/x-speech',
        'tao': 'application/vnd.tao.intent-module-archive',
        'tar': 'application/x-tar',
        'tbk': ['application/toolbook', 'application/x-tbook'],
        'tcap': 'application/vnd.3gpp2.tcap',
        'tcl': ['text/x-script.tcl', 'application/x-tcl'],
        'tcsh': 'text/x-script.tcsh',
        'teacher': 'application/vnd.smart.teacher',
        'tei': 'application/tei+xml',
        'tex': 'application/x-tex',
        'texi': 'application/x-texinfo',
        'texinfo': 'application/x-texinfo',
        'text': ['application/plain', 'text/plain'],
        'tfi': 'application/thraud+xml',
        'tfm': 'application/x-tex-tfm',
        'tgz': ['application/gnutar', 'application/x-compressed'],
        'thmx': 'application/vnd.ms-officetheme',
        'tif': ['image/tiff', 'image/x-tiff'],
        'tiff': ['image/tiff', 'image/x-tiff'],
        'tmo': 'application/vnd.tmobile-livetv',
        'torrent': 'application/x-bittorrent',
        'tpl': 'application/vnd.groove-tool-template',
        'tpt': 'application/vnd.trid.tpt',
        'tr': 'application/x-troff',
        'tra': 'application/vnd.trueapp',
        'trm': 'application/x-msterminal',
        'tsd': 'application/timestamped-data',
        'tsi': 'audio/tsp-audio',
        'tsp': ['application/dsptype', 'audio/tsplayer'],
        'tsv': 'text/tab-separated-values',
        'ttf': 'application/x-font-ttf',
        'ttl': 'text/turtle',
        'turbot': 'image/florian',
        'twd': 'application/vnd.simtech-mindmapper',
        'txd': 'application/vnd.genomatix.tuxedo',
        'txf': 'application/vnd.mobius.txf',
        'txt': 'text/plain',
        'ufd': 'application/vnd.ufdl',
        'uil': 'text/x-uil',
        'uls': 'text/iuls',
        'umj': 'application/vnd.umajin',
        'uni': 'text/uri-list',
        'unis': 'text/uri-list',
        'unityweb': 'application/vnd.unity',
        'unv': 'application/i-deas',
        'uoml': 'application/vnd.uoml+xml',
        'uri': 'text/uri-list',
        'uris': 'text/uri-list',
        'ustar': ['application/x-ustar', 'multipart/x-ustar'],
        'utz': 'application/vnd.uiq.theme',
        'uu': ['application/octet-stream', 'text/x-uuencode'],
        'uue': 'text/x-uuencode',
        'uva': 'audio/vnd.dece.audio',
        'uvh': 'video/vnd.dece.hd',
        'uvi': 'image/vnd.dece.graphic',
        'uvm': 'video/vnd.dece.mobile',
        'uvp': 'video/vnd.dece.pd',
        'uvs': 'video/vnd.dece.sd',
        'uvu': 'video/vnd.uvvu.mp4',
        'uvv': 'video/vnd.dece.video',
        'vcd': 'application/x-cdlink',
        'vcf': 'text/x-vcard',
        'vcg': 'application/vnd.groove-vcard',
        'vcs': 'text/x-vcalendar',
        'vcx': 'application/vnd.vcx',
        'vda': 'application/vda',
        'vdo': 'video/vdo',
        'vew': 'application/groupwise',
        'vis': 'application/vnd.visionary',
        'viv': ['video/vivo', 'video/vnd.vivo'],
        'vivo': ['video/vivo', 'video/vnd.vivo'],
        'vmd': 'application/vocaltec-media-desc',
        'vmf': 'application/vocaltec-media-file',
        'voc': ['audio/voc', 'audio/x-voc'],
        'vos': 'video/vosaic',
        'vox': 'audio/voxware',
        'vqe': 'audio/x-twinvq-plugin',
        'vqf': 'audio/x-twinvq',
        'vql': 'audio/x-twinvq-plugin',
        'vrml': ['model/vrml', 'x-world/x-vrml', 'application/x-vrml'],
        'vrt': 'x-world/x-vrt',
        'vsd': ['application/vnd.visio', 'application/x-visio'],
        'vsf': 'application/vnd.vsf',
        'vst': 'application/x-visio',
        'vsw': 'application/x-visio',
        'vtu': 'model/vnd.vtu',
        'vxml': 'application/voicexml+xml',
        'w60': 'application/wordperfect6.0',
        'w61': 'application/wordperfect6.1',
        'w6w': 'application/msword',
        'wad': 'application/x-doom',
        'wav': ['audio/wav', 'audio/x-wav'],
        'wax': 'audio/x-ms-wax',
        'wb1': 'application/x-qpro',
        'wbmp': 'image/vnd.wap.wbmp',
        'wbs': 'application/vnd.criticaltools.wbs+xml',
        'wbxml': 'application/vnd.wap.wbxml',
        'wcm': 'application/vnd.ms-works',
        'wdb': 'application/vnd.ms-works',
        'web': 'application/vnd.xara',
        'weba': 'audio/webm',
        'webm': 'video/webm',
        'webp': 'image/webp',
        'wg': 'application/vnd.pmi.widget',
        'wgt': 'application/widget',
        'wiz': 'application/msword',
        'wk1': 'application/x-123',
        'wks': 'application/vnd.ms-works',
        'wm': 'video/x-ms-wm',
        'wma': 'audio/x-ms-wma',
        'wmd': 'application/x-ms-wmd',
        'wmf': ['windows/metafile', 'application/x-msmetafile'],
        'wml': 'text/vnd.wap.wml',
        'wmlc': 'application/vnd.wap.wmlc',
        'wmls': 'text/vnd.wap.wmlscript',
        'wmlsc': 'application/vnd.wap.wmlscriptc',
        'wmv': 'video/x-ms-wmv',
        'wmx': 'video/x-ms-wmx',
        'wmz': 'application/x-ms-wmz',
        'woff': 'application/x-font-woff',
        'word': 'application/msword',
        'wp': 'application/wordperfect',
        'wp5': ['application/wordperfect', 'application/wordperfect6.0'],
        'wp6': 'application/wordperfect',
        'wpd': ['application/wordperfect', 'application/vnd.wordperfect', 'application/x-wpwin'],
        'wpl': 'application/vnd.ms-wpl',
        'wps': 'application/vnd.ms-works',
        'wq1': 'application/x-lotus',
        'wqd': 'application/vnd.wqd',
        'wri': ['application/mswrite', 'application/x-wri', 'application/x-mswrite'],
        'wrl': ['model/vrml', 'x-world/x-vrml', 'application/x-world'],
        'wrz': ['model/vrml', 'x-world/x-vrml'],
        'wsc': 'text/scriplet',
        'wsdl': 'application/wsdl+xml',
        'wspolicy': 'application/wspolicy+xml',
        'wsrc': 'application/x-wais-source',
        'wtb': 'application/vnd.webturbo',
        'wtk': 'application/x-wintalk',
        'wvx': 'video/x-ms-wvx',
        'x-png': 'image/png',
        'x3d': 'application/vnd.hzn-3d-crossword',
        'xaf': 'x-world/x-vrml',
        'xap': 'application/x-silverlight-app',
        'xar': 'application/vnd.xara',
        'xbap': 'application/x-ms-xbap',
        'xbd': 'application/vnd.fujixerox.docuworks.binder',
        'xbm': ['image/xbm', 'image/x-xbm', 'image/x-xbitmap'],
        'xdf': 'application/xcap-diff+xml',
        'xdm': 'application/vnd.syncml.dm+xml',
        'xdp': 'application/vnd.adobe.xdp+xml',
        'xdr': 'video/x-amt-demorun',
        'xdssc': 'application/dssc+xml',
        'xdw': 'application/vnd.fujixerox.docuworks',
        'xenc': 'application/xenc+xml',
        'xer': 'application/patch-ops-error+xml',
        'xfdf': 'application/vnd.adobe.xfdf',
        'xfdl': 'application/vnd.xfdl',
        'xgz': 'xgl/drawing',
        'xhtml': 'application/xhtml+xml',
        'xif': 'image/vnd.xiff',
        'xl': 'application/excel',
        'xla': ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel'],
        'xlam': 'application/vnd.ms-excel.addin.macroenabled.12',
        'xlb': ['application/excel', 'application/vnd.ms-excel', 'application/x-excel'],
        'xlc': ['application/vnd.ms-excel', 'application/excel', 'application/x-excel'],
        'xld': ['application/excel', 'application/x-excel'],
        'xlk': ['application/excel', 'application/x-excel'],
        'xll': ['application/excel', 'application/vnd.ms-excel', 'application/x-excel'],
        'xlm': ['application/vnd.ms-excel', 'application/excel', 'application/x-excel'],
        'xls': ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel'],
        'xlsb': 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
        'xlsm': 'application/vnd.ms-excel.sheet.macroenabled.12',
        'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'xlt': ['application/vnd.ms-excel', 'application/excel', 'application/x-excel'],
        'xltm': 'application/vnd.ms-excel.template.macroenabled.12',
        'xltx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        'xlv': ['application/excel', 'application/x-excel'],
        'xlw': ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel'],
        'xm': 'audio/xm',
        'xml': ['application/xml', 'text/xml', 'application/atom+xml', 'application/rss+xml'],
        'xmz': 'xgl/movie',
        'xo': 'application/vnd.olpc-sugar',
        'xof': 'x-world/x-vrml',
        'xop': 'application/xop+xml',
        'xpi': 'application/x-xpinstall',
        'xpix': 'application/x-vnd.ls-xpix',
        'xpm': ['image/xpm', 'image/x-xpixmap'],
        'xpr': 'application/vnd.is-xpr',
        'xps': 'application/vnd.ms-xpsdocument',
        'xpw': 'application/vnd.intercon.formnet',
        'xslt': 'application/xslt+xml',
        'xsm': 'application/vnd.syncml+xml',
        'xspf': 'application/xspf+xml',
        'xsr': 'video/x-amt-showrun',
        'xul': 'application/vnd.mozilla.xul+xml',
        'xwd': ['image/x-xwd', 'image/x-xwindowdump'],
        'xyz': ['chemical/x-xyz', 'chemical/x-pdb'],
        'yang': 'application/yang',
        'yin': 'application/yin+xml',
        'z': ['application/x-compressed', 'application/x-compress'],
        'zaz': 'application/vnd.zzazz.deck+xml',
        'zip': ['application/zip', 'multipart/x-zip', 'application/x-zip-compressed', 'application/x-compressed'],
        'zir': 'application/vnd.zul',
        'zmm': 'application/vnd.handheld-entertainment+xml',
        'zoo': 'application/octet-stream',
        'zsh': 'text/x-script.zsh'
    };

    return {
        detectExtension: detectExtension,
        detectMimeType: detectMimeType
    };
}));

// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    var encoding;

    if (false) {
        // amd for browser
        define(['emailjs-stringencoding'], function(encoding) {
            return factory(encoding.TextEncoder, encoding.TextDecoder, root.btoa);
        });
    } else if (false && typeof navigator !== 'undefined') {
        // common.js for browser
        encoding = global['emailjs-stringencoding'];
        module.exports = factory(encoding.TextEncoder, encoding.TextDecoder, root.btoa);
    } else if (false) {
        // common.js for node.js
        encoding = global['emailjs-stringencoding'];
        module.exports = factory(encoding.TextEncoder, encoding.TextDecoder, function(str) {
            var NodeBuffer = Buffer;
            return new NodeBuffer(str, 'binary').toString("base64");
        });
    } else {
        // global for browser
        root['emailjs-mime-codec'] = factory(root.TextEncoder, root.TextDecoder, root.btoa);
    }
}(this, function(TextEncoder, TextDecoder, btoa) {
    'use strict';

    btoa = btoa || base64Encode;

    var mimecodec = {
        /**
         * Encodes all non printable and non ascii bytes to =XX form, where XX is the
         * byte value in hex. This function does not convert linebreaks etc. it
         * only escapes character sequences
         *
         * @param {String|Uint8Array} data Either a string or an Uint8Array
         * @param {String} [fromCharset='UTF-8'] Source encoding
         * @return {String} Mime encoded string
         */
        mimeEncode: function(data, fromCharset) {
            fromCharset = fromCharset || 'UTF-8';

            var buffer = mimecodec.charset.convert(data || '', fromCharset),
                ranges = [
                    // https://tools.ietf.org/html/rfc2045#section-6.7
                    [0x09], // <TAB>
                    [0x0A], // <LF>
                    [0x0D], // <CR>
                    [0x20, 0x3C], // <SP>!"#$%&'()*+,-./0123456789:;
                    [0x3E, 0x7E] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
                ],
                result = '',
                ord;

            for (var i = 0, len = buffer.length; i < len; i++) {
                ord = buffer[i];
                // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line
                if (mimecodec._checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {
                    result += String.fromCharCode(ord);
                    continue;
                }
                result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();
            }

            return result;
        },

        /**
         * Decodes mime encoded string to an unicode string
         *
         * @param {String} str Mime encoded string
         * @param {String} [fromCharset='UTF-8'] Source encoding
         * @return {String} Decoded unicode string
         */
        mimeDecode: function(str, fromCharset) {
            str = (str || '').toString();

            fromCharset = fromCharset || 'UTF-8';

            var encodedBytesCount = (str.match(/\=[\da-fA-F]{2}/g) || []).length,
                bufferLength = str.length - encodedBytesCount * 2,
                chr, hex,
                buffer = new Uint8Array(bufferLength),
                bufferPos = 0;

            for (var i = 0, len = str.length; i < len; i++) {
                chr = str.charAt(i);
                if (chr === '=' && (hex = str.substr(i + 1, 2)) && /[\da-fA-F]{2}/.test(hex)) {
                    buffer[bufferPos++] = parseInt(hex, 16);
                    i += 2;
                    continue;
                }
                buffer[bufferPos++] = chr.charCodeAt(0);
            }

            return mimecodec.charset.decode(buffer, fromCharset);
        },

        /**
         * Encodes a string or an typed array of given charset into unicode
         * base64 string. Also adds line breaks
         *
         * @param {String|Uint8Array} data String to be base64 encoded
         * @param {String} [fromCharset='UTF-8']
         * @return {String} Base64 encoded string
         */
        base64Encode: function(data, fromCharset) {
            var buf, b64;

            if (fromCharset !== 'binary' && typeof data !== 'string') {
                buf = mimecodec.charset.convert(data || '', fromCharset);
            } else {
                buf = data;
            }

            b64 = mimecodec.base64.encode(buf);
            return mimecodec._addSoftLinebreaks(b64, 'base64');
        },

        /**
         * Decodes a base64 string of any charset into an unicode string
         *
         * @param {String} str Base64 encoded string
         * @param {String} [fromCharset='UTF-8'] Original charset of the base64 encoded string
         * @return {String} Decoded unicode string
         */
        base64Decode: function(str, fromCharset) {
            var buf = mimecodec.base64.decode(str || '', 'buffer');
            return mimecodec.charset.decode(buf, fromCharset);
        },

        /**
         * Encodes a string or an Uint8Array into a quoted printable encoding
         * This is almost the same as mimeEncode, except line breaks will be changed
         * as well to ensure that the lines are never longer than allowed length
         *
         * @param {String|Uint8Array} data String or an Uint8Array to mime encode
         * @param {String} [fromCharset='UTF-8'] Original charset of the string
         * @return {String} Mime encoded string
         */
        quotedPrintableEncode: function(data, fromCharset) {
            var mimeEncodedStr = mimecodec.mimeEncode(data, fromCharset);

            mimeEncodedStr = mimeEncodedStr.
                // fix line breaks, ensure <CR><LF>
            replace(/\r?\n|\r/g, '\r\n').
                // replace spaces in the end of lines
            replace(/[\t ]+$/gm, function(spaces) {
                return spaces.replace(/ /g, '=20').replace(/\t/g, '=09');
            });

            // add soft line breaks to ensure line lengths sjorter than 76 bytes
            return mimecodec._addSoftLinebreaks(mimeEncodedStr, 'qp');
        },

        /**
         * Decodes a string from a quoted printable encoding. This is almost the
         * same as mimeDecode, except line breaks will be changed as well
         *
         * @param {String} str Mime encoded string to decode
         * @param {String} [fromCharset='UTF-8'] Original charset of the string
         * @return {String} Mime decoded string
         */
        quotedPrintableDecode: function(str, fromCharset) {
            str = (str || '').toString();

            str = str.
                // remove invalid whitespace from the end of lines
            replace(/[\t ]+$/gm, '').
                // remove soft line breaks
            replace(/\=(?:\r?\n|$)/g, '');

            return mimecodec.mimeDecode(str, fromCharset);
        },

        /**
         * Encodes a string or an Uint8Array to an UTF-8 MIME Word (rfc2047)
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
         * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {String} Single or several mime words joined together
         */
        mimeWordEncode: function(data, mimeWordEncoding, maxLength, fromCharset) {
            mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);

            if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {
                fromCharset = maxLength;
                maxLength = undefined;
            }

            maxLength = maxLength || 0;

            var encodedStr,
                toCharset = 'UTF-8',
                i, len, parts;

            if (maxLength && maxLength > 7 + toCharset.length) {
                maxLength -= (7 + toCharset.length);
            }

            if (mimeWordEncoding === 'Q') {
                encodedStr = mimecodec.mimeEncode(data, fromCharset);
                // https://tools.ietf.org/html/rfc2047#section-5 rule (3)
                encodedStr = encodedStr.replace(/[^a-z0-9!*+\-\/=]/ig, function(chr) {
                    var code = chr.charCodeAt(0);
                    if(chr === ' '){
                        return '_';
                    }else{
                        return '=' + (code < 0x10 ? '0' : '') + code.toString(16).toUpperCase();
                    }
                });
            } else if (mimeWordEncoding === 'B') {
                encodedStr = typeof data === 'string' ? data : mimecodec.decode(data, fromCharset);
                maxLength = Math.max(3, (maxLength - maxLength % 4) / 4 * 3);
            }

            if (maxLength && encodedStr.length > maxLength) {
                if (mimeWordEncoding === 'Q') {
                    encodedStr = mimecodec._splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
                } else {

                    // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences
                    parts = [];
                    for (i = 0, len = encodedStr.length; i < len; i += maxLength) {
                        parts.push(mimecodec.base64.encode(encodedStr.substr(i, maxLength)));
                    }

                    if (parts.length > 1) {
                        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?') + '?=';
                    } else {
                        encodedStr = parts.join('');
                    }
                }
            } else if (mimeWordEncoding === 'B') {
                encodedStr = mimecodec.base64.encode(encodedStr);
            }

            return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');
        },

        /**
         * Finds word sequences with non ascii text and converts these to mime words
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
         * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {String} String with possible mime words
         */
        mimeWordsEncode: function(data, mimeWordEncoding, maxLength, fromCharset) {
            if (!fromCharset && typeof maxLength === 'string' && !maxLength.match(/^[0-9]+$/)) {
                fromCharset = maxLength;
                maxLength = undefined;
            }

            maxLength = maxLength || 0;

            var decodedValue = mimecodec.charset.decode(mimecodec.charset.convert((data || ''), fromCharset)),
                encodedValue;

            encodedValue = decodedValue.replace(/([^\s\u0080-\uFFFF]*[\u0080-\uFFFF]+[^\s\u0080-\uFFFF]*(?:\s+[^\s\u0080-\uFFFF]*[\u0080-\uFFFF]+[^\s\u0080-\uFFFF]*\s*)?)+/g, function(match) {
                return match.length ? mimecodec.mimeWordEncode(match, mimeWordEncoding || 'Q', maxLength) : '';
            });

            return encodedValue;
        },

        /**
         * Decode a complete mime word encoded string
         *
         * @param {String} str Mime word encoded string
         * @return {String} Decoded unicode string
         */
        mimeWordDecode: function(str) {
            str = (str || '').toString().trim();

            var fromCharset, encoding, match;

            match = str.match(/^\=\?([\w_\-\*]+)\?([QqBb])\?([^\?]+)\?\=$/i);
            if (!match) {
                return str;
            }

            // RFC2231 added language tag to the encoding
            // see: https://tools.ietf.org/html/rfc2231#section-5
            // this implementation silently ignores this tag
            fromCharset = match[1].split('*').shift();

            encoding = (match[2] || 'Q').toString().toUpperCase();
            str = (match[3] || '').replace(/_/g, ' ');

            if (encoding === 'B') {
                return mimecodec.base64Decode(str, fromCharset);
            } else if (encoding === 'Q') {
                return mimecodec.mimeDecode(str, fromCharset);
            } else {
                return str;
            }

        },

        /**
         * Decode a string that might include one or several mime words
         *
         * @param {String} str String including some mime words that will be encoded
         * @return {String} Decoded unicode string
         */
        mimeWordsDecode: function(str) {
            str = (str || '').toString();
            str = str.
            replace(/(=\?[^?]+\?[QqBb]\?[^?]+\?=)\s+(?==\?[^?]+\?[QqBb]\?[^?]+\?=)/g, '$1').
            replace(/\=\?([\w_\-\*]+)\?([QqBb])\?[^\?]+\?\=/g, function(mimeWord) {
                return mimecodec.mimeWordDecode(mimeWord);
            });

            return str;
        },

        /**
         * Folds long lines, useful for folding header lines (afterSpace=false) and
         * flowed text (afterSpace=true)
         *
         * @param {String} str String to be folded
         * @param {Number} [lineLengthMax=76] Maximum length of a line
         * @param {Boolean} afterSpace If true, leave a space in th end of a line
         * @return {String} String with folded lines
         */
        foldLines: function(str, lineLengthMax, afterSpace) {
            str = (str || '').toString();
            lineLengthMax = lineLengthMax || 76;

            var pos = 0,
                len = str.length,
                result = '',
                line, match;

            while (pos < len) {
                line = str.substr(pos, lineLengthMax);
                if (line.length < lineLengthMax) {
                    result += line;
                    break;
                }
                if ((match = line.match(/^[^\n\r]*(\r?\n|\r)/))) {
                    line = match[0];
                    result += line;
                    pos += line.length;
                    continue;
                } else if ((match = line.match(/(\s+)[^\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {
                    line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));
                } else if ((match = str.substr(pos + line.length).match(/^[^\s]+(\s*)/))) {
                    line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));
                }

                result += line;
                pos += line.length;
                if (pos < len) {
                    result += '\r\n';
                }
            }

            return result;
        },

        /**
         * Encodes and folds a header line for a MIME message header.
         * Shorthand for mimeWordsEncode + foldLines
         *
         * @param {String} key Key name, will not be encoded
         * @param {String|Uint8Array} value Value to be encoded
         * @param {String} [fromCharset='UTF-8'] Character set of the value
         * @return {String} encoded and folded header line
         */
        headerLineEncode: function(key, value, fromCharset) {
            var encodedValue = mimecodec.mimeWordsEncode(value, 'Q', 52, fromCharset);
            return mimecodec.foldLines(key + ': ' + encodedValue, 76);
        },

        /**
         * Splits a string by :
         * The result is not mime word decoded, you need to do your own decoding based
         * on the rules for the specific header key
         *
         * @param {String} headerLine Single header line, might include linebreaks as well if folded
         * @return {Object} And object of {key, value}
         */
        headerLineDecode: function(headerLine) {
            var line = (headerLine || '').toString().replace(/(?:\r?\n|\r)[ \t]*/g, ' ').trim(),
                match = line.match(/^\s*([^:]+):(.*)$/),
                key = (match && match[1] || '').trim(),
                value = (match && match[2] || '').trim();

            return {
                key: key,
                value: value
            };
        },

        /**
         * Parses a block of header lines. Does not decode mime words as every
         * header might have its own rules (eg. formatted email addresses and such)
         *
         * @param {String} headers Headers string
         * @return {Object} An object of headers, where header keys are object keys. NB! Several values with the same key make up an Array
         */
        headerLinesDecode: function(headers) {
            var lines = headers.split(/\r?\n|\r/),
                headersObj = {},
                key, value,
                header,
                i, len;

            for (i = lines.length - 1; i >= 0; i--) {
                if (i && lines[i].match(/^\s/)) {
                    lines[i - 1] += '\r\n' + lines[i];
                    lines.splice(i, 1);
                }
            }

            for (i = 0, len = lines.length; i < len; i++) {
                header = mimecodec.headerLineDecode(lines[i]);
                key = (header.key || '').toString().toLowerCase().trim();
                value = header.value || '';

                if (!headersObj[key]) {
                    headersObj[key] = value;
                } else {
                    headersObj[key] = [].concat(headersObj[key], value);
                }
            }

            return headersObj;
        },

        /**
         * Converts 'binary' string to an Uint8Array
         *
         * @param {String} 'binary' string
         * @return {Uint8Array} Octet stream buffer
         */
        toTypedArray: function(binaryString) {
            var buf = new Uint8Array(binaryString.length);
            for (var i = 0, len = binaryString.length; i < len; i++) {
                buf[i] = binaryString.charCodeAt(i);
            }
            return buf;
        },

        /**
         * Converts an Uint8Array to 'binary' string
         *
         * @param {Uint8Array} buf Octet stream buffer
         * @return {String} 'binary' string
         */
        fromTypedArray: function(buf) {
            var i, l;

            // ensure the value is a Uint8Array, not ArrayBuffer if used
            if (!buf.buffer) {
                buf = new Uint8Array(buf);
            }

            var sbits = new Array(buf.length);
            for (i = 0, l = buf.length; i < l; i++) {
                sbits[i] = String.fromCharCode(buf[i]);
            }

            return sbits.join('');
        },

        /**
         * Parses a header value with key=value arguments into a structured
         * object.
         *
         *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->
         *   {
         *     'value': 'text/plain',
         *     'params': {
         *       'charset': 'UTF-8'
         *     }
         *   }
         *
         * @param {String} str Header value
         * @return {Object} Header value as a parsed structure
         */
        parseHeaderValue: function(str) {
            var response = {
                    value: false,
                    params: {}
                },
                key = false,
                value = '',
                type = 'value',
                quote = false,
                escaped = false,
                chr;

            for (var i = 0, len = str.length; i < len; i++) {
                chr = str.charAt(i);
                if (type === 'key') {
                    if (chr === '=') {
                        key = value.trim().toLowerCase();
                        type = 'value';
                        value = '';
                        continue;
                    }
                    value += chr;
                } else {
                    if (escaped) {
                        value += chr;
                    } else if (chr === '\\') {
                        escaped = true;
                        continue;
                    } else if (quote && chr === quote) {
                        quote = false;
                    } else if (!quote && chr === '"') {
                        quote = chr;
                    } else if (!quote && chr === ';') {
                        if (key === false) {
                            response.value = value.trim();
                        } else {
                            response.params[key] = value.trim();
                        }
                        type = 'key';
                        value = '';
                    } else {
                        value += chr;
                    }
                    escaped = false;

                }
            }

            if (type === 'value') {
                if (key === false) {
                    response.value = value.trim();
                } else {
                    response.params[key] = value.trim();
                }
            } else if (value.trim()) {
                response.params[value.trim().toLowerCase()] = '';
            }

            // handle parameter value continuations
            // https://tools.ietf.org/html/rfc2231#section-3

            // preprocess values
            Object.keys(response.params).forEach(function(key) {
                var actualKey, nr, match, value;
                if ((match = key.match(/(\*(\d+)|\*(\d+)\*|\*)$/))) {
                    actualKey = key.substr(0, match.index);
                    nr = Number(match[2] || match[3]) || 0;

                    if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {
                        response.params[actualKey] = {
                            charset: false,
                            values: []
                        };
                    }

                    value = response.params[key];

                    if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {
                        response.params[actualKey].charset = match[1] || 'iso-8859-1';
                        value = match[2];
                    }

                    response.params[actualKey].values[nr] = value;

                    // remove the old reference
                    delete response.params[key];
                }
            });

            // concatenate split rfc2231 strings and convert encoded strings to mime encoded words
            Object.keys(response.params).forEach(function(key) {
                var value;
                if (response.params[key] && Array.isArray(response.params[key].values)) {
                    value = response.params[key].values.map(function(val) {
                        return val || '';
                    }).join('');

                    if (response.params[key].charset) {
                        // convert "%AB" to "=?charset?Q?=AB?="
                        response.params[key] = '=?' +
                            response.params[key].charset +
                            '?Q?' +
                            value.
                            // fix invalidly encoded chars
                        replace(/[=\?_\s]/g, function(s) {
                                var c = s.charCodeAt(0).toString(16);
                                if (s === ' ') {
                                    return '_';
                                } else {
                                    return '%' + (c.length < 2 ? '0' : '') + c;
                                }
                            }).
                            // change from urlencoding to percent encoding
                        replace(/%/g, '=') +
                            '?=';
                    } else {
                        response.params[key] = value;
                    }
                }
            }.bind(this));

            return response;
        },

        /**
         * Encodes a string or an Uint8Array to an UTF-8 Parameter Value Continuation encoding (rfc2231)
         * Useful for splitting long parameter values.
         *
         * For example
         *      title="unicode string"
         * becomes
         *     title*0*="utf-8''unicode"
         *     title*1*="%20string"
         *
         * @param {String|Uint8Array} data String to be encoded
         * @param {Number} [maxLength=50] Max length for generated chunks
         * @param {String} [fromCharset='UTF-8'] Source sharacter set
         * @return {Array} A list of encoded keys and headers
         */
        continuationEncode: function(key, data, maxLength, fromCharset) {
            var list = [];
            var encodedStr = typeof data === 'string' ? data : mimecodec.decode(data, fromCharset);
            var chr;
            var line;
            var startPos = 0;
            var isEncoded = false;

            maxLength = maxLength || 50;

            // process ascii only text
            if (/^[\w.\- ]*$/.test(data)) {

                // check if conversion is even needed
                if (encodedStr.length <= maxLength) {
                    return [{
                        key: key,
                        value: /[\s";=]/.test(encodedStr) ? '"' + encodedStr + '"' : encodedStr
                    }];
                }

                encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), function(str) {
                    list.push({
                        line: str
                    });
                    return '';
                });

                if (encodedStr) {
                    list.push({
                        line: encodedStr
                    });
                }

            } else {

                // first line includes the charset and language info and needs to be encoded
                // even if it does not contain any unicode characters
                line = 'utf-8\'\'';
                isEncoded = true;
                startPos = 0;
                // process text with unicode or special chars
                for (var i = 0, len = encodedStr.length; i < len; i++) {

                    chr = encodedStr[i];

                    if (isEncoded) {
                        chr = encodeURIComponent(chr);
                    } else {
                        // try to urlencode current char
                        chr = chr === ' ' ? chr : encodeURIComponent(chr);
                        // By default it is not required to encode a line, the need
                        // only appears when the string contains unicode or special chars
                        // in this case we start processing the line over and encode all chars
                        if (chr !== encodedStr[i]) {
                            // Check if it is even possible to add the encoded char to the line
                            // If not, there is no reason to use this line, just push it to the list
                            // and start a new line with the char that needs encoding
                            if ((encodeURIComponent(line) + chr).length >= maxLength) {
                                list.push({
                                    line: line,
                                    encoded: isEncoded
                                });
                                line = '';
                                startPos = i - 1;
                            } else {
                                isEncoded = true;
                                i = startPos;
                                line = '';
                                continue;
                            }
                        }
                    }

                    // if the line is already too long, push it to the list and start a new one
                    if ((line + chr).length >= maxLength) {
                        list.push({
                            line: line,
                            encoded: isEncoded
                        });
                        line = chr = encodedStr[i] === ' ' ? ' ' : encodeURIComponent(encodedStr[i]);
                        if (chr === encodedStr[i]) {
                            isEncoded = false;
                            startPos = i - 1;
                        } else {
                            isEncoded = true;
                        }
                    } else {
                        line += chr;
                    }
                }

                if (line) {
                    list.push({
                        line: line,
                        encoded: isEncoded
                    });
                }
            }

            return list.map(function(item, i) {
                return {
                    // encoded lines: {name}*{part}*
                    // unencoded lines: {name}*{part}
                    // if any line needs to be encoded then the first line (part==0) is always encoded
                    key: key + '*' + i + (item.encoded ? '*' : ''),
                    value: /[\s";=]/.test(item.line) ? '"' + item.line + '"' : item.line
                };
            });
        },

        /**
         * Splits a mime encoded string. Needed for dividing mime words into smaller chunks
         *
         * @param {String} str Mime encoded string to be split up
         * @param {Number} maxlen Maximum length of characters for one part (minimum 12)
         * @return {Array} Split string
         */
        _splitMimeEncodedString: function(str, maxlen) {
            var curLine, match, chr, done,
                lines = [];

            // require at least 12 symbols to fit possible 4 octet UTF-8 sequences
            maxlen = Math.max(maxlen || 0, 12);

            while (str.length) {
                curLine = str.substr(0, maxlen);

                // move incomplete escaped char back to main
                if ((match = curLine.match(/\=[0-9A-F]?$/i))) {
                    curLine = curLine.substr(0, match.index);
                }

                done = false;
                while (!done) {
                    done = true;
                    // check if not middle of a unicode char sequence
                    if ((match = str.substr(curLine.length).match(/^\=([0-9A-F]{2})/i))) {
                        chr = parseInt(match[1], 16);
                        // invalid sequence, move one char back anc recheck
                        if (chr < 0xC2 && chr > 0x7F) {
                            curLine = curLine.substr(0, curLine.length - 3);
                            done = false;
                        }
                    }
                }

                if (curLine.length) {
                    lines.push(curLine);
                }
                str = str.substr(curLine.length);
            }

            return lines;
        },

        /**
         * Adds soft line breaks (the ones that will be stripped out when decoding) to
         * ensure that no line in the message is never longer than 76 symbols
         *
         * Lines can't be longer than 76 + <CR><LF> = 78 bytes
         * http://tools.ietf.org/html/rfc2045#section-6.7
         *
         * @param {String} str Encoded string
         * @param {String} encoding Either "qp" or "base64" (the default)
         * @return {String} String with forced line breaks
         */
        _addSoftLinebreaks: function(str, encoding) {
            var lineLengthMax = 76;

            encoding = (encoding || 'base64').toString().toLowerCase().trim();

            if (encoding === 'qp') {
                return mimecodec._addQPSoftLinebreaks(str, lineLengthMax);
            } else {
                return mimecodec._addBase64SoftLinebreaks(str, lineLengthMax);
            }
        },

        /**
         * Adds soft line breaks (the ones that will be stripped out when decoding base64) to
         * ensure that no line in the message is never longer than lineLengthMax
         *
         * @param {String} base64EncodedStr String in BASE64 encoding
         * @param {Number} lineLengthMax Maximum length of a line
         * @return {String} String with forced line breaks
         */
        _addBase64SoftLinebreaks: function(base64EncodedStr, lineLengthMax) {
            base64EncodedStr = (base64EncodedStr || '').toString().trim();
            return base64EncodedStr.replace(new RegExp('.{' + lineLengthMax + '}', 'g'), '$&\r\n').trim();
        },

        /**
         * Adds soft line breaks(the ones that will be stripped out when decoding QP) to * ensure that no line in the message is never longer than lineLengthMax * * Not sure of how and why this works, but at least it seems to be working: /
         *
         * @param {String} qpEncodedStr String in Quoted-Printable encoding
         * @param {Number} lineLengthMax Maximum length of a line
         * @return {String} String with forced line breaks
         */
        _addQPSoftLinebreaks: function(qpEncodedStr, lineLengthMax) {
            qpEncodedStr = (qpEncodedStr || '').toString();

            lineLengthMax = lineLengthMax || 76;

            var pos = 0,
                len = qpEncodedStr.length,
                match, code, line,
                lineMargin = Math.floor(lineLengthMax / 3),
                result = '';

            // insert soft linebreaks where needed
            while (pos < len) {
                line = qpEncodedStr.substr(pos, lineLengthMax);
                if ((match = line.match(/\r\n/))) {
                    line = line.substr(0, match.index + match[0].length);
                    result += line;
                    pos += line.length;
                    continue;
                }

                if (line.substr(-1) === '\n') {
                    // nothing to change here
                    result += line;
                    pos += line.length;
                    continue;
                } else if ((match = line.substr(-lineMargin).match(/\n.*?$/))) {
                    // truncate to nearest line break
                    line = line.substr(0, line.length - (match[0].length - 1));
                    result += line;
                    pos += line.length;
                    continue;
                } else if (line.length > lineLengthMax - lineMargin && (match = line.substr(-lineMargin).match(/[ \t\.,!\?][^ \t\.,!\?]*$/))) {
                    // truncate to nearest space
                    line = line.substr(0, line.length - (match[0].length - 1));
                } else if (line.substr(-1) === '\r') {
                    line = line.substr(0, line.length - 1);
                } else {
                    if (line.match(/\=[\da-f]{0,2}$/i)) {

                        // push incomplete encoding sequences to the next line
                        if ((match = line.match(/\=[\da-f]{0,1}$/i))) {
                            line = line.substr(0, line.length - match[0].length);
                        }

                        // ensure that utf-8 sequences are not split
                        while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\da-f]{2}){1,4}$/i) && (match = line.match(/\=[\da-f]{2}$/ig))) {
                            code = parseInt(match[0].substr(1, 2), 16);
                            if (code < 128) {
                                break;
                            }

                            line = line.substr(0, line.length - 3);

                            if (code >= 0xC0) {
                                break;
                            }
                        }

                    }
                }

                if (pos + line.length < len && line.substr(-1) !== '\n') {
                    if (line.length === lineLengthMax && line.match(/\=[\da-f]{2}$/i)) {
                        line = line.substr(0, line.length - 3);
                    } else if (line.length === lineLengthMax) {
                        line = line.substr(0, line.length - 1);
                    }
                    pos += line.length;
                    line += '=\r\n';
                } else {
                    pos += line.length;
                }

                result += line;
            }

            return result;
        },

        /**
         * Checks if a number is in specified ranges or not
         *
         * @param {Number} nr Number to check for
         * @ranges {Array} ranges Array of range duples
         * @return {Boolean} Returns true, if nr was found to be at least one of the specified ranges
         */
        _checkRanges: function(nr, ranges) {
            for (var i = ranges.length - 1; i >= 0; i--) {
                if (!ranges[i].length) {
                    continue;
                }
                if (ranges[i].length === 1 && nr === ranges[i][0]) {
                    return true;
                }
                if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {
                    return true;
                }
            }
            return false;
        }
    };

    /**
     * Character set encoding and decoding functions
     */
    mimecodec.charset = {

        /**
         * Encodes an unicode string into an Uint8Array object as UTF-8
         *
         * TextEncoder only supports unicode encodings (utf-8, utf16le/be) but no other,
         * so we force UTF-8 here.
         *
         * @param {String} str String to be encoded
         * @return {Uint8Array} UTF-8 encoded typed array
         */
        encode: function(str) {
            return new TextEncoder('UTF-8').encode(str);
        },

        /**
         * Decodes a string from Uint8Array to an unicode string using specified encoding
         *
         * @param {Uint8Array} buf Binary data to be decoded
         * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset
         * @return {String} Decded string
         */
        decode: function(buf, fromCharset) {
            fromCharset = mimecodec.charset.normalizeCharset(fromCharset || 'UTF-8');

            // ensure the value is a Uint8Array, not ArrayBuffer if used
            if (!buf.buffer) {
                buf = new Uint8Array(buf);
            }

            try {
                return new TextDecoder(fromCharset).decode(buf);
            } catch (E) {
                try {
                    return new TextDecoder('utf-8', {
                        fatal: true // if the input is not a valid utf-8 the decoder will throw
                    }).decode(buf);
                } catch (E) {
                    try {
                        return new TextDecoder('iso-8859-15').decode(buf);
                    } catch (E) {
                        // should not happen as there is something matching for every byte (non character bytes are allowed)
                        return mimecodec.fromTypedArray(buf);
                    }
                }
            }

        },

        /**
         * Convert a string from specific encoding to UTF-8 Uint8Array
         *
         * @param {String|Uint8Array} str String to be encoded
         * @param {String} [fromCharset='UTF-8'] Source encoding for the string
         * @return {Uint8Array} UTF-8 encoded typed array
         */
        convert: function(data, fromCharset) {
            fromCharset = mimecodec.charset.normalizeCharset(fromCharset || 'UTF-8');

            var bufString;

            if (typeof data !== 'string') {
                if (fromCharset.match(/^utf[\-_]?8$/)) {
                    return data;
                }
                bufString = mimecodec.charset.decode(data, fromCharset);
                return mimecodec.charset.encode(bufString);
            }
            return mimecodec.charset.encode(data);
        },

        /**
         * Converts well known invalid character set names to proper names.
         * eg. win-1257 will be converted to WINDOWS-1257
         *
         * @param {String} charset Charset name to convert
         * @return {String} Canoninicalized charset name
         */
        normalizeCharset: function(charset) {
            var match;

            if ((match = charset.match(/^utf[\-_]?(\d+)$/i))) {
                return 'UTF-' + match[1];
            }

            if ((match = charset.match(/^win[\-_]?(\d+)$/i))) {
                return 'WINDOWS-' + match[1];
            }

            if ((match = charset.match(/^latin[\-_]?(\d+)$/i))) {
                return 'ISO-8859-' + match[1];
            }

            return charset;
        }
    };

    /**
     * Base64 encoding and decoding functions
     */
    mimecodec.base64 = {

        /**
         * Encodes input into base64
         *
         * @param {String|Uint8Array} data Data to be encoded into base64
         * @return {String} Base64 encoded string
         */
        encode: function(data) {
            if (!data) {
                return '';
            }

            if (typeof data === 'string') {
                // window.btoa uses pseudo binary encoding, so unicode strings
                // need to be converted before encoding
                return btoa(unescape(encodeURIComponent(data)));
            }

            var len = data.byteLength,
                binStr = '';

            if (!data.buffer) {
                data.buffer = new Uint8Array(data);
            }

            for (var i = 0; i < len; i++) {
                binStr += String.fromCharCode(data[i]);
            }

            return btoa(binStr);
        },

        /**
         * Decodes base64 encoded string into an unicode string or Uint8Array
         *
         * @param {String} data Base64 encoded data
         * @param {String} [outputEncoding='buffer'] Output encoding, either 'string' or 'buffer' (Uint8Array)
         * @return {String|Uint8Array} Decoded string
         */
        decode: function(data, outputEncoding) {
            outputEncoding = (outputEncoding || 'buffer').toLowerCase().trim();

            var buf = mimecodec.base64.toTypedArray(data);

            if (outputEncoding === 'string') {
                return mimecodec.charset.decode(buf);
            } else {
                return buf;
            }
        },

        /**
         * Safe base64 decoding. Does not throw on unexpected input.
         *
         * Implementation from the MDN docs:
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding
         * (MDN code samples are MIT licensed)
         *
         * @param {String} base64Str Base64 encoded string
         * @returns {Uint8Array} Decoded binary blob
         */
        toTypedArray: function(base64Str) {
            var bitsSoFar = 0;
            var validBits = 0;
            var iOut = 0;
            var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));
            var c;
            var bits;

            for (var i = 0, len = base64Str.length; i < len; i++) {
                c = base64Str.charCodeAt(i);
                if (c >= 0x41 && c <= 0x5a) { // [A-Z]
                    bits = c - 0x41;
                } else if (c >= 0x61 && c <= 0x7a) { // [a-z]
                    bits = c - 0x61 + 0x1a;
                } else if (c >= 0x30 && c <= 0x39) { // [0-9]
                    bits = c - 0x30 + 0x34;
                } else if (c === 0x2b) { // +
                    bits = 0x3e;
                } else if (c === 0x2f) { // /
                    bits = 0x3f;
                } else if (c === 0x3d) { // =
                    validBits = 0;
                    continue;
                } else {
                    // ignore all other characters!
                    continue;
                }
                bitsSoFar = (bitsSoFar << 6) | bits;
                validBits += 6;
                if (validBits >= 8) {
                    validBits -= 8;
                    arr[iOut++] = bitsSoFar >> validBits;
                    if (validBits === 2) {
                        bitsSoFar &= 0x03;
                    } else if (validBits === 4) {
                        bitsSoFar &= 0x0f;
                    }
                }
            }

            if (iOut < arr.length) {
                return arr.subarray(0, iOut);
            }
            return arr;
        }
    };

    /*
     * Encodes a string in base 64. DedicatedWorkerGlobalScope for Safari does not provide btoa.
     * https://github.com/davidchambers/Base64.js
     */
    function base64Encode(input) {
        var str = String(input);
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        for (var block, charCode, idx = 0, map = chars, output = ''; str.charAt(idx | 0) || (map = '=', idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
            charCode = str.charCodeAt(idx += 3 / 4);
            if (charCode > 0xFF) {
                throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
            }
            block = block << 8 | charCode;
        }
        return output;
    }

    return mimecodec;
}));

// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    "use strict";

    if (false) {
        define(factory);
    } else if (false) {
        module.exports = factory();
    } else {
        root['emailjs-addressparser'] = factory();
    }
}(this, function() {
    "use strict";

    /**
     * Defines an object as a namespace for the parsing function
     */
    var addressparser = {};

    /**
     * Parses structured e-mail addresses from an address field
     *
     * Example:
     *
     *    "Name <address@domain>"
     *
     * will be converted to
     *
     *     [{name: "Name", address: "address@domain"}]
     *
     * @param {String} str Address field
     * @return {Array} An array of address objects
     */
    addressparser.parse = function(str) {
        var tokenizer = new addressparser.Tokenizer(str),
            tokens = tokenizer.tokenize();

        var addresses = [],
            address = [],
            parsedAddresses = [];

        tokens.forEach(function(token) {
            if (token.type === "operator" && (token.value === "," || token.value === ";")) {
                if (address.length) {
                    addresses.push(address);
                }
                address = [];
            } else {
                address.push(token);
            }
        });

        if (address.length) {
            addresses.push(address);
        }

        addresses.forEach(function(address) {
            address = addressparser._handleAddress(address);
            if (address.length) {
                parsedAddresses = parsedAddresses.concat(address);
            }
        });

        return parsedAddresses;
    };

    /**
     * Converts tokens for a single address into an address object
     *
     * @param {Array} tokens Tokens object
     * @return {Object} Address object
     */
    addressparser._handleAddress = function(tokens) {
        var token,
            isGroup = false,
            state = "text",
            address,
            addresses = [],
            data = {
                address: [],
                comment: [],
                group: [],
                text: []
            },
            i, len;

        // Filter out <addresses>, (comments) and regular text
        for (i = 0, len = tokens.length; i < len; i++) {
            token = tokens[i];

            if (token.type === "operator") {
                switch (token.value) {
                    case "<":
                        state = "address";
                        break;
                    case "(":
                        state = "comment";
                        break;
                    case ":":
                        state = "group";
                        isGroup = true;
                        break;
                    default:
                        state = "text";
                }
            } else {
                if (token.value) {
                    data[state].push(token.value);
                }
            }
        }

        // If there is no text but a comment, replace the two
        if (!data.text.length && data.comment.length) {
            data.text = data.comment;
            data.comment = [];
        }

        if (isGroup) {
            // http://tools.ietf.org/html/rfc2822#appendix-A.1.3
            data.text = data.text.join(" ");
            addresses.push({
                name: data.text || (address && address.name),
                group: data.group.length ? addressparser.parse(data.group.join(",")) : []
            });
        } else {
            // If no address was found, try to detect one from regular text
            if (!data.address.length && data.text.length) {
                for (i = data.text.length - 1; i >= 0; i--) {
                    if (data.text[i].match(/^[^@\s]+@[^@\s]+$/)) {
                        data.address = data.text.splice(i, 1);
                        break;
                    }
                }

                var _regexHandler = function(address) {
                    if (!data.address.length) {
                        data.address = [address.trim()];
                        return " ";
                    } else {
                        return address;
                    }
                };

                // still no address
                if (!data.address.length) {
                    for (i = data.text.length - 1; i >= 0; i--) {
                        data.text[i] = data.text[i].replace(/\s*\b[^@\s]+@[^@\s]+\b\s*/, _regexHandler).trim();
                        if (data.address.length) {
                            break;
                        }
                    }
                }
            }

            // If there's still is no text but a comment exixts, replace the two
            if (!data.text.length && data.comment.length) {
                data.text = data.comment;
                data.comment = [];
            }

            // Keep only the first address occurence, push others to regular text
            if (data.address.length > 1) {
                data.text = data.text.concat(data.address.splice(1));
            }

            // Join values with spaces
            data.text = data.text.join(" ");
            data.address = data.address.join(" ");

            if (!data.address && isGroup) {
                return [];
            } else {
                address = {
                    address: data.address || data.text || "",
                    name: data.text || data.address || ""
                };

                if (address.address === address.name) {
                    if ((address.address || "").match(/@/)) {
                        address.name = "";
                    } else {
                        address.address = "";
                    }

                }

                addresses.push(address);
            }
        }

        return addresses;
    };

    /**
     * Creates a Tokenizer object for tokenizing address field strings
     *
     * @constructor
     * @param {String} str Address field string
     */
    addressparser.Tokenizer = function(str) {

        this.str = (str || "").toString();
        this.operatorCurrent = "";
        this.operatorExpecting = "";
        this.node = null;
        this.escaped = false;

        this.list = [];

    };

    /**
     * Operator tokens and which tokens are expected to end the sequence
     */
    addressparser.Tokenizer.prototype.operators = {
        "\"": "\"",
        "(": ")",
        "<": ">",
        ",": "",
        // Groups are ended by semicolons
        ":": ";",
        // Semicolons are not a legal delimiter per the RFC2822 grammar other
        // than for terminating a group, but they are also not valid for any
        // other use in this context.  Given that some mail clients have
        // historically allowed the semicolon as a delimiter equivalent to the
        // comma in their UI, it makes sense to treat them the same as a comma
        // when used outside of a group.
        ";": ""
    };

    /**
     * Tokenizes the original input string
     *
     * @return {Array} An array of operator|text tokens
     */
    addressparser.Tokenizer.prototype.tokenize = function() {
        var chr, list = [];
        for (var i = 0, len = this.str.length; i < len; i++) {
            chr = this.str.charAt(i);
            this.checkChar(chr);
        }

        this.list.forEach(function(node) {
            node.value = (node.value || "").toString().trim();
            if (node.value) {
                list.push(node);
            }
        });

        return list;
    };

    /**
     * Checks if a character is an operator or text and acts accordingly
     *
     * @param {String} chr Character from the address field
     */
    addressparser.Tokenizer.prototype.checkChar = function(chr) {
        if ((chr in this.operators || chr === "\\") && this.escaped) {
            this.escaped = false;
        } else if (this.operatorExpecting && chr === this.operatorExpecting) {
            this.node = {
                type: "operator",
                value: chr
            };
            this.list.push(this.node);
            this.node = null;
            this.operatorExpecting = "";
            this.escaped = false;
            return;
        } else if (!this.operatorExpecting && chr in this.operators) {
            this.node = {
                type: "operator",
                value: chr
            };
            this.list.push(this.node);
            this.node = null;
            this.operatorExpecting = this.operators[chr];
            this.escaped = false;
            return;
        }

        if (!this.escaped && chr === "\\") {
            this.escaped = true;
            return;
        }

        if (!this.node) {
            this.node = {
                type: "text",
                value: ""
            };
            this.list.push(this.node);
        }

        if (this.escaped && chr !== "\\") {
            this.node.value += "\\";
        }

        this.node.value += chr;
        this.escaped = false;
    };

    return addressparser;
}));

// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (false) {
        define(['emailjs-mime-codec', 'emailjs-addressparser'], factory);
    } else if (false) {
        module.exports = factory(global['emailjs-mime-codec'], global['emailjs-addressparser']);
    } else {
        root['emailjs-mime-parser'] = factory(root['emailjs-mime-codec'], root['emailjs-addressparser']);
    }

}(this, function(mimecodec, addressparser) {
    'use strict';

    var TIMEZONE_ABBREVATIONS = {
        "ACDT": "+1030",
        "ACST": "+0930",
        "ACT": "+0800",
        "ADT": "-0300",
        "AEDT": "+1100",
        "AEST": "+1000",
        "AFT": "+0430",
        "AKDT": "-0800",
        "AKST": "-0900",
        "AMST": "-0300",
        "AMT": "+0400",
        "ART": "-0300",
        "AST": "+0300",
        "AWDT": "+0900",
        "AWST": "+0800",
        "AZOST": "-0100",
        "AZT": "+0400",
        "BDT": "+0800",
        "BIOT": "+0600",
        "BIT": "-1200",
        "BOT": "-0400",
        "BRT": "-0300",
        "BST": "+0600",
        "BTT": "+0600",
        "CAT": "+0200",
        "CCT": "+0630",
        "CDT": "-0500",
        "CEDT": "+0200",
        "CEST": "+0200",
        "CET": "+0100",
        "CHADT": "+1345",
        "CHAST": "+1245",
        "CHOT": "+0800",
        "CHST": "+1000",
        "CHUT": "+1000",
        "CIST": "-0800",
        "CIT": "+0800",
        "CKT": "-1000",
        "CLST": "-0300",
        "CLT": "-0400",
        "COST": "-0400",
        "COT": "-0500",
        "CST": "-0600",
        "CT": "+0800",
        "CVT": "-0100",
        "CWST": "+0845",
        "CXT": "+0700",
        "DAVT": "+0700",
        "DDUT": "+1000",
        "DFT": "+0100",
        "EASST": "-0500",
        "EAST": "-0600",
        "EAT": "+0300",
        "ECT": "-0500",
        "EDT": "-0400",
        "EEDT": "+0300",
        "EEST": "+0300",
        "EET": "+0200",
        "EGST": "+0000",
        "EGT": "-0100",
        "EIT": "+0900",
        "EST": "-0500",
        "FET": "+0300",
        "FJT": "+1200",
        "FKST": "-0300",
        "FKT": "-0400",
        "FNT": "-0200",
        "GALT": "-0600",
        "GAMT": "-0900",
        "GET": "+0400",
        "GFT": "-0300",
        "GILT": "+1200",
        "GIT": "-0900",
        "GMT": "+0000",
        "GST": "+0400",
        "GYT": "-0400",
        "HADT": "-0900",
        "HAEC": "+0200",
        "HAST": "-1000",
        "HKT": "+0800",
        "HMT": "+0500",
        "HOVT": "+0700",
        "HST": "-1000",
        "ICT": "+0700",
        "IDT": "+0300",
        "IOT": "+0300",
        "IRDT": "+0430",
        "IRKT": "+0900",
        "IRST": "+0330",
        "IST": "+0530",
        "JST": "+0900",
        "KGT": "+0600",
        "KOST": "+1100",
        "KRAT": "+0700",
        "KST": "+0900",
        "LHST": "+1030",
        "LINT": "+1400",
        "MAGT": "+1200",
        "MART": "-0930",
        "MAWT": "+0500",
        "MDT": "-0600",
        "MET": "+0100",
        "MEST": "+0200",
        "MHT": "+1200",
        "MIST": "+1100",
        "MIT": "-0930",
        "MMT": "+0630",
        "MSK": "+0400",
        "MST": "-0700",
        "MUT": "+0400",
        "MVT": "+0500",
        "MYT": "+0800",
        "NCT": "+1100",
        "NDT": "-0230",
        "NFT": "+1130",
        "NPT": "+0545",
        "NST": "-0330",
        "NT": "-0330",
        "NUT": "-1100",
        "NZDT": "+1300",
        "NZST": "+1200",
        "OMST": "+0700",
        "ORAT": "+0500",
        "PDT": "-0700",
        "PET": "-0500",
        "PETT": "+1200",
        "PGT": "+1000",
        "PHOT": "+1300",
        "PHT": "+0800",
        "PKT": "+0500",
        "PMDT": "-0200",
        "PMST": "-0300",
        "PONT": "+1100",
        "PST": "-0800",
        "PYST": "-0300",
        "PYT": "-0400",
        "RET": "+0400",
        "ROTT": "-0300",
        "SAKT": "+1100",
        "SAMT": "+0400",
        "SAST": "+0200",
        "SBT": "+1100",
        "SCT": "+0400",
        "SGT": "+0800",
        "SLST": "+0530",
        "SRT": "-0300",
        "SST": "+0800",
        "SYOT": "+0300",
        "TAHT": "-1000",
        "THA": "+0700",
        "TFT": "+0500",
        "TJT": "+0500",
        "TKT": "+1300",
        "TLT": "+0900",
        "TMT": "+0500",
        "TOT": "+1300",
        "TVT": "+1200",
        "UCT": "+0000",
        "ULAT": "+0800",
        "UTC": "+0000",
        "UYST": "-0200",
        "UYT": "-0300",
        "UZT": "+0500",
        "VET": "-0430",
        "VLAT": "+1000",
        "VOLT": "+0400",
        "VOST": "+0600",
        "VUT": "+1100",
        "WAKT": "+1200",
        "WAST": "+0200",
        "WAT": "+0100",
        "WEDT": "+0100",
        "WEST": "+0100",
        "WET": "+0000",
        "WST": "+0800",
        "YAKT": "+1000",
        "YEKT": "+0600",
        "Z": "+0000"
    };

    /**
     * Creates a parser for a mime stream
     *
     * @constructor
     */
    function MimeParser() {
        /**
         * Returned to the write calls
         */
        this.running = true;

        /**
         * Cache for parsed node objects
         */
        this.nodes = {};

        /**
         * Root node object
         */
        this.node = new MimeNode(null, this);

        /**
         * Data is written to nodes one line at the time. If entire line
         * is not received yet, buffer it before passing on
         */
        this._remainder = '';
    }

    /**
     * Writes a chunk of data to the processing queue. Splits data to lines and feeds
     * complete lines to the current node element
     *
     * @param {Uint8Array|String} chunk Chunk to be processed. Either an Uint8Array value or a 'binary' string
     */
    MimeParser.prototype.write = function(chunk) {
        if (!chunk || !chunk.length) {
            return !this.running;
        }

        var lines = (this._remainder + (typeof chunk === 'object' ?
            mimecodec.fromTypedArray(chunk) : chunk)).split(/\r?\n/g);
        this._remainder = lines.pop();

        for (var i = 0, len = lines.length; i < len; i++) {
            this.node.writeLine(lines[i]);
        }

        return !this.running;
    };

    /**
     * Indicates that there is no more data coming
     *
     * @param {Uint8Array|String} [chunk] Final chunk to be processed
     */
    MimeParser.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
            this.write(chunk);
        }

        if (this.node._lineCount || this._remainder) {
            this.node.writeLine(this._remainder);
            this._remainder = '';
        }

        if (this.node) {
            this.node.finalize();
        }

        this.onend();
    };

    /**
     * Retrieves a mime part object for specified path
     *
     *   parser.getNode('1.2.3')
     *
     * @param {String} path Path to the node
     */
    MimeParser.prototype.getNode = function(path) {
        path = path || '';
        return this.nodes['node' + path] || null;
    };

    // PARSER EVENTS

    /**
     * Override this function.
     * Called when the parsing is ended
     * @event
     */
    MimeParser.prototype.onend = function() {};

    /**
     * Override this function.
     * Called when the parsing is ended
     * @event
     * @param {Object} node Current mime part. See node.header for header lines
     */
    MimeParser.prototype.onheader = function() {};

    /**
     * Override this function.
     * Called when a body chunk is emitted
     * @event
     * @param {Object} node Current mime part
     * @param {Uint8Array} chunk Body chunk
     */
    MimeParser.prototype.onbody = function() {};

    // NODE PROCESSING

    /**
     * Creates an object that holds and manages one part of the multipart message
     *
     * @constructor
     * @param {Object} parentNode Reference to the parent element. If not specified, then this is root node
     * @param {Object} parser MimeParser object
     */
    function MimeNode(parentNode, parser) {

        // Public properties

        /**
         * An array of unfolded header lines
         */
        this.header = [];

        /**
         * An object that holds header key=value pairs
         */
        this.headers = {};

        /**
         * Path for this node
         */
        this.path = parentNode ? parentNode.path.concat(parentNode._childNodes.length + 1) : [];

        // Private properties

        /**
         * Reference to the 'master' parser object
         */
        this._parser = parser;

        /**
         * Parent node for this specific node
         */
        this._parentNode = parentNode;

        /**
         * Current state, always starts out with HEADER
         */
        this._state = 'HEADER';

        /**
         * Body buffer
         */
        this._bodyBuffer = '';

        /**
         * Line counter bor the body part
         */
        this._lineCount = 0;

        /**
         * If this is a multipart or message/rfc822 mime part, the value
         * will be converted to array and hold all child nodes for this node
         */
        this._childNodes = false;

        /**
         * Active child node (if available)
         */
        this._currentChild = false;

        /**
         * Remainder string when dealing with base64 and qp values
         */
        this._lineRemainder = '';

        /**
         * Indicates if this is a multipart node
         */
        this._isMultipart = false;

        /**
         * Stores boundary value for current multipart node
         */
        this._multipartBoundary = false;

        /**
         * Indicates if this is a message/rfc822 node
         */
        this._isRfc822 = false;

        /**
         * Stores the raw content of this node
         */
        this.raw = '';

        // Att this node to the path cache
        this._parser.nodes['node' + this.path.join('.')] = this;
    }

    // Public methods

    /**
     * Processes an enitre input line
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype.writeLine = function(line) {

        this.raw += (this.raw ? '\n' : '') + line;

        if (this._state === 'HEADER') {
            this._processHeaderLine(line);
        } else if (this._state === 'BODY') {
            this._processBodyLine(line);
        }
    };

    /**
     * Processes any remainders
     */
    MimeNode.prototype.finalize = function() {
        if (this._isRfc822) {
            this._currentChild.finalize();
        } else {
            this._emitBody(true);
        }
    };

    // Private methods

    /**
     * Processes a line in the HEADER state. It the line is empty, change state to BODY
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype._processHeaderLine = function(line) {
        if (!line) {
            this._parseHeaders();
            this._parser.onheader(this);
            this._state = 'BODY';
            return;
        }

        if (line.match(/^\s/) && this.header.length) {
            this.header[this.header.length - 1] += '\n' + line;
        } else {
            this.header.push(line);
        }
    };

    /**
     * Joins folded header lines and calls Content-Type and Transfer-Encoding processors
     */
    MimeNode.prototype._parseHeaders = function() {

        // Join header lines
        var key, value, hasBinary;

        for (var i = 0, len = this.header.length; i < len; i++) {
            value = this.header[i].split(':');
            key = (value.shift() || '').trim().toLowerCase();
            value = (value.join(':') || '').replace(/\n/g, '').trim();

            if (value.match(/[\u0080-\uFFFF]/)) {
                if (!this.charset) {
                    hasBinary = true;
                }
                // use default charset at first and if the actual charset is resolved, the conversion is re-run
                value = mimecodec.charset.decode(mimecodec.charset.convert(mimecodec.toTypedArray(value), this.charset || 'iso-8859-1'));
            }

            if (!this.headers[key]) {
                this.headers[key] = [this._parseHeaderValue(key, value)];
            } else {
                this.headers[key].push(this._parseHeaderValue(key, value));
            }

            if (!this.charset && key === 'content-type') {
                this.charset = this.headers[key][this.headers[key].length - 1].params.charset;
            }

            if (hasBinary && this.charset) {
                // reset values and start over once charset has been resolved and 8bit content has been found
                hasBinary = false;
                this.headers = {};
                i = -1; // next iteration has i == 0
            }
        }

        this._processContentType();
        this._processContentTransferEncoding();
    };

    /**
     * Parses single header value
     * @param {String} key Header key
     * @param {String} value Value for the key
     * @return {Object} parsed header
     */
    MimeNode.prototype._parseHeaderValue = function(key, value) {
        var parsedValue, isAddress = false;

        switch (key) {
            case 'content-type':
            case 'content-transfer-encoding':
            case 'content-disposition':
            case 'dkim-signature':
                parsedValue = mimecodec.parseHeaderValue(value);
                break;
            case 'from':
            case 'sender':
            case 'to':
            case 'reply-to':
            case 'cc':
            case 'bcc':
            case 'abuse-reports-to':
            case 'errors-to':
            case 'return-path':
            case 'delivered-to':
                isAddress = true;
                parsedValue = {
                    value: [].concat(addressparser.parse(value) || [])
                };
                break;
            case 'date':
                parsedValue = {
                    value: this._parseDate(value)
                };
                break;
            default:
                parsedValue = {
                    value: value
                };
        }
        parsedValue.initial = value;

        this._decodeHeaderCharset(parsedValue, {
            isAddress: isAddress
        });

        return parsedValue;
    };

    /**
     * Checks if a date string can be parsed. Falls back replacing timezone
     * abbrevations with timezone values
     *
     * @param {String} str Date header
     * @returns {String} UTC date string if parsing succeeded, otherwise returns input value
     */
    MimeNode.prototype._parseDate = function(str) {
        str = (str || '').toString().trim();

        var date = new Date(str);

        if (this._isValidDate(date)) {
            return date.toUTCString().replace(/GMT/, '+0000');
        }

        // Assume last alpha part is a timezone
        // Ex: "Date: Thu, 15 May 2014 13:53:30 EEST"
        str = str.replace(/\b[a-z]+$/i, function(tz) {
            tz = tz.toUpperCase();
            if (TIMEZONE_ABBREVATIONS.hasOwnProperty(tz)) {
                return TIMEZONE_ABBREVATIONS[tz];
            }
            return tz;
        });

        date = new Date(str);

        if (this._isValidDate(date)) {
            return date.toUTCString().replace(/GMT/, '+0000');
        } else {
            return str;
        }
    };

    /**
     * Checks if a value is a Date object and it contains an actual date value
     * @param {Date} date Date object to check
     * @returns {Boolean} True if the value is a valid date
     */
    MimeNode.prototype._isValidDate = function(date) {
        return Object.prototype.toString.call(date) === '[object Date]' && date.toString() !== 'Invalid Date';
    };

    MimeNode.prototype._decodeHeaderCharset = function(parsed, options) {
        options = options || {};

        // decode default value
        if (typeof parsed.value === 'string') {
            parsed.value = mimecodec.mimeWordsDecode(parsed.value);
        }

        // decode possible params
        Object.keys(parsed.params || {}).forEach(function(key) {
            if (typeof parsed.params[key] === 'string') {
                parsed.params[key] = mimecodec.mimeWordsDecode(parsed.params[key]);
            }
        });

        // decode addresses
        if (options.isAddress && Array.isArray(parsed.value)) {
            parsed.value.forEach(function(addr) {
                if (addr.name) {
                    addr.name = mimecodec.mimeWordsDecode(addr.name);
                    if (Array.isArray(addr.group)) {
                        this._decodeHeaderCharset({
                            value: addr.group
                        }, {
                            isAddress: true
                        });
                    }
                }
            }.bind(this));
        }

        return parsed;
    };

    /**
     * Parses Content-Type value and selects following actions.
     */
    MimeNode.prototype._processContentType = function() {
        var contentDisposition;

        this.contentType = this.headers['content-type'] && this.headers['content-type'][0] ||
            mimecodec.parseHeaderValue('text/plain');
        this.contentType.value = (this.contentType.value || '').toLowerCase().trim();
        this.contentType.type = (this.contentType.value.split('/').shift() || 'text');

        if (this.contentType.params && this.contentType.params.charset && !this.charset) {
            this.charset = this.contentType.params.charset;
        }

        if (this.contentType.type === 'multipart' && this.contentType.params.boundary) {
            this._childNodes = [];
            this._isMultipart = (this.contentType.value.split('/').pop() || 'mixed');
            this._multipartBoundary = this.contentType.params.boundary;
        }

        if (this.contentType.value === 'message/rfc822') {
            /**
             * Parse message/rfc822 only if the mime part is not marked with content-disposition: attachment,
             * otherwise treat it like a regular attachment
             */
            contentDisposition = this.headers['content-disposition'] && this.headers['content-disposition'][0] ||
                mimecodec.parseHeaderValue('');
            if ((contentDisposition.value || '').toLowerCase().trim() !== 'attachment') {
                this._childNodes = [];
                this._currentChild = new MimeNode(this, this._parser);
                this._childNodes.push(this._currentChild);
                this._isRfc822 = true;
            }
        }
    };

    /**
     * Parses Content-Trasnfer-Encoding value to see if the body needs to be converted
     * before it can be emitted
     */
    MimeNode.prototype._processContentTransferEncoding = function() {
        this.contentTransferEncoding = this.headers['content-transfer-encoding'] && this.headers['content-transfer-encoding'][0] ||
            mimecodec.parseHeaderValue('7bit');
        this.contentTransferEncoding.value = (this.contentTransferEncoding.value || '').toLowerCase().trim();
    };

  /**
     * Processes a line in the BODY state. If this is a multipart or rfc822 node,
     * passes line value to child nodes.
     *
     * @param {String} line Entire input line as 'binary' string
     */
    MimeNode.prototype._processBodyLine = function(line) {
        var curLine, match;

        this._lineCount++;

        if (this._isMultipart) {
            if (line === '--' + this._multipartBoundary) {
                if (this._currentChild) {
                    this._currentChild.finalize();
                }
                this._currentChild = new MimeNode(this, this._parser);
                this._childNodes.push(this._currentChild);
            } else if (line === '--' + this._multipartBoundary + '--') {
                if (this._currentChild) {
                    this._currentChild.finalize();
                }
                this._currentChild = false;
            } else if (this._currentChild) {
                this._currentChild.writeLine(line);
            } else {
                // Ignore body for multipart
            }
        } else if (this._isRfc822) {
            this._currentChild.writeLine(line);
        } else {
            switch (this.contentTransferEncoding.value) {
                case 'base64':
                    curLine = this._lineRemainder + line.trim();

                    if (curLine.length % 4) {
                        this._lineRemainder = curLine.substr(-curLine.length % 4);
                        curLine = curLine.substr(0, curLine.length - this._lineRemainder.length);
                    } else {
                        this._lineRemainder = '';
                    }

                    if (curLine.length) {
                        this._bodyBuffer += mimecodec.fromTypedArray(mimecodec.base64.decode(curLine));
                    }

                    break;
                case 'quoted-printable':
                    curLine = this._lineRemainder + (this._lineCount > 1 ? '\n' : '') + line;

                    if ((match = curLine.match(/=[a-f0-9]{0,1}$/i))) {
                        this._lineRemainder = match[0];
                        curLine = curLine.substr(0, curLine.length - this._lineRemainder.length);
                    } else {
                        this._lineRemainder = '';
                    }
                    this._bodyBuffer += curLine.replace(/\=(\r?\n|$)/g, '');
                    break;
                    // case '7bit':
                    // case '8bit':
                default:
                    this._bodyBuffer += (this._lineCount > 1 ? '\n' : '') + line;
                    break;
            }
        }
    };

    /**
     * Emits a chunk of the body
     *
     * @param {Boolean} forceEmit If set to true does not keep any remainders
     */
    MimeNode.prototype._emitBody = function() {
        var contentDisposition = this.headers['content-disposition'] && this.headers['content-disposition'][0] ||
            mimecodec.parseHeaderValue('');
        var delSp;

        if (this._isMultipart || !this._bodyBuffer) {
            return;
        }

        // Process flowed text before emitting it
        if (/^text\/(plain|html)$/i.test(this.contentType.value) &&
            this.contentType.params && /^flowed$/i.test(this.contentType.params.format)) {

            delSp = /^yes$/i.test(this.contentType.params.delsp);

            this._bodyBuffer = this._bodyBuffer.
            split('\n').
            // remove soft linebreaks
            // soft linebreaks are added after space symbols
            reduce(function(previousValue, currentValue) {
                var body = previousValue;
                if (delSp) {
                    // delsp adds spaces to text to be able to fold it
                    // these spaces can be removed once the text is unfolded
                    body = body.replace(/[ ]+$/, '');
                }
                if (/ $/.test(previousValue) && !/(^|\n)\-\- $/.test(previousValue)) {
                    return body + currentValue;
                } else {
                    return body + '\n' + currentValue;
                }
            }).
            // remove whitespace stuffing
            // http://tools.ietf.org/html/rfc3676#section-4.4
            replace(/^ /gm, '');
        }
        this.content = mimecodec.toTypedArray(this._bodyBuffer);
        this.rawContent = this._bodyBuffer;

        if (/^text\/(plain|html)$/i.test(this.contentType.value) && !/^attachment$/i.test(contentDisposition.value)) {

            if (!this.charset && /^text\/html$/i.test(this.contentType.value)) {
                this.charset = this._detectHTMLCharset(this._bodyBuffer);
            }

            // decode "binary" string to an unicode string
            if (!/^utf[\-_]?8$/i.test(this.charset)) {
                this.content = mimecodec.charset.convert(mimecodec.toTypedArray(this._bodyBuffer), this.charset || 'iso-8859-1');
            }

            // override charset for text nodes
            this.charset = this.contentType.params.charset = 'utf-8';
        }
        this._bodyBuffer = '';

        this._parser.onbody(this, this.content);
    };

    /**
     * Detect charset from a html file
     *
     * @param {String} html Input HTML
     * @returns {String} Charset if found or undefined
     */
    MimeNode.prototype._detectHTMLCharset = function(html) {
        var charset, input, meta;

        if (typeof html !== 'string') {
            html = html.toString('ascii');
        }

        html = html.replace(/\r?\n|\r/g, " ");

        if ((meta = html.match(/<meta\s+http-equiv=["'\s]*content-type[^>]*?>/i))) {
            input = meta[0];
        }

        if (input) {
            charset = input.match(/charset\s?=\s?([a-zA-Z\-_:0-9]*);?/);
            if (charset) {
                charset = (charset[1] || '').trim().toLowerCase();
            }
        }

        if (!charset && (meta = html.match(/<meta\s+charset=["'\s]*([^"'<>\/\s]+)/i))) {
            charset = (meta[1] || '').trim().toLowerCase();
        }

        return charset;
    };

    return MimeParser;
}));

// Copyright (c) 2013 Andris Reinman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

(function(root, factory) {
    'use strict';

    if (false) {
        define(['emailjs-mime-codec', 'emailjs-mime-types', 'punycode', 'emailjs-addressparser'], factory);
    } else if (false) {
        module.exports = factory(global['emailjs-mime-codec'], global['emailjs-mime-types'], global['punycode'], global['emailjs-addressparser']);
    } else {
        root['emailjs-mime-builder'] = factory(root['emailjs-mime-codec'], root['emailjs-mime-types'], root.punycode, root['emailjs-addressparser']);
    }
}(this, function(mimecodec, mimetypes, punycode, addressparser) {
    'use strict';

    /**
     * Creates a new mime tree node. Assumes 'multipart/*' as the content type
     * if it is a branch, anything else counts as leaf. If rootNode is missing from
     * the options, assumes this is the root.
     *
     * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)
     * @param {Object} [options] optional options
     * @param {Object} [options.rootNode] root node for this tree
     * @param {Object} [options.parentNode] immediate parent for this node
     * @param {Object} [options.filename] filename for an attachment node
     * @param {String} [options.baseBoundary] shared part of the unique multipart boundary
     */
    function MimeNode(contentType, options) {
        this.nodeCounter = 0;

        options = options || {};

        /**
         * shared part of the unique multipart boundary
         */
        this.baseBoundary = options.baseBoundary || Date.now().toString() + Math.random();

        /**
         * If date headers is missing and current node is the root, this value is used instead
         */
        this.date = new Date();

        /**
         * Root node for current mime tree
         */
        this.rootNode = options.rootNode || this;

        /**
         * If filename is specified but contentType is not (probably an attachment)
         * detect the content type from filename extension
         */
        if (options.filename) {
            /**
             * Filename for this node. Useful with attachments
             */
            this.filename = options.filename;
            if (!contentType) {
                contentType = mimetypes.detectMimeType(this.filename.split('.').pop());
            }
        }

        /**
         * Immediate parent for this node (or undefined if not set)
         */
        this.parentNode = options.parentNode;

        /**
         * Used for generating unique boundaries (prepended to the shared base)
         */
        this._nodeId = ++this.rootNode.nodeCounter;

        /**
         * An array for possible child nodes
         */
        this._childNodes = [];

        /**
         * A list of header values for this node in the form of [{key:'', value:''}]
         */
        this._headers = [];

        /**
         * If content type is set (or derived from the filename) add it to headers
         */
        if (contentType) {
            this.setHeader('content-type', contentType);
        }
    }

    /////// PUBLIC METHODS

    /**
     * Creates and appends a child node. Arguments provided are passed to MimeNode constructor
     *
     * @param {String} [contentType] Optional content type
     * @param {Object} [options] Optional options object
     * @return {Object} Created node object
     */
    MimeNode.prototype.createChild = function(contentType, options) {
        if (!options && typeof contentType === 'object') {
            options = contentType;
            contentType = undefined;
        }
        var node = new MimeNode(contentType, options);
        this.appendChild(node);
        return node;
    };

    /**
     * Appends an existing node to the mime tree. Removes the node from an existing
     * tree if needed
     *
     * @param {Object} childNode node to be appended
     * @return {Object} Appended node object
     */
    MimeNode.prototype.appendChild = function(childNode) {

        if (childNode.rootNode !== this.rootNode) {
            childNode.rootNode = this.rootNode;
            childNode._nodeId = ++this.rootNode.nodeCounter;
        }

        childNode.parentNode = this;

        this._childNodes.push(childNode);
        return childNode;
    };

    /**
     * Replaces current node with another node
     *
     * @param {Object} node Replacement node
     * @return {Object} Replacement node
     */
    MimeNode.prototype.replace = function(node) {
        if (node === this) {
            return this;
        }

        this.parentNode._childNodes.forEach(function(childNode, i) {
            if (childNode === this) {

                node.rootNode = this.rootNode;
                node.parentNode = this.parentNode;
                node._nodeId = this._nodeId;

                this.rootNode = this;
                this.parentNode = undefined;

                node.parentNode._childNodes[i] = node;
            }
        }.bind(this));

        return node;
    };

    /**
     * Removes current node from the mime tree
     *
     * @return {Object} removed node
     */
    MimeNode.prototype.remove = function() {
        if (!this.parentNode) {
            return this;
        }

        for (var i = this.parentNode._childNodes.length - 1; i >= 0; i--) {
            if (this.parentNode._childNodes[i] === this) {
                this.parentNode._childNodes.splice(i, 1);
                this.parentNode = undefined;
                this.rootNode = this;
                return this;
            }
        }
    };

    /**
     * Sets a header value. If the value for selected key exists, it is overwritten.
     * You can set multiple values as well by using [{key:'', value:''}] or
     * {key: 'value'} as the first argument.
     *
     * @param {String|Array|Object} key Header key or a list of key value pairs
     * @param {String} value Header value
     * @return {Object} current node
     */
    MimeNode.prototype.setHeader = function(key, value) {
        var added = false,
            headerValue;

        // Allow setting multiple headers at once
        if (!value && key && typeof key === 'object') {
            // allow {key:'content-type', value: 'text/plain'}
            if (key.key && key.value) {
                this.setHeader(key.key, key.value);
            }
            // allow [{key:'content-type', value: 'text/plain'}]
            else if (Array.isArray(key)) {
                key.forEach(function(i) {
                    this.setHeader(i.key, i.value);
                }.bind(this));
            }
            // allow {'content-type': 'text/plain'}
            else {
                Object.keys(key).forEach(function(i) {
                    this.setHeader(i, key[i]);
                }.bind(this));
            }
            return this;
        }

        key = this._normalizeHeaderKey(key);

        headerValue = {
            key: key,
            value: value
        };

        // Check if the value exists and overwrite
        for (var i = 0, len = this._headers.length; i < len; i++) {
            if (this._headers[i].key === key) {
                if (!added) {
                    // replace the first match
                    this._headers[i] = headerValue;
                    added = true;
                } else {
                    // remove following matches
                    this._headers.splice(i, 1);
                    i--;
                    len--;
                }
            }
        }

        // match not found, append the value
        if (!added) {
            this._headers.push(headerValue);
        }

        return this;
    };

    /**
     * Adds a header value. If the value for selected key exists, the value is appended
     * as a new field and old one is not touched.
     * You can set multiple values as well by using [{key:'', value:''}] or
     * {key: 'value'} as the first argument.
     *
     * @param {String|Array|Object} key Header key or a list of key value pairs
     * @param {String} value Header value
     * @return {Object} current node
     */
    MimeNode.prototype.addHeader = function(key, value) {

        // Allow setting multiple headers at once
        if (!value && key && typeof key === 'object') {
            // allow {key:'content-type', value: 'text/plain'}
            if (key.key && key.value) {
                this.addHeader(key.key, key.value);
            }
            // allow [{key:'content-type', value: 'text/plain'}]
            else if (Array.isArray(key)) {
                key.forEach(function(i) {
                    this.addHeader(i.key, i.value);
                }.bind(this));
            }
            // allow {'content-type': 'text/plain'}
            else {
                Object.keys(key).forEach(function(i) {
                    this.addHeader(i, key[i]);
                }.bind(this));
            }
            return this;
        }

        this._headers.push({
            key: this._normalizeHeaderKey(key),
            value: value
        });

        return this;
    };

    /**
     * Retrieves the first mathcing value of a selected key
     *
     * @param {String} key Key to search for
     * @retun {String} Value for the key
     */
    MimeNode.prototype.getHeader = function(key) {
        key = this._normalizeHeaderKey(key);
        for (var i = 0, len = this._headers.length; i < len; i++) {
            if (this._headers[i].key === key) {
                return this._headers[i].value;
            }
        }
    };

    /**
     * Sets body content for current node. If the value is a string, charset is added automatically
     * to Content-Type (if it is text/*). If the value is a Typed Array, you need to specify
     * the charset yourself
     *
     * @param (String|Uint8Array) content Body content
     * @return {Object} current node
     */
    MimeNode.prototype.setContent = function(content) {
        this.content = content;
        return this;
    };

    /**
     * Builds the rfc2822 message from the current node. If this is a root node,
     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)
     *
     * @return {String} Compiled message
     */
    MimeNode.prototype.build = function() {
        var lines = [],
            contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim(),
            transferEncoding, flowed;

        if (this.content) {
            transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();
            if (!transferEncoding || ['base64', 'quoted-printable'].indexOf(transferEncoding) < 0) {
                if (/^text\//i.test(contentType)) {
                    // If there are no special symbols, no need to modify the text
                    if (this._isPlainText(this.content)) {
                        // If there are lines longer than 76 symbols/bytes, make the text 'flowed'
                        if (/^.{77,}/m.test(this.content)) {
                            flowed = true;
                        }
                        transferEncoding = '7bit';
                    } else {
                        transferEncoding = 'quoted-printable';
                    }
                } else if (!/^multipart\//i.test(contentType)) {
                    transferEncoding = transferEncoding || 'base64';
                }
            }

            if (transferEncoding) {
                this.setHeader('Content-Transfer-Encoding', transferEncoding);
            }
        }

        if (this.filename && !this.getHeader('Content-Disposition')) {
            this.setHeader('Content-Disposition', 'attachment');
        }

        this._headers.forEach(function(header) {
            var key = header.key,
                value = header.value,
                structured;

            switch (header.key) {
                case 'Content-Disposition':
                    structured = mimecodec.parseHeaderValue(value);
                    if (this.filename) {
                        structured.params.filename = this.filename;
                    }
                    value = this._buildHeaderValue(structured);
                    break;
                case 'Content-Type':
                    structured = mimecodec.parseHeaderValue(value);

                    this._handleContentType(structured);

                    if (flowed) {
                        structured.params.format = 'flowed';
                    }
                    if (String(structured.params.format).toLowerCase().trim() === 'flowed') {
                        flowed = true;
                    }

                    if (structured.value.match(/^text\//) && typeof this.content === 'string' && /[\u0080-\uFFFF]/.test(this.content)) {
                        structured.params.charset = 'utf-8';
                    }

                    value = this._buildHeaderValue(structured);
                    break;
                case 'Bcc':
                    // skip BCC values
                    return;
            }

            // skip empty lines
            value = this._encodeHeaderValue(key, value);
            if (!(value || '').toString().trim()) {
                return;
            }

            lines.push(mimecodec.foldLines(key + ': ' + value, 76));
        }.bind(this));

        // Ensure mandatory header fields
        if (this.rootNode === this) {
            if (!this.getHeader('Date')) {
                lines.push('Date: ' + this.date.toUTCString().replace(/GMT/, '+0000'));
            }
            // You really should define your own Message-Id field
            if (!this.getHeader('Message-Id')) {
                lines.push('Message-Id: <' +
                    // crux to generate random strings like this:
                    // "1401391905590-58aa8c32-d32a065c-c1a2aad2"
                    [0, 0, 0].reduce(function(prev) {
                        return prev + '-' + Math.floor((1 + Math.random()) * 0x100000000).
                        toString(16).
                        substring(1);
                    }, Date.now()) +
                    '@' +
                    // try to use the domain of the FROM address or fallback localhost
                    (this.getEnvelope().from || 'localhost').split('@').pop() +
                    '>');
            }
            if (!this.getHeader('MIME-Version')) {
                lines.push('MIME-Version: 1.0');
            }
        }
        lines.push('');

        if (this.content) {

            switch (transferEncoding) {
                case 'quoted-printable':
                    lines.push(mimecodec.quotedPrintableEncode(this.content));
                    break;
                case 'base64':
                    lines.push(mimecodec.base64Encode(this.content, typeof this.content === 'object' && 'binary' || false));
                    break;
                default:
                    if (flowed) {
                        lines.push(mimecodec.foldLines(this.content.replace(/\r?\n/g, '\r\n').
                            // space stuffing http://tools.ietf.org/html/rfc3676#section-4.2
                            replace(/^( |From|>)/igm, ' $1'),
                            76, true));
                    } else {
                        lines.push(this.content.replace(/\r?\n/g, '\r\n'));
                    }
            }
            if (this.multipart) {
                lines.push('');
            }
        }

        if (this.multipart) {
            this._childNodes.forEach(function(node) {
                lines.push('--' + this.boundary);
                lines.push(node.build());
            }.bind(this));
            lines.push('--' + this.boundary + '--');
            lines.push('');
        }

        return lines.join('\r\n');
    };

    /**
     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses
     *
     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}
     */
    MimeNode.prototype.getEnvelope = function() {
        var envelope = {
            from: false,
            to: []
        };
        this._headers.forEach(function(header) {
            var list = [];
            if (header.key === 'From' || (!envelope.from && ['Reply-To', 'Sender'].indexOf(header.key) >= 0)) {
                this._convertAddresses(this._parseAddresses(header.value), list);
                if (list.length && list[0]) {
                    envelope.from = list[0];
                }
            } else if (['To', 'Cc', 'Bcc'].indexOf(header.key) >= 0) {
                this._convertAddresses(this._parseAddresses(header.value), envelope.to);
            }
        }.bind(this));

        return envelope;
    };

    /////// PRIVATE METHODS

    /**
     * Parses addresses. Takes in a single address or an array or an
     * array of address arrays (eg. To: [[first group], [second group],...])
     *
     * @param {Mixed} addresses Addresses to be parsed
     * @return {Array} An array of address objects
     */
    MimeNode.prototype._parseAddresses = function(addresses) {
        return [].concat.apply([], [].concat(addresses).map(function(address) {
            if (address && address.address) {
                address = this._convertAddresses(address);
            }
            return addressparser.parse(address);
        }.bind(this)));
    };

    /**
     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-
     *
     * @param {String} key Key to be normalized
     * @return {String} key in Camel-Case form
     */
    MimeNode.prototype._normalizeHeaderKey = function(key) {
        return (key || '').toString().
            // no newlines in keys
        replace(/\r?\n|\r/g, ' ').
        trim().toLowerCase().
        // use uppercase words, except MIME
        replace(/^MIME\b|^[a-z]|\-[a-z]/ig, function(c) {
            return c.toUpperCase();
        });
    };

    /**
     * Joins parsed header value together as 'value; param1=value1; param2=value2'
     *
     * @param {Object} structured Parsed header value
     * @return {String} joined header value
     */
    MimeNode.prototype._buildHeaderValue = function(structured) {
        var paramsArray = [];

        Object.keys(structured.params || {}).forEach(function(param) {
            // filename might include unicode characters so it is a special case
            if (param === 'filename') {
                mimecodec.continuationEncode(param, structured.params[param], 50).forEach(function(encodedParam) {
                    // continuation encoded strings are always escaped, so no need to use enclosing quotes
                    // in fact using quotes might end up with invalid filenames in some clients
                    paramsArray.push(encodedParam.key + '=' + encodedParam.value);
                });
            } else {
                paramsArray.push(param + '=' + this._escapeHeaderArgument(structured.params[param]));
            }
        }.bind(this));

        return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');
    };

    /**
     * Escapes a header argument value (eg. boundary value for content type),
     * adds surrounding quotes if needed
     *
     * @param {String} value Header argument value
     * @return {String} escaped and quoted (if needed) argument value
     */
    MimeNode.prototype._escapeHeaderArgument = function(value) {
        if (value.match(/[\s'"\\;\/=]|^\-/g)) {
            return '"' + value.replace(/(["\\])/g, "\\$1") + '"';
        } else {
            return value;
        }
    };

    /**
     * Checks if the content type is multipart and defines boundary if needed.
     * Doesn't return anything, modifies object argument instead.
     *
     * @param {Object} structured Parsed header value for 'Content-Type' key
     */
    MimeNode.prototype._handleContentType = function(structured) {
        this.contentType = structured.value.trim().toLowerCase();

        this.multipart = this.contentType.split('/').reduce(function(prev, value) {
            return prev === 'multipart' ? value : false;
        });

        if (this.multipart) {
            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();
        } else {
            this.boundary = false;
        }
    };

    /**
     * Generates a multipart boundary value
     *
     * @return {String} boundary value
     */
    MimeNode.prototype._generateBoundary = function() {
        return '----sinikael-?=_' + this._nodeId + '-' + this.rootNode.baseBoundary;
    };

    /**
     * Encodes a header value for use in the generated rfc2822 email.
     *
     * @param {String} key Header key
     * @param {String} value Header value
     */
    MimeNode.prototype._encodeHeaderValue = function(key, value) {
        key = this._normalizeHeaderKey(key);

        switch (key) {
            case 'From':
            case 'Sender':
            case 'To':
            case 'Cc':
            case 'Bcc':
            case 'Reply-To':
                return this._convertAddresses(this._parseAddresses(value));

            case 'Message-Id':
            case 'In-Reply-To':
            case 'Content-Id':
                value = (value || '').toString().replace(/\r?\n|\r/g, ' ');

                if (value.charAt(0) !== '<') {
                    value = '<' + value;
                }

                if (value.charAt(value.length - 1) !== '>') {
                    value = value + '>';
                }
                return value;

            case 'References':
                value = [].concat.apply([], [].concat(value || '').map(function(elm) {
                    elm = (elm || '').toString().replace(/\r?\n|\r/g, ' ').trim();
                    return elm.replace(/<[^>]*>/g, function(str) {
                        return str.replace(/\s/g, '');
                    }).split(/\s+/);
                })).map(function(elm) {
                    if (elm.charAt(0) !== '<') {
                        elm = '<' + elm;
                    }
                    if (elm.charAt(elm.length - 1) !== '>') {
                        elm = elm + '>';
                    }
                    return elm;
                });

                return value.join(' ').trim();

            default:
                value = (value || '').toString().replace(/\r?\n|\r/g, ' ');
                // mimeWordsEncode only encodes if needed, otherwise the original string is returned
                return mimecodec.mimeWordsEncode(value, 'Q', 52);
        }
    };

    /**
     * Rebuilds address object using punycode and other adjustments
     *
     * @param {Array} addresses An array of address objects
     * @param {Array} [uniqueList] An array to be populated with addresses
     * @return {String} address string
     */
    MimeNode.prototype._convertAddresses = function(addresses, uniqueList) {
        var values = [];

        uniqueList = uniqueList || [];

        [].concat(addresses || []).forEach(function(address) {
            if (address.address) {
                address.address = address.address.replace(/^.*?(?=\@)/, function(user) {
                    return mimecodec.mimeWordsEncode(user, 'Q', 52);
                }).replace(/@.+$/, function(domain) {
                    return '@' + punycode.toASCII(domain.substr(1));
                });

                if (!address.name) {
                    values.push(address.address);
                } else if (address.name) {
                    values.push(this._encodeAddressName(address.name) + ' <' + address.address + '>');
                }

                if (uniqueList.indexOf(address.address) < 0) {
                    uniqueList.push(address.address);
                }
            } else if (address.group) {
                values.push(this._encodeAddressName(address.name) + ':' + (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim() + ';');
            }
        }.bind(this));

        return values.join(', ');
    };

    /**
     * If needed, mime encodes the name part
     *
     * @param {String} name Name part of an address
     * @returns {String} Mime word encoded string if needed
     */
    MimeNode.prototype._encodeAddressName = function(name) {
        if (!/^[\w ']*$/.test(name)) {
            if (/^[\x20-\x7e]*$/.test(name)) {
                return '"' + name.replace(/([\\"])/g, '\\$1') + '"';
            } else {
                return mimecodec.mimeWordEncode(name, 'Q', 52);
            }
        }
        return name;
    };

    /**
     * Checks if a value is plaintext string (uses only printable 7bit chars)
     *
     * @param {String} value String to be tested
     * @returns {Boolean} true if it is a plaintext string
     */
    MimeNode.prototype._isPlainText = function(value) {
        if (typeof value !== 'string' || /[\x00-\x08\x0b\x0c\x0e-\x1f\u0080-\uFFFF]/.test(value)) {
            return false;
        } else {
            return true;
        }
    };

    return MimeNode;
}));

// end emailjs
})();
(function(){
console.debug = console.log;

const dereq_minimalistic_assert =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 43);
/******/ })
/************************************************************************/
/******/ ({

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

/***/ })

/******/ });
const dereq_bn =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ 30:
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

(function (module, exports) {
  'use strict'; // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  } // Could use `inherits` module, but don't want to move from single file
  // architecture yet.


  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function () {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  } // BN


  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0; // Reduction context

    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }

  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;
  var Buffer;

  try {
    Buffer = __webpack_require__(30).Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }

    assert(base === (base | 0) && base >= 2 && base <= 36);
    number = number.toString().replace(/\s+/g, '');
    var start = 0;

    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();
    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }

    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return; // Reverse the bytes

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');

    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;

    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }

    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r <<= 4; // 'a' - 'f'

      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa; // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa; // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }

    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w; // Scan 24-bit chunks and add them to the number

    var off = 0;

    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;

      if (off >= 26) {
        off -= 26;
        j++;
      }
    }

    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }

    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r *= mul; // 'a'

      if (c >= 49) {
        r += c - 49 + 0xa; // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa; // '0' - '9'
      } else {
        r += c;
      }
    }

    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1; // Find length of limb in base

    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }

    limbLen--;
    limbPow = limbPow / base | 0;
    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;
    var word = 0;

    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);
      this.imuln(limbPow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }

    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }

    return this;
  }; // Remove leading `0` from `this`


  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }

    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }

    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };
  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */


  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;
    var out;

    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;

        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }

        off += 2;

        if (off >= 26) {
          off -= 26;
          i--;
        }
      }

      if (carry !== 0) {
        out = carry.toString(16) + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;

      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }

      if (this.isZero()) {
        out = '0' + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];

    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }

    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');
    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);
    var b, i;
    var q = this.clone();

    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;

      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }

      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }

      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }

      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }

      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;
    var t = w;
    var r = 0;

    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }

    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }

    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }

    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }

    if ((t & 0x1) === 0) {
      r++;
    }

    return r;
  }; // Return number of used bits in a BN


  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];

    var hi = this._countBits(w);

    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  } // Number of trailing zero bits


  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;
    var r = 0;

    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);

      r += b;
      if (b !== 26) break;
    }

    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }

    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }

    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  }; // Return negative clone of `this`


  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  }; // Or `num` with `this` in-place


  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  }; // Or `num` with `this`


  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  }; // And `num` with `this` in-place


  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;

    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;
    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  }; // And `num` with `this`


  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  }; // Xor `num` with `this` in-place


  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;
    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  }; // Xor `num` with `this`


  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  }; // Not ``this`` with ``width`` bitwidth


  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);
    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26; // Extend the buffer with leading zeroes

    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    } // Handle complete words


    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    } // Handle the residue


    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    } // And remove leading zeroes


    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  }; // Set `bit` of `this`


  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);
    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  }; // Add `num` to `this` in-place


  BN.prototype.iadd = function iadd(num) {
    var r; // negative + positive

    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign(); // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    } // a.length > b.length


    var a, b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++; // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  }; // Add `num` to `this`


  BN.prototype.add = function add(num) {
    var res;

    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);
    return num.clone().iadd(this);
  }; // Subtract `num` from `this` in-place


  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign(); // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    } // At this point both numbers are positive


    var cmp = this.cmp(num); // Optimization - zeroify

    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    } // a > b


    var a, b;

    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    } // Copy rest of the words


    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  }; // Subtract `num` from `this`


  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;
    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }

      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }

    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  } // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).


  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;
    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */

    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */

    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */

    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */

    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */

    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */

    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */

    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */

    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */

    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */

    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */

    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */

    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */

    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */

    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */

    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */

    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */

    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */

    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */

    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;

    if (c !== 0) {
      o[19] = c;
      out.length++;
    }

    return out;
  }; // Polyfill comb


  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;
    var carry = 0;
    var hncarry = 0;

    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;
        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }

      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }

    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;

    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  }; // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion


  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;

    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  }; // Returns binary-reversed representation of `x`


  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;
    var rb = 0;

    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  }; // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm


  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;
      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];
          var ro = rtws[p + j + s];
          var io = itws[p + j + s];
          var rx = rtwdf_ * ro - itwdf_ * io;
          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;
          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;
          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;
          /* jshint maxdepth : false */

          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;

    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];
      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;
      t = iws[i];
      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;

    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;

    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);
      rws[2 * i] = carry & 0x1fff;
      carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;
      carry = carry >>> 13;
    } // Pad with zeroes


    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);

    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);
    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);
    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);
    var rmws = out.words;
    rmws.length = N;
    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);
    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);
    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  }; // Multiply `this` by `num`


  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  }; // Multiply employing FFT


  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  }; // In-place Multiplication


  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000); // Carry

    var carry = 0;

    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  }; // `this` * `this`


  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  }; // `this` * `this` in-place


  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  }; // Math.pow(`this`, `num`)


  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1); // Skip leading zeroes

    var res = this;

    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;
        res = res.mul(q);
      }
    }

    return res;
  }; // Shift-left in-place


  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  }; // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits


  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;

    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;
    h -= s;
    h = Math.max(0, h); // Extended mode, copy masked part

    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }

      maskedWords.length = s;
    }

    if (s === 0) {// No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;

      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;

    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    } // Push carried bits as a mask


    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  }; // Shift-left


  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  }; // Shift-right


  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  }; // Test if n bit is set


  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) return false; // Check bit and return

    var w = this.words[s];
    return !!(w & q);
  }; // Return only lowers bits of number (in-place)


  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }

    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  }; // Return only lowers bits of number


  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  }; // Add plain number `num` to `this`


  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num); // Possible sign change

    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    } // Add without checks


    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num; // Carry

    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;

      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }

    this.length = Math.max(this.length, i + 1);
    return this;
  }; // Subtract plain number `num` from `this`


  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;
    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;

    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip(); // Subtraction overflow

    assert(carry === -1);
    carry = 0;

    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;
    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;
    var a = this.clone();
    var b = num; // Normalize

    var bhi = b.words[b.length - 1] | 0;

    var bhiBits = this._countBits(bhi);

    shift = 26 - bhiBits;

    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    } // Initialize quotient


    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);

    if (diff.negative === 0) {
      a = diff;

      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)

      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj--;
        a.negative = 0;

        a._ishlnsubmul(b, 1, j);

        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }

      if (q) {
        q.words[j] = qj;
      }
    }

    if (q) {
      q.strip();
    }

    a.strip(); // Denormalize

    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested


  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;

    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    } // Both numbers are positive at this point
    // Strip both numbers to approximate shift value


    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    } // Very short reduction


    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  }; // Find `this` / `num`


  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  }; // Find `this` % `num`


  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  }; // Find Round(`this` / `num`)


  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num); // Fast case - exact division

    if (dm.mod.isZero()) return dm.div;
    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half); // Round down

    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;
    var acc = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  }; // In-place division by number


  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);
    var carry = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    } // A * x + B * y = x


    var A = new BN(1);
    var B = new BN(0); // C * x + D * y = y

    var C = new BN(0);
    var D = new BN(1);
    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

      if (i > 0) {
        x.iushrn(i);

        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

      if (j > 0) {
        y.iushrn(j);

        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  }; // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed


  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);
    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

      if (i > 0) {
        a.iushrn(i);

        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

      if (j > 0) {
        b.iushrn(j);

        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;

    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();
    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0; // Remove common factor of two

    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }

      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);

      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  }; // Invert number in the field F(num)


  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  }; // And first word and num


  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  }; // Increment at the bit position in-line


  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) {
      this._expand(s + 1);

      this.words[s] |= q;
      return this;
    } // Add bit and propagate, if needed


    var carry = q;

    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;
    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;
    this.strip();
    var res;

    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');
      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }

    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`


  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;
    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Unsigned comparison


  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;
    var res = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;
      if (a === b) continue;

      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }

      break;
    }

    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  }; //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //


  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');

    this.red._verify1(this);

    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');

    this.red._verify1(this);

    return this.red.isqr(this);
  }; // Square root over p


  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');

    this.red._verify1(this);

    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');

    this.red._verify1(this);

    return this.red.invm(this);
  }; // Return negative clone of `this` % `red modulo`


  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');

    this.red._verify1(this);

    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');

    this.red._verify1(this);

    return this.red.pow(this, num);
  }; // Prime numbers with efficient reduction


  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  }; // Pseudo-Mersenne prime

  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);
    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }

  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;
    var outLen = Math.min(input.length, 9);

    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }

    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    } // Shift by 9 limbs


    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }

    prev >>>= 22;
    input.words[i - 10] = prev;

    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

    var lo = 0;

    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    } // Fast length reduction


    if (num.words[num.length - 1] === 0) {
      num.length--;

      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }

    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }

  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }

  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }

  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;

    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;
      num.words[i] = lo;
      carry = hi;
    }

    if (carry !== 0) {
      num.words[num.length++] = carry;
    }

    return num;
  }; // Exported mostly for testing purposes, use plain name instead


  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];
    var prime;

    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }

    primes[name] = prime;
    return prime;
  }; //
  // Base reduction engine
  //


  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);

      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);

    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);

    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);

    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();
    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1); // Fast case

    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)


    var q = this.m.subn(1);
    var s = 0;

    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }

    assert(!q.isZero());
    var one = new BN(1).toRed(this);
    var nOne = one.redNeg(); // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.

    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;

    while (t.cmp(one) !== 0) {
      var tmp = t;

      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }

      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));
      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);

    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();
    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;

    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;

    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];

      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;

        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }

      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  }; //
  // Montgomery method engine
  //


  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);
    this.shift = this.m.bitLength();

    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);
    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }

  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, undefined);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(42)(module)))

/***/ }),

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ })

/******/ });
const dereq_asn1 =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ (Array(22).concat([
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var asn1 = exports;
asn1.bignum = __webpack_require__(23);
asn1.define = __webpack_require__(24).define;
asn1.base = __webpack_require__(27);
asn1.constants = __webpack_require__(33);
asn1.decoders = __webpack_require__(35);
asn1.encoders = __webpack_require__(38);

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = dereq_bn;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var asn1 = __webpack_require__(22);

var inherits = __webpack_require__(25);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;
  this.decoders = {};
  this.encoders = {};
}

;

Entity.prototype._createNamed = function createNamed(base) {
  var named;

  try {
    named = __webpack_require__(26).runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }

  inherits(named, base);

  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der'; // Lazily create decoder

  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der'; // Lazily create encoder

  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc,
/* internal */
reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = dereq_inherits;

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = require("vm");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = exports;
base.Reporter = __webpack_require__(28).Reporter;
base.DecoderBuffer = __webpack_require__(29).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(29).EncoderBuffer;
base.Node = __webpack_require__(31);

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}

exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;
  return {
    obj: state.obj,
    pathLen: state.path.length
  };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;
  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;
  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;
  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;
  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;
  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;
  var inherited = msg instanceof ReporterError;

  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;
  if (!inherited) state.errors.push(err);
  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial) return result;
  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}

;
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }

  return this;
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

var Reporter = __webpack_require__(27).Reporter;

var Buffer = __webpack_require__(30).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);

  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}

inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return {
    offset: this.offset,
    reporter: Reporter.prototype.save.call(this)
  };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;
  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);
  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
  var res = new DecoderBuffer(this.base); // Share reporter state

  res._reporterState = this._reporterState;
  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}

exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = new Buffer(this.length);
  if (!offset) offset = 0;
  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Reporter = __webpack_require__(27).Reporter;

var EncoderBuffer = __webpack_require__(27).EncoderBuffer;

var DecoderBuffer = __webpack_require__(27).DecoderBuffer;

var assert = __webpack_require__(32); // Supported tags


var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr']; // Public methods list

var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags); // Overrided methods list

var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;
  state.enc = enc;
  state.parent = parent || null;
  state.children = null; // State

  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null; // Should create new instance on each method

  if (!state.parent) {
    state.children = [];

    this._wrap();
  }
}

module.exports = Node;
var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;
  assert(state.parent === null);
  body.call(this); // Filter children

  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState; // Filter children and args

  var children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children; // Replace parent to maintain backward link

    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }

  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
      var res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
}; //
// Overrided methods
//


overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
}); //
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;
  assert(state.use === null);
  state.use = item;
  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;
  state.optional = true;
  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;
  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;
  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;
  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;
  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);
  state.obj = true;
  if (args.length !== 0) this._useArgs(args);
  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;
  assert(state.key === null);
  state.key = newKey;
  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;
  state.any = true;
  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;
  assert(state.choice === null);
  state.choice = obj;

  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;
  assert(state.use === null);
  state.contains = item;
  return this;
}; //
// Decoding
//


Node.prototype._decode = function decode(input, options) {
  var state = this._baseState; // Decode root node

  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
  var result = state['default'];
  var present = true;
  var prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key); // Check if tag is there

  if (state.optional) {
    var tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();

      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }

      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);
      if (input.isError(present)) return present;
    }
  } // Push object on stack


  var prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);

      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    var start = input.offset; // Unwrap implicit and normal values

    if (state.use === null && state.choice === null) {
      if (state.any) var save = input.save();

      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);

      if (input.isError(body)) return body;
      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content'); // Select proper method for tag

    if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);
    if (input.isError(result)) return result; // Decode children

    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    } // Decode contained/encoded by schema, only in bit or octet strings


    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  } // Pop object


  if (state.obj && present) result = input.leaveObject(prevObj); // Set key

  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);
  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;
  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {
  var state = this._baseState; // Create altered use decoder if implicit is set

  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];

  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }

  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;
  Object.keys(state.choice).some(function (key) {
    var save = input.save();
    var node = state.choice[key];

    try {
      var value = node._decode(input, options);

      if (input.isError(value)) return false;
      result = {
        type: key,
        value: value
      };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }

    return true;
  }, this);
  if (!match) return input.error('Choice not matched');
  return result;
}; //
// Encoding
//


Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  var result = this._encodeValue(data, reporter, parent);

  if (result === undefined) return;
  if (this._skipDefault(result, reporter, parent)) return;
  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState; // Decode root node

  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
  var result = null; // Set reporter to share it with a child class

  this.reporter = reporter; // Check if data is there

  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  } // Encode children first


  var content = null;
  var primitive = false;

  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
      if (child._baseState.key === null) return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);
      if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);

      reporter.leaveKey(prevKey);
      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        var state = this._baseState;
        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  } // Encode data itself


  var result;

  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  } // Wrap in explicit


  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;
  var node = state.choice[data.type];

  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }

  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;
  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = dereq_minimalistic_assert;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = exports; // Helper

constants._reverse = function reverse(map) {
  var res = {};
  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;
    var value = map[key];
    res[value] = key;
  });
  return res;
};

constants.der = __webpack_require__(34);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = __webpack_require__(33);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);
exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var decoders = exports;
decoders.der = __webpack_require__(36);
decoders.pem = __webpack_require__(37);

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

var asn1 = __webpack_require__(22);

var base = asn1.base;
var bignum = asn1.bignum; // Import DER constants

var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

;
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);
  return this.tree._decode(data, options);
}; // Tree methods


function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}

inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;
  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  buffer.restore(state);
  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"'); // Failure

  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"'); // Indefinite length... find END tag

  var state = buffer.save();

  var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');

  if (buffer.isError(res)) return res;
  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;
    var res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail); // Failure

    if (buffer.isError(res)) return res;
    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  var result = [];

  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');

    if (buffer.isError(possibleEnd)) return possibleEnd;
    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }

  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return {
      unused: unused,
      data: buffer.raw()
    };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
    var str = '';

    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }

    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');

    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }

    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');

    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }

    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;

  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;

    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }

  if (subident & 0x80) identifiers.push(ident);
  var first = identifiers[0] / 40 | 0;
  var second = identifiers[0] % 40;
  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();

  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);
  if (values) res = values[res.toString(10)] || res;
  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
}; // Utility methods


function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;
  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0; // Multi-octet tag - load

  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;

    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;
      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }

  var tagStr = der.tag[tag];
  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len)) return len; // Indefinite form

  if (!primitive && len === 0x80) return null; // Definite form

  if ((len & 0x80) === 0) {
    // Short form
    return len;
  } // Long form


  var num = len & 0x7f;
  if (num > 4) return buf.error('length octect is too long');
  len = 0;

  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

var Buffer = __webpack_require__(30).Buffer;

var DERDecoder = __webpack_require__(36);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}

;
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);
  var label = options.label.toUpperCase();
  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;

  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null) continue;
    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }

  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
  var base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols

  base64.replace(/[^a-z0-9\+\/=]+/gi, '');
  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encoders = exports;
encoders.der = __webpack_require__(39);
encoders.pem = __webpack_require__(40);

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

var Buffer = __webpack_require__(30).Buffer;

var asn1 = __webpack_require__(22);

var base = asn1.base; // Import DER constants

var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

;
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
}; // Tree methods


function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}

inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter); // Short form

  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  } // Long form
  // Count octets required to store length


  var lenOctets = 1;

  for (var i = content.length; i >= 0x100; i >>= 8) lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) header[i] = j & 0xff;

  return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);

    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }

    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }

    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }

    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);

    for (var i = 0; i < id.length; i++) id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();

    for (var i = 0; i < id.length; i++) id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  } // Count number of octets


  var size = 0;

  for (var i = 0; i < id.length; i++) {
    var ident = id[i];

    for (size++; ident >= 0x80; ident >>= 7) size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;

  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;

    while ((ident >>= 7) > 0) objid[offset--] = 0x80 | ident & 0x7f;
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');

    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }

    num = values[num];
  } // Bignum, assume big endian


  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();

    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }

    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0) size++;
    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);
  if (num < 0x100) return this._createEncoderBuffer([0, num]);
  var size = 1;

  for (var i = num; i >= 0x100; i >>= 8) size++;

  var out = new Array(size);

  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }

  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null) return false;
  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) return false;

  return true;
}; // Utility methods


function encodeTag(tag, primitive, cls, reporter) {
  var res;
  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';
  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);
  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
  if (!primitive) res |= 0x20;
  res |= der.tagClassByName[cls || 'universal'] << 6;
  return res;
}

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(25);

var DEREncoder = __webpack_require__(39);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}

;
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);
  var p = buf.toString('base64');
  var out = ['-----BEGIN ' + options.label + '-----'];

  for (var i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));

  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

/***/ })
/******/ ]));
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.openpgp = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

!function (e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = e || self).WebStreamsPolyfill = {});
}(undefined, function (e) {
  "use strict";
  const t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? Symbol : e => `Symbol(${e})`;const r = "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : void 0,
        o = Number.isNaN || function (e) {
    return e != e;
  };function n(e) {
    return "object" == typeof e && null !== e || "function" == typeof e;
  }function i(e, t, r) {
    Object.defineProperty(e, t, { value: r, writable: !0, enumerable: !0, configurable: !0 });
  }function a(e) {
    return e.slice();
  }function s(e, t, r, o, n) {
    new Uint8Array(e).set(new Uint8Array(r, o, n), t);
  }function l(e) {
    return !1 !== function (e) {
      if ("number" != typeof e) return !1;if (o(e)) return !1;if (e < 0) return !1;return !0;
    }(e) && e !== 1 / 0;
  }function c(e, t, r) {
    if ("function" != typeof e) throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e, t, r);
  }function u(e, t, r, o) {
    const n = e[t];if (void 0 !== n) {
      if ("function" != typeof n) throw new TypeError(`${n} is not a method`);switch (r) {case 0:
          return () => f(n, e, o);case 1:
          return t => {
            const r = [t].concat(o);return f(n, e, r);
          };}
    }return () => Promise.resolve();
  }function d(e, t, r) {
    const o = e[t];if (void 0 !== o) return c(o, e, r);
  }function f(e, t, r) {
    try {
      return Promise.resolve(c(e, t, r));
    } catch (e) {
      return Promise.reject(e);
    }
  }function _(e) {
    return e;
  }function h(e) {
    if (e = Number(e), o(e) || e < 0) throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");return e;
  }function b(e) {
    if (void 0 === e) return () => 1;if ("function" != typeof e) throw new TypeError("size property of a queuing strategy must be a function");return t => e(t);
  }function m(e, t, r) {
    return Promise.prototype.then.call(e, t, r);
  }function y(e, t, r) {
    let o, n;const i = new Promise((e, t) => {
      o = e, n = t;
    });void 0 === r && (r = e => {
      throw e;
    });return function (e, t, r) {
      let o = !1;const n = e => {
        !1 === o && (o = !0, r(e));
      };let i = 0,
          a = 0;const s = e.length,
            l = new Array(s);for (const r of e) {
        const e = i;m(r, r => {
          l[e] = r, ++a === s && t(l);
        }, n), ++i;
      }
    }(e, e => {
      try {
        const r = t(e);o(r);
      } catch (e) {
        n(e);
      }
    }, e => {
      try {
        const t = r(e);o(t);
      } catch (e) {
        n(e);
      }
    }), i;
  }function p(e) {}function w(e) {
    e && e instanceof p.AssertionError && setTimeout(() => {
      throw e;
    }, 0);
  }function g(e) {
    const t = e._queue.shift();return e._queueTotalSize -= t.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), t.value;
  }function S(e, t, r) {
    if (!l(r = Number(r))) throw new RangeError("Size must be a finite, non-NaN, non-negative number.");e._queue.push({ value: t, size: r }), e._queueTotalSize += r;
  }function v(e) {
    e._queue = [], e._queueTotalSize = 0;
  }p.AssertionError = function () {};const R = t("[[AbortSteps]]"),
        P = t("[[ErrorSteps]]");class WritableStream {
    constructor(e = {}, t = {}) {
      q(this);const r = t.size;let o = t.highWaterMark;if (void 0 !== e.type) throw new RangeError("Invalid type is specified");const n = b(r);void 0 === o && (o = 1), function (e, t, r, o) {
        const n = Object.create(WritableStreamDefaultController.prototype);const i = u(t, "write", 1, [n]),
              a = u(t, "close", 0, []),
              s = u(t, "abort", 1, []);$(e, n, function () {
          return d(t, "start", [n]);
        }, i, a, s, r, o);
      }(this, e, o = h(o), n);
    }get locked() {
      if (!1 === E(this)) throw G("locked");return C(this);
    }abort(e) {
      return !1 === E(this) ? Promise.reject(G("abort")) : !0 === C(this) ? Promise.reject(new TypeError("Cannot abort a stream that already has a writer")) : j(this, e);
    }getWriter() {
      if (!1 === E(this)) throw G("getWriter");return T(this);
    }
  }function T(e) {
    return new WritableStreamDefaultWriter(e);
  }function q(e) {
    e._state = "writable", e._storedError = void 0, e._writer = void 0, e._writableStreamController = void 0, e._writeRequests = [], e._inFlightWriteRequest = void 0, e._closeRequest = void 0, e._inFlightCloseRequest = void 0, e._pendingAbortRequest = void 0, e._backpressure = !1;
  }function E(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_writableStreamController");
  }function C(e) {
    return void 0 !== e._writer;
  }function j(e, t) {
    const r = e._state;if ("closed" === r || "errored" === r) return Promise.resolve(void 0);if (void 0 !== e._pendingAbortRequest) return e._pendingAbortRequest._promise;let o = !1;"erroring" === r && (o = !0, t = void 0);const n = new Promise((r, n) => {
      e._pendingAbortRequest = { _promise: void 0, _resolve: r, _reject: n, _reason: t, _wasAlreadyErroring: o };
    });return e._pendingAbortRequest._promise = n, !1 === o && W(e, t), n;
  }function A(e, t) {
    "writable" !== e._state ? B(e) : W(e, t);
  }function W(e, t) {
    const r = e._writableStreamController;e._state = "erroring", e._storedError = t;const o = e._writer;void 0 !== o && D(o, t), !1 === function (e) {
      if (void 0 === e._inFlightWriteRequest && void 0 === e._inFlightCloseRequest) return !1;return !0;
    }(e) && !0 === r._started && B(e);
  }function B(e) {
    e._state = "errored", e._writableStreamController[P]();const t = e._storedError;for (const r of e._writeRequests) r._reject(t);if (e._writeRequests = [], void 0 === e._pendingAbortRequest) return void z(e);const r = e._pendingAbortRequest;if (e._pendingAbortRequest = void 0, !0 === r._wasAlreadyErroring) return r._reject(t), void z(e);e._writableStreamController[R](r._reason).then(() => {
      r._resolve(), z(e);
    }, t => {
      r._reject(t), z(e);
    });
  }function O(e) {
    return void 0 !== e._closeRequest || void 0 !== e._inFlightCloseRequest;
  }function z(e) {
    void 0 !== e._closeRequest && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);const t = e._writer;void 0 !== t && ee(t, e._storedError);
  }function k(e, t) {
    const r = e._writer;void 0 !== r && t !== e._backpressure && (!0 === t ? function (e) {
      re(e);
    }(r) : ae(r)), e._backpressure = t;
  }class WritableStreamDefaultWriter {
    constructor(e) {
      if (!1 === E(e)) throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");if (!0 === C(e)) throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream = e, e._writer = this;const t = e._state;if ("writable" === t) !1 === O(e) && !0 === e._backpressure ? re(this) : ne(this), X(this);else if ("erroring" === t) oe(this, e._storedError), X(this);else if ("closed" === t) ne(this), function (e) {
        X(e), te(e);
      }(this);else {
        const t = e._storedError;oe(this, t), Z(this, t);
      }
    }get closed() {
      return !1 === F(this) ? Promise.reject(J("closed")) : this._closedPromise;
    }get desiredSize() {
      if (!1 === F(this)) throw J("desiredSize");if (void 0 === this._ownerWritableStream) throw K("desiredSize");return function (e) {
        const t = e._ownerWritableStream,
              r = t._state;if ("errored" === r || "erroring" === r) return null;if ("closed" === r) return 0;return Q(t._writableStreamController);
      }(this);
    }get ready() {
      return !1 === F(this) ? Promise.reject(J("ready")) : this._readyPromise;
    }abort(e) {
      return !1 === F(this) ? Promise.reject(J("abort")) : void 0 === this._ownerWritableStream ? Promise.reject(K("abort")) : function (e, t) {
        return j(e._ownerWritableStream, t);
      }(this, e);
    }close() {
      if (!1 === F(this)) return Promise.reject(J("close"));const e = this._ownerWritableStream;return void 0 === e ? Promise.reject(K("close")) : !0 === O(e) ? Promise.reject(new TypeError("cannot close an already-closing stream")) : L(this);
    }releaseLock() {
      if (!1 === F(this)) throw J("releaseLock");void 0 !== this._ownerWritableStream && M(this);
    }write(e) {
      return !1 === F(this) ? Promise.reject(J("write")) : void 0 === this._ownerWritableStream ? Promise.reject(K("write to")) : Y(this, e);
    }
  }function F(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_ownerWritableStream");
  }function L(e) {
    const t = e._ownerWritableStream,
          r = t._state;if ("closed" === r || "errored" === r) return Promise.reject(new TypeError(`The stream (in ${r} state) is not in the writable state and cannot be closed`));const o = new Promise((e, r) => {
      const o = { _resolve: e, _reject: r };t._closeRequest = o;
    });return !0 === t._backpressure && "writable" === r && ae(e), function (e) {
      S(e, "close", 0), x(e);
    }(t._writableStreamController), o;
  }function I(e, t) {
    "pending" === e._closedPromiseState ? ee(e, t) : function (e, t) {
      Z(e, t);
    }(e, t);
  }function D(e, t) {
    "pending" === e._readyPromiseState ? ie(e, t) : function (e, t) {
      oe(e, t);
    }(e, t);
  }function M(e) {
    const t = e._ownerWritableStream,
          r = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");D(e, r), I(e, r), t._writer = void 0, e._ownerWritableStream = void 0;
  }function Y(e, t) {
    const r = e._ownerWritableStream,
          o = r._writableStreamController,
          n = function (e, t) {
      try {
        return e._strategySizeAlgorithm(t);
      } catch (t) {
        return H(e, t), 1;
      }
    }(o, t);if (r !== e._ownerWritableStream) return Promise.reject(K("write to"));const i = r._state;if ("errored" === i) return Promise.reject(r._storedError);if (!0 === O(r) || "closed" === i) return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));if ("erroring" === i) return Promise.reject(r._storedError);const a = function (e) {
      return new Promise((t, r) => {
        const o = { _resolve: t, _reject: r };e._writeRequests.push(o);
      });
    }(r);return function (e, t, r) {
      const o = { chunk: t };try {
        S(e, o, r);
      } catch (t) {
        return void H(e, t);
      }const n = e._controlledWritableStream;if (!1 === O(n) && "writable" === n._state) {
        const t = U(e);k(n, t);
      }x(e);
    }(o, t, n), a;
  }class WritableStreamDefaultController {
    constructor() {
      throw new TypeError("WritableStreamDefaultController cannot be constructed explicitly");
    }error(e) {
      if (!1 === function (e) {
        if (!n(e)) return !1;if (!Object.prototype.hasOwnProperty.call(e, "_controlledWritableStream")) return !1;return !0;
      }(this)) throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");"writable" === this._controlledWritableStream._state && V(this, e);
    }[R](e) {
      const t = this._abortAlgorithm(e);return N(this), t;
    }[P]() {
      v(this);
    }
  }function $(e, t, r, o, n, i, a, s) {
    t._controlledWritableStream = e, e._writableStreamController = t, t._queue = void 0, t._queueTotalSize = void 0, v(t), t._started = !1, t._strategySizeAlgorithm = s, t._strategyHWM = a, t._writeAlgorithm = o, t._closeAlgorithm = n, t._abortAlgorithm = i;const l = U(t);k(e, l);const c = r();Promise.resolve(c).then(() => {
      t._started = !0, x(t);
    }, r => {
      t._started = !0, A(e, r);
    }).catch(w);
  }function N(e) {
    e._writeAlgorithm = void 0, e._closeAlgorithm = void 0, e._abortAlgorithm = void 0, e._strategySizeAlgorithm = void 0;
  }function Q(e) {
    return e._strategyHWM - e._queueTotalSize;
  }function x(e) {
    const t = e._controlledWritableStream;if (!1 === e._started) return;if (void 0 !== t._inFlightWriteRequest) return;const r = t._state;if ("closed" === r || "errored" === r) return;if ("erroring" === r) return void B(t);if (0 === e._queue.length) return;const o = function (e) {
      return e._queue[0].value;
    }(e);"close" === o ? function (e) {
      const t = e._controlledWritableStream;(function (e) {
        e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;
      })(t), g(e);const r = e._closeAlgorithm();N(e), r.then(() => {
        !function (e) {
          e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, "erroring" === e._state && (e._storedError = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = "closed";const t = e._writer;void 0 !== t && te(t);
        }(t);
      }, e => {
        !function (e, t) {
          e._inFlightCloseRequest._reject(t), e._inFlightCloseRequest = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._reject(t), e._pendingAbortRequest = void 0), A(e, t);
        }(t, e);
      }).catch(w);
    }(e) : function (e, t) {
      const r = e._controlledWritableStream;(function (e) {
        e._inFlightWriteRequest = e._writeRequests.shift();
      })(r), e._writeAlgorithm(t).then(() => {
        !function (e) {
          e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;
        }(r);const t = r._state;if (g(e), !1 === O(r) && "writable" === t) {
          const t = U(e);k(r, t);
        }x(e);
      }, t => {
        "writable" === r._state && N(e), function (e, t) {
          e._inFlightWriteRequest._reject(t), e._inFlightWriteRequest = void 0, A(e, t);
        }(r, t);
      }).catch(w);
    }(e, o.chunk);
  }function H(e, t) {
    "writable" === e._controlledWritableStream._state && V(e, t);
  }function U(e) {
    return Q(e) <= 0;
  }function V(e, t) {
    const r = e._controlledWritableStream;N(e), W(r, t);
  }function G(e) {
    return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`);
  }function J(e) {
    return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`);
  }function K(e) {
    return new TypeError("Cannot " + e + " a stream using a released writer");
  }function X(e) {
    e._closedPromise = new Promise((t, r) => {
      e._closedPromise_resolve = t, e._closedPromise_reject = r, e._closedPromiseState = "pending";
    });
  }function Z(e, t) {
    X(e), ee(e, t);
  }function ee(e, t) {
    e._closedPromise.catch(() => {}), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "rejected";
  }function te(e) {
    e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "resolved";
  }function re(e) {
    e._readyPromise = new Promise((t, r) => {
      e._readyPromise_resolve = t, e._readyPromise_reject = r;
    }), e._readyPromiseState = "pending";
  }function oe(e, t) {
    re(e), ie(e, t);
  }function ne(e) {
    re(e), ae(e);
  }function ie(e, t) {
    e._readyPromise.catch(() => {}), e._readyPromise_reject(t), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "rejected";
  }function ae(e) {
    e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "fulfilled";
  }const se = Number.isInteger || function (e) {
    return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
  },
        le = t("[[CancelSteps]]"),
        ce = t("[[PullSteps]]");class ReadableStream {
    constructor(e = {}, t = {}) {
      fe(this);const r = t.size;let o = t.highWaterMark;const n = e.type;if ("bytes" === String(n)) {
        if (void 0 !== r) throw new RangeError("The strategy for a byte stream cannot have a size function");void 0 === o && (o = 0), function (e, t, r) {
          const o = Object.create(ReadableByteStreamController.prototype);const n = u(t, "pull", 0, [o]),
                i = u(t, "cancel", 1, []);let a = t.autoAllocateChunkSize;if (void 0 !== a && (a = Number(a), !1 === se(a) || a <= 0)) throw new RangeError("autoAllocateChunkSize must be a positive integer");!function (e, t, r, o, n, i, a) {
            t._controlledReadableByteStream = e, t._pullAgain = !1, t._pulling = !1, He(t), t._queue = t._queueTotalSize = void 0, v(t), t._closeRequested = !1, t._started = !1, t._strategyHWM = h(i), t._pullAlgorithm = o, t._cancelAlgorithm = n, t._autoAllocateChunkSize = a, t._pendingPullIntos = [], e._readableStreamController = t;const s = r();Promise.resolve(s).then(() => {
              t._started = !0, xe(t);
            }, e => {
              nt(t, e);
            }).catch(w);
          }(e, o, function () {
            return d(t, "start", [o]);
          }, n, i, r, a);
        }(this, e, o = h(o));
      } else {
        if (void 0 !== n) throw new RangeError("Invalid type is specified");{
          const t = b(r);void 0 === o && (o = 1), function (e, t, r, o) {
            const n = Object.create(ReadableStreamDefaultController.prototype);const i = u(t, "pull", 0, [n]),
                  a = u(t, "cancel", 1, []);$e(e, n, function () {
              return d(t, "start", [n]);
            }, i, a, r, o);
          }(this, e, o = h(o), t);
        }
      }
    }get locked() {
      if (!1 === _e(this)) throw st("locked");return he(this);
    }cancel(e) {
      return !1 === _e(this) ? Promise.reject(st("cancel")) : !0 === he(this) ? Promise.reject(new TypeError("Cannot cancel a stream that already has a reader")) : pe(this, e);
    }getReader({ mode: e } = {}) {
      if (!1 === _e(this)) throw st("getReader");if (void 0 === e) return ue(this);if ("byob" === (e = String(e))) return function (e) {
        return new ReadableStreamBYOBReader(e);
      }(this);throw new RangeError("Invalid mode is specified");
    }pipeThrough({ writable: e, readable: t }, { preventClose: r, preventAbort: o, preventCancel: n, signal: i } = {}) {
      if (!1 === _e(this)) throw st("pipeThrough");if (!1 === E(e)) throw new TypeError("writable argument to pipeThrough must be a WritableStream");if (!1 === _e(t)) throw new TypeError("readable argument to pipeThrough must be a ReadableStream");if (r = Boolean(r), o = Boolean(o), n = Boolean(n), void 0 !== i && !at(i)) throw new TypeError("ReadableStream.prototype.pipeThrough's signal option must be an AbortSignal");if (!0 === he(this)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if (!0 === C(e)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return be(this, e, r, o, n, i).catch(() => {}), t;
    }pipeTo(e, { preventClose: t, preventAbort: r, preventCancel: o, signal: n } = {}) {
      return !1 === _e(this) ? Promise.reject(st("pipeTo")) : !1 === E(e) ? Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream")) : (t = Boolean(t), r = Boolean(r), o = Boolean(o), void 0 === n || at(n) ? !0 === he(this) ? Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : !0 === C(e) ? Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : be(this, e, t, r, o, n) : Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's signal option must be an AbortSignal")));
    }tee() {
      if (!1 === _e(this)) throw st("tee");const e = function (e, t) {
        const r = ue(e);let o,
            n,
            i,
            s,
            l,
            c = !1,
            u = !1,
            d = !1;const f = new Promise(e => {
          l = e;
        });function _() {
          return Be(r).then(e => {
            const t = e.value,
                  r = e.done;if (!0 === r && !1 === c && (!1 === u && Le(i._readableStreamController), !1 === d && Le(s._readableStreamController), c = !0), !0 === c) return;const o = t,
                  n = t;!1 === u && Ie(i._readableStreamController, o), !1 === d && Ie(s._readableStreamController, n);
          });
        }function h() {}return i = de(h, _, function (t) {
          if (u = !0, o = t, !0 === d) {
            const t = a([o, n]),
                  r = pe(e, t);l(r);
          }return f;
        }), s = de(h, _, function (t) {
          if (d = !0, n = t, !0 === u) {
            const t = a([o, n]),
                  r = pe(e, t);l(r);
          }return f;
        }), r._closedPromise.catch(e => {
          !0 !== c && (De(i._readableStreamController, e), De(s._readableStreamController, e), c = !0);
        }), [i, s];
      }(this);return a(e);
    }
  }function ue(e) {
    return new ReadableStreamDefaultReader(e);
  }function de(e, t, r, o = 1, n = () => 1) {
    const i = Object.create(ReadableStream.prototype);return fe(i), $e(i, Object.create(ReadableStreamDefaultController.prototype), e, t, r, o, n), i;
  }function fe(e) {
    e._state = "readable", e._reader = void 0, e._storedError = void 0, e._disturbed = !1;
  }function _e(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_readableStreamController");
  }function he(e) {
    return void 0 !== e._reader;
  }function be(e, t, r, o, n, i) {
    const a = ue(e),
          s = T(t);let l = !1,
        c = Promise.resolve();return new Promise((u, d) => {
      let f;if (void 0 !== i) {
        if (f = () => {
          const r = new DOMException("Aborted", "AbortError"),
                i = [];!1 === o && i.push(() => "writable" === t._state ? j(t, r) : Promise.resolve()), !1 === n && i.push(() => "readable" === e._state ? pe(e, r) : Promise.resolve()), b(() => y(i.map(e => e()), e => e), !0, r);
        }, !0 === i.aborted) return void f();i.addEventListener("abort", f);
      }if (h(e, a._closedPromise, e => {
        !1 === o ? b(() => j(t, e), !0, e) : m(!0, e);
      }), h(t, s._closedPromise, t => {
        !1 === n ? b(() => pe(e, t), !0, t) : m(!0, t);
      }), function (e, t, r) {
        "closed" === e._state ? r() : t.then(r).catch(w);
      }(e, a._closedPromise, () => {
        !1 === r ? b(() => function (e) {
          const t = e._ownerWritableStream,
                r = t._state;return !0 === O(t) || "closed" === r ? Promise.resolve() : "errored" === r ? Promise.reject(t._storedError) : L(e);
        }(s)) : m();
      }), !0 === O(t) || "closed" === t._state) {
        const t = new TypeError("the destination writable stream closed before all data could be piped to it");!1 === n ? b(() => pe(e, t), !0, t) : m(!0, t);
      }function _() {
        const e = c;return c.then(() => e !== c ? _() : void 0);
      }function h(e, t, r) {
        "errored" === e._state ? r(e._storedError) : t.catch(r).catch(w);
      }function b(e, r, o) {
        function n() {
          e().then(() => p(r, o), e => p(!0, e)).catch(w);
        }!0 !== l && (l = !0, "writable" === t._state && !1 === O(t) ? _().then(n) : n());
      }function m(e, r) {
        !0 !== l && (l = !0, "writable" === t._state && !1 === O(t) ? _().then(() => p(e, r)).catch(w) : p(e, r));
      }function p(e, t) {
        M(s), We(a), void 0 !== i && i.removeEventListener("abort", f), e ? d(t) : u(void 0);
      }new Promise((e, t) => {
        !function r(o) {
          o ? e() : (!0 === l ? Promise.resolve(!0) : s._readyPromise.then(() => Be(a).then(({ value: e, done: t }) => !0 === t || (c = Y(s, e).catch(() => {}), !1)))).then(r, t);
        }(!1);
      }).catch(e => {
        c = Promise.resolve(), w(e);
      });
    });
  }function me(e, t) {
    return new Promise((r, o) => {
      const n = { _resolve: r, _reject: o, _forAuthorCode: t };e._reader._readIntoRequests.push(n);
    });
  }function ye(e, t) {
    return new Promise((r, o) => {
      const n = { _resolve: r, _reject: o, _forAuthorCode: t };e._reader._readRequests.push(n);
    });
  }function pe(e, t) {
    if (e._disturbed = !0, "closed" === e._state) return Promise.resolve(void 0);if ("errored" === e._state) return Promise.reject(e._storedError);return we(e), e._readableStreamController[le](t).then(() => void 0);
  }function we(e) {
    e._state = "closed";const t = e._reader;if (void 0 !== t) {
      if (Ce(t)) {
        for (const _ref of t._readRequests) {
          const e = _ref._resolve;
          const r = _ref._forAuthorCode;
          e(ge(void 0, !0, r));
        }t._readRequests = [];
      }_t(t);
    }
  }function ge(e, t, r) {
    let o = null;!0 === r && (o = Object.prototype);const n = Object.create(o);return Object.defineProperty(n, "value", { value: e, enumerable: !0, writable: !0, configurable: !0 }), Object.defineProperty(n, "done", { value: t, enumerable: !0, writable: !0, configurable: !0 }), n;
  }function Se(e, t) {
    e._state = "errored", e._storedError = t;const r = e._reader;if (void 0 !== r) {
      if (Ce(r)) {
        for (const e of r._readRequests) e._reject(t);r._readRequests = [];
      } else {
        for (const e of r._readIntoRequests) e._reject(t);r._readIntoRequests = [];
      }ft(r, t);
    }
  }function ve(e, t, r) {
    const o = e._reader._readRequests.shift();o._resolve(ge(t, r, o._forAuthorCode));
  }function Re(e) {
    return e._reader._readIntoRequests.length;
  }function Pe(e) {
    return e._reader._readRequests.length;
  }function Te(e) {
    const t = e._reader;return void 0 !== t && !!Ee(t);
  }function qe(e) {
    const t = e._reader;return void 0 !== t && !!Ce(t);
  }class ReadableStreamDefaultReader {
    constructor(e) {
      if (!1 === _e(e)) throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");if (!0 === he(e)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");je(this, e), this._readRequests = [];
    }get closed() {
      return Ce(this) ? this._closedPromise : Promise.reject(ct("closed"));
    }cancel(e) {
      return Ce(this) ? void 0 === this._ownerReadableStream ? Promise.reject(lt("cancel")) : Ae(this, e) : Promise.reject(ct("cancel"));
    }read() {
      return Ce(this) ? void 0 === this._ownerReadableStream ? Promise.reject(lt("read from")) : Be(this, !0) : Promise.reject(ct("read"));
    }releaseLock() {
      if (!Ce(this)) throw ct("releaseLock");if (void 0 !== this._ownerReadableStream) {
        if (this._readRequests.length > 0) throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");We(this);
      }
    }
  }class ReadableStreamBYOBReader {
    constructor(e) {
      if (!_e(e)) throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a byte source");if (!1 === Ne(e._readableStreamController)) throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");if (he(e)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");je(this, e), this._readIntoRequests = [];
    }get closed() {
      return Ee(this) ? this._closedPromise : Promise.reject(ht("closed"));
    }cancel(e) {
      return Ee(this) ? void 0 === this._ownerReadableStream ? Promise.reject(lt("cancel")) : Ae(this, e) : Promise.reject(ht("cancel"));
    }read(e) {
      return Ee(this) ? void 0 === this._ownerReadableStream ? Promise.reject(lt("read from")) : ArrayBuffer.isView(e) ? (e.buffer, 0 === e.byteLength ? Promise.reject(new TypeError("view must have non-zero byteLength")) : function (e, t, r = !1) {
        const o = e._ownerReadableStream;if (o._disturbed = !0, "errored" === o._state) return Promise.reject(o._storedError);return function (e, t, r) {
          const o = e._controlledReadableByteStream;let n = 1;t.constructor !== DataView && (n = t.constructor.BYTES_PER_ELEMENT);const i = t.constructor,
                a = { buffer: _(t.buffer), byteOffset: t.byteOffset, byteLength: t.byteLength, bytesFilled: 0, elementSize: n, ctor: i, readerType: "byob" };if (e._pendingPullIntos.length > 0) return e._pendingPullIntos.push(a), me(o, r);if ("closed" === o._state) {
            const e = new i(a.buffer, a.byteOffset, 0);return Promise.resolve(ge(e, !0, r));
          }if (e._queueTotalSize > 0) {
            if (!0 === Je(e, a)) {
              const t = Ve(a);return Xe(e), Promise.resolve(ge(t, !1, r));
            }if (!0 === e._closeRequested) {
              const t = new TypeError("Insufficient bytes to fill elements in the given buffer");return nt(e, t), Promise.reject(t);
            }
          }e._pendingPullIntos.push(a);const s = me(o, r);return xe(e), s;
        }(o._readableStreamController, t, r);
      }(this, e, !0)) : Promise.reject(new TypeError("view must be an array buffer view")) : Promise.reject(ht("read"));
    }releaseLock() {
      if (!Ee(this)) throw ht("releaseLock");if (void 0 !== this._ownerReadableStream) {
        if (this._readIntoRequests.length > 0) throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");We(this);
      }
    }
  }function Ee(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_readIntoRequests");
  }function Ce(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_readRequests");
  }function je(e, t) {
    e._ownerReadableStream = t, t._reader = e, "readable" === t._state ? ut(e) : "closed" === t._state ? function (e) {
      ut(e), _t(e);
    }(e) : dt(e, t._storedError);
  }function Ae(e, t) {
    return pe(e._ownerReadableStream, t);
  }function We(e) {
    "readable" === e._ownerReadableStream._state ? ft(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : function (e, t) {
      dt(e, t);
    }(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), e._ownerReadableStream._reader = void 0, e._ownerReadableStream = void 0;
  }function Be(e, t = !1) {
    const r = e._ownerReadableStream;return r._disturbed = !0, "closed" === r._state ? Promise.resolve(ge(void 0, !0, t)) : "errored" === r._state ? Promise.reject(r._storedError) : r._readableStreamController[ce](t);
  }class ReadableStreamDefaultController {
    constructor() {
      throw new TypeError();
    }get desiredSize() {
      if (!1 === Oe(this)) throw bt("desiredSize");return Me(this);
    }close() {
      if (!1 === Oe(this)) throw bt("close");if (!1 === Ye(this)) throw new TypeError("The stream is not in a state that permits close");Le(this);
    }enqueue(e) {
      if (!1 === Oe(this)) throw bt("enqueue");if (!1 === Ye(this)) throw new TypeError("The stream is not in a state that permits enqueue");return Ie(this, e);
    }error(e) {
      if (!1 === Oe(this)) throw bt("error");De(this, e);
    }[le](e) {
      v(this);const t = this._cancelAlgorithm(e);return Fe(this), t;
    }[ce](e) {
      const t = this._controlledReadableStream;if (this._queue.length > 0) {
        const r = g(this);return !0 === this._closeRequested && 0 === this._queue.length ? (Fe(this), we(t)) : ze(this), Promise.resolve(ge(r, !1, e));
      }const r = ye(t, e);return ze(this), r;
    }
  }function Oe(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledReadableStream");
  }function ze(e) {
    !1 !== ke(e) && (!0 !== e._pulling ? (e._pulling = !0, e._pullAlgorithm().then(() => {
      if (e._pulling = !1, !0 === e._pullAgain) return e._pullAgain = !1, ze(e);
    }, t => {
      De(e, t);
    }).catch(w)) : e._pullAgain = !0);
  }function ke(e) {
    const t = e._controlledReadableStream;return !1 !== Ye(e) && !1 !== e._started && (!0 === he(t) && Pe(t) > 0 || Me(e) > 0);
  }function Fe(e) {
    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0, e._strategySizeAlgorithm = void 0;
  }function Le(e) {
    const t = e._controlledReadableStream;e._closeRequested = !0, 0 === e._queue.length && (Fe(e), we(t));
  }function Ie(e, t) {
    const r = e._controlledReadableStream;if (!0 === he(r) && Pe(r) > 0) ve(r, t, !1);else {
      let r;try {
        r = e._strategySizeAlgorithm(t);
      } catch (t) {
        throw De(e, t), t;
      }try {
        S(e, t, r);
      } catch (t) {
        throw De(e, t), t;
      }
    }ze(e);
  }function De(e, t) {
    const r = e._controlledReadableStream;"readable" === r._state && (v(e), Fe(e), Se(r, t));
  }function Me(e) {
    const t = e._controlledReadableStream._state;return "errored" === t ? null : "closed" === t ? 0 : e._strategyHWM - e._queueTotalSize;
  }function Ye(e) {
    const t = e._controlledReadableStream._state;return !1 === e._closeRequested && "readable" === t;
  }function $e(e, t, r, o, n, i, a) {
    t._controlledReadableStream = e, t._queue = void 0, t._queueTotalSize = void 0, v(t), t._started = !1, t._closeRequested = !1, t._pullAgain = !1, t._pulling = !1, t._strategySizeAlgorithm = a, t._strategyHWM = i, t._pullAlgorithm = o, t._cancelAlgorithm = n, e._readableStreamController = t;const s = r();Promise.resolve(s).then(() => {
      t._started = !0, ze(t);
    }, e => {
      De(t, e);
    }).catch(w);
  }class ReadableStreamBYOBRequest {
    constructor() {
      throw new TypeError("ReadableStreamBYOBRequest cannot be used directly");
    }get view() {
      if (!1 === Qe(this)) throw mt("view");return this._view;
    }respond(e) {
      if (!1 === Qe(this)) throw mt("respond");if (void 0 === this._associatedReadableByteStreamController) throw new TypeError("This BYOB request has been invalidated");this._view.buffer, function (e, t) {
        if (!1 === l(t = Number(t))) throw new RangeError("bytesWritten must be a finite");tt(e, t);
      }(this._associatedReadableByteStreamController, e);
    }respondWithNewView(e) {
      if (!1 === Qe(this)) throw mt("respond");if (void 0 === this._associatedReadableByteStreamController) throw new TypeError("This BYOB request has been invalidated");if (!ArrayBuffer.isView(e)) throw new TypeError("You can only respond with array buffer views");e.buffer, function (e, t) {
        const r = e._pendingPullIntos[0];if (r.byteOffset + r.bytesFilled !== t.byteOffset) throw new RangeError("The region specified by view does not match byobRequest");if (r.byteLength !== t.byteLength) throw new RangeError("The buffer of view has different capacity than byobRequest");r.buffer = t.buffer, tt(e, t.byteLength);
      }(this._associatedReadableByteStreamController, e);
    }
  }class ReadableByteStreamController {
    constructor() {
      throw new TypeError("ReadableByteStreamController constructor cannot be used directly");
    }get byobRequest() {
      if (!1 === Ne(this)) throw yt("byobRequest");if (void 0 === this._byobRequest && this._pendingPullIntos.length > 0) {
        const e = this._pendingPullIntos[0],
              t = new Uint8Array(e.buffer, e.byteOffset + e.bytesFilled, e.byteLength - e.bytesFilled),
              r = Object.create(ReadableStreamBYOBRequest.prototype);!function (e, t, r) {
          e._associatedReadableByteStreamController = t, e._view = r;
        }(r, this, t), this._byobRequest = r;
      }return this._byobRequest;
    }get desiredSize() {
      if (!1 === Ne(this)) throw yt("desiredSize");return it(this);
    }close() {
      if (!1 === Ne(this)) throw yt("close");if (!0 === this._closeRequested) throw new TypeError("The stream has already been closed; do not close it again!");const e = this._controlledReadableByteStream._state;if ("readable" !== e) throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function (e) {
        const t = e._controlledReadableByteStream;if (e._queueTotalSize > 0) return void (e._closeRequested = !0);if (e._pendingPullIntos.length > 0) {
          const t = e._pendingPullIntos[0];if (t.bytesFilled > 0) {
            const t = new TypeError("Insufficient bytes to fill elements in the given buffer");throw nt(e, t), t;
          }
        }ot(e), we(t);
      }(this);
    }enqueue(e) {
      if (!1 === Ne(this)) throw yt("enqueue");if (!0 === this._closeRequested) throw new TypeError("stream is closed or draining");const t = this._controlledReadableByteStream._state;if ("readable" !== t) throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);if (!ArrayBuffer.isView(e)) throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");e.buffer, function (e, t) {
        const r = e._controlledReadableByteStream,
              o = t.buffer,
              n = t.byteOffset,
              i = t.byteLength,
              a = _(o);if (!0 === qe(r)) {
          if (0 === Pe(r)) Ge(e, a, n, i);else {
            const e = new Uint8Array(a, n, i);ve(r, e, !1);
          }
        } else !0 === Te(r) ? (Ge(e, a, n, i), et(e)) : Ge(e, a, n, i);xe(e);
      }(this, e);
    }error(e) {
      if (!1 === Ne(this)) throw yt("error");nt(this, e);
    }[le](e) {
      if (this._pendingPullIntos.length > 0) {
        this._pendingPullIntos[0].bytesFilled = 0;
      }v(this);const t = this._cancelAlgorithm(e);return ot(this), t;
    }[ce](e) {
      const t = this._controlledReadableByteStream;if (this._queueTotalSize > 0) {
        const t = this._queue.shift();let r;this._queueTotalSize -= t.byteLength, Xe(this);try {
          r = new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
        } catch (e) {
          return Promise.reject(e);
        }return Promise.resolve(ge(r, !1, e));
      }const r = this._autoAllocateChunkSize;if (void 0 !== r) {
        let e;try {
          e = new ArrayBuffer(r);
        } catch (e) {
          return Promise.reject(e);
        }const t = { buffer: e, byteOffset: 0, byteLength: r, bytesFilled: 0, elementSize: 1, ctor: Uint8Array, readerType: "default" };this._pendingPullIntos.push(t);
      }const o = ye(t, e);return xe(this), o;
    }
  }function Ne(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledReadableByteStream");
  }function Qe(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_associatedReadableByteStreamController");
  }function xe(e) {
    !1 !== function (e) {
      const t = e._controlledReadableByteStream;if ("readable" !== t._state) return !1;if (!0 === e._closeRequested) return !1;if (!1 === e._started) return !1;if (!0 === qe(t) && Pe(t) > 0) return !0;if (!0 === Te(t) && Re(t) > 0) return !0;if (it(e) > 0) return !0;return !1;
    }(e) && (!0 !== e._pulling ? (e._pulling = !0, e._pullAlgorithm().then(() => {
      e._pulling = !1, !0 === e._pullAgain && (e._pullAgain = !1, xe(e));
    }, t => {
      nt(e, t);
    }).catch(w)) : e._pullAgain = !0);
  }function He(e) {
    Ze(e), e._pendingPullIntos = [];
  }function Ue(e, t) {
    let r = !1;"closed" === e._state && (r = !0);const o = Ve(t);"default" === t.readerType ? ve(e, o, r) : function (e, t, r) {
      const o = e._reader._readIntoRequests.shift();o._resolve(ge(t, r, o._forAuthorCode));
    }(e, o, r);
  }function Ve(e) {
    const t = e.bytesFilled,
          r = e.elementSize;return new e.ctor(e.buffer, e.byteOffset, t / r);
  }function Ge(e, t, r, o) {
    e._queue.push({ buffer: t, byteOffset: r, byteLength: o }), e._queueTotalSize += o;
  }function Je(e, t) {
    const r = t.elementSize,
          o = t.bytesFilled - t.bytesFilled % r,
          n = Math.min(e._queueTotalSize, t.byteLength - t.bytesFilled),
          i = t.bytesFilled + n,
          a = i - i % r;let l = n,
        c = !1;a > o && (l = a - t.bytesFilled, c = !0);const u = e._queue;for (; l > 0;) {
      const r = u[0],
            o = Math.min(l, r.byteLength),
            n = t.byteOffset + t.bytesFilled;s(t.buffer, n, r.buffer, r.byteOffset, o), r.byteLength === o ? u.shift() : (r.byteOffset += o, r.byteLength -= o), e._queueTotalSize -= o, Ke(e, o, t), l -= o;
    }return c;
  }function Ke(e, t, r) {
    Ze(e), r.bytesFilled += t;
  }function Xe(e) {
    0 === e._queueTotalSize && !0 === e._closeRequested ? (ot(e), we(e._controlledReadableByteStream)) : xe(e);
  }function Ze(e) {
    void 0 !== e._byobRequest && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = void 0, e._byobRequest = void 0);
  }function et(e) {
    for (; e._pendingPullIntos.length > 0;) {
      if (0 === e._queueTotalSize) return;const t = e._pendingPullIntos[0];!0 === Je(e, t) && (rt(e), Ue(e._controlledReadableByteStream, t));
    }
  }function tt(e, t) {
    const r = e._pendingPullIntos[0];if ("closed" === e._controlledReadableByteStream._state) {
      if (0 !== t) throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");!function (e, t) {
        t.buffer = _(t.buffer);const r = e._controlledReadableByteStream;if (!0 === Te(r)) for (; Re(r) > 0;) Ue(r, rt(e));
      }(e, r);
    } else !function (e, t, r) {
      if (r.bytesFilled + t > r.byteLength) throw new RangeError("bytesWritten out of range");if (Ke(e, t, r), r.bytesFilled < r.elementSize) return;rt(e);const o = r.bytesFilled % r.elementSize;if (o > 0) {
        const t = r.byteOffset + r.bytesFilled,
              n = r.buffer.slice(t - o, t);Ge(e, n, 0, n.byteLength);
      }r.buffer = _(r.buffer), r.bytesFilled -= o, Ue(e._controlledReadableByteStream, r), et(e);
    }(e, t, r);xe(e);
  }function rt(e) {
    const t = e._pendingPullIntos.shift();return Ze(e), t;
  }function ot(e) {
    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0;
  }function nt(e, t) {
    const r = e._controlledReadableByteStream;"readable" === r._state && (He(e), v(e), ot(e), Se(r, t));
  }function it(e) {
    const t = e._controlledReadableByteStream._state;return "errored" === t ? null : "closed" === t ? 0 : e._strategyHWM - e._queueTotalSize;
  }function at(e) {
    if ("object" != typeof e || null === e) return !1;const t = Object.getOwnPropertyDescriptor(AbortSignal.prototype, "aborted").get;try {
      return t.call(e), !0;
    } catch (e) {
      return !1;
    }
  }function st(e) {
    return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`);
  }function lt(e) {
    return new TypeError("Cannot " + e + " a stream using a released reader");
  }function ct(e) {
    return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`);
  }function ut(e) {
    e._closedPromise = new Promise((t, r) => {
      e._closedPromise_resolve = t, e._closedPromise_reject = r;
    });
  }function dt(e, t) {
    ut(e), ft(e, t);
  }function ft(e, t) {
    e._closedPromise.catch(() => {}), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
  }function _t(e) {
    e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
  }function ht(e) {
    return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`);
  }function bt(e) {
    return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`);
  }function mt(e) {
    return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`);
  }function yt(e) {
    return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`);
  }class ByteLengthQueuingStrategy {
    constructor({ highWaterMark: e }) {
      i(this, "highWaterMark", e);
    }size(e) {
      return e.byteLength;
    }
  }class CountQueuingStrategy {
    constructor({ highWaterMark: e }) {
      i(this, "highWaterMark", e);
    }size() {
      return 1;
    }
  }class TransformStream {
    constructor(e = {}, t = {}, r = {}) {
      const o = t.size;let n = t.highWaterMark;const i = r.size;let a = r.highWaterMark;if (void 0 !== e.writableType) throw new RangeError("Invalid writable type specified");const s = b(o);if (void 0 === n && (n = 1), n = h(n), void 0 !== e.readableType) throw new RangeError("Invalid readable type specified");const l = b(i);let c;void 0 === a && (a = 0), a = h(a), function (e, t, r, o, n, i) {
        function a() {
          return t;
        }e._writable = function (e, t, r, o, n = 1, i = () => 1) {
          const a = Object.create(WritableStream.prototype);return q(a), $(a, Object.create(WritableStreamDefaultController.prototype), e, t, r, o, n, i), a;
        }(a, function (t) {
          return function (e, t) {
            const r = e._transformStreamController;if (!0 === e._backpressure) {
              const o = e._backpressureChangePromise;return o.then(() => {
                const o = e._writable,
                      n = o._state;if ("erroring" === n) throw o._storedError;return Tt(r, t);
              });
            }return Tt(r, t);
          }(e, t);
        }, function () {
          return function (e) {
            const t = e._readable,
                  r = e._transformStreamController,
                  o = r._flushAlgorithm();return Rt(r), o.then(() => {
              if ("errored" === t._state) throw t._storedError;const e = t._readableStreamController;!0 === Ye(e) && Le(e);
            }).catch(r => {
              throw wt(e, r), t._storedError;
            });
          }(e);
        }, function (t) {
          return function (e, t) {
            return wt(e, t), Promise.resolve();
          }(e, t);
        }, r, o), e._readable = de(a, function () {
          return function (e) {
            return St(e, !1), e._backpressureChangePromise;
          }(e);
        }, function (t) {
          return gt(e, t), Promise.resolve();
        }, n, i), e._backpressure = void 0, e._backpressureChangePromise = void 0, e._backpressureChangePromise_resolve = void 0, St(e, !0), e._transformStreamController = void 0;
      }(this, new Promise(e => {
        c = e;
      }), n, s, a, l), function (e, t) {
        const r = Object.create(TransformStreamDefaultController.prototype);let o = e => {
          try {
            return Pt(r, e), Promise.resolve();
          } catch (e) {
            return Promise.reject(e);
          }
        };const n = t.transform;if (void 0 !== n) {
          if ("function" != typeof n) throw new TypeError("transform is not a method");o = e => f(n, t, [e, r]);
        }const i = u(t, "flush", 0, [r]);!function (e, t, r, o) {
          t._controlledTransformStream = e, e._transformStreamController = t, t._transformAlgorithm = r, t._flushAlgorithm = o;
        }(e, r, o, i);
      }(this, e);const _ = d(e, "start", [this._transformStreamController]);c(_);
    }get readable() {
      if (!1 === pt(this)) throw Et("readable");return this._readable;
    }get writable() {
      if (!1 === pt(this)) throw Et("writable");return this._writable;
    }
  }function pt(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_transformStreamController");
  }function wt(e, t) {
    De(e._readable._readableStreamController, t), gt(e, t);
  }function gt(e, t) {
    Rt(e._transformStreamController), H(e._writable._writableStreamController, t), !0 === e._backpressure && St(e, !1);
  }function St(e, t) {
    void 0 !== e._backpressureChangePromise && e._backpressureChangePromise_resolve(), e._backpressureChangePromise = new Promise(t => {
      e._backpressureChangePromise_resolve = t;
    }), e._backpressure = t;
  }class TransformStreamDefaultController {
    constructor() {
      throw new TypeError("TransformStreamDefaultController instances cannot be created directly");
    }get desiredSize() {
      if (!1 === vt(this)) throw qt("desiredSize");return Me(this._controlledTransformStream._readable._readableStreamController);
    }enqueue(e) {
      if (!1 === vt(this)) throw qt("enqueue");Pt(this, e);
    }error(e) {
      if (!1 === vt(this)) throw qt("error");!function (e, t) {
        wt(e._controlledTransformStream, t);
      }(this, e);
    }terminate() {
      if (!1 === vt(this)) throw qt("terminate");!function (e) {
        const t = e._controlledTransformStream,
              r = t._readable._readableStreamController;!0 === Ye(r) && Le(r);const o = new TypeError("TransformStream terminated");gt(t, o);
      }(this);
    }
  }function vt(e) {
    return !!n(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledTransformStream");
  }function Rt(e) {
    e._transformAlgorithm = void 0, e._flushAlgorithm = void 0;
  }function Pt(e, t) {
    const r = e._controlledTransformStream,
          o = r._readable._readableStreamController;if (!1 === Ye(o)) throw new TypeError("Readable side is not in a state that permits enqueue");try {
      Ie(o, t);
    } catch (e) {
      throw gt(r, e), r._readable._storedError;
    }(function (e) {
      return !0 !== ke(e);
    })(o) !== r._backpressure && St(r, !0);
  }function Tt(e, t) {
    return e._transformAlgorithm(t).catch(t => {
      throw wt(e._controlledTransformStream, t), t;
    });
  }function qt(e) {
    return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`);
  }function Et(e) {
    return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`);
  }const Ct = { ReadableStream: ReadableStream, WritableStream: WritableStream, ByteLengthQueuingStrategy: ByteLengthQueuingStrategy, CountQueuingStrategy: CountQueuingStrategy, TransformStream: TransformStream };void 0 !== r && Object.assign(r, Ct), e.ReadableStream = ReadableStream, e.WritableStream = WritableStream, e.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy, e.CountQueuingStrategy = CountQueuingStrategy, e.TransformStream = TransformStream, Object.defineProperty(e, "__esModule", { value: !0 });
});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
'use strict';

const ea_lib = require('email-addresses');

exports.parse = function parse(line, startAt) {
    if (!line) throw 'Nothing to parse';

    line = line.trim();

    const addr = ea_lib({
        input: line,
        rfc6532: true, // unicode
        partial: false, // return failed parses
        simple: false, // simple AST
        strict: false, // turn off obs- features in the rfc
        rejectTLD: false, // domains require a "."
        startAt: startAt || null
    });

    if (!addr) throw 'No results';

    // console.log("Parsed to: ", require('util').inspect(addr, {depth: 10, colors: true}));

    return addr.addresses.map(map_addresses);
};

function map_addresses(adr) {
    if (adr.type === 'group') {
        return new Group(adr.name, adr.addresses.map(map_addresses));
    }
    let comments;
    if (adr.parts.comments) {
        comments = adr.parts.comments.map(function (c) {
            return c.tokens.trim();
        }).join(' ').trim();
        // if (comments.length) {
        //     comments = '(' + comments + ')';
        // }
    }
    let l = adr.local;
    if (!adr.name && /:/.test(l)) l = '"' + l + '"';
    return new Address(adr.name, l + '@' + adr.domain, comments);
}

exports.parseFrom = function (line) {
    return exports.parse(line, 'from');
};

exports.parseSender = function (line) {
    return exports.parse(line, 'sender');
};

exports.parseReplyTo = function (line) {
    return exports.parse(line, 'reply-to');
};

class Group {
    constructor(display_name, addresses) {
        this.phrase = display_name;
        this.addresses = addresses;
    }

    format() {
        return this.phrase + ":" + this.addresses.map(function (a) {
            return a.format();
        }).join(',');
    }

    name() {
        let phrase = this.phrase;

        if (!(phrase && phrase.length)) {
            phrase = this.comment;
        }

        const name = _extract_name(phrase);
        return name;
    }
}

class Address {
    constructor(phrase, address, comment) {
        this.phrase = phrase || '';
        this.address = address || '';
        this.comment = comment || '';
    }

    host() {
        const match = /.*@(.*)$/.exec(this.address);
        if (!match) return null;
        return match[1];
    }

    user() {
        const match = /^(.*)@/.exec(this.address);
        if (!match) return null;
        return match[1];
    }

    format() {
        const phrase = this.phrase;
        const email = this.address;
        let comment = this.comment;

        const addr = [];
        const atext = new RegExp('^[\\-\\w !#$%&\'*+/=?^`{|}~]+$');

        if (phrase && phrase.length) {
            addr.push(atext.test(phrase.trim()) ? phrase : _quote_no_esc(phrase) ? phrase : '"' + phrase + '"');

            if (email && email.length) {
                addr.push("<" + email + ">");
            }
        } else if (email && email.length) {
            addr.push(email);
        }

        if (comment && /\S/.test(comment)) {
            comment = comment.replace(/^\s*\(?/, '(').replace(/\)?\s*$/, ')');
        }

        if (comment && comment.length) {
            addr.push(comment);
        }

        return addr.join(' ');
    }

    name() {
        let phrase = this.phrase;
        const addr = this.address;

        if (!(phrase && phrase.length)) {
            phrase = this.comment;
        }

        let name = _extract_name(phrase);

        // first.last@domain address
        if (name === '') {
            const match = /([^%.@_]+([._][^%.@_]+)+)[@%]/.exec(addr);
            if (match) {
                name = match[1].replace(/[._]+/g, ' ');
                name = _extract_name(name);
            }
        }

        if (name === '' && /\/g=/i.test(addr)) {
            // X400 style address
            let match = /\/g=([^/]*)/i.exec(addr);
            const f = match[1];
            match = /\/s=([^/]*)/i.exec(addr);
            const l = match[1];
            name = _extract_name(f + " " + l);
        }

        return name;
    }
}

exports.Address = Address;

// This is because JS regexps have no equivalent of
// zero-width negative look-behind assertion for: /(?<!\\)"/
function _quote_no_esc(str) {
    if (/^"/.test(str)) return true;
    let match;
    while (match = /^[\s\S]*?([\s\S])"/.exec(str)) {
        if (match[1] !== '\\') {
            return true;
        }
        str = str.substr(match[0].length);
    }
    return false;
}

exports.isAllLower = function (string) {
    return string === string.toLowerCase();
};

exports.isAllUpper = function (string) {
    return string === string.toUpperCase();
};

exports.nameCase = function (string) {

    return string.toLowerCase().replace(/\b(\w+)/g, function (_, d1) {
        // Set the case of the name to first char upper rest lower
        return d1.charAt(0).toUpperCase() + d1.slice(1);
    }).replace(/\bMc(\w)/gi, function (_, d1) {
        // Scottish names such as 'McLeod'
        return 'Mc' + d1.toUpperCase();
    }).replace(/\bo'(\w)/gi, function (_, d1) {
        // Irish names such as 'O'Malley, O'Reilly'
        return 'O\'' + d1.toUpperCase();
    }).replace(/\b(x*(ix)?v*(iv)?i*)\b/ig, function (_, d1) {
        // Roman numerals, eg 'Level III Support'
        return d1.toUpperCase();
    });
};

// given a comment, attempt to extract a person's name
function _extract_name(name) {
    // Using encodings, too hard. See Mail::Message::Field::Full.
    if (/=?.*?\?=/.test(name)) return '';

    // trim whitespace
    name = name.trim();
    name = name.replace(/\s+/, ' ');

    // Disregard numeric names (e.g. 123456.1234@compuserve.com)
    if (/^[\d ]+$/.test(name)) return '';

    name = name.replace(/^\((.*)\)$/, '$1') // remove outermost parenthesis
    .replace(/^"(.*)"$/, '$1') // remove outer quotation marks
    .replace(/\(.*?\)/g, '') // remove minimal embedded comments
    .replace(/\\/g, '') // remove all escapes
    .replace(/^"(.*)"$/, '$1') // remove internal quotation marks
    .replace(/^([^\s]+) ?, ?(.*)$/, '$2 $1') // reverse "Last, First M." if applicable
    .replace(/,.*/, '');

    // Change casing only when the name contains only upper or only
    // lower cased characters.
    if (exports.isAllUpper(name) || exports.isAllLower(name)) {
        // console.log("Changing case of: " + name);
        name = exports.nameCase(name);
        // console.log("Now: " + name);
    }

    // some cleanup
    name = name.replace(/\[[^\]]*\]/g, '').replace(/(^[\s'"]+|[\s'"]+$)/g, '').replace(/\s{2,}/g, ' ');

    return name;
}

},{"email-addresses":34}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.
 * @author Artem S Vybornov <vybornov@gmail.com>
 * @license MIT
 */
var AES_asm = exports.AES_asm = function () {
  "use strict";

  /**
   * Galois Field stuff init flag
   */

  var ginit_done = false;

  /**
   * Galois Field exponentiation and logarithm tables for 3 (the generator)
   */
  var gexp3, glog3;

  /**
   * Init Galois Field tables
   */
  function ginit() {
    gexp3 = [], glog3 = [];

    var a = 1,
        c,
        d;
    for (c = 0; c < 255; c++) {
      gexp3[c] = a;

      // Multiply by three
      d = a & 0x80, a <<= 1, a &= 255;
      if (d === 0x80) a ^= 0x1b;
      a ^= gexp3[c];

      // Set the log table value
      glog3[gexp3[c]] = c;
    }
    gexp3[255] = gexp3[0];
    glog3[0] = 0;

    ginit_done = true;
  }

  /**
   * Galois Field multiplication
   * @param {number} a
   * @param {number} b
   * @return {number}
   */
  function gmul(a, b) {
    var c = gexp3[(glog3[a] + glog3[b]) % 255];
    if (a === 0 || b === 0) c = 0;
    return c;
  }

  /**
   * Galois Field reciprocal
   * @param {number} a
   * @return {number}
   */
  function ginv(a) {
    var i = gexp3[255 - glog3[a]];
    if (a === 0) i = 0;
    return i;
  }

  /**
   * AES stuff init flag
   */
  var aes_init_done = false;

  /**
   * Encryption, Decryption, S-Box and KeyTransform tables
   *
   * @type {number[]}
   */
  var aes_sbox;

  /**
   * @type {number[]}
   */
  var aes_sinv;

  /**
   * @type {number[][]}
   */
  var aes_enc;

  /**
   * @type {number[][]}
   */
  var aes_dec;

  /**
   * Init AES tables
   */
  function aes_init() {
    if (!ginit_done) ginit();

    // Calculates AES S-Box value
    function _s(a) {
      var c, s, x;
      s = x = ginv(a);
      for (c = 0; c < 4; c++) {
        s = (s << 1 | s >>> 7) & 255;
        x ^= s;
      }
      x ^= 99;
      return x;
    }

    // Tables
    aes_sbox = [], aes_sinv = [], aes_enc = [[], [], [], []], aes_dec = [[], [], [], []];

    for (var i = 0; i < 256; i++) {
      var s = _s(i);

      // S-Box and its inverse
      aes_sbox[i] = s;
      aes_sinv[s] = i;

      // Ecryption and Decryption tables
      aes_enc[0][i] = gmul(2, s) << 24 | s << 16 | s << 8 | gmul(3, s);
      aes_dec[0][s] = gmul(14, i) << 24 | gmul(9, i) << 16 | gmul(13, i) << 8 | gmul(11, i);
      // Rotate tables
      for (var t = 1; t < 4; t++) {
        aes_enc[t][i] = aes_enc[t - 1][i] >>> 8 | aes_enc[t - 1][i] << 24;
        aes_dec[t][s] = aes_dec[t - 1][s] >>> 8 | aes_dec[t - 1][s] << 24;
      }
    }

    aes_init_done = true;
  }

  /**
   * Asm.js module constructor.
   *
   * <p>
   * Heap buffer layout by offset:
   * <pre>
   * 0x0000   encryption key schedule
   * 0x0400   decryption key schedule
   * 0x0800   sbox
   * 0x0c00   inv sbox
   * 0x1000   encryption tables
   * 0x2000   decryption tables
   * 0x3000   reserved (future GCM multiplication lookup table)
   * 0x4000   data
   * </pre>
   * Don't touch anything before <code>0x400</code>.
   * </p>
   *
   * @alias AES_asm
   * @class
   * @param foreign - <i>ignored</i>
   * @param buffer - heap buffer to link with
   */
  var wrapper = function wrapper(foreign, buffer) {
    // Init AES stuff for the first time
    if (!aes_init_done) aes_init();

    // Fill up AES tables
    var heap = new Uint32Array(buffer);
    heap.set(aes_sbox, 0x0800 >> 2);
    heap.set(aes_sinv, 0x0c00 >> 2);
    for (var i = 0; i < 4; i++) {
      heap.set(aes_enc[i], 0x1000 + 0x400 * i >> 2);
      heap.set(aes_dec[i], 0x2000 + 0x400 * i >> 2);
    }

    /**
     * Calculate AES key schedules.
     * @instance
     * @memberof AES_asm
     * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)
     * @param {number} k0 - key vector components
     * @param {number} k1 - key vector components
     * @param {number} k2 - key vector components
     * @param {number} k3 - key vector components
     * @param {number} k4 - key vector components
     * @param {number} k5 - key vector components
     * @param {number} k6 - key vector components
     * @param {number} k7 - key vector components
     */
    function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {
      var ekeys = heap.subarray(0x000, 60),
          dkeys = heap.subarray(0x100, 0x100 + 60);

      // Encryption key schedule
      ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);
      for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {
        var k = ekeys[i - 1];
        if (i % ks === 0 || ks === 8 && i % ks === 4) {
          k = aes_sbox[k >>> 24] << 24 ^ aes_sbox[k >>> 16 & 255] << 16 ^ aes_sbox[k >>> 8 & 255] << 8 ^ aes_sbox[k & 255];
        }
        if (i % ks === 0) {
          k = k << 8 ^ k >>> 24 ^ rcon << 24;
          rcon = rcon << 1 ^ (rcon & 0x80 ? 0x1b : 0);
        }
        ekeys[i] = ekeys[i - ks] ^ k;
      }

      // Decryption key schedule
      for (var j = 0; j < i; j += 4) {
        for (var jj = 0; jj < 4; jj++) {
          var k = ekeys[i - (4 + j) + (4 - jj) % 4];
          if (j < 4 || j >= i - 4) {
            dkeys[j + jj] = k;
          } else {
            dkeys[j + jj] = aes_dec[0][aes_sbox[k >>> 24]] ^ aes_dec[1][aes_sbox[k >>> 16 & 255]] ^ aes_dec[2][aes_sbox[k >>> 8 & 255]] ^ aes_dec[3][aes_sbox[k & 255]];
          }
        }
      }

      // Set rounds number
      asm.set_rounds(ks + 5);
    }

    // create library object with necessary properties
    var stdlib = { Uint8Array: Uint8Array, Uint32Array: Uint32Array };

    var asm = function (stdlib, foreign, buffer) {
      "use asm";

      var S0 = 0,
          S1 = 0,
          S2 = 0,
          S3 = 0,
          I0 = 0,
          I1 = 0,
          I2 = 0,
          I3 = 0,
          N0 = 0,
          N1 = 0,
          N2 = 0,
          N3 = 0,
          M0 = 0,
          M1 = 0,
          M2 = 0,
          M3 = 0,
          H0 = 0,
          H1 = 0,
          H2 = 0,
          H3 = 0,
          R = 0;

      var HEAP = new stdlib.Uint32Array(buffer),
          DATA = new stdlib.Uint8Array(buffer);

      /**
       * AES core
       * @param {number} k - precomputed key schedule offset
       * @param {number} s - precomputed sbox table offset
       * @param {number} t - precomputed round table offset
       * @param {number} r - number of inner rounds to perform
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _core(k, s, t, r, x0, x1, x2, x3) {
        k = k | 0;
        s = s | 0;
        t = t | 0;
        r = r | 0;
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        var t1 = 0,
            t2 = 0,
            t3 = 0,
            y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            i = 0;

        t1 = t | 0x400, t2 = t | 0x800, t3 = t | 0xc00;

        // round 0
        x0 = x0 ^ HEAP[(k | 0) >> 2], x1 = x1 ^ HEAP[(k | 4) >> 2], x2 = x2 ^ HEAP[(k | 8) >> 2], x3 = x3 ^ HEAP[(k | 12) >> 2];

        // round 1..r
        for (i = 16; (i | 0) <= r << 4; i = i + 16 | 0) {
          y0 = HEAP[(t | x0 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x1 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x2 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], y1 = HEAP[(t | x1 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x2 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x3 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], y2 = HEAP[(t | x2 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x3 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x0 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], y3 = HEAP[(t | x3 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x0 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x1 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
          x0 = y0, x1 = y1, x2 = y2, x3 = y3;
        }

        // final round
        S0 = HEAP[(s | x0 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x1 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x2 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], S1 = HEAP[(s | x1 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x2 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x3 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], S2 = HEAP[(s | x2 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x3 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x0 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], S3 = HEAP[(s | x3 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x0 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x1 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
      }

      /**
       * ECB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _ecb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, x0, x1, x2, x3);
      }

      /**
       * ECB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _ecb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;
      }

      /**
       * CBC mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _cbc_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0 ^ x0, I1 ^ x1, I2 ^ x2, I3 ^ x3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;
      }

      /**
       * CBC mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _cbc_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;

        S0 = S0 ^ I0, S1 = S1 ^ I1, S2 = S2 ^ I2, S3 = S3 ^ I3;

        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }

      /**
       * CFB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _cfb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0 = S0 ^ x0, I1 = S1 = S1 ^ x1, I2 = S2 = S2 ^ x2, I3 = S3 = S3 ^ x3;
      }

      /**
       * CFB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _cfb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;

        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }

      /**
       * OFB mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _ofb(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;

        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;
      }

      /**
       * CTR mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _ctr(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, N0, N1, N2, N3);

        N3 = ~M3 & N3 | M3 & N3 + 1;
        N2 = ~M2 & N2 | M2 & N2 + ((N3 | 0) == 0);
        N1 = ~M1 & N1 | M1 & N1 + ((N2 | 0) == 0);
        N0 = ~M0 & N0 | M0 & N0 + ((N1 | 0) == 0);

        S0 = S0 ^ x0;
        S1 = S1 ^ x1;
        S2 = S2 ^ x2;
        S3 = S3 ^ x3;
      }

      /**
       * GCM mode MAC calculation
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */
      function _gcm_mac(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        var y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            z0 = 0,
            z1 = 0,
            z2 = 0,
            z3 = 0,
            i = 0,
            c = 0;

        x0 = x0 ^ I0, x1 = x1 ^ I1, x2 = x2 ^ I2, x3 = x3 ^ I3;

        y0 = H0 | 0, y1 = H1 | 0, y2 = H2 | 0, y3 = H3 | 0;

        for (; (i | 0) < 128; i = i + 1 | 0) {
          if (y0 >>> 31) {
            z0 = z0 ^ x0, z1 = z1 ^ x1, z2 = z2 ^ x2, z3 = z3 ^ x3;
          }

          y0 = y0 << 1 | y1 >>> 31, y1 = y1 << 1 | y2 >>> 31, y2 = y2 << 1 | y3 >>> 31, y3 = y3 << 1;

          c = x3 & 1;

          x3 = x3 >>> 1 | x2 << 31, x2 = x2 >>> 1 | x1 << 31, x1 = x1 >>> 1 | x0 << 31, x0 = x0 >>> 1;

          if (c) x0 = x0 ^ 0xe1000000;
        }

        I0 = z0, I1 = z1, I2 = z2, I3 = z3;
      }

      /**
       * Set the internal rounds number.
       * @instance
       * @memberof AES_asm
       * @param {number} r - number if inner AES rounds
       */
      function set_rounds(r) {
        r = r | 0;
        R = r;
      }

      /**
       * Populate the internal state of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} s0 - state vector
       * @param {number} s1 - state vector
       * @param {number} s2 - state vector
       * @param {number} s3 - state vector
       */
      function set_state(s0, s1, s2, s3) {
        s0 = s0 | 0;
        s1 = s1 | 0;
        s2 = s2 | 0;
        s3 = s3 | 0;

        S0 = s0, S1 = s1, S2 = s2, S3 = s3;
      }

      /**
       * Populate the internal iv of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} i0 - iv vector
       * @param {number} i1 - iv vector
       * @param {number} i2 - iv vector
       * @param {number} i3 - iv vector
       */
      function set_iv(i0, i1, i2, i3) {
        i0 = i0 | 0;
        i1 = i1 | 0;
        i2 = i2 | 0;
        i3 = i3 | 0;

        I0 = i0, I1 = i1, I2 = i2, I3 = i3;
      }

      /**
       * Set nonce for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} n0 - nonce vector
       * @param {number} n1 - nonce vector
       * @param {number} n2 - nonce vector
       * @param {number} n3 - nonce vector
       */
      function set_nonce(n0, n1, n2, n3) {
        n0 = n0 | 0;
        n1 = n1 | 0;
        n2 = n2 | 0;
        n3 = n3 | 0;

        N0 = n0, N1 = n1, N2 = n2, N3 = n3;
      }

      /**
       * Set counter mask for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} m0 - counter mask vector
       * @param {number} m1 - counter mask vector
       * @param {number} m2 - counter mask vector
       * @param {number} m3 - counter mask vector
       */
      function set_mask(m0, m1, m2, m3) {
        m0 = m0 | 0;
        m1 = m1 | 0;
        m2 = m2 | 0;
        m3 = m3 | 0;

        M0 = m0, M1 = m1, M2 = m2, M3 = m3;
      }

      /**
       * Set counter for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} c0 - counter vector
       * @param {number} c1 - counter vector
       * @param {number} c2 - counter vector
       * @param {number} c3 - counter vector
       */
      function set_counter(c0, c1, c2, c3) {
        c0 = c0 | 0;
        c1 = c1 | 0;
        c2 = c2 | 0;
        c3 = c3 | 0;

        N3 = ~M3 & N3 | M3 & c3, N2 = ~M2 & N2 | M2 & c2, N1 = ~M1 & N1 | M1 & c1, N0 = ~M0 & N0 | M0 & c0;
      }

      /**
       * Store the internal state vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */
      function get_state(pos) {
        pos = pos | 0;

        if (pos & 15) return -1;

        DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;

        return 16;
      }

      /**
       * Store the internal iv vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */
      function get_iv(pos) {
        pos = pos | 0;

        if (pos & 15) return -1;

        DATA[pos | 0] = I0 >>> 24, DATA[pos | 1] = I0 >>> 16 & 255, DATA[pos | 2] = I0 >>> 8 & 255, DATA[pos | 3] = I0 & 255, DATA[pos | 4] = I1 >>> 24, DATA[pos | 5] = I1 >>> 16 & 255, DATA[pos | 6] = I1 >>> 8 & 255, DATA[pos | 7] = I1 & 255, DATA[pos | 8] = I2 >>> 24, DATA[pos | 9] = I2 >>> 16 & 255, DATA[pos | 10] = I2 >>> 8 & 255, DATA[pos | 11] = I2 & 255, DATA[pos | 12] = I3 >>> 24, DATA[pos | 13] = I3 >>> 16 & 255, DATA[pos | 14] = I3 >>> 8 & 255, DATA[pos | 15] = I3 & 255;

        return 16;
      }

      /**
       * GCM initialization.
       * @instance
       * @memberof AES_asm
       */
      function gcm_init() {
        _ecb_enc(0, 0, 0, 0);
        H0 = S0, H1 = S1, H2 = S2, H3 = S3;
      }

      /**
       * Perform ciphering operation on the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */
      function cipher(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;

        var ret = 0;

        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _cipher_modes[mode & 7](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;

          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }

      /**
       * Calculates MAC of the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */
      function mac(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;

        var ret = 0;

        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _mac_modes[mode & 1](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }

      /**
       * AES cipher modes table (virual methods)
       */
      var _cipher_modes = [_ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr];

      /**
       * AES MAC modes table (virual methods)
       */
      var _mac_modes = [_cbc_enc, _gcm_mac];

      /**
       * Asm.js module exports
       */
      return {
        set_rounds: set_rounds,
        set_state: set_state,
        set_iv: set_iv,
        set_nonce: set_nonce,
        set_mask: set_mask,
        set_counter: set_counter,
        get_state: get_state,
        get_iv: get_iv,
        gcm_init: gcm_init,
        cipher: cipher,
        mac: mac
      };
    }(stdlib, foreign, buffer);

    asm.set_key = set_key;

    return asm;
  };

  /**
   * AES enciphering mode constants
   * @enum {number}
   * @const
   */
  wrapper.ENC = {
    ECB: 0,
    CBC: 2,
    CFB: 4,
    OFB: 6,
    CTR: 7
  },

  /**
   * AES deciphering mode constants
   * @enum {number}
   * @const
   */
  wrapper.DEC = {
    ECB: 1,
    CBC: 3,
    CFB: 5,
    OFB: 6,
    CTR: 7
  },

  /**
   * AES MAC mode constants
   * @enum {number}
   * @const
   */
  wrapper.MAC = {
    CBC: 0,
    GCM: 1
  };

  /**
   * Heap data offset
   * @type {number}
   * @const
   */
  wrapper.HEAP_DATA = 0x4000;

  return wrapper;
}();

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES = undefined;

var _aes = require('./aes.asm');

var _utils = require('../other/utils');

var _errors = require('../other/errors');

var heap_pool = [];
var asm_pool = [];
var AES = /** @class */function () {
    function AES(key, iv, padding, mode) {
        if (padding === void 0) {
            padding = true;
        }
        this.pos = 0;
        this.len = 0;
        this.mode = mode;
        // The AES object state
        this.pos = 0;
        this.len = 0;
        this.key = key;
        this.iv = iv;
        this.padding = padding;
        // The AES "worker"
        this.acquire_asm();
    }
    AES.prototype.acquire_asm = function () {
        if (this.heap === undefined && this.asm === undefined) {
            this.heap = heap_pool.pop() || (0, _utils._heap_init)().subarray(_aes.AES_asm.HEAP_DATA);
            this.asm = asm_pool.pop() || (0, _aes.AES_asm)(null, this.heap.buffer);
            this.reset(this.key, this.iv);
        }
    };
    AES.prototype.release_asm = function () {
        heap_pool.push(this.heap);
        ;
        asm_pool.push(this.asm);
        this.heap = undefined;
        this.asm = undefined;
    };
    AES.prototype.reset = function (key, iv) {
        // Key
        var keylen = key.length;
        if (keylen !== 16 && keylen !== 24 && keylen !== 32) throw new _errors.IllegalArgumentError('illegal key size');
        var keyview = new DataView(key.buffer, key.byteOffset, key.byteLength);
        this.asm.set_key(keylen >> 2, keyview.getUint32(0), keyview.getUint32(4), keyview.getUint32(8), keyview.getUint32(12), keylen > 16 ? keyview.getUint32(16) : 0, keylen > 16 ? keyview.getUint32(20) : 0, keylen > 24 ? keyview.getUint32(24) : 0, keylen > 24 ? keyview.getUint32(28) : 0);
        // IV
        if (iv !== undefined) {
            if (iv.length !== 16) throw new _errors.IllegalArgumentError('illegal iv size');
            var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);
            this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));
        } else {
            this.asm.set_iv(0, 0, 0, 0);
        }
    };
    AES.prototype.AES_Encrypt_process = function (data) {
        if (!(0, _utils.is_bytes)(data)) throw new TypeError("data isn't of expected type");
        this.acquire_asm();
        var asm = this.asm;
        var heap = this.heap;
        var amode = _aes.AES_asm.ENC[this.mode];
        var hpos = _aes.AES_asm.HEAP_DATA;
        var pos = this.pos;
        var len = this.len;
        var dpos = 0;
        var dlen = data.length || 0;
        var rpos = 0;
        var rlen = len + dlen & -16;
        var wlen = 0;
        var result = new Uint8Array(rlen);
        while (dlen > 0) {
            wlen = (0, _utils._heap_write)(heap, pos + len, data, dpos, dlen);
            len += wlen;
            dpos += wlen;
            dlen -= wlen;
            wlen = asm.cipher(amode, hpos + pos, len);
            if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
            rpos += wlen;
            if (wlen < len) {
                pos += wlen;
                len -= wlen;
            } else {
                pos = 0;
                len = 0;
            }
        }
        this.pos = pos;
        this.len = len;
        return result;
    };
    AES.prototype.AES_Encrypt_finish = function () {
        this.acquire_asm();
        var asm = this.asm;
        var heap = this.heap;
        var amode = _aes.AES_asm.ENC[this.mode];
        var hpos = _aes.AES_asm.HEAP_DATA;
        var pos = this.pos;
        var len = this.len;
        var plen = 16 - len % 16;
        var rlen = len;
        if (this.hasOwnProperty('padding')) {
            if (this.padding) {
                for (var p = 0; p < plen; ++p) {
                    heap[pos + len + p] = plen;
                }
                len += plen;
                rlen = len;
            } else if (len % 16) {
                throw new _errors.IllegalArgumentError('data length must be a multiple of the block size');
            }
        } else {
            len += plen;
        }
        var result = new Uint8Array(rlen);
        if (len) asm.cipher(amode, hpos + pos, len);
        if (rlen) result.set(heap.subarray(pos, pos + rlen));
        this.pos = 0;
        this.len = 0;
        this.release_asm();
        return result;
    };
    AES.prototype.AES_Decrypt_process = function (data) {
        if (!(0, _utils.is_bytes)(data)) throw new TypeError("data isn't of expected type");
        this.acquire_asm();
        var asm = this.asm;
        var heap = this.heap;
        var amode = _aes.AES_asm.DEC[this.mode];
        var hpos = _aes.AES_asm.HEAP_DATA;
        var pos = this.pos;
        var len = this.len;
        var dpos = 0;
        var dlen = data.length || 0;
        var rpos = 0;
        var rlen = len + dlen & -16;
        var plen = 0;
        var wlen = 0;
        if (this.padding) {
            plen = len + dlen - rlen || 16;
            rlen -= plen;
        }
        var result = new Uint8Array(rlen);
        while (dlen > 0) {
            wlen = (0, _utils._heap_write)(heap, pos + len, data, dpos, dlen);
            len += wlen;
            dpos += wlen;
            dlen -= wlen;
            wlen = asm.cipher(amode, hpos + pos, len - (!dlen ? plen : 0));
            if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
            rpos += wlen;
            if (wlen < len) {
                pos += wlen;
                len -= wlen;
            } else {
                pos = 0;
                len = 0;
            }
        }
        this.pos = pos;
        this.len = len;
        return result;
    };
    AES.prototype.AES_Decrypt_finish = function () {
        this.acquire_asm();
        var asm = this.asm;
        var heap = this.heap;
        var amode = _aes.AES_asm.DEC[this.mode];
        var hpos = _aes.AES_asm.HEAP_DATA;
        var pos = this.pos;
        var len = this.len;
        var rlen = len;
        if (len > 0) {
            if (len % 16) {
                if (this.hasOwnProperty('padding')) {
                    throw new _errors.IllegalArgumentError('data length must be a multiple of the block size');
                } else {
                    len += 16 - len % 16;
                }
            }
            asm.cipher(amode, hpos + pos, len);
            if (this.hasOwnProperty('padding') && this.padding) {
                var pad = heap[pos + rlen - 1];
                if (pad < 1 || pad > 16 || pad > rlen) throw new _errors.SecurityError('bad padding');
                var pcheck = 0;
                for (var i = pad; i > 1; i--) pcheck |= pad ^ heap[pos + rlen - i];
                if (pcheck) throw new _errors.SecurityError('bad padding');
                rlen -= pad;
            }
        }
        var result = new Uint8Array(rlen);
        if (rlen > 0) {
            result.set(heap.subarray(pos, pos + rlen));
        }
        this.pos = 0;
        this.len = 0;
        this.release_asm();
        return result;
    };
    return AES;
}();
exports.AES = AES;

},{"../other/errors":15,"../other/utils":16,"./aes.asm":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES_CBC = undefined;

var _aes = require('./aes');

var _utils = require('../other/utils');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AES_CBC = /** @class */function (_super) {
    __extends(AES_CBC, _super);
    function AES_CBC(key, iv, padding) {
        if (padding === void 0) {
            padding = true;
        }
        return _super.call(this, key, iv, padding, 'CBC') || this;
    }
    AES_CBC.encrypt = function (data, key, padding, iv) {
        if (padding === void 0) {
            padding = true;
        }
        return new AES_CBC(key, iv, padding).encrypt(data);
    };
    AES_CBC.decrypt = function (data, key, padding, iv) {
        if (padding === void 0) {
            padding = true;
        }
        return new AES_CBC(key, iv, padding).decrypt(data);
    };
    AES_CBC.prototype.encrypt = function (data) {
        var r1 = this.AES_Encrypt_process(data);
        var r2 = this.AES_Encrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    AES_CBC.prototype.decrypt = function (data) {
        var r1 = this.AES_Decrypt_process(data);
        var r2 = this.AES_Decrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    return AES_CBC;
}(_aes.AES);
exports.AES_CBC = AES_CBC;

},{"../other/utils":16,"./aes":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES_CFB = undefined;

var _aes = require('./aes');

var _utils = require('../other/utils');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AES_CFB = /** @class */function (_super) {
    __extends(AES_CFB, _super);
    function AES_CFB(key, iv) {
        var _this = _super.call(this, key, iv, true, 'CFB') || this;
        delete _this.padding;
        return _this;
    }
    AES_CFB.encrypt = function (data, key, iv) {
        return new AES_CFB(key, iv).encrypt(data);
    };
    AES_CFB.decrypt = function (data, key, iv) {
        return new AES_CFB(key, iv).decrypt(data);
    };
    AES_CFB.prototype.encrypt = function (data) {
        var r1 = this.AES_Encrypt_process(data);
        var r2 = this.AES_Encrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    AES_CFB.prototype.decrypt = function (data) {
        var r1 = this.AES_Decrypt_process(data);
        var r2 = this.AES_Decrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    return AES_CFB;
}(_aes.AES);
exports.AES_CFB = AES_CFB;

},{"../other/utils":16,"./aes":4}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES_CTR = undefined;

var _aes = require('./aes');

var _errors = require('../other/errors');

var _utils = require('../other/utils');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AES_CTR = /** @class */function (_super) {
    __extends(AES_CTR, _super);
    function AES_CTR(key, nonce) {
        var _this = _super.call(this, key, undefined, false, 'CTR') || this;
        delete _this.padding;
        _this.AES_CTR_set_options(nonce);
        return _this;
    }
    AES_CTR.encrypt = function (data, key, nonce) {
        return new AES_CTR(key, nonce).encrypt(data);
    };
    AES_CTR.decrypt = function (data, key, nonce) {
        return new AES_CTR(key, nonce).encrypt(data);
    };
    AES_CTR.prototype.encrypt = function (data) {
        var r1 = this.AES_Encrypt_process(data);
        var r2 = this.AES_Encrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    AES_CTR.prototype.decrypt = function (data) {
        var r1 = this.AES_Encrypt_process(data);
        var r2 = this.AES_Encrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    AES_CTR.prototype.AES_CTR_set_options = function (nonce, counter, size) {
        if (size !== undefined) {
            if (size < 8 || size > 48) throw new _errors.IllegalArgumentError('illegal counter size');
            var mask = Math.pow(2, size) - 1;
            this.asm.set_mask(0, 0, mask / 0x100000000 | 0, mask | 0);
        } else {
            size = 48;
            this.asm.set_mask(0, 0, 0xffff, 0xffffffff);
        }
        if (nonce !== undefined) {
            var len = nonce.length;
            if (!len || len > 16) throw new _errors.IllegalArgumentError('illegal nonce size');
            var view = new DataView(new ArrayBuffer(16));
            new Uint8Array(view.buffer).set(nonce);
            this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));
        } else {
            throw new Error('nonce is required');
        }
        if (counter !== undefined) {
            if (counter < 0 || counter >= Math.pow(2, size)) throw new _errors.IllegalArgumentError('illegal counter value');
            this.asm.set_counter(0, 0, counter / 0x100000000 | 0, counter | 0);
        }
    };
    return AES_CTR;
}(_aes.AES);
exports.AES_CTR = AES_CTR;

},{"../other/errors":15,"../other/utils":16,"./aes":4}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES_ECB = undefined;

var _aes = require('./aes');

var _utils = require('../other/utils');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AES_ECB = /** @class */function (_super) {
    __extends(AES_ECB, _super);
    function AES_ECB(key, padding) {
        if (padding === void 0) {
            padding = false;
        }
        return _super.call(this, key, undefined, padding, 'ECB') || this;
    }
    AES_ECB.encrypt = function (data, key, padding) {
        if (padding === void 0) {
            padding = false;
        }
        return new AES_ECB(key, padding).encrypt(data);
    };
    AES_ECB.decrypt = function (data, key, padding) {
        if (padding === void 0) {
            padding = false;
        }
        return new AES_ECB(key, padding).decrypt(data);
    };
    AES_ECB.prototype.encrypt = function (data) {
        var r1 = this.AES_Encrypt_process(data);
        var r2 = this.AES_Encrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    AES_ECB.prototype.decrypt = function (data) {
        var r1 = this.AES_Decrypt_process(data);
        var r2 = this.AES_Decrypt_finish();
        return (0, _utils.joinBytes)(r1, r2);
    };
    return AES_ECB;
}(_aes.AES);
exports.AES_ECB = AES_ECB;

},{"../other/utils":16,"./aes":4}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AES_GCM = undefined;

var _errors = require('../other/errors');

var _utils = require('../other/utils');

var _aes = require('./aes');

var _aes2 = require('./aes.asm');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var _AES_GCM_data_maxLength = 68719476704; // 2^36 - 2^5
var AES_GCM = /** @class */function (_super) {
    __extends(AES_GCM, _super);
    function AES_GCM(key, nonce, adata, tagSize) {
        if (tagSize === void 0) {
            tagSize = 16;
        }
        var _this = _super.call(this, key, undefined, false, 'CTR') || this;
        _this.tagSize = tagSize;
        _this.gamma0 = 0;
        _this.counter = 1;
        // Init GCM
        _this.asm.gcm_init();
        // Tag size
        if (_this.tagSize < 4 || _this.tagSize > 16) throw new _errors.IllegalArgumentError('illegal tagSize value');
        // Nonce
        var noncelen = nonce.length || 0;
        var noncebuf = new Uint8Array(16);
        if (noncelen !== 12) {
            _this._gcm_mac_process(nonce);
            _this.heap[0] = 0;
            _this.heap[1] = 0;
            _this.heap[2] = 0;
            _this.heap[3] = 0;
            _this.heap[4] = 0;
            _this.heap[5] = 0;
            _this.heap[6] = 0;
            _this.heap[7] = 0;
            _this.heap[8] = 0;
            _this.heap[9] = 0;
            _this.heap[10] = 0;
            _this.heap[11] = noncelen >>> 29;
            _this.heap[12] = noncelen >>> 21 & 255;
            _this.heap[13] = noncelen >>> 13 & 255;
            _this.heap[14] = noncelen >>> 5 & 255;
            _this.heap[15] = noncelen << 3 & 255;
            _this.asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA, 16);
            _this.asm.get_iv(_aes2.AES_asm.HEAP_DATA);
            _this.asm.set_iv(0, 0, 0, 0);
            noncebuf.set(_this.heap.subarray(0, 16));
        } else {
            noncebuf.set(nonce);
            noncebuf[15] = 1;
        }
        var nonceview = new DataView(noncebuf.buffer);
        _this.gamma0 = nonceview.getUint32(12);
        _this.asm.set_nonce(nonceview.getUint32(0), nonceview.getUint32(4), nonceview.getUint32(8), 0);
        _this.asm.set_mask(0, 0, 0, 0xffffffff);
        // Associated data
        if (adata !== undefined) {
            if (adata.length > _AES_GCM_data_maxLength) throw new _errors.IllegalArgumentError('illegal adata length');
            if (adata.length) {
                _this.adata = adata;
                _this._gcm_mac_process(adata);
            } else {
                _this.adata = undefined;
            }
        } else {
            _this.adata = undefined;
        }
        // Counter
        if (_this.counter < 1 || _this.counter > 0xffffffff) throw new RangeError('counter must be a positive 32-bit integer');
        _this.asm.set_counter(0, 0, 0, _this.gamma0 + _this.counter | 0);
        return _this;
    }
    AES_GCM.encrypt = function (cleartext, key, nonce, adata, tagsize) {
        return new AES_GCM(key, nonce, adata, tagsize).encrypt(cleartext);
    };
    AES_GCM.decrypt = function (ciphertext, key, nonce, adata, tagsize) {
        return new AES_GCM(key, nonce, adata, tagsize).decrypt(ciphertext);
    };
    AES_GCM.prototype.encrypt = function (data) {
        return this.AES_GCM_encrypt(data);
    };
    AES_GCM.prototype.decrypt = function (data) {
        return this.AES_GCM_decrypt(data);
    };
    AES_GCM.prototype.AES_GCM_Encrypt_process = function (data) {
        var dpos = 0;
        var dlen = data.length || 0;
        var asm = this.asm;
        var heap = this.heap;
        var counter = this.counter;
        var pos = this.pos;
        var len = this.len;
        var rpos = 0;
        var rlen = len + dlen & -16;
        var wlen = 0;
        if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
        var result = new Uint8Array(rlen);
        while (dlen > 0) {
            wlen = (0, _utils._heap_write)(heap, pos + len, data, dpos, dlen);
            len += wlen;
            dpos += wlen;
            dlen -= wlen;
            wlen = asm.cipher(_aes2.AES_asm.ENC.CTR, _aes2.AES_asm.HEAP_DATA + pos, len);
            wlen = asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA + pos, wlen);
            if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
            counter += wlen >>> 4;
            rpos += wlen;
            if (wlen < len) {
                pos += wlen;
                len -= wlen;
            } else {
                pos = 0;
                len = 0;
            }
        }
        this.counter = counter;
        this.pos = pos;
        this.len = len;
        return result;
    };
    AES_GCM.prototype.AES_GCM_Encrypt_finish = function () {
        var asm = this.asm;
        var heap = this.heap;
        var counter = this.counter;
        var tagSize = this.tagSize;
        var adata = this.adata;
        var pos = this.pos;
        var len = this.len;
        var result = new Uint8Array(len + tagSize);
        asm.cipher(_aes2.AES_asm.ENC.CTR, _aes2.AES_asm.HEAP_DATA + pos, len + 15 & -16);
        if (len) result.set(heap.subarray(pos, pos + len));
        var i = len;
        for (; i & 15; i++) heap[pos + i] = 0;
        asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA + pos, i);
        var alen = adata !== undefined ? adata.length : 0;
        var clen = (counter - 1 << 4) + len;
        heap[0] = 0;
        heap[1] = 0;
        heap[2] = 0;
        heap[3] = alen >>> 29;
        heap[4] = alen >>> 21;
        heap[5] = alen >>> 13 & 255;
        heap[6] = alen >>> 5 & 255;
        heap[7] = alen << 3 & 255;
        heap[8] = heap[9] = heap[10] = 0;
        heap[11] = clen >>> 29;
        heap[12] = clen >>> 21 & 255;
        heap[13] = clen >>> 13 & 255;
        heap[14] = clen >>> 5 & 255;
        heap[15] = clen << 3 & 255;
        asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA, 16);
        asm.get_iv(_aes2.AES_asm.HEAP_DATA);
        asm.set_counter(0, 0, 0, this.gamma0);
        asm.cipher(_aes2.AES_asm.ENC.CTR, _aes2.AES_asm.HEAP_DATA, 16);
        result.set(heap.subarray(0, tagSize), len);
        this.counter = 1;
        this.pos = 0;
        this.len = 0;
        return result;
    };
    AES_GCM.prototype.AES_GCM_Decrypt_process = function (data) {
        var dpos = 0;
        var dlen = data.length || 0;
        var asm = this.asm;
        var heap = this.heap;
        var counter = this.counter;
        var tagSize = this.tagSize;
        var pos = this.pos;
        var len = this.len;
        var rpos = 0;
        var rlen = len + dlen > tagSize ? len + dlen - tagSize & -16 : 0;
        var tlen = len + dlen - rlen;
        var wlen = 0;
        if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
        var result = new Uint8Array(rlen);
        while (dlen > tlen) {
            wlen = (0, _utils._heap_write)(heap, pos + len, data, dpos, dlen - tlen);
            len += wlen;
            dpos += wlen;
            dlen -= wlen;
            wlen = asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA + pos, wlen);
            wlen = asm.cipher(_aes2.AES_asm.DEC.CTR, _aes2.AES_asm.HEAP_DATA + pos, wlen);
            if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
            counter += wlen >>> 4;
            rpos += wlen;
            pos = 0;
            len = 0;
        }
        if (dlen > 0) {
            len += (0, _utils._heap_write)(heap, 0, data, dpos, dlen);
        }
        this.counter = counter;
        this.pos = pos;
        this.len = len;
        return result;
    };
    AES_GCM.prototype.AES_GCM_Decrypt_finish = function () {
        var asm = this.asm;
        var heap = this.heap;
        var tagSize = this.tagSize;
        var adata = this.adata;
        var counter = this.counter;
        var pos = this.pos;
        var len = this.len;
        var rlen = len - tagSize;
        if (len < tagSize) throw new _errors.IllegalStateError('authentication tag not found');
        var result = new Uint8Array(rlen);
        var atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
        var i = rlen;
        for (; i & 15; i++) heap[pos + i] = 0;
        asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA + pos, i);
        asm.cipher(_aes2.AES_asm.DEC.CTR, _aes2.AES_asm.HEAP_DATA + pos, i);
        if (rlen) result.set(heap.subarray(pos, pos + rlen));
        var alen = adata !== undefined ? adata.length : 0;
        var clen = (counter - 1 << 4) + len - tagSize;
        heap[0] = 0;
        heap[1] = 0;
        heap[2] = 0;
        heap[3] = alen >>> 29;
        heap[4] = alen >>> 21;
        heap[5] = alen >>> 13 & 255;
        heap[6] = alen >>> 5 & 255;
        heap[7] = alen << 3 & 255;
        heap[8] = heap[9] = heap[10] = 0;
        heap[11] = clen >>> 29;
        heap[12] = clen >>> 21 & 255;
        heap[13] = clen >>> 13 & 255;
        heap[14] = clen >>> 5 & 255;
        heap[15] = clen << 3 & 255;
        asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA, 16);
        asm.get_iv(_aes2.AES_asm.HEAP_DATA);
        asm.set_counter(0, 0, 0, this.gamma0);
        asm.cipher(_aes2.AES_asm.ENC.CTR, _aes2.AES_asm.HEAP_DATA, 16);
        var acheck = 0;
        for (var i_1 = 0; i_1 < tagSize; ++i_1) acheck |= atag[i_1] ^ heap[i_1];
        if (acheck) throw new _errors.SecurityError('data integrity check failed');
        this.counter = 1;
        this.pos = 0;
        this.len = 0;
        return result;
    };
    AES_GCM.prototype.AES_GCM_decrypt = function (data) {
        var result1 = this.AES_GCM_Decrypt_process(data);
        var result2 = this.AES_GCM_Decrypt_finish();
        var result = new Uint8Array(result1.length + result2.length);
        if (result1.length) result.set(result1);
        if (result2.length) result.set(result2, result1.length);
        return result;
    };
    AES_GCM.prototype.AES_GCM_encrypt = function (data) {
        var result1 = this.AES_GCM_Encrypt_process(data);
        var result2 = this.AES_GCM_Encrypt_finish();
        var result = new Uint8Array(result1.length + result2.length);
        if (result1.length) result.set(result1);
        if (result2.length) result.set(result2, result1.length);
        return result;
    };
    AES_GCM.prototype._gcm_mac_process = function (data) {
        var heap = this.heap;
        var asm = this.asm;
        var dpos = 0;
        var dlen = data.length || 0;
        var wlen = 0;
        while (dlen > 0) {
            wlen = (0, _utils._heap_write)(heap, 0, data, dpos, dlen);
            dpos += wlen;
            dlen -= wlen;
            while (wlen & 15) heap[wlen++] = 0;
            asm.mac(_aes2.AES_asm.MAC.GCM, _aes2.AES_asm.HEAP_DATA, wlen);
        }
    };
    return AES_GCM;
}(_aes.AES);
exports.AES_GCM = AES_GCM;

},{"../other/errors":15,"../other/utils":16,"./aes":4,"./aes.asm":3}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Hash = undefined;

var _utils = require('../other/utils');

var _errors = require('../other/errors');

var Hash = /** @class */function () {
    function Hash() {
        this.pos = 0;
        this.len = 0;
        this.acquire_asm();
    }
    Hash.prototype.acquire_asm = function () {
        if (this.heap === undefined && this.asm === undefined) {
            this.heap = this.constructor.heap_pool.pop() || (0, _utils._heap_init)();
            this.asm = this.constructor.asm_pool.pop() || this.constructor.asm_function({ Uint8Array: Uint8Array }, null, this.heap.buffer);
            this.reset();
        }
    };
    Hash.prototype.release_asm = function () {
        this.constructor.heap_pool.push(this.heap);
        ;
        this.constructor.asm_pool.push(this.asm);
        this.heap = undefined;
        this.asm = undefined;
    };
    Hash.prototype.reset = function () {
        this.acquire_asm();
        this.result = null;
        this.pos = 0;
        this.len = 0;
        this.asm.reset();
        return this;
    };
    Hash.prototype.process = function (data) {
        if (this.result !== null) throw new _errors.IllegalStateError('state must be reset before processing new data');
        this.acquire_asm();
        var asm = this.asm;
        var heap = this.heap;
        var hpos = this.pos;
        var hlen = this.len;
        var dpos = 0;
        var dlen = data.length;
        var wlen = 0;
        while (dlen > 0) {
            wlen = (0, _utils._heap_write)(heap, hpos + hlen, data, dpos, dlen);
            hlen += wlen;
            dpos += wlen;
            dlen -= wlen;
            wlen = asm.process(hpos, hlen);
            hpos += wlen;
            hlen -= wlen;
            if (!hlen) hpos = 0;
        }
        this.pos = hpos;
        this.len = hlen;
        return this;
    };
    Hash.prototype.finish = function () {
        if (this.result !== null) throw new _errors.IllegalStateError('state must be reset before processing new data');
        this.acquire_asm();
        this.asm.finish(this.pos, this.len, 0);
        this.result = new Uint8Array(this.HASH_SIZE);
        this.result.set(this.heap.subarray(0, this.HASH_SIZE));
        this.pos = 0;
        this.len = 0;
        this.release_asm();
        return this;
    };
    return Hash;
}();
exports.Hash = Hash;

},{"../other/errors":15,"../other/utils":16}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha1_asm = sha1_asm;
function sha1_asm(stdlib, foreign, buffer) {
    "use asm";

    // SHA256 state

    var H0 = 0,
        H1 = 0,
        H2 = 0,
        H3 = 0,
        H4 = 0,
        TOTAL0 = 0,
        TOTAL1 = 0;

    // HMAC state
    var I0 = 0,
        I1 = 0,
        I2 = 0,
        I3 = 0,
        I4 = 0,
        O0 = 0,
        O1 = 0,
        O2 = 0,
        O3 = 0,
        O4 = 0;

    // I/O buffer
    var HEAP = new stdlib.Uint8Array(buffer);

    function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
        w0 = w0 | 0;
        w1 = w1 | 0;
        w2 = w2 | 0;
        w3 = w3 | 0;
        w4 = w4 | 0;
        w5 = w5 | 0;
        w6 = w6 | 0;
        w7 = w7 | 0;
        w8 = w8 | 0;
        w9 = w9 | 0;
        w10 = w10 | 0;
        w11 = w11 | 0;
        w12 = w12 | 0;
        w13 = w13 | 0;
        w14 = w14 | 0;
        w15 = w15 | 0;

        var a = 0,
            b = 0,
            c = 0,
            d = 0,
            e = 0,
            n = 0,
            t = 0,
            w16 = 0,
            w17 = 0,
            w18 = 0,
            w19 = 0,
            w20 = 0,
            w21 = 0,
            w22 = 0,
            w23 = 0,
            w24 = 0,
            w25 = 0,
            w26 = 0,
            w27 = 0,
            w28 = 0,
            w29 = 0,
            w30 = 0,
            w31 = 0,
            w32 = 0,
            w33 = 0,
            w34 = 0,
            w35 = 0,
            w36 = 0,
            w37 = 0,
            w38 = 0,
            w39 = 0,
            w40 = 0,
            w41 = 0,
            w42 = 0,
            w43 = 0,
            w44 = 0,
            w45 = 0,
            w46 = 0,
            w47 = 0,
            w48 = 0,
            w49 = 0,
            w50 = 0,
            w51 = 0,
            w52 = 0,
            w53 = 0,
            w54 = 0,
            w55 = 0,
            w56 = 0,
            w57 = 0,
            w58 = 0,
            w59 = 0,
            w60 = 0,
            w61 = 0,
            w62 = 0,
            w63 = 0,
            w64 = 0,
            w65 = 0,
            w66 = 0,
            w67 = 0,
            w68 = 0,
            w69 = 0,
            w70 = 0,
            w71 = 0,
            w72 = 0,
            w73 = 0,
            w74 = 0,
            w75 = 0,
            w76 = 0,
            w77 = 0,
            w78 = 0,
            w79 = 0;

        a = H0;
        b = H1;
        c = H2;
        d = H3;
        e = H4;

        // 0
        t = w0 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 1
        t = w1 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 2
        t = w2 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 3
        t = w3 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 4
        t = w4 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 5
        t = w5 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 6
        t = w6 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 7
        t = w7 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 8
        t = w8 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 9
        t = w9 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 10
        t = w10 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 11
        t = w11 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 12
        t = w12 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 13
        t = w13 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 14
        t = w14 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 15
        t = w15 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 16
        n = w13 ^ w8 ^ w2 ^ w0;
        w16 = n << 1 | n >>> 31;
        t = w16 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 17
        n = w14 ^ w9 ^ w3 ^ w1;
        w17 = n << 1 | n >>> 31;
        t = w17 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 18
        n = w15 ^ w10 ^ w4 ^ w2;
        w18 = n << 1 | n >>> 31;
        t = w18 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 19
        n = w16 ^ w11 ^ w5 ^ w3;
        w19 = n << 1 | n >>> 31;
        t = w19 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 20
        n = w17 ^ w12 ^ w6 ^ w4;
        w20 = n << 1 | n >>> 31;
        t = w20 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 21
        n = w18 ^ w13 ^ w7 ^ w5;
        w21 = n << 1 | n >>> 31;
        t = w21 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 22
        n = w19 ^ w14 ^ w8 ^ w6;
        w22 = n << 1 | n >>> 31;
        t = w22 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 23
        n = w20 ^ w15 ^ w9 ^ w7;
        w23 = n << 1 | n >>> 31;
        t = w23 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 24
        n = w21 ^ w16 ^ w10 ^ w8;
        w24 = n << 1 | n >>> 31;
        t = w24 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 25
        n = w22 ^ w17 ^ w11 ^ w9;
        w25 = n << 1 | n >>> 31;
        t = w25 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 26
        n = w23 ^ w18 ^ w12 ^ w10;
        w26 = n << 1 | n >>> 31;
        t = w26 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 27
        n = w24 ^ w19 ^ w13 ^ w11;
        w27 = n << 1 | n >>> 31;
        t = w27 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 28
        n = w25 ^ w20 ^ w14 ^ w12;
        w28 = n << 1 | n >>> 31;
        t = w28 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 29
        n = w26 ^ w21 ^ w15 ^ w13;
        w29 = n << 1 | n >>> 31;
        t = w29 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 30
        n = w27 ^ w22 ^ w16 ^ w14;
        w30 = n << 1 | n >>> 31;
        t = w30 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 31
        n = w28 ^ w23 ^ w17 ^ w15;
        w31 = n << 1 | n >>> 31;
        t = w31 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 32
        n = w29 ^ w24 ^ w18 ^ w16;
        w32 = n << 1 | n >>> 31;
        t = w32 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 33
        n = w30 ^ w25 ^ w19 ^ w17;
        w33 = n << 1 | n >>> 31;
        t = w33 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 34
        n = w31 ^ w26 ^ w20 ^ w18;
        w34 = n << 1 | n >>> 31;
        t = w34 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 35
        n = w32 ^ w27 ^ w21 ^ w19;
        w35 = n << 1 | n >>> 31;
        t = w35 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 36
        n = w33 ^ w28 ^ w22 ^ w20;
        w36 = n << 1 | n >>> 31;
        t = w36 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 37
        n = w34 ^ w29 ^ w23 ^ w21;
        w37 = n << 1 | n >>> 31;
        t = w37 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 38
        n = w35 ^ w30 ^ w24 ^ w22;
        w38 = n << 1 | n >>> 31;
        t = w38 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 39
        n = w36 ^ w31 ^ w25 ^ w23;
        w39 = n << 1 | n >>> 31;
        t = w39 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 40
        n = w37 ^ w32 ^ w26 ^ w24;
        w40 = n << 1 | n >>> 31;
        t = w40 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 41
        n = w38 ^ w33 ^ w27 ^ w25;
        w41 = n << 1 | n >>> 31;
        t = w41 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 42
        n = w39 ^ w34 ^ w28 ^ w26;
        w42 = n << 1 | n >>> 31;
        t = w42 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 43
        n = w40 ^ w35 ^ w29 ^ w27;
        w43 = n << 1 | n >>> 31;
        t = w43 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 44
        n = w41 ^ w36 ^ w30 ^ w28;
        w44 = n << 1 | n >>> 31;
        t = w44 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 45
        n = w42 ^ w37 ^ w31 ^ w29;
        w45 = n << 1 | n >>> 31;
        t = w45 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 46
        n = w43 ^ w38 ^ w32 ^ w30;
        w46 = n << 1 | n >>> 31;
        t = w46 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 47
        n = w44 ^ w39 ^ w33 ^ w31;
        w47 = n << 1 | n >>> 31;
        t = w47 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 48
        n = w45 ^ w40 ^ w34 ^ w32;
        w48 = n << 1 | n >>> 31;
        t = w48 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 49
        n = w46 ^ w41 ^ w35 ^ w33;
        w49 = n << 1 | n >>> 31;
        t = w49 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 50
        n = w47 ^ w42 ^ w36 ^ w34;
        w50 = n << 1 | n >>> 31;
        t = w50 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 51
        n = w48 ^ w43 ^ w37 ^ w35;
        w51 = n << 1 | n >>> 31;
        t = w51 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 52
        n = w49 ^ w44 ^ w38 ^ w36;
        w52 = n << 1 | n >>> 31;
        t = w52 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 53
        n = w50 ^ w45 ^ w39 ^ w37;
        w53 = n << 1 | n >>> 31;
        t = w53 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 54
        n = w51 ^ w46 ^ w40 ^ w38;
        w54 = n << 1 | n >>> 31;
        t = w54 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 55
        n = w52 ^ w47 ^ w41 ^ w39;
        w55 = n << 1 | n >>> 31;
        t = w55 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 56
        n = w53 ^ w48 ^ w42 ^ w40;
        w56 = n << 1 | n >>> 31;
        t = w56 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 57
        n = w54 ^ w49 ^ w43 ^ w41;
        w57 = n << 1 | n >>> 31;
        t = w57 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 58
        n = w55 ^ w50 ^ w44 ^ w42;
        w58 = n << 1 | n >>> 31;
        t = w58 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 59
        n = w56 ^ w51 ^ w45 ^ w43;
        w59 = n << 1 | n >>> 31;
        t = w59 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 60
        n = w57 ^ w52 ^ w46 ^ w44;
        w60 = n << 1 | n >>> 31;
        t = w60 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 61
        n = w58 ^ w53 ^ w47 ^ w45;
        w61 = n << 1 | n >>> 31;
        t = w61 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 62
        n = w59 ^ w54 ^ w48 ^ w46;
        w62 = n << 1 | n >>> 31;
        t = w62 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 63
        n = w60 ^ w55 ^ w49 ^ w47;
        w63 = n << 1 | n >>> 31;
        t = w63 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 64
        n = w61 ^ w56 ^ w50 ^ w48;
        w64 = n << 1 | n >>> 31;
        t = w64 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 65
        n = w62 ^ w57 ^ w51 ^ w49;
        w65 = n << 1 | n >>> 31;
        t = w65 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 66
        n = w63 ^ w58 ^ w52 ^ w50;
        w66 = n << 1 | n >>> 31;
        t = w66 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 67
        n = w64 ^ w59 ^ w53 ^ w51;
        w67 = n << 1 | n >>> 31;
        t = w67 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 68
        n = w65 ^ w60 ^ w54 ^ w52;
        w68 = n << 1 | n >>> 31;
        t = w68 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 69
        n = w66 ^ w61 ^ w55 ^ w53;
        w69 = n << 1 | n >>> 31;
        t = w69 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 70
        n = w67 ^ w62 ^ w56 ^ w54;
        w70 = n << 1 | n >>> 31;
        t = w70 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 71
        n = w68 ^ w63 ^ w57 ^ w55;
        w71 = n << 1 | n >>> 31;
        t = w71 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 72
        n = w69 ^ w64 ^ w58 ^ w56;
        w72 = n << 1 | n >>> 31;
        t = w72 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 73
        n = w70 ^ w65 ^ w59 ^ w57;
        w73 = n << 1 | n >>> 31;
        t = w73 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 74
        n = w71 ^ w66 ^ w60 ^ w58;
        w74 = n << 1 | n >>> 31;
        t = w74 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 75
        n = w72 ^ w67 ^ w61 ^ w59;
        w75 = n << 1 | n >>> 31;
        t = w75 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 76
        n = w73 ^ w68 ^ w62 ^ w60;
        w76 = n << 1 | n >>> 31;
        t = w76 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 77
        n = w74 ^ w69 ^ w63 ^ w61;
        w77 = n << 1 | n >>> 31;
        t = w77 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 78
        n = w75 ^ w70 ^ w64 ^ w62;
        w78 = n << 1 | n >>> 31;
        t = w78 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        // 79
        n = w76 ^ w71 ^ w65 ^ w63;
        w79 = n << 1 | n >>> 31;
        t = w79 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
        e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;

        H0 = H0 + a | 0;
        H1 = H1 + b | 0;
        H2 = H2 + c | 0;
        H3 = H3 + d | 0;
        H4 = H4 + e | 0;
    }

    function _core_heap(offset) {
        offset = offset | 0;

        _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
    }

    // offset — multiple of 32
    function _state_to_heap(output) {
        output = output | 0;

        HEAP[output | 0] = H0 >>> 24;
        HEAP[output | 1] = H0 >>> 16 & 255;
        HEAP[output | 2] = H0 >>> 8 & 255;
        HEAP[output | 3] = H0 & 255;
        HEAP[output | 4] = H1 >>> 24;
        HEAP[output | 5] = H1 >>> 16 & 255;
        HEAP[output | 6] = H1 >>> 8 & 255;
        HEAP[output | 7] = H1 & 255;
        HEAP[output | 8] = H2 >>> 24;
        HEAP[output | 9] = H2 >>> 16 & 255;
        HEAP[output | 10] = H2 >>> 8 & 255;
        HEAP[output | 11] = H2 & 255;
        HEAP[output | 12] = H3 >>> 24;
        HEAP[output | 13] = H3 >>> 16 & 255;
        HEAP[output | 14] = H3 >>> 8 & 255;
        HEAP[output | 15] = H3 & 255;
        HEAP[output | 16] = H4 >>> 24;
        HEAP[output | 17] = H4 >>> 16 & 255;
        HEAP[output | 18] = H4 >>> 8 & 255;
        HEAP[output | 19] = H4 & 255;
    }

    function reset() {
        H0 = 0x67452301;
        H1 = 0xefcdab89;
        H2 = 0x98badcfe;
        H3 = 0x10325476;
        H4 = 0xc3d2e1f0;
        TOTAL0 = TOTAL1 = 0;
    }

    function init(h0, h1, h2, h3, h4, total0, total1) {
        h0 = h0 | 0;
        h1 = h1 | 0;
        h2 = h2 | 0;
        h3 = h3 | 0;
        h4 = h4 | 0;
        total0 = total0 | 0;
        total1 = total1 | 0;

        H0 = h0;
        H1 = h1;
        H2 = h2;
        H3 = h3;
        H4 = h4;
        TOTAL0 = total0;
        TOTAL1 = total1;
    }

    // offset — multiple of 64
    function process(offset, length) {
        offset = offset | 0;
        length = length | 0;

        var hashed = 0;

        if (offset & 63) return -1;

        while ((length | 0) >= 64) {
            _core_heap(offset);

            offset = offset + 64 | 0;
            length = length - 64 | 0;

            hashed = hashed + 64 | 0;
        }

        TOTAL0 = TOTAL0 + hashed | 0;
        if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;

        return hashed | 0;
    }

    // offset — multiple of 64
    // output — multiple of 32
    function finish(offset, length, output) {
        offset = offset | 0;
        length = length | 0;
        output = output | 0;

        var hashed = 0,
            i = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        if ((length | 0) >= 64) {
            hashed = process(offset, length) | 0;
            if ((hashed | 0) == -1) return -1;

            offset = offset + hashed | 0;
            length = length - hashed | 0;
        }

        hashed = hashed + length | 0;
        TOTAL0 = TOTAL0 + length | 0;
        if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;

        HEAP[offset | length] = 0x80;

        if ((length | 0) >= 56) {
            for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) HEAP[offset | i] = 0x00;
            _core_heap(offset);

            length = 0;

            HEAP[offset | 0] = 0;
        }

        for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) HEAP[offset | i] = 0;

        HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
        HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
        HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
        HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
        HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
        HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
        HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
        HEAP[offset | 63] = TOTAL0 << 3 & 255;
        _core_heap(offset);

        if (~output) _state_to_heap(output);

        return hashed | 0;
    }

    function hmac_reset() {
        H0 = I0;
        H1 = I1;
        H2 = I2;
        H3 = I3;
        H4 = I4;
        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    function _hmac_opad() {
        H0 = O0;
        H1 = O1;
        H2 = O2;
        H3 = O3;
        H4 = O4;
        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
        p0 = p0 | 0;
        p1 = p1 | 0;
        p2 = p2 | 0;
        p3 = p3 | 0;
        p4 = p4 | 0;
        p5 = p5 | 0;
        p6 = p6 | 0;
        p7 = p7 | 0;
        p8 = p8 | 0;
        p9 = p9 | 0;
        p10 = p10 | 0;
        p11 = p11 | 0;
        p12 = p12 | 0;
        p13 = p13 | 0;
        p14 = p14 | 0;
        p15 = p15 | 0;

        // opad
        reset();
        _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);
        O0 = H0;
        O1 = H1;
        O2 = H2;
        O3 = H3;
        O4 = H4;

        // ipad
        reset();
        _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);
        I0 = H0;
        I1 = H1;
        I2 = H2;
        I3 = H3;
        I4 = H4;

        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    // offset — multiple of 64
    // output — multiple of 32
    function hmac_finish(offset, length, output) {
        offset = offset | 0;
        length = length | 0;
        output = output | 0;

        var t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            hashed = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        hashed = finish(offset, length, -1) | 0;
        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

        _hmac_opad();
        _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

        if (~output) _state_to_heap(output);

        return hashed | 0;
    }

    // salt is assumed to be already processed
    // offset — multiple of 64
    // output — multiple of 32
    function pbkdf2_generate_block(offset, length, block, count, output) {
        offset = offset | 0;
        length = length | 0;
        block = block | 0;
        count = count | 0;
        output = output | 0;

        var h0 = 0,
            h1 = 0,
            h2 = 0,
            h3 = 0,
            h4 = 0,
            t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        // pad block number into heap
        // FIXME probable OOB write
        HEAP[offset + length | 0] = block >>> 24;
        HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
        HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
        HEAP[offset + length + 3 | 0] = block & 255;

        // finish first iteration
        hmac_finish(offset, length + 4 | 0, -1) | 0;
        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4;
        count = count - 1 | 0;

        // perform the rest iterations
        while ((count | 0) > 0) {
            hmac_reset();
            _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);
            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

            _hmac_opad();
            _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);
            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

            h0 = h0 ^ H0;
            h1 = h1 ^ H1;
            h2 = h2 ^ H2;
            h3 = h3 ^ H3;
            h4 = h4 ^ H4;

            count = count - 1 | 0;
        }

        H0 = h0;
        H1 = h1;
        H2 = h2;
        H3 = h3;
        H4 = h4;

        if (~output) _state_to_heap(output);

        return 0;
    }

    return {
        // SHA1
        reset: reset,
        init: init,
        process: process,
        finish: finish,

        // HMAC-SHA1
        hmac_reset: hmac_reset,
        hmac_init: hmac_init,
        hmac_finish: hmac_finish,

        // PBKDF2-HMAC-SHA1
        pbkdf2_generate_block: pbkdf2_generate_block
    };
}

},{}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha1 = exports._sha1_hash_size = exports._sha1_block_size = undefined;

var _sha = require('./sha1.asm');

var _hash = require('../hash');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var _sha1_block_size = exports._sha1_block_size = 64;
var _sha1_hash_size = exports._sha1_hash_size = 20;
var Sha1 = /** @class */function (_super) {
    __extends(Sha1, _super);
    function Sha1() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.NAME = 'sha1';
        _this.BLOCK_SIZE = _sha1_block_size;
        _this.HASH_SIZE = _sha1_hash_size;
        return _this;
    }
    Sha1.bytes = function (data) {
        return new Sha1().process(data).finish().result;
    };
    Sha1.NAME = 'sha1';
    Sha1.heap_pool = [];
    Sha1.asm_pool = [];
    Sha1.asm_function = _sha.sha1_asm;
    return Sha1;
}(_hash.Hash);
exports.Sha1 = Sha1;

},{"../hash":10,"./sha1.asm":11}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha256_asm = sha256_asm;
function sha256_asm(stdlib, foreign, buffer) {
    "use asm";

    // SHA256 state

    var H0 = 0,
        H1 = 0,
        H2 = 0,
        H3 = 0,
        H4 = 0,
        H5 = 0,
        H6 = 0,
        H7 = 0,
        TOTAL0 = 0,
        TOTAL1 = 0;

    // HMAC state
    var I0 = 0,
        I1 = 0,
        I2 = 0,
        I3 = 0,
        I4 = 0,
        I5 = 0,
        I6 = 0,
        I7 = 0,
        O0 = 0,
        O1 = 0,
        O2 = 0,
        O3 = 0,
        O4 = 0,
        O5 = 0,
        O6 = 0,
        O7 = 0;

    // I/O buffer
    var HEAP = new stdlib.Uint8Array(buffer);

    function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
        w0 = w0 | 0;
        w1 = w1 | 0;
        w2 = w2 | 0;
        w3 = w3 | 0;
        w4 = w4 | 0;
        w5 = w5 | 0;
        w6 = w6 | 0;
        w7 = w7 | 0;
        w8 = w8 | 0;
        w9 = w9 | 0;
        w10 = w10 | 0;
        w11 = w11 | 0;
        w12 = w12 | 0;
        w13 = w13 | 0;
        w14 = w14 | 0;
        w15 = w15 | 0;

        var a = 0,
            b = 0,
            c = 0,
            d = 0,
            e = 0,
            f = 0,
            g = 0,
            h = 0;

        a = H0;
        b = H1;
        c = H2;
        d = H3;
        e = H4;
        f = H5;
        g = H6;
        h = H7;

        // 0
        h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x428a2f98 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 1
        g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x71374491 | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 2
        f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb5c0fbcf | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 3
        e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xe9b5dba5 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 4
        d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x3956c25b | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 5
        c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x59f111f1 | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 6
        b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x923f82a4 | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 7
        a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xab1c5ed5 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 8
        h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xd807aa98 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 9
        g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x12835b01 | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 10
        f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x243185be | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 11
        e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x550c7dc3 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 12
        d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x72be5d74 | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 13
        c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x80deb1fe | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 14
        b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x9bdc06a7 | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 15
        a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc19bf174 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 16
        w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
        h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xe49b69c1 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 17
        w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
        g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xefbe4786 | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 18
        w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
        f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x0fc19dc6 | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 19
        w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
        e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x240ca1cc | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 20
        w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
        d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x2de92c6f | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 21
        w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
        c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4a7484aa | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 22
        w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
        b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5cb0a9dc | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 23
        w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
        a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x76f988da | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 24
        w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
        h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x983e5152 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 25
        w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
        g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa831c66d | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 26
        w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
        f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb00327c8 | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 27
        w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
        e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xbf597fc7 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 28
        w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
        d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xc6e00bf3 | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 29
        w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
        c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd5a79147 | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 30
        w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
        b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x06ca6351 | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 31
        w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
        a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x14292967 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 32
        w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
        h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x27b70a85 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 33
        w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
        g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x2e1b2138 | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 34
        w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
        f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x4d2c6dfc | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 35
        w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
        e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x53380d13 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 36
        w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
        d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x650a7354 | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 37
        w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
        c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x766a0abb | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 38
        w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
        b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x81c2c92e | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 39
        w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
        a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x92722c85 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 40
        w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
        h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xa2bfe8a1 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 41
        w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
        g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa81a664b | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 42
        w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
        f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xc24b8b70 | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 43
        w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
        e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xc76c51a3 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 44
        w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
        d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xd192e819 | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 45
        w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
        c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd6990624 | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 46
        w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
        b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xf40e3585 | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 47
        w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
        a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x106aa070 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 48
        w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
        h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x19a4c116 | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 49
        w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
        g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x1e376c08 | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 50
        w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
        f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x2748774c | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 51
        w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
        e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x34b0bcb5 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 52
        w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
        d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x391c0cb3 | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 53
        w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
        c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4ed8aa4a | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 54
        w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
        b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5b9cca4f | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 55
        w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
        a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x682e6ff3 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        // 56
        w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
        h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x748f82ee | 0;
        d = d + h | 0;
        h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0;

        // 57
        w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
        g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x78a5636f | 0;
        c = c + g | 0;
        g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;

        // 58
        w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
        f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x84c87814 | 0;
        b = b + f | 0;
        f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0;

        // 59
        w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
        e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x8cc70208 | 0;
        a = a + e | 0;
        e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0;

        // 60
        w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
        d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x90befffa | 0;
        h = h + d | 0;
        d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0;

        // 61
        w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
        c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xa4506ceb | 0;
        g = g + c | 0;
        c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0;

        // 62
        w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
        b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xbef9a3f7 | 0;
        f = f + b | 0;
        b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0;

        // 63
        w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
        a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc67178f2 | 0;
        e = e + a | 0;
        a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;

        H0 = H0 + a | 0;
        H1 = H1 + b | 0;
        H2 = H2 + c | 0;
        H3 = H3 + d | 0;
        H4 = H4 + e | 0;
        H5 = H5 + f | 0;
        H6 = H6 + g | 0;
        H7 = H7 + h | 0;
    }

    function _core_heap(offset) {
        offset = offset | 0;

        _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
    }

    // offset — multiple of 32
    function _state_to_heap(output) {
        output = output | 0;

        HEAP[output | 0] = H0 >>> 24;
        HEAP[output | 1] = H0 >>> 16 & 255;
        HEAP[output | 2] = H0 >>> 8 & 255;
        HEAP[output | 3] = H0 & 255;
        HEAP[output | 4] = H1 >>> 24;
        HEAP[output | 5] = H1 >>> 16 & 255;
        HEAP[output | 6] = H1 >>> 8 & 255;
        HEAP[output | 7] = H1 & 255;
        HEAP[output | 8] = H2 >>> 24;
        HEAP[output | 9] = H2 >>> 16 & 255;
        HEAP[output | 10] = H2 >>> 8 & 255;
        HEAP[output | 11] = H2 & 255;
        HEAP[output | 12] = H3 >>> 24;
        HEAP[output | 13] = H3 >>> 16 & 255;
        HEAP[output | 14] = H3 >>> 8 & 255;
        HEAP[output | 15] = H3 & 255;
        HEAP[output | 16] = H4 >>> 24;
        HEAP[output | 17] = H4 >>> 16 & 255;
        HEAP[output | 18] = H4 >>> 8 & 255;
        HEAP[output | 19] = H4 & 255;
        HEAP[output | 20] = H5 >>> 24;
        HEAP[output | 21] = H5 >>> 16 & 255;
        HEAP[output | 22] = H5 >>> 8 & 255;
        HEAP[output | 23] = H5 & 255;
        HEAP[output | 24] = H6 >>> 24;
        HEAP[output | 25] = H6 >>> 16 & 255;
        HEAP[output | 26] = H6 >>> 8 & 255;
        HEAP[output | 27] = H6 & 255;
        HEAP[output | 28] = H7 >>> 24;
        HEAP[output | 29] = H7 >>> 16 & 255;
        HEAP[output | 30] = H7 >>> 8 & 255;
        HEAP[output | 31] = H7 & 255;
    }

    function reset() {
        H0 = 0x6a09e667;
        H1 = 0xbb67ae85;
        H2 = 0x3c6ef372;
        H3 = 0xa54ff53a;
        H4 = 0x510e527f;
        H5 = 0x9b05688c;
        H6 = 0x1f83d9ab;
        H7 = 0x5be0cd19;
        TOTAL0 = TOTAL1 = 0;
    }

    function init(h0, h1, h2, h3, h4, h5, h6, h7, total0, total1) {
        h0 = h0 | 0;
        h1 = h1 | 0;
        h2 = h2 | 0;
        h3 = h3 | 0;
        h4 = h4 | 0;
        h5 = h5 | 0;
        h6 = h6 | 0;
        h7 = h7 | 0;
        total0 = total0 | 0;
        total1 = total1 | 0;

        H0 = h0;
        H1 = h1;
        H2 = h2;
        H3 = h3;
        H4 = h4;
        H5 = h5;
        H6 = h6;
        H7 = h7;
        TOTAL0 = total0;
        TOTAL1 = total1;
    }

    // offset — multiple of 64
    function process(offset, length) {
        offset = offset | 0;
        length = length | 0;

        var hashed = 0;

        if (offset & 63) return -1;

        while ((length | 0) >= 64) {
            _core_heap(offset);

            offset = offset + 64 | 0;
            length = length - 64 | 0;

            hashed = hashed + 64 | 0;
        }

        TOTAL0 = TOTAL0 + hashed | 0;
        if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;

        return hashed | 0;
    }

    // offset — multiple of 64
    // output — multiple of 32
    function finish(offset, length, output) {
        offset = offset | 0;
        length = length | 0;
        output = output | 0;

        var hashed = 0,
            i = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        if ((length | 0) >= 64) {
            hashed = process(offset, length) | 0;
            if ((hashed | 0) == -1) return -1;

            offset = offset + hashed | 0;
            length = length - hashed | 0;
        }

        hashed = hashed + length | 0;
        TOTAL0 = TOTAL0 + length | 0;
        if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;

        HEAP[offset | length] = 0x80;

        if ((length | 0) >= 56) {
            for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) HEAP[offset | i] = 0x00;

            _core_heap(offset);

            length = 0;

            HEAP[offset | 0] = 0;
        }

        for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) HEAP[offset | i] = 0;

        HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
        HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
        HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
        HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
        HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
        HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
        HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
        HEAP[offset | 63] = TOTAL0 << 3 & 255;
        _core_heap(offset);

        if (~output) _state_to_heap(output);

        return hashed | 0;
    }

    function hmac_reset() {
        H0 = I0;
        H1 = I1;
        H2 = I2;
        H3 = I3;
        H4 = I4;
        H5 = I5;
        H6 = I6;
        H7 = I7;
        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    function _hmac_opad() {
        H0 = O0;
        H1 = O1;
        H2 = O2;
        H3 = O3;
        H4 = O4;
        H5 = O5;
        H6 = O6;
        H7 = O7;
        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
        p0 = p0 | 0;
        p1 = p1 | 0;
        p2 = p2 | 0;
        p3 = p3 | 0;
        p4 = p4 | 0;
        p5 = p5 | 0;
        p6 = p6 | 0;
        p7 = p7 | 0;
        p8 = p8 | 0;
        p9 = p9 | 0;
        p10 = p10 | 0;
        p11 = p11 | 0;
        p12 = p12 | 0;
        p13 = p13 | 0;
        p14 = p14 | 0;
        p15 = p15 | 0;

        // opad
        reset();
        _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);
        O0 = H0;
        O1 = H1;
        O2 = H2;
        O3 = H3;
        O4 = H4;
        O5 = H5;
        O6 = H6;
        O7 = H7;

        // ipad
        reset();
        _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);
        I0 = H0;
        I1 = H1;
        I2 = H2;
        I3 = H3;
        I4 = H4;
        I5 = H5;
        I6 = H6;
        I7 = H7;

        TOTAL0 = 64;
        TOTAL1 = 0;
    }

    // offset — multiple of 64
    // output — multiple of 32
    function hmac_finish(offset, length, output) {
        offset = offset | 0;
        length = length | 0;
        output = output | 0;

        var t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            t5 = 0,
            t6 = 0,
            t7 = 0,
            hashed = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        hashed = finish(offset, length, -1) | 0;
        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

        _hmac_opad();
        _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

        if (~output) _state_to_heap(output);

        return hashed | 0;
    }

    // salt is assumed to be already processed
    // offset — multiple of 64
    // output — multiple of 32
    function pbkdf2_generate_block(offset, length, block, count, output) {
        offset = offset | 0;
        length = length | 0;
        block = block | 0;
        count = count | 0;
        output = output | 0;

        var h0 = 0,
            h1 = 0,
            h2 = 0,
            h3 = 0,
            h4 = 0,
            h5 = 0,
            h6 = 0,
            h7 = 0,
            t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            t5 = 0,
            t6 = 0,
            t7 = 0;

        if (offset & 63) return -1;

        if (~output) if (output & 31) return -1;

        // pad block number into heap
        // FIXME probable OOB write
        HEAP[offset + length | 0] = block >>> 24;
        HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
        HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
        HEAP[offset + length + 3 | 0] = block & 255;

        // finish first iteration
        hmac_finish(offset, length + 4 | 0, -1) | 0;
        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4, h5 = t5 = H5, h6 = t6 = H6, h7 = t7 = H7;
        count = count - 1 | 0;

        // perform the rest iterations
        while ((count | 0) > 0) {
            hmac_reset();
            _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);
            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

            _hmac_opad();
            _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);
            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

            h0 = h0 ^ H0;
            h1 = h1 ^ H1;
            h2 = h2 ^ H2;
            h3 = h3 ^ H3;
            h4 = h4 ^ H4;
            h5 = h5 ^ H5;
            h6 = h6 ^ H6;
            h7 = h7 ^ H7;

            count = count - 1 | 0;
        }

        H0 = h0;
        H1 = h1;
        H2 = h2;
        H3 = h3;
        H4 = h4;
        H5 = h5;
        H6 = h6;
        H7 = h7;

        if (~output) _state_to_heap(output);

        return 0;
    }

    return {
        // SHA256
        reset: reset,
        init: init,
        process: process,
        finish: finish,

        // HMAC-SHA256
        hmac_reset: hmac_reset,
        hmac_init: hmac_init,
        hmac_finish: hmac_finish,

        // PBKDF2-HMAC-SHA256
        pbkdf2_generate_block: pbkdf2_generate_block
    };
}

},{}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = exports._sha256_hash_size = exports._sha256_block_size = undefined;

var _sha = require('./sha256.asm');

var _hash = require('../hash');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var _sha256_block_size = exports._sha256_block_size = 64;
var _sha256_hash_size = exports._sha256_hash_size = 32;
var Sha256 = /** @class */function (_super) {
    __extends(Sha256, _super);
    function Sha256() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.NAME = 'sha256';
        _this.BLOCK_SIZE = _sha256_block_size;
        _this.HASH_SIZE = _sha256_hash_size;
        return _this;
    }
    Sha256.bytes = function (data) {
        return new Sha256().process(data).finish().result;
    };
    Sha256.NAME = 'sha256';
    Sha256.heap_pool = [];
    Sha256.asm_pool = [];
    Sha256.asm_function = _sha.sha256_asm;
    return Sha256;
}(_hash.Hash);
exports.Sha256 = Sha256;

},{"../hash":10,"./sha256.asm":13}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var IllegalStateError = /** @class */function (_super) {
    __extends(IllegalStateError, _super);
    function IllegalStateError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.create(Error.prototype, { name: { value: 'IllegalStateError' } });
        return _this;
    }
    return IllegalStateError;
}(Error);
exports.IllegalStateError = IllegalStateError;

var IllegalArgumentError = /** @class */function (_super) {
    __extends(IllegalArgumentError, _super);
    function IllegalArgumentError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.create(Error.prototype, { name: { value: 'IllegalArgumentError' } });
        return _this;
    }
    return IllegalArgumentError;
}(Error);
exports.IllegalArgumentError = IllegalArgumentError;

var SecurityError = /** @class */function (_super) {
    __extends(SecurityError, _super);
    function SecurityError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.create(Error.prototype, { name: { value: 'SecurityError' } });
        return _this;
    }
    return SecurityError;
}(Error);
exports.SecurityError = SecurityError;

},{}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.string_to_bytes = string_to_bytes;
exports.hex_to_bytes = hex_to_bytes;
exports.base64_to_bytes = base64_to_bytes;
exports.bytes_to_string = bytes_to_string;
exports.bytes_to_hex = bytes_to_hex;
exports.bytes_to_base64 = bytes_to_base64;
exports.pow2_ceil = pow2_ceil;
exports.is_number = is_number;
exports.is_string = is_string;
exports.is_buffer = is_buffer;
exports.is_bytes = is_bytes;
exports.is_typed_array = is_typed_array;
exports._heap_init = _heap_init;
exports._heap_write = _heap_write;
exports.joinBytes = joinBytes;
var local_atob = typeof atob === 'undefined' ? function (str) {
    return require('buffer').Buffer.from(str, 'base64').toString('binary');
} : atob;
var local_btoa = typeof btoa === 'undefined' ? function (str) {
    return require('buffer').Buffer.from(str, 'binary').toString('base64');
} : btoa;
function string_to_bytes(str, utf8) {
    if (utf8 === void 0) {
        utf8 = false;
    }
    var len = str.length,
        bytes = new Uint8Array(utf8 ? 4 * len : len);
    for (var i = 0, j = 0; i < len; i++) {
        var c = str.charCodeAt(i);
        if (utf8 && 0xd800 <= c && c <= 0xdbff) {
            if (++i >= len) throw new Error('Malformed string, low surrogate expected at position ' + i);
            c = (c ^ 0xd800) << 10 | 0x10000 | str.charCodeAt(i) ^ 0xdc00;
        } else if (!utf8 && c >>> 8) {
            throw new Error('Wide characters are not allowed.');
        }
        if (!utf8 || c <= 0x7f) {
            bytes[j++] = c;
        } else if (c <= 0x7ff) {
            bytes[j++] = 0xc0 | c >> 6;
            bytes[j++] = 0x80 | c & 0x3f;
        } else if (c <= 0xffff) {
            bytes[j++] = 0xe0 | c >> 12;
            bytes[j++] = 0x80 | c >> 6 & 0x3f;
            bytes[j++] = 0x80 | c & 0x3f;
        } else {
            bytes[j++] = 0xf0 | c >> 18;
            bytes[j++] = 0x80 | c >> 12 & 0x3f;
            bytes[j++] = 0x80 | c >> 6 & 0x3f;
            bytes[j++] = 0x80 | c & 0x3f;
        }
    }
    return bytes.subarray(0, j);
}
function hex_to_bytes(str) {
    var len = str.length;
    if (len & 1) {
        str = '0' + str;
        len++;
    }
    var bytes = new Uint8Array(len >> 1);
    for (var i = 0; i < len; i += 2) {
        bytes[i >> 1] = parseInt(str.substr(i, 2), 16);
    }
    return bytes;
}
function base64_to_bytes(str) {
    return string_to_bytes(local_atob(str));
}
function bytes_to_string(bytes, utf8) {
    if (utf8 === void 0) {
        utf8 = false;
    }
    var len = bytes.length,
        chars = new Array(len);
    for (var i = 0, j = 0; i < len; i++) {
        var b = bytes[i];
        if (!utf8 || b < 128) {
            chars[j++] = b;
        } else if (b >= 192 && b < 224 && i + 1 < len) {
            chars[j++] = (b & 0x1f) << 6 | bytes[++i] & 0x3f;
        } else if (b >= 224 && b < 240 && i + 2 < len) {
            chars[j++] = (b & 0xf) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;
        } else if (b >= 240 && b < 248 && i + 3 < len) {
            var c = (b & 7) << 18 | (bytes[++i] & 0x3f) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;
            if (c <= 0xffff) {
                chars[j++] = c;
            } else {
                c ^= 0x10000;
                chars[j++] = 0xd800 | c >> 10;
                chars[j++] = 0xdc00 | c & 0x3ff;
            }
        } else {
            throw new Error('Malformed UTF8 character at byte offset ' + i);
        }
    }
    var str = '',
        bs = 16384;
    for (var i = 0; i < j; i += bs) {
        str += String.fromCharCode.apply(String, chars.slice(i, i + bs <= j ? i + bs : j));
    }
    return str;
}
function bytes_to_hex(arr) {
    var str = '';
    for (var i = 0; i < arr.length; i++) {
        var h = (arr[i] & 0xff).toString(16);
        if (h.length < 2) str += '0';
        str += h;
    }
    return str;
}
function bytes_to_base64(arr) {
    return local_btoa(bytes_to_string(arr));
}
function pow2_ceil(a) {
    a -= 1;
    a |= a >>> 1;
    a |= a >>> 2;
    a |= a >>> 4;
    a |= a >>> 8;
    a |= a >>> 16;
    a += 1;
    return a;
}
function is_number(a) {
    return typeof a === 'number';
}
function is_string(a) {
    return typeof a === 'string';
}
function is_buffer(a) {
    return a instanceof ArrayBuffer;
}
function is_bytes(a) {
    return a instanceof Uint8Array;
}
function is_typed_array(a) {
    return a instanceof Int8Array || a instanceof Uint8Array || a instanceof Int16Array || a instanceof Uint16Array || a instanceof Int32Array || a instanceof Uint32Array || a instanceof Float32Array || a instanceof Float64Array;
}
function _heap_init(heap, heapSize) {
    var size = heap ? heap.byteLength : heapSize || 65536;
    if (size & 0xfff || size <= 0) throw new Error('heap size must be a positive integer and a multiple of 4096');
    heap = heap || new Uint8Array(new ArrayBuffer(size));
    return heap;
}
function _heap_write(heap, hpos, data, dpos, dlen) {
    var hlen = heap.length - hpos;
    var wlen = hlen < dlen ? hlen : dlen;
    heap.set(data.subarray(dpos, dpos + wlen), hpos);
    return wlen;
}
function joinBytes() {
    var arg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arg[_i] = arguments[_i];
    }
    var totalLenght = arg.reduce(function (sum, curr) {
        return sum + curr.length;
    }, 0);
    var ret = new Uint8Array(totalLenght);
    var cursor = 0;
    for (var i = 0; i < arg.length; i++) {
        ret.set(arg[i], cursor);
        cursor += arg[i].length;
    }
    return ret;
}

},{"buffer":"buffer"}],17:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"buffer"}],18:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":"crypto"}],19:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"./elliptic/curve":22,"./elliptic/curves":25,"./elliptic/ec":26,"./elliptic/eddsa":29,"./elliptic/utils":33,"brorand":18}],20:[function(require,module,exports){
'use strict';

var BN = dereq_bn;
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":19,"bn.js":17}],21:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = dereq_bn;
var inherits = dereq_inherits;
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":19,"../curve":22,"bn.js":17,"inherits":48}],22:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":20,"./edwards":21,"./mont":23,"./short":24}],23:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = dereq_bn;
var inherits = dereq_inherits;
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  // Note: this implementation is according to the original paper
  // by P. Montgomery, NOT the one by D. J. Bernstein.
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  var bytes = utils.toArray(bytes, enc);

  // TODO Curve448
  // Montgomery curve points must be represented in the compressed format
  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B
  if (bytes.length === 33 && bytes[0] === 0x40)
    bytes = bytes.slice(1, 33).reverse(); // point must be little-endian
  if (bytes.length !== 32)
    throw new Error('Unknown point compression format');
  return this.point(bytes, 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();

  // Note: the output should always be little-endian
  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B
  if (compact) {
    return [ 0x40 ].concat(this.getX().toArray('le', len));
  } else {
    return this.getX().toArray('be', len);
  }
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":19,"../curve":22,"bn.js":17,"inherits":48}],24:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = dereq_bn;
var inherits = dereq_inherits;
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":19,"../curve":22,"bn.js":17,"inherits":48}],25:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else if (options.type === 'mont')
    this.curve = new elliptic.curve.mont(options);
  else throw new Error('Unknown curve type.');
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, n*G != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

// https://tools.ietf.org/html/rfc7748#section-4.1
defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  cofactor: '8',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  cofactor: '8',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

// https://tools.ietf.org/html/rfc5639#section-3.4
defineCurve('brainpoolP256r1', {
  type: 'short',
  prime: null,
  p: 'A9FB57DB A1EEA9BC 3E660A90 9D838D72 6E3BF623 D5262028 2013481D 1F6E5377',
  a: '7D5A0975 FC2C3057 EEF67530 417AFFE7 FB8055C1 26DC5C6C E94A4B44 F330B5D9',
  b: '26DC5C6C E94A4B44 F330B5D9 BBD77CBF 95841629 5CF7E1CE 6BCCDC18 FF8C07B6',
  n: 'A9FB57DB A1EEA9BC 3E660A90 9D838D71 8C397AA3 B561A6F7 901E0E82 974856A7',
  hash: hash.sha256, // or 384, or 512
  gRed: false,
  g: [
    '8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262',
    '547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997'
  ]
});

// https://tools.ietf.org/html/rfc5639#section-3.6
defineCurve('brainpoolP384r1', {
  type: 'short',
  prime: null,
  p: '8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B4 12B1DA19 7FB71123' +
    'ACD3A729 901D1A71 87470013 3107EC53',
  a: '7BC382C6 3D8C150C 3C72080A CE05AFA0 C2BEA28E 4FB22787 139165EF BA91F90F' +
    '8AA5814A 503AD4EB 04A8C7DD 22CE2826',
  b: '04A8C7DD 22CE2826 8B39B554 16F0447C 2FB77DE1 07DCD2A6 2E880EA5 3EEB62D5' +
    '7CB43902 95DBC994 3AB78696 FA504C11',
  n: '8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B3 1F166E6C AC0425A7' +
    'CF3AB6AF 6B7FC310 3B883202 E9046565',
  hash: hash.sha384, // or 512
  gRed: false,
  g: [
    '1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10' +
      'E8E826E03436D646AAEF87B2E247D4AF1E',
    '8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129' +
      '280E4646217791811142820341263C5315'
  ]
});

// https://tools.ietf.org/html/rfc5639#section-3.7
defineCurve('brainpoolP512r1', {
  type: 'short',
  prime: null,
  p: 'AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 70330871' +
    '7D4D9B00 9BC66842 AECDA12A E6A380E6 2881FF2F 2D82C685 28AA6056 583A48F3',
  a: '7830A331 8B603B89 E2327145 AC234CC5 94CBDD8D 3DF91610 A83441CA EA9863BC' +
    '2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A7 2BF2C7B9 E7C1AC4D 77FC94CA',
  b: '3DF91610 A83441CA EA9863BC 2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A7' +
    '2BF2C7B9 E7C1AC4D 77FC94CA DC083E67 984050B7 5EBAE5DD 2809BD63 8016F723',
  n: 'AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 70330870' +
    '553E5C41 4CA92619 41866119 7FAC1047 1DB1D381 085DDADD B5879682 9CA90069',
  hash: hash.sha512,
  gRed: false,
  g: [
    '81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D009' +
      '8EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822',
    '7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F81' +
      '11B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892'
  ]
});

// https://en.bitcoin.it/wiki/Secp256k1
var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":19,"./precomputed/secp256k1":32,"hash.js":35}],26:[function(require,module,exports){
'use strict';

var BN = dereq_bn;
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  // Key generation for curve25519 is simpler
  if (this.curve.type === 'mont') {
    var priv = new BN(drbg.generate(32));
    return this.keyFromPrivate(priv);
  }

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":19,"./key":27,"./signature":28,"bn.js":17,"hmac-drbg":47}],27:[function(require,module,exports){
'use strict';

var BN = dereq_bn;
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

// TODO: should not validate for X25519
KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(enc, compact) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // For Curve25519/Curve448 we have a specific procedure.
  // TODO Curve448
  if (this.ec.curve.type === 'mont') {
    var one = this.ec.curve.one;
    var mask = one.ushln(255 - 3).sub(one).ushln(3);
    this.priv = this.priv.or(one.ushln(255 - 1));
    this.priv = this.priv.and(mask);
  } else
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":19,"bn.js":17}],28:[function(require,module,exports){
'use strict';

var BN = dereq_bn;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":19,"bn.js":17}],29:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.curve.n.toArray()
  });

  return this.keyFromSecret(drbg.generate(32));
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":19,"./key":30,"./signature":31,"hash.js":35,"hmac-drbg":47}],30:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  if (params.hasOwnProperty('secret'))
    this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else {
    this._pubBytes = parseBytes(params.pub);
    if (this._pubBytes && this._pubBytes.length === 33 &&
        this._pubBytes[0] === 0x40)
      this._pubBytes = this._pubBytes.slice(1, 33);
    if (this._pubBytes && this._pubBytes.length !== 32)
      throw new Error('Unknown point compression format');
  }
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  // https://tools.ietf.org/html/rfc8032#section-5.1.5
  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc, compact) {
  return utils.encode((compact ? [ 0x40 ] : []).concat(this.pubBytes()), enc);
};

module.exports = KeyPair;

},{"../../elliptic":19}],31:[function(require,module,exports){
'use strict';

var BN = dereq_bn;
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":19,"bn.js":17}],32:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],33:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = dereq_bn;
var minAssert = dereq_minimalistic_assert;
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":17,"minimalistic-assert":49,"minimalistic-crypto-utils":50}],34:[function(require,module,exports){

// email-addresses.js - RFC 5322 email address parser
// v 3.0.1
//
// http://tools.ietf.org/html/rfc5322
//
// This library does not validate email addresses.
// emailAddresses attempts to parse addresses using the (fairly liberal)
// grammar specified in RFC 5322.
//
// email-addresses returns {
//     ast: <an abstract syntax tree based on rfc5322>,
//     addresses: [{
//            node: <node in ast for this address>,
//            name: <display-name>,
//            address: <addr-spec>,
//            local: <local-part>,
//            domain: <domain>
//         }, ...]
// }
//
// emailAddresses.parseOneAddress and emailAddresses.parseAddressList
// work as you might expect. Try it out.
//
// Many thanks to Dominic Sayers and his documentation on the is_email function,
// http://code.google.com/p/isemail/ , which helped greatly in writing this parser.

(function (global) {
"use strict";

function parse5322(opts) {

    // tokenizing functions

    function inStr() { return pos < len; }
    function curTok() { return parseString[pos]; }
    function getPos() { return pos; }
    function setPos(i) { pos = i; }
    function nextTok() { pos += 1; }
    function initialize() {
        pos = 0;
        len = parseString.length;
    }

    // parser helper functions

    function o(name, value) {
        return {
            name: name,
            tokens: value || "",
            semantic: value || "",
            children: []
        };
    }

    function wrap(name, ast) {
        var n;
        if (ast === null) { return null; }
        n = o(name);
        n.tokens = ast.tokens;
        n.semantic = ast.semantic;
        n.children.push(ast);
        return n;
    }

    function add(parent, child) {
        if (child !== null) {
            parent.tokens += child.tokens;
            parent.semantic += child.semantic;
        }
        parent.children.push(child);
        return parent;
    }

    function compareToken(fxnCompare) {
        var tok;
        if (!inStr()) { return null; }
        tok = curTok();
        if (fxnCompare(tok)) {
            nextTok();
            return o('token', tok);
        }
        return null;
    }

    function literal(lit) {
        return function literalFunc() {
            return wrap('literal', compareToken(function (tok) {
                return tok === lit;
            }));
        };
    }

    function and() {
        var args = arguments;
        return function andFunc() {
            var i, s, result, start;
            start = getPos();
            s = o('and');
            for (i = 0; i < args.length; i += 1) {
                result = args[i]();
                if (result === null) {
                    setPos(start);
                    return null;
                }
                add(s, result);
            }
            return s;
        };
    }

    function or() {
        var args = arguments;
        return function orFunc() {
            var i, result, start;
            start = getPos();
            for (i = 0; i < args.length; i += 1) {
                result = args[i]();
                if (result !== null) {
                    return result;
                }
                setPos(start);
            }
            return null;
        };
    }

    function opt(prod) {
        return function optFunc() {
            var result, start;
            start = getPos();
            result = prod();
            if (result !== null) {
                return result;
            }
            else {
                setPos(start);
                return o('opt');
            }
        };
    }

    function invis(prod) {
        return function invisFunc() {
            var result = prod();
            if (result !== null) {
                result.semantic = "";
            }
            return result;
        };
    }

    function colwsp(prod) {
        return function collapseSemanticWhitespace() {
            var result = prod();
            if (result !== null && result.semantic.length > 0) {
                result.semantic = " ";
            }
            return result;
        };
    }

    function star(prod, minimum) {
        return function starFunc() {
            var s, result, count, start, min;
            start = getPos();
            s = o('star');
            count = 0;
            min = minimum === undefined ? 0 : minimum;
            while ((result = prod()) !== null) {
                count = count + 1;
                add(s, result);
            }
            if (count >= min) {
                return s;
            }
            else {
                setPos(start);
                return null;
            }
        };
    }

    // One expects names to get normalized like this:
    // "  First  Last " -> "First Last"
    // "First Last" -> "First Last"
    // "First   Last" -> "First Last"
    function collapseWhitespace(s) {
        return s.replace(/([ \t]|\r\n)+/g, ' ').replace(/^\s*/, '').replace(/\s*$/, '');
    }

    // UTF-8 pseudo-production (RFC 6532)
    // RFC 6532 extends RFC 5322 productions to include UTF-8
    // using the following productions:
    // UTF8-non-ascii  =   UTF8-2 / UTF8-3 / UTF8-4
    // UTF8-2          =   <Defined in Section 4 of RFC3629>
    // UTF8-3          =   <Defined in Section 4 of RFC3629>
    // UTF8-4          =   <Defined in Section 4 of RFC3629>
    //
    // For reference, the extended RFC 5322 productions are:
    // VCHAR   =/  UTF8-non-ascii
    // ctext   =/  UTF8-non-ascii
    // atext   =/  UTF8-non-ascii
    // qtext   =/  UTF8-non-ascii
    // dtext   =/  UTF8-non-ascii
    function isUTF8NonAscii(tok) {
        // In JavaScript, we just deal directly with Unicode code points,
        // so we aren't checking individual bytes for UTF-8 encoding.
        // Just check that the character is non-ascii.
        return tok.charCodeAt(0) >= 128;
    }


    // common productions (RFC 5234)
    // http://tools.ietf.org/html/rfc5234
    // B.1. Core Rules

    // CR             =  %x0D
    //                         ; carriage return
    function cr() { return wrap('cr', literal('\r')()); }

    // CRLF           =  CR LF
    //                         ; Internet standard newline
    function crlf() { return wrap('crlf', and(cr, lf)()); }

    // DQUOTE         =  %x22
    //                         ; " (Double Quote)
    function dquote() { return wrap('dquote', literal('"')()); }

    // HTAB           =  %x09
    //                         ; horizontal tab
    function htab() { return wrap('htab', literal('\t')()); }

    // LF             =  %x0A
    //                         ; linefeed
    function lf() { return wrap('lf', literal('\n')()); }

    // SP             =  %x20
    function sp() { return wrap('sp', literal(' ')()); }

    // VCHAR          =  %x21-7E
    //                         ; visible (printing) characters
    function vchar() {
        return wrap('vchar', compareToken(function vcharFunc(tok) {
            var code = tok.charCodeAt(0);
            var accept = (0x21 <= code && code <= 0x7E);
            if (opts.rfc6532) {
                accept = accept || isUTF8NonAscii(tok);
            }
            return accept;
        }));
    }

    // WSP            =  SP / HTAB
    //                         ; white space
    function wsp() { return wrap('wsp', or(sp, htab)()); }


    // email productions (RFC 5322)
    // http://tools.ietf.org/html/rfc5322
    // 3.2.1. Quoted characters

    // quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
    function quotedPair() {
        var qp = wrap('quoted-pair',
        or(
            and(literal('\\'), or(vchar, wsp)),
            obsQP
        )());
        if (qp === null) { return null; }
        // a quoted pair will be two characters, and the "\" character
        // should be semantically "invisible" (RFC 5322 3.2.1)
        qp.semantic = qp.semantic[1];
        return qp;
    }

    // 3.2.2. Folding White Space and Comments

    // FWS             =   ([*WSP CRLF] 1*WSP) /  obs-FWS
    function fws() {
        return wrap('fws', or(
            obsFws,
            and(
                opt(and(
                    star(wsp),
                    invis(crlf)
                   )),
                star(wsp, 1)
            )
        )());
    }

    // ctext           =   %d33-39 /          ; Printable US-ASCII
    //                     %d42-91 /          ;  characters not including
    //                     %d93-126 /         ;  "(", ")", or "\"
    //                     obs-ctext
    function ctext() {
        return wrap('ctext', or(
            function ctextFunc1() {
                return compareToken(function ctextFunc2(tok) {
                    var code = tok.charCodeAt(0);
                    var accept =
                        (33 <= code && code <= 39) ||
                        (42 <= code && code <= 91) ||
                        (93 <= code && code <= 126);
                    if (opts.rfc6532) {
                        accept = accept || isUTF8NonAscii(tok);
                    }
                    return accept;
                });
            },
            obsCtext
        )());
    }

    // ccontent        =   ctext / quoted-pair / comment
    function ccontent() {
        return wrap('ccontent', or(ctext, quotedPair, comment)());
    }

    // comment         =   "(" *([FWS] ccontent) [FWS] ")"
    function comment() {
        return wrap('comment', and(
            literal('('),
            star(and(opt(fws), ccontent)),
            opt(fws),
            literal(')')
        )());
    }

    // CFWS            =   (1*([FWS] comment) [FWS]) / FWS
    function cfws() {
        return wrap('cfws', or(
            and(
                star(
                    and(opt(fws), comment),
                    1
                ),
                opt(fws)
            ),
            fws
        )());
    }

    // 3.2.3. Atom

    //atext           =   ALPHA / DIGIT /    ; Printable US-ASCII
    //                       "!" / "#" /        ;  characters not including
    //                       "$" / "%" /        ;  specials.  Used for atoms.
    //                       "&" / "'" /
    //                       "*" / "+" /
    //                       "-" / "/" /
    //                       "=" / "?" /
    //                       "^" / "_" /
    //                       "`" / "{" /
    //                       "|" / "}" /
    //                       "~"
    function atext() {
        return wrap('atext', compareToken(function atextFunc(tok) {
            var accept =
                ('a' <= tok && tok <= 'z') ||
                ('A' <= tok && tok <= 'Z') ||
                ('0' <= tok && tok <= '9') ||
                (['!', '#', '$', '%', '&', '\'', '*', '+', '-', '/',
                  '=', '?', '^', '_', '`', '{', '|', '}', '~'].indexOf(tok) >= 0);
            if (opts.rfc6532) {
                accept = accept || isUTF8NonAscii(tok);
            }
            return accept;
        }));
    }

    // atom            =   [CFWS] 1*atext [CFWS]
    function atom() {
        return wrap('atom', and(colwsp(opt(cfws)), star(atext, 1), colwsp(opt(cfws)))());
    }

    // dot-atom-text   =   1*atext *("." 1*atext)
    function dotAtomText() {
        var s, maybeText;
        s = wrap('dot-atom-text', star(atext, 1)());
        if (s === null) { return s; }
        maybeText = star(and(literal('.'), star(atext, 1)))();
        if (maybeText !== null) {
            add(s, maybeText);
        }
        return s;
    }

    // dot-atom        =   [CFWS] dot-atom-text [CFWS]
    function dotAtom() {
        return wrap('dot-atom', and(invis(opt(cfws)), dotAtomText, invis(opt(cfws)))());
    }

    // 3.2.4. Quoted Strings

    //  qtext           =   %d33 /             ; Printable US-ASCII
    //                      %d35-91 /          ;  characters not including
    //                      %d93-126 /         ;  "\" or the quote character
    //                      obs-qtext
    function qtext() {
        return wrap('qtext', or(
            function qtextFunc1() {
                return compareToken(function qtextFunc2(tok) {
                    var code = tok.charCodeAt(0);
                    var accept =
                        (33 === code) ||
                        (35 <= code && code <= 91) ||
                        (93 <= code && code <= 126);
                    if (opts.rfc6532) {
                        accept = accept || isUTF8NonAscii(tok);
                    }
                    return accept;
                });
            },
            obsQtext
        )());
    }

    // qcontent        =   qtext / quoted-pair
    function qcontent() {
        return wrap('qcontent', or(qtext, quotedPair)());
    }

    //  quoted-string   =   [CFWS]
    //                      DQUOTE *([FWS] qcontent) [FWS] DQUOTE
    //                      [CFWS]
    function quotedString() {
        return wrap('quoted-string', and(
            invis(opt(cfws)),
            invis(dquote), star(and(opt(colwsp(fws)), qcontent)), opt(invis(fws)), invis(dquote),
            invis(opt(cfws))
        )());
    }

    // 3.2.5 Miscellaneous Tokens

    // word            =   atom / quoted-string
    function word() {
        return wrap('word', or(atom, quotedString)());
    }

    // phrase          =   1*word / obs-phrase
    function phrase() {
        return wrap('phrase', or(obsPhrase, star(word, 1))());
    }

    // 3.4. Address Specification
    //   address         =   mailbox / group
    function address() {
        return wrap('address', or(mailbox, group)());
    }

    //   mailbox         =   name-addr / addr-spec
    function mailbox() {
        return wrap('mailbox', or(nameAddr, addrSpec)());
    }

    //   name-addr       =   [display-name] angle-addr
    function nameAddr() {
        return wrap('name-addr', and(opt(displayName), angleAddr)());
    }

    //   angle-addr      =   [CFWS] "<" addr-spec ">" [CFWS] /
    //                       obs-angle-addr
    function angleAddr() {
        return wrap('angle-addr', or(
            and(
                invis(opt(cfws)),
                literal('<'),
                addrSpec,
                literal('>'),
                invis(opt(cfws))
            ),
            obsAngleAddr
        )());
    }

    //   group           =   display-name ":" [group-list] ";" [CFWS]
    function group() {
        return wrap('group', and(
            displayName,
            literal(':'),
            opt(groupList),
            literal(';'),
            invis(opt(cfws))
        )());
    }

    //   display-name    =   phrase
    function displayName() {
        return wrap('display-name', function phraseFixedSemantic() {
            var result = phrase();
            if (result !== null) {
                result.semantic = collapseWhitespace(result.semantic);
            }
            return result;
        }());
    }

    //   mailbox-list    =   (mailbox *("," mailbox)) / obs-mbox-list
    function mailboxList() {
        return wrap('mailbox-list', or(
            and(
                mailbox,
                star(and(literal(','), mailbox))
            ),
            obsMboxList
        )());
    }

    //   address-list    =   (address *("," address)) / obs-addr-list
    function addressList() {
        return wrap('address-list', or(
            and(
                address,
                star(and(literal(','), address))
            ),
            obsAddrList
        )());
    }

    //   group-list      =   mailbox-list / CFWS / obs-group-list
    function groupList() {
        return wrap('group-list', or(
            mailboxList,
            invis(cfws),
            obsGroupList
        )());
    }

    // 3.4.1 Addr-Spec Specification

    // local-part      =   dot-atom / quoted-string / obs-local-part
    function localPart() {
        // note: quoted-string, dotAtom are proper subsets of obs-local-part
        // so we really just have to look for obsLocalPart, if we don't care about the exact parse tree
        return wrap('local-part', or(obsLocalPart, dotAtom, quotedString)());
    }

    //  dtext           =   %d33-90 /          ; Printable US-ASCII
    //                      %d94-126 /         ;  characters not including
    //                      obs-dtext          ;  "[", "]", or "\"
    function dtext() {
        return wrap('dtext', or(
            function dtextFunc1() {
                return compareToken(function dtextFunc2(tok) {
                    var code = tok.charCodeAt(0);
                    var accept =
                        (33 <= code && code <= 90) ||
                        (94 <= code && code <= 126);
                    if (opts.rfc6532) {
                        accept = accept || isUTF8NonAscii(tok);
                    }
                    return accept;
                });
            },
            obsDtext
            )()
        );
    }

    // domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
    function domainLiteral() {
        return wrap('domain-literal', and(
            invis(opt(cfws)),
            literal('['),
            star(and(opt(fws), dtext)),
            opt(fws),
            literal(']'),
            invis(opt(cfws))
        )());
    }

    // domain          =   dot-atom / domain-literal / obs-domain
    function domain() {
        return wrap('domain', function domainCheckTLD() {
            var result = or(obsDomain, dotAtom, domainLiteral)();
            if (opts.rejectTLD) {
                if (result.semantic.indexOf('.') < 0) {
                    return null;
                }
            }
            // strip all whitespace from domains
            if (result) {
                result.semantic = result.semantic.replace(/\s+/g, '');
            }
            return result;
        }());
    }

    // addr-spec       =   local-part "@" domain
    function addrSpec() {
        return wrap('addr-spec', and(
            localPart, literal('@'), domain
        )());
    }

    // 3.6.2 Originator Fields
    // Below we only parse the field body, not the name of the field
    // like "From:", "Sender:", or "Reply-To:". Other libraries that
    // parse email headers can parse those and defer to these productions
    // for the "RFC 5322" part.

    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields
    // from = "From:" (mailbox-list / address-list) CRLF
    function fromSpec() {
        return wrap('from', or(
            mailboxList,
            addressList
        )());
    }

    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields
    // sender = "Sender:" (mailbox / address) CRLF
    function senderSpec() {
        return wrap('sender', or(
            mailbox,
            address
        )());
    }

    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields
    // reply-to = "Reply-To:" address-list CRLF
    function replyToSpec() {
        return wrap('reply-to', addressList());
    }

    // 4.1. Miscellaneous Obsolete Tokens

    //  obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control
    //                      %d11 /             ;  characters that do not
    //                      %d12 /             ;  include the carriage
    //                      %d14-31 /          ;  return, line feed, and
    //                      %d127              ;  white space characters
    function obsNoWsCtl() {
        return opts.strict ? null : wrap('obs-NO-WS-CTL', compareToken(function (tok) {
            var code = tok.charCodeAt(0);
            return ((1 <= code && code <= 8) ||
                    (11 === code || 12 === code) ||
                    (14 <= code && code <= 31) ||
                    (127 === code));
        }));
    }

    // obs-ctext       =   obs-NO-WS-CTL
    function obsCtext() { return opts.strict ? null : wrap('obs-ctext', obsNoWsCtl()); }

    // obs-qtext       =   obs-NO-WS-CTL
    function obsQtext() { return opts.strict ? null : wrap('obs-qtext', obsNoWsCtl()); }

    // obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
    function obsQP() {
        return opts.strict ? null : wrap('obs-qp', and(
            literal('\\'),
            or(literal('\0'), obsNoWsCtl, lf, cr)
        )());
    }

    // obs-phrase      =   word *(word / "." / CFWS)
    function obsPhrase() {
        return opts.strict ? null : wrap('obs-phrase', and(
            word,
            star(or(word, literal('.'), colwsp(cfws)))
        )());
    }

    // 4.2. Obsolete Folding White Space

    // NOTE: read the errata http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908
    // obs-FWS         =   1*([CRLF] WSP)
    function obsFws() {
        return opts.strict ? null : wrap('obs-FWS', star(
            and(invis(opt(crlf)), wsp),
            1
        )());
    }

    // 4.4. Obsolete Addressing

    // obs-angle-addr  =   [CFWS] "<" obs-route addr-spec ">" [CFWS]
    function obsAngleAddr() {
        return opts.strict ? null : wrap('obs-angle-addr', and(
            invis(opt(cfws)),
            literal('<'),
            obsRoute,
            addrSpec,
            literal('>'),
            invis(opt(cfws))
        )());
    }

    // obs-route       =   obs-domain-list ":"
    function obsRoute() {
        return opts.strict ? null : wrap('obs-route', and(
            obsDomainList,
            literal(':')
        )());
    }

    //   obs-domain-list =   *(CFWS / ",") "@" domain
    //                       *("," [CFWS] ["@" domain])
    function obsDomainList() {
        return opts.strict ? null : wrap('obs-domain-list', and(
            star(or(invis(cfws), literal(','))),
            literal('@'),
            domain,
            star(and(
                literal(','),
                invis(opt(cfws)),
                opt(and(literal('@'), domain))
            ))
        )());
    }

    // obs-mbox-list   =   *([CFWS] ",") mailbox *("," [mailbox / CFWS])
    function obsMboxList() {
        return opts.strict ? null : wrap('obs-mbox-list', and(
            star(and(
                invis(opt(cfws)),
                literal(',')
            )),
            mailbox,
            star(and(
                literal(','),
                opt(and(
                    mailbox,
                    invis(cfws)
                ))
            ))
        )());
    }

    // obs-addr-list   =   *([CFWS] ",") address *("," [address / CFWS])
    function obsAddrList() {
        return opts.strict ? null : wrap('obs-addr-list', and(
            star(and(
                invis(opt(cfws)),
                literal(',')
            )),
            address,
            star(and(
                literal(','),
                opt(and(
                    address,
                    invis(cfws)
                ))
            ))
        )());
    }

    // obs-group-list  =   1*([CFWS] ",") [CFWS]
    function obsGroupList() {
        return opts.strict ? null : wrap('obs-group-list', and(
            star(and(
                invis(opt(cfws)),
                literal(',')
            ), 1),
            invis(opt(cfws))
        )());
    }

    // obs-local-part = word *("." word)
    function obsLocalPart() {
        return opts.strict ? null : wrap('obs-local-part', and(word, star(and(literal('.'), word)))());
    }

    // obs-domain       = atom *("." atom)
    function obsDomain() {
        return opts.strict ? null : wrap('obs-domain', and(atom, star(and(literal('.'), atom)))());
    }

    // obs-dtext       =   obs-NO-WS-CTL / quoted-pair
    function obsDtext() {
        return opts.strict ? null : wrap('obs-dtext', or(obsNoWsCtl, quotedPair)());
    }

    /////////////////////////////////////////////////////

    // ast analysis

    function findNode(name, root) {
        var i, stack, node;
        if (root === null || root === undefined) { return null; }
        stack = [root];
        while (stack.length > 0) {
            node = stack.pop();
            if (node.name === name) {
                return node;
            }
            for (i = node.children.length - 1; i >= 0; i -= 1) {
                stack.push(node.children[i]);
            }
        }
        return null;
    }

    function findAllNodes(name, root) {
        var i, stack, node, result;
        if (root === null || root === undefined) { return null; }
        stack = [root];
        result = [];
        while (stack.length > 0) {
            node = stack.pop();
            if (node.name === name) {
                result.push(node);
            }
            for (i = node.children.length - 1; i >= 0; i -= 1) {
                stack.push(node.children[i]);
            }
        }
        return result;
    }

    function findAllNodesNoChildren(names, root) {
        var i, stack, node, result, namesLookup;
        if (root === null || root === undefined) { return null; }
        stack = [root];
        result = [];
        namesLookup = {};
        for (i = 0; i < names.length; i += 1) {
            namesLookup[names[i]] = true;
        }

        while (stack.length > 0) {
            node = stack.pop();
            if (node.name in namesLookup) {
                result.push(node);
                // don't look at children (hence findAllNodesNoChildren)
            } else {
                for (i = node.children.length - 1; i >= 0; i -= 1) {
                    stack.push(node.children[i]);
                }
            }
        }
        return result;
    }

    function giveResult(ast) {
        var addresses, groupsAndMailboxes, i, groupOrMailbox, result;
        if (ast === null) {
            return null;
        }
        addresses = [];

        // An address is a 'group' (i.e. a list of mailboxes) or a 'mailbox'.
        groupsAndMailboxes = findAllNodesNoChildren(['group', 'mailbox'], ast);
        for (i = 0; i <  groupsAndMailboxes.length; i += 1) {
            groupOrMailbox = groupsAndMailboxes[i];
            if (groupOrMailbox.name === 'group') {
                addresses.push(giveResultGroup(groupOrMailbox));
            } else if (groupOrMailbox.name === 'mailbox') {
                addresses.push(giveResultMailbox(groupOrMailbox));
            }
        }

        result = {
            ast: ast,
            addresses: addresses,
        };
        if (opts.simple) {
            result = simplifyResult(result);
        }
        if (opts.oneResult) {
            return oneResult(result);
        }
        if (opts.simple) {
            return result && result.addresses;
        } else {
            return result;
        }
    }

    function giveResultGroup(group) {
        var i;
        var groupName = findNode('display-name', group);
        var groupResultMailboxes = [];
        var mailboxes = findAllNodesNoChildren(['mailbox'], group);
        for (i = 0; i < mailboxes.length; i += 1) {
            groupResultMailboxes.push(giveResultMailbox(mailboxes[i]));
        }
        return {
            node: group,
            parts: {
                name: groupName,
            },
            type: group.name, // 'group'
            name: grabSemantic(groupName),
            addresses: groupResultMailboxes,
        };
    }

    function giveResultMailbox(mailbox) {
        var name = findNode('display-name', mailbox);
        var aspec = findNode('addr-spec', mailbox);
        var comments = findAllNodes('cfws', mailbox);

        var local = findNode('local-part', aspec);
        var domain = findNode('domain', aspec);
        return {
            node: mailbox,
            parts: {
                name: name,
                address: aspec,
                local: local,
                domain: domain,
                comments: comments
            },
            type: mailbox.name, // 'mailbox'
            name: grabSemantic(name),
            address: grabSemantic(aspec),
            local: grabSemantic(local),
            domain: grabSemantic(domain),
            groupName: grabSemantic(mailbox.groupName),
        };
    }

    function grabSemantic(n) {
        return n !== null && n !== undefined ? n.semantic : null;
    }

    function simplifyResult(result) {
        var i;
        if (result && result.addresses) {
            for (i = 0; i < result.addresses.length; i += 1) {
                delete result.addresses[i].node;
            }
        }
        return result;
    }

    function oneResult(result) {
        if (!result) { return null; }
        if (!opts.partial && result.addresses.length > 1) { return null; }
        return result.addresses && result.addresses[0];
    }

    /////////////////////////////////////////////////////

    var parseString, pos, len, parsed, startProduction;

    opts = handleOpts(opts, {});
    if (opts === null) { return null; }

    parseString = opts.input;

    startProduction = {
        'address': address,
        'address-list': addressList,
        'angle-addr': angleAddr,
        'from': fromSpec,
        'group': group,
        'mailbox': mailbox,
        'mailbox-list': mailboxList,
        'reply-to': replyToSpec,
        'sender': senderSpec,
    }[opts.startAt] || addressList;

    if (!opts.strict) {
        initialize();
        opts.strict = true;
        parsed = startProduction(parseString);
        if (opts.partial || !inStr()) {
            return giveResult(parsed);
        }
        opts.strict = false;
    }

    initialize();
    parsed = startProduction(parseString);
    if (!opts.partial && inStr()) { return null; }
    return giveResult(parsed);
}

function parseOneAddressSimple(opts) {
    return parse5322(handleOpts(opts, {
        oneResult: true,
        rfc6532: true,
        simple: true,
        startAt: 'address-list',
    }));
}

function parseAddressListSimple(opts) {
    return parse5322(handleOpts(opts, {
        rfc6532: true,
        simple: true,
        startAt: 'address-list',
    }));
}

function parseFromSimple(opts) {
    return parse5322(handleOpts(opts, {
        rfc6532: true,
        simple: true,
        startAt: 'from',
    }));
}

function parseSenderSimple(opts) {
    return parse5322(handleOpts(opts, {
        oneResult: true,
        rfc6532: true,
        simple: true,
        startAt: 'sender',
    }));
}

function parseReplyToSimple(opts) {
    return parse5322(handleOpts(opts, {
        rfc6532: true,
        simple: true,
        startAt: 'reply-to',
    }));
}

function handleOpts(opts, defs) {
    function isString(str) {
        return Object.prototype.toString.call(str) === '[object String]';
    }

    function isObject(o) {
        return o === Object(o);
    }

    function isNullUndef(o) {
        return o === null || o === undefined;
    }

    var defaults, o;

    if (isString(opts)) {
        opts = { input: opts };
    } else if (!isObject(opts)) {
        return null;
    }

    if (!isString(opts.input)) { return null; }
    if (!defs) { return null; }

    defaults = {
        oneResult: false,
        partial: false,
        rejectTLD: false,
        rfc6532: false,
        simple: false,
        startAt: 'address-list',
        strict: false,
    };

    for (o in defaults) {
        if (isNullUndef(opts[o])) {
            opts[o] = !isNullUndef(defs[o]) ? defs[o] : defaults[o];
        }
    }
    return opts;
}

parse5322.parseOneAddress = parseOneAddressSimple;
parse5322.parseAddressList = parseAddressListSimple;
parse5322.parseFrom = parseFromSimple;
parse5322.parseSender = parseSenderSimple;
parse5322.parseReplyTo = parseReplyToSimple;

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = parse5322;
} else {
    global.emailAddresses = parse5322;
}

}(this));

},{}],35:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":36,"./hash/hmac":37,"./hash/ripemd":38,"./hash/sha":39,"./hash/utils":46}],36:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = dereq_minimalistic_assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":46,"minimalistic-assert":49}],37:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = dereq_minimalistic_assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":46,"minimalistic-assert":49}],38:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":36,"./utils":46}],39:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":40,"./sha/224":41,"./sha/256":42,"./sha/384":43,"./sha/512":44}],40:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":36,"../utils":46,"./common":45}],41:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":46,"./256":42}],42:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = dereq_minimalistic_assert;

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":36,"../utils":46,"./common":45,"minimalistic-assert":49}],43:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":46,"./512":44}],44:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = dereq_minimalistic_assert;

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":36,"../utils":46,"minimalistic-assert":49}],45:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":46}],46:[function(require,module,exports){
'use strict';

var assert = dereq_minimalistic_assert;
var inherits = dereq_inherits;

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":48,"minimalistic-assert":49}],47:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = dereq_minimalistic_assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":35,"minimalistic-assert":49,"minimalistic-crypto-utils":50}],48:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],49:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],50:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],51:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":52,"./lib/inflate":53,"./lib/utils/common":54,"./lib/zlib/constants":57}],52:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":54,"./utils/strings":55,"./zlib/deflate":59,"./zlib/messages":64,"./zlib/zstream":66}],53:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":54,"./utils/strings":55,"./zlib/constants":57,"./zlib/gzheader":60,"./zlib/inflate":62,"./zlib/messages":64,"./zlib/zstream":66}],54:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],55:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":54}],56:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],57:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],58:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],59:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":54,"./adler32":56,"./crc32":58,"./messages":64,"./trees":65}],60:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],61:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],62:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":54,"./adler32":56,"./crc32":58,"./inffast":61,"./inftrees":63}],63:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":54}],64:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],65:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":54}],66:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],67:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],68:[function(require,module,exports){
'use strict';

/*
node-bzip - a pure-javascript Node.JS module for decoding bzip2 data

Copyright (C) 2012 Eli Skeggs

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see
http://www.gnu.org/licenses/lgpl-2.1.html

Adapted from bzip2.js, copyright 2011 antimatter15 (antimatter15@gmail.com).

Based on micro-bunzip by Rob Landley (rob@landley.net).

Based on bzip2 decompression code by Julian R Seward (jseward@acm.org),
which also acknowledges contributions by Mike Burrows, David Wheeler,
Peter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,
Robert Sedgewick, and Jon L. Bentley.
*/

var BITMASK = [0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];

// offset in bytes
var BitReader = function BitReader(stream) {
  this.stream = stream;
  this.bitOffset = 0;
  this.curByte = 0;
  this.hasByte = false;
};

BitReader.prototype._ensureByte = function () {
  if (!this.hasByte) {
    this.curByte = this.stream.readByte();
    this.hasByte = true;
  }
};

// reads bits from the buffer
BitReader.prototype.read = function (bits) {
  var result = 0;
  while (bits > 0) {
    this._ensureByte();
    var remaining = 8 - this.bitOffset;
    // if we're in a byte
    if (bits >= remaining) {
      result <<= remaining;
      result |= BITMASK[remaining] & this.curByte;
      this.hasByte = false;
      this.bitOffset = 0;
      bits -= remaining;
    } else {
      result <<= bits;
      var shift = remaining - bits;
      result |= (this.curByte & BITMASK[bits] << shift) >> shift;
      this.bitOffset += bits;
      bits = 0;
    }
  }
  return result;
};

// seek to an arbitrary point in the buffer (expressed in bits)
BitReader.prototype.seek = function (pos) {
  var n_bit = pos % 8;
  var n_byte = (pos - n_bit) / 8;
  this.bitOffset = n_bit;
  this.stream.seek(n_byte);
  this.hasByte = false;
};

// reads 6 bytes worth of data using the read method
BitReader.prototype.pi = function () {
  var buf = new Uint8Array(6),
      i;
  for (i = 0; i < buf.length; i++) {
    buf[i] = this.read(8);
  }
  return bufToHex(buf);
};

function bufToHex(buf) {
  return Array.prototype.map.call(buf, x => ('00' + x.toString(16)).slice(-2)).join('');
}

module.exports = BitReader;

},{}],69:[function(require,module,exports){
"use strict";

/* CRC32, used in Bzip2 implementation.
 * This is a port of CRC32.java from the jbzip2 implementation at
 *   https://code.google.com/p/jbzip2
 * which is:
 *   Copyright (c) 2011 Matthew Francis
 *
 *   Permission is hereby granted, free of charge, to any person
 *   obtaining a copy of this software and associated documentation
 *   files (the "Software"), to deal in the Software without
 *   restriction, including without limitation the rights to use,
 *   copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the
 *   Software is furnished to do so, subject to the following
 *   conditions:
 *
 *   The above copyright notice and this permission notice shall be
 *   included in all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *   OTHER DEALINGS IN THE SOFTWARE.
 * This JavaScript implementation is:
 *   Copyright (c) 2013 C. Scott Ananian
 * with the same licensing terms as Matthew Francis' original implementation.
 */
module.exports = function () {

  /**
   * A static CRC lookup table
   */
  var crc32Lookup = new Uint32Array([0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75, 0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d, 0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072, 0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba, 0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2, 0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53, 0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b, 0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3, 0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec, 0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4]);

  var CRC32 = function CRC32() {
    /**
     * The current CRC
     */
    var crc = 0xffffffff;

    /**
     * @return The current CRC
     */
    this.getCRC = function () {
      return ~crc >>> 0; // return an unsigned value
    };

    /**
     * Update the CRC with a single byte
     * @param value The value to update the CRC with
     */
    this.updateCRC = function (value) {
      crc = crc << 8 ^ crc32Lookup[(crc >>> 24 ^ value) & 0xff];
    };

    /**
     * Update the CRC with a sequence of identical bytes
     * @param value The value to update the CRC with
     * @param count The number of bytes
     */
    this.updateCRCRun = function (value, count) {
      while (count-- > 0) {
        crc = crc << 8 ^ crc32Lookup[(crc >>> 24 ^ value) & 0xff];
      }
    };
  };
  return CRC32;
}();

},{}],70:[function(require,module,exports){
'use strict';

/*
seek-bzip - a pure-javascript module for seeking within bzip2 data

Copyright (C) 2013 C. Scott Ananian
Copyright (C) 2012 Eli Skeggs
Copyright (C) 2011 Kevin Kwok

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see
http://www.gnu.org/licenses/lgpl-2.1.html

Adapted from node-bzip, copyright 2012 Eli Skeggs.
Adapted from bzip2.js, copyright 2011 Kevin Kwok (antimatter15@gmail.com).

Based on micro-bunzip by Rob Landley (rob@landley.net).

Based on bzip2 decompression code by Julian R Seward (jseward@acm.org),
which also acknowledges contributions by Mike Burrows, David Wheeler,
Peter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,
Robert Sedgewick, and Jon L. Bentley.
*/

var BitReader = require('./bitreader');
var Stream = require('./stream');
var CRC32 = require('./crc32');

var MAX_HUFCODE_BITS = 20;
var MAX_SYMBOLS = 258;
var SYMBOL_RUNA = 0;
var SYMBOL_RUNB = 1;
var MIN_GROUPS = 2;
var MAX_GROUPS = 6;
var GROUP_SIZE = 50;

var WHOLEPI = "314159265359";
var SQRTPI = "177245385090";

var mtf = function mtf(array, index) {
  var src = array[index],
      i;
  for (i = index; i > 0; i--) {
    array[i] = array[i - 1];
  }
  array[0] = src;
  return src;
};

var Err = {
  OK: 0,
  LAST_BLOCK: -1,
  NOT_BZIP_DATA: -2,
  UNEXPECTED_INPUT_EOF: -3,
  UNEXPECTED_OUTPUT_EOF: -4,
  DATA_ERROR: -5,
  OUT_OF_MEMORY: -6,
  OBSOLETE_INPUT: -7,
  END_OF_BLOCK: -8
};
var ErrorMessages = {};
ErrorMessages[Err.LAST_BLOCK] = "Bad file checksum";
ErrorMessages[Err.NOT_BZIP_DATA] = "Not bzip data";
ErrorMessages[Err.UNEXPECTED_INPUT_EOF] = "Unexpected input EOF";
ErrorMessages[Err.UNEXPECTED_OUTPUT_EOF] = "Unexpected output EOF";
ErrorMessages[Err.DATA_ERROR] = "Data error";
ErrorMessages[Err.OUT_OF_MEMORY] = "Out of memory";
ErrorMessages[Err.OBSOLETE_INPUT] = "Obsolete (pre 0.9.5) bzip format not supported.";

var _throw = function _throw(status, optDetail) {
  var msg = ErrorMessages[status] || 'unknown error';
  if (optDetail) {
    msg += ': ' + optDetail;
  }
  var e = new TypeError(msg);
  e.errorCode = status;
  throw e;
};

var Bunzip = function Bunzip(inputStream, outputStream) {
  this.writePos = this.writeCurrent = this.writeCount = 0;

  this._start_bunzip(inputStream, outputStream);
};
Bunzip.prototype._init_block = function () {
  var moreBlocks = this._get_next_block();
  if (!moreBlocks) {
    this.writeCount = -1;
    return false; /* no more blocks */
  }
  this.blockCRC = new CRC32();
  return true;
};
/* XXX micro-bunzip uses (inputStream, inputBuffer, len) as arguments */
Bunzip.prototype._start_bunzip = function (inputStream, outputStream) {
  /* Ensure that file starts with "BZh['1'-'9']." */
  var buf = new Uint8Array(4);
  if (inputStream.read(buf, 0, 4) !== 4 || String.fromCharCode(buf[0], buf[1], buf[2]) !== 'BZh') _throw(Err.NOT_BZIP_DATA, 'bad magic');

  var level = buf[3] - 0x30;
  if (level < 1 || level > 9) _throw(Err.NOT_BZIP_DATA, 'level out of range');

  this.reader = new BitReader(inputStream);

  /* Fourth byte (ascii '1'-'9'), indicates block size in units of 100k of
     uncompressed data.  Allocate intermediate buffer for block. */
  this.dbufSize = 100000 * level;
  this.nextoutput = 0;
  this.outputStream = outputStream;
  this.streamCRC = 0;
};
Bunzip.prototype._get_next_block = function () {
  var i, j, k;
  var reader = this.reader;
  // this is get_next_block() function from micro-bunzip:
  /* Read in header signature and CRC, then validate signature.
     (last block signature means CRC is for whole file, return now) */
  var h = reader.pi();
  if (h === SQRTPI) {
    // last block
    return false; /* no more blocks */
  }
  if (h !== WHOLEPI) _throw(Err.NOT_BZIP_DATA);
  this.targetBlockCRC = reader.read(32) >>> 0; // (convert to unsigned)
  this.streamCRC = (this.targetBlockCRC ^ (this.streamCRC << 1 | this.streamCRC >>> 31)) >>> 0;
  /* We can add support for blockRandomised if anybody complains.  There was
     some code for this in busybox 1.0.0-pre3, but nobody ever noticed that
     it didn't actually work. */
  if (reader.read(1)) _throw(Err.OBSOLETE_INPUT);
  var origPointer = reader.read(24);
  if (origPointer > this.dbufSize) _throw(Err.DATA_ERROR, 'initial position out of bounds');
  /* mapping table: if some byte values are never used (encoding things
     like ascii text), the compression code removes the gaps to have fewer
     symbols to deal with, and writes a sparse bitfield indicating which
     values were present.  We make a translation table to convert the symbols
     back to the corresponding bytes. */
  var t = reader.read(16);
  var symToByte = new Uint8Array(256),
      symTotal = 0;
  for (i = 0; i < 16; i++) {
    if (t & 1 << 0xF - i) {
      var o = i * 16;
      k = reader.read(16);
      for (j = 0; j < 16; j++) if (k & 1 << 0xF - j) symToByte[symTotal++] = o + j;
    }
  }

  /* How many different huffman coding groups does this block use? */
  var groupCount = reader.read(3);
  if (groupCount < MIN_GROUPS || groupCount > MAX_GROUPS) _throw(Err.DATA_ERROR);
  /* nSelectors: Every GROUP_SIZE many symbols we select a new huffman coding
     group.  Read in the group selector list, which is stored as MTF encoded
     bit runs.  (MTF=Move To Front, as each value is used it's moved to the
     start of the list.) */
  var nSelectors = reader.read(15);
  if (nSelectors === 0) _throw(Err.DATA_ERROR);

  var mtfSymbol = new Uint8Array(256);
  for (i = 0; i < groupCount; i++) mtfSymbol[i] = i;

  var selectors = new Uint8Array(nSelectors); // was 32768...

  for (i = 0; i < nSelectors; i++) {
    /* Get next value */
    for (j = 0; reader.read(1); j++) if (j >= groupCount) _throw(Err.DATA_ERROR);
    /* Decode MTF to get the next selector */
    selectors[i] = mtf(mtfSymbol, j);
  }

  /* Read the huffman coding tables for each group, which code for symTotal
     literal symbols, plus two run symbols (RUNA, RUNB) */
  var symCount = symTotal + 2;
  var groups = [],
      hufGroup;
  for (j = 0; j < groupCount; j++) {
    var length = new Uint8Array(symCount),
        temp = new Uint16Array(MAX_HUFCODE_BITS + 1);
    /* Read huffman code lengths for each symbol.  They're stored in
       a way similar to mtf; record a starting value for the first symbol,
       and an offset from the previous value for everys symbol after that. */
    t = reader.read(5); // lengths
    for (i = 0; i < symCount; i++) {
      for (;;) {
        if (t < 1 || t > MAX_HUFCODE_BITS) _throw(Err.DATA_ERROR);
        /* If first bit is 0, stop.  Else second bit indicates whether
           to increment or decrement the value. */
        if (!reader.read(1)) break;
        if (!reader.read(1)) t++;else t--;
      }
      length[i] = t;
    }

    /* Find largest and smallest lengths in this group */
    var minLen, maxLen;
    minLen = maxLen = length[0];
    for (i = 1; i < symCount; i++) {
      if (length[i] > maxLen) maxLen = length[i];else if (length[i] < minLen) minLen = length[i];
    }

    /* Calculate permute[], base[], and limit[] tables from length[].
     *
     * permute[] is the lookup table for converting huffman coded symbols
     * into decoded symbols.  base[] is the amount to subtract from the
     * value of a huffman symbol of a given length when using permute[].
     *
     * limit[] indicates the largest numerical value a symbol with a given
     * number of bits can have.  This is how the huffman codes can vary in
     * length: each code with a value>limit[length] needs another bit.
     */
    hufGroup = {};
    groups.push(hufGroup);
    hufGroup.permute = new Uint16Array(MAX_SYMBOLS);
    hufGroup.limit = new Uint32Array(MAX_HUFCODE_BITS + 2);
    hufGroup.base = new Uint32Array(MAX_HUFCODE_BITS + 1);
    hufGroup.minLen = minLen;
    hufGroup.maxLen = maxLen;
    /* Calculate permute[].  Concurently, initialize temp[] and limit[]. */
    var pp = 0;
    for (i = minLen; i <= maxLen; i++) {
      temp[i] = hufGroup.limit[i] = 0;
      for (t = 0; t < symCount; t++) if (length[t] === i) hufGroup.permute[pp++] = t;
    }
    /* Count symbols coded for at each bit length */
    for (i = 0; i < symCount; i++) temp[length[i]]++;
    /* Calculate limit[] (the largest symbol-coding value at each bit
     * length, which is (previous limit<<1)+symbols at this level), and
     * base[] (number of symbols to ignore at each bit length, which is
     * limit minus the cumulative count of symbols coded for already). */
    pp = t = 0;
    for (i = minLen; i < maxLen; i++) {
      pp += temp[i];
      /* We read the largest possible symbol size and then unget bits
         after determining how many we need, and those extra bits could
         be set to anything.  (They're noise from future symbols.)  At
         each level we're really only interested in the first few bits,
         so here we set all the trailing to-be-ignored bits to 1 so they
         don't affect the value>limit[length] comparison. */
      hufGroup.limit[i] = pp - 1;
      pp <<= 1;
      t += temp[i];
      hufGroup.base[i + 1] = pp - t;
    }
    hufGroup.limit[maxLen + 1] = Number.MAX_VALUE; /* Sentinal value for reading next sym. */
    hufGroup.limit[maxLen] = pp + temp[maxLen] - 1;
    hufGroup.base[minLen] = 0;
  }
  /* We've finished reading and digesting the block header.  Now read this
     block's huffman coded symbols from the file and undo the huffman coding
     and run length encoding, saving the result into dbuf[dbufCount++]=uc */

  /* Initialize symbol occurrence counters and symbol Move To Front table */
  var byteCount = new Uint32Array(256);
  for (i = 0; i < 256; i++) mtfSymbol[i] = i;
  /* Loop through compressed symbols. */
  var runPos = 0,
      dbufCount = 0,
      selector = 0,
      uc;
  var dbuf = this.dbuf = new Uint32Array(this.dbufSize);
  symCount = 0;
  for (;;) {
    /* Determine which huffman coding group to use. */
    if (!symCount--) {
      symCount = GROUP_SIZE - 1;
      if (selector >= nSelectors) {
        _throw(Err.DATA_ERROR);
      }
      hufGroup = groups[selectors[selector++]];
    }
    /* Read next huffman-coded symbol. */
    i = hufGroup.minLen;
    j = reader.read(i);
    for (;; i++) {
      if (i > hufGroup.maxLen) {
        _throw(Err.DATA_ERROR);
      }
      if (j <= hufGroup.limit[i]) break;
      j = j << 1 | reader.read(1);
    }
    /* Huffman decode value to get nextSym (with bounds checking) */
    j -= hufGroup.base[i];
    if (j < 0 || j >= MAX_SYMBOLS) {
      _throw(Err.DATA_ERROR);
    }
    var nextSym = hufGroup.permute[j];
    /* We have now decoded the symbol, which indicates either a new literal
       byte, or a repeated run of the most recent literal byte.  First,
       check if nextSym indicates a repeated run, and if so loop collecting
       how many times to repeat the last literal. */
    if (nextSym === SYMBOL_RUNA || nextSym === SYMBOL_RUNB) {
      /* If this is the start of a new run, zero out counter */
      if (!runPos) {
        runPos = 1;
        t = 0;
      }
      /* Neat trick that saves 1 symbol: instead of or-ing 0 or 1 at
         each bit position, add 1 or 2 instead.  For example,
         1011 is 1<<0 + 1<<1 + 2<<2.  1010 is 2<<0 + 2<<1 + 1<<2.
         You can make any bit pattern that way using 1 less symbol than
         the basic or 0/1 method (except all bits 0, which would use no
         symbols, but a run of length 0 doesn't mean anything in this
         context).  Thus space is saved. */
      if (nextSym === SYMBOL_RUNA) t += runPos;else t += 2 * runPos;
      runPos <<= 1;
      continue;
    }
    /* When we hit the first non-run symbol after a run, we now know
       how many times to repeat the last literal, so append that many
       copies to our buffer of decoded symbols (dbuf) now.  (The last
       literal used is the one at the head of the mtfSymbol array.) */
    if (runPos) {
      runPos = 0;
      if (dbufCount + t > this.dbufSize) {
        _throw(Err.DATA_ERROR);
      }
      uc = symToByte[mtfSymbol[0]];
      byteCount[uc] += t;
      while (t--) dbuf[dbufCount++] = uc;
    }
    /* Is this the terminating symbol? */
    if (nextSym > symTotal) break;
    /* At this point, nextSym indicates a new literal character.  Subtract
       one to get the position in the MTF array at which this literal is
       currently to be found.  (Note that the result can't be -1 or 0,
       because 0 and 1 are RUNA and RUNB.  But another instance of the
       first symbol in the mtf array, position 0, would have been handled
       as part of a run above.  Therefore 1 unused mtf position minus
       2 non-literal nextSym values equals -1.) */
    if (dbufCount >= this.dbufSize) {
      _throw(Err.DATA_ERROR);
    }
    i = nextSym - 1;
    uc = mtf(mtfSymbol, i);
    uc = symToByte[uc];
    /* We have our literal byte.  Save it into dbuf. */
    byteCount[uc]++;
    dbuf[dbufCount++] = uc;
  }
  /* At this point, we've read all the huffman-coded symbols (and repeated
     runs) for this block from the input stream, and decoded them into the
     intermediate buffer.  There are dbufCount many decoded bytes in dbuf[].
     Now undo the Burrows-Wheeler transform on dbuf.
     See http://dogma.net/markn/articles/bwt/bwt.htm
  */
  if (origPointer < 0 || origPointer >= dbufCount) {
    _throw(Err.DATA_ERROR);
  }
  /* Turn byteCount into cumulative occurrence counts of 0 to n-1. */
  j = 0;
  for (i = 0; i < 256; i++) {
    k = j + byteCount[i];
    byteCount[i] = j;
    j = k;
  }
  /* Figure out what order dbuf would be in if we sorted it. */
  for (i = 0; i < dbufCount; i++) {
    uc = dbuf[i] & 0xff;
    dbuf[byteCount[uc]] |= i << 8;
    byteCount[uc]++;
  }
  /* Decode first byte by hand to initialize "previous" byte.  Note that it
     doesn't get output, and if the first three characters are identical
     it doesn't qualify as a run (hence writeRunCountdown=5). */
  var pos = 0,
      current = 0,
      run = 0;
  if (dbufCount) {
    pos = dbuf[origPointer];
    current = pos & 0xff;
    pos >>= 8;
    run = -1;
  }
  this.writePos = pos;
  this.writeCurrent = current;
  this.writeCount = dbufCount;
  this.writeRun = run;

  return true; /* more blocks to come */
};
/* Undo burrows-wheeler transform on intermediate buffer to produce output.
   If start_bunzip was initialized with out_fd=-1, then up to len bytes of
   data are written to outbuf.  Return value is number of bytes written or
   error (all errors are negative numbers).  If out_fd!=-1, outbuf and len
   are ignored, data is written to out_fd and return is RETVAL_OK or error.
*/
Bunzip.prototype._read_bunzip = function (outputBuffer, len) {
  var copies, previous, outbyte;
  /* james@jamestaylor.org: writeCount goes to -1 when the buffer is fully
     decoded, which results in this returning RETVAL_LAST_BLOCK, also
     equal to -1... Confusing, I'm returning 0 here to indicate no
     bytes written into the buffer */
  if (this.writeCount < 0) {
    return 0;
  }

  var gotcount = 0;
  var dbuf = this.dbuf,
      pos = this.writePos,
      current = this.writeCurrent;
  var dbufCount = this.writeCount,
      outputsize = this.outputsize;
  var run = this.writeRun;

  while (dbufCount) {
    dbufCount--;
    previous = current;
    pos = dbuf[pos];
    current = pos & 0xff;
    pos >>= 8;
    if (run++ === 3) {
      copies = current;
      outbyte = previous;
      current = -1;
    } else {
      copies = 1;
      outbyte = current;
    }
    this.blockCRC.updateCRCRun(outbyte, copies);
    while (copies--) {
      this.outputStream.writeByte(outbyte);
      this.nextoutput++;
    }
    if (current != previous) run = 0;
  }
  this.writeCount = dbufCount;
  // check CRC
  if (this.blockCRC.getCRC() !== this.targetBlockCRC) {
    _throw(Err.DATA_ERROR, "Bad block CRC " + "(got " + this.blockCRC.getCRC().toString(16) + " expected " + this.targetBlockCRC.toString(16) + ")");
  }
  return this.nextoutput;
};

var coerceInputStream = function coerceInputStream(input) {
  if ('readByte' in input) {
    return input;
  }
  var inputStream = new Stream();
  inputStream.pos = 0;
  inputStream.readByte = function () {
    return input[this.pos++];
  };
  inputStream.seek = function (pos) {
    this.pos = pos;
  };
  inputStream.eof = function () {
    return this.pos >= input.length;
  };
  return inputStream;
};
var coerceOutputStream = function coerceOutputStream(output) {
  var outputStream = new Stream();
  var resizeOk = true;
  if (output) {
    if (typeof output === 'number') {
      outputStream.buffer = new Uint8Array(output);
      resizeOk = false;
    } else if ('writeByte' in output) {
      return output;
    } else {
      outputStream.buffer = output;
      resizeOk = false;
    }
  } else {
    outputStream.buffer = new Uint8Array(16384);
  }
  outputStream.pos = 0;
  outputStream.writeByte = function (_byte) {
    if (resizeOk && this.pos >= this.buffer.length) {
      var newBuffer = new Uint8Array(this.buffer.length * 2);
      newBuffer.set(this.buffer);
      this.buffer = newBuffer;
    }
    this.buffer[this.pos++] = _byte;
  };
  outputStream.getBuffer = function () {
    // trim buffer
    if (this.pos !== this.buffer.length) {
      if (!resizeOk) throw new TypeError('outputsize does not match decoded input');
      var newBuffer = new Uint8Array(this.pos);
      newBuffer.set(this.buffer.subarray(0, this.pos));
      this.buffer = newBuffer;
    }
    return this.buffer;
  };
  outputStream._coerced = true;
  return outputStream;
};

/* Static helper functions */
Bunzip.Err = Err;
// 'input' can be a stream or a buffer
// 'output' can be a stream or a buffer or a number (buffer size)
Bunzip.decode = function (input, output, multistream) {
  // make a stream from a buffer, if necessary
  var inputStream = coerceInputStream(input);
  var outputStream = coerceOutputStream(output);

  var bz = new Bunzip(inputStream, outputStream);
  while (true) {
    if ('eof' in inputStream && inputStream.eof()) break;
    if (bz._init_block()) {
      bz._read_bunzip();
    } else {
      var targetStreamCRC = bz.reader.read(32) >>> 0; // (convert to unsigned)
      if (targetStreamCRC !== bz.streamCRC) {
        _throw(Err.DATA_ERROR, "Bad stream CRC " + "(got " + bz.streamCRC.toString(16) + " expected " + targetStreamCRC.toString(16) + ")");
      }
      if (multistream && 'eof' in inputStream && !inputStream.eof()) {
        // note that start_bunzip will also resync the bit reader to next byte
        bz._start_bunzip(inputStream, outputStream);
      } else break;
    }
  }
  if ('getBuffer' in outputStream) return outputStream.getBuffer();
};
Bunzip.decodeBlock = function (input, pos, output) {
  // make a stream from a buffer, if necessary
  var inputStream = coerceInputStream(input);
  var outputStream = coerceOutputStream(output);
  var bz = new Bunzip(inputStream, outputStream);
  bz.reader.seek(pos);
  /* Fill the decode buffer for the block */
  var moreBlocks = bz._get_next_block();
  if (moreBlocks) {
    /* Init the CRC for writing */
    bz.blockCRC = new CRC32();

    /* Zero this so the current byte from before the seek is not written */
    bz.writeCopies = 0;

    /* Decompress the block and write to stdout */
    bz._read_bunzip();
    // XXX keep writing?
  }
  if ('getBuffer' in outputStream) return outputStream.getBuffer();
};
/* Reads bzip2 file from stream or buffer `input`, and invoke
 * `callback(position, size)` once for each bzip2 block,
 * where position gives the starting position (in *bits*)
 * and size gives uncompressed size of the block (in *bytes*). */
Bunzip.table = function (input, callback, multistream) {
  // make a stream from a buffer, if necessary
  var inputStream = new Stream();
  inputStream.delegate = coerceInputStream(input);
  inputStream.pos = 0;
  inputStream.readByte = function () {
    this.pos++;
    return this.delegate.readByte();
  };
  if (inputStream.delegate.eof) {
    inputStream.eof = inputStream.delegate.eof.bind(inputStream.delegate);
  }
  var outputStream = new Stream();
  outputStream.pos = 0;
  outputStream.writeByte = function () {
    this.pos++;
  };

  var bz = new Bunzip(inputStream, outputStream);
  var blockSize = bz.dbufSize;
  while (true) {
    if ('eof' in inputStream && inputStream.eof()) break;

    var position = inputStream.pos * 8 + bz.reader.bitOffset;
    if (bz.reader.hasByte) {
      position -= 8;
    }

    if (bz._init_block()) {
      var start = outputStream.pos;
      bz._read_bunzip();
      callback(position, outputStream.pos - start);
    } else {
      var crc = bz.reader.read(32); // (but we ignore the crc)
      if (multistream && 'eof' in inputStream && !inputStream.eof()) {
        // note that start_bunzip will also resync the bit reader to next byte
        bz._start_bunzip(inputStream, outputStream);
        console.assert(bz.dbufSize === blockSize, "shouldn't change block size within multistream file");
      } else break;
    }
  }
};

Bunzip.Stream = Stream;

module.exports = Bunzip;

},{"./bitreader":68,"./crc32":69,"./stream":71}],71:[function(require,module,exports){
"use strict";

/* very simple input/output stream interface */
var Stream = function Stream() {};

// input streams //////////////
/** Returns the next byte, or -1 for EOF. */
Stream.prototype.readByte = function () {
  throw new Error("abstract method readByte() not implemented");
};
/** Attempts to fill the buffer; returns number of bytes read, or
 *  -1 for EOF. */
Stream.prototype.read = function (buffer, bufOffset, length) {
  var bytesRead = 0;
  while (bytesRead < length) {
    var c = this.readByte();
    if (c < 0) {
      // EOF
      return bytesRead === 0 ? -1 : bytesRead;
    }
    buffer[bufOffset++] = c;
    bytesRead++;
  }
  return bytesRead;
};
Stream.prototype.seek = function (new_pos) {
  throw new Error("abstract method seek() not implemented");
};

// output streams ///////////
Stream.prototype.writeByte = function (_byte) {
  throw new Error("abstract method readByte() not implemented");
};
Stream.prototype.write = function (buffer, bufOffset, length) {
  var i;
  for (i = 0; i < length; i++) {
    this.writeByte(buffer[bufOffset++]);
  }
  return length;
};
Stream.prototype.flush = function () {};

module.exports = Stream;

},{}],72:[function(require,module,exports){
'use strict';

// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more information.

//
// Utilities
//

/**
 * @param {number} a The number to test.
 * @param {number} min The minimum value in the range, inclusive.
 * @param {number} max The maximum value in the range, inclusive.
 * @return {boolean} True if a >= min and a <= max.
 */
function inRange(a, min, max) {
  return min <= a && a <= max;
}

/**
 * @param {*} o
 * @return {Object}
 */
function ToDictionary(o) {
  if (o === undefined) return {};
  if (o === Object(o)) return o;
  throw TypeError('Could not convert argument to dictionary');
}

/**
 * @param {string} string Input string of UTF-16 code units.
 * @return {!Array.<number>} Code points.
 */
function stringToCodePoints(string) {
  // https://heycam.github.io/webidl/#dfn-obtain-unicode

  // 1. Let S be the DOMString value.
  var s = String(string);

  // 2. Let n be the length of S.
  var n = s.length;

  // 3. Initialize i to 0.
  var i = 0;

  // 4. Initialize U to be an empty sequence of Unicode characters.
  var u = [];

  // 5. While i < n:
  while (i < n) {

    // 1. Let c be the code unit in S at index i.
    var c = s.charCodeAt(i);

    // 2. Depending on the value of c:

    // c < 0xD800 or c > 0xDFFF
    if (c < 0xD800 || c > 0xDFFF) {
      // Append to U the Unicode character with code point c.
      u.push(c);
    }

    // 0xDC00 ≤ c ≤ 0xDFFF
    else if (0xDC00 <= c && c <= 0xDFFF) {
      // Append to U a U+FFFD REPLACEMENT CHARACTER.
      u.push(0xFFFD);
    }

    // 0xD800 ≤ c ≤ 0xDBFF
    else if (0xD800 <= c && c <= 0xDBFF) {
      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
      // CHARACTER.
      if (i === n - 1) {
        u.push(0xFFFD);
      }
      // 2. Otherwise, i < n−1:
      else {
        // 1. Let d be the code unit in S at index i+1.
        var d = string.charCodeAt(i + 1);

        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
        if (0xDC00 <= d && d <= 0xDFFF) {
          // 1. Let a be c & 0x3FF.
          var a = c & 0x3FF;

          // 2. Let b be d & 0x3FF.
          var b = d & 0x3FF;

          // 3. Append to U the Unicode character with code point
          // 2^16+2^10*a+b.
          u.push(0x10000 + (a << 10) + b);

          // 4. Set i to i+1.
          i += 1;
        }

        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
        // U+FFFD REPLACEMENT CHARACTER.
        else  {
          u.push(0xFFFD);
        }
      }
    }

    // 3. Set i to i+1.
    i += 1;
  }

  // 6. Return U.
  return u;
}

/**
 * @param {!Array.<number>} code_points Array of code points.
 * @return {string} string String of UTF-16 code units.
 */
function codePointsToString(code_points) {
  var s = '';
  for (var i = 0; i < code_points.length; ++i) {
    var cp = code_points[i];
    if (cp <= 0xFFFF) {
      s += String.fromCharCode(cp);
    } else {
      cp -= 0x10000;
      s += String.fromCharCode((cp >> 10) + 0xD800,
                               (cp & 0x3FF) + 0xDC00);
    }
  }
  return s;
}


//
// Implementation of Encoding specification
// https://encoding.spec.whatwg.org/
//

//
// 3. Terminology
//

/**
 * End-of-stream is a special token that signifies no more tokens
 * are in the stream.
 * @const
 */ var end_of_stream = -1;

/**
 * A stream represents an ordered sequence of tokens.
 *
 * @constructor
 * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
 * stream.
 */
function Stream(tokens) {
  /** @type {!Array.<number>} */
  this.tokens = [].slice.call(tokens);
}

Stream.prototype = {
  /**
   * @return {boolean} True if end-of-stream has been hit.
   */
  endOfStream: function() {
    return !this.tokens.length;
  },

  /**
   * When a token is read from a stream, the first token in the
   * stream must be returned and subsequently removed, and
   * end-of-stream must be returned otherwise.
   *
   * @return {number} Get the next token from the stream, or
   * end_of_stream.
   */
   read: function() {
    if (!this.tokens.length)
      return end_of_stream;
     return this.tokens.shift();
   },

  /**
   * When one or more tokens are prepended to a stream, those tokens
   * must be inserted, in given order, before the first token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
   */
  prepend: function(token) {
    if (Array.isArray(token)) {
      var tokens = /**@type {!Array.<number>}*/(token);
      while (tokens.length)
        this.tokens.unshift(tokens.pop());
    } else {
      this.tokens.unshift(token);
    }
  },

  /**
   * When one or more tokens are pushed to a stream, those tokens
   * must be inserted, in given order, after the last token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
   */
  push: function(token) {
    if (Array.isArray(token)) {
      var tokens = /**@type {!Array.<number>}*/(token);
      while (tokens.length)
        this.tokens.push(tokens.shift());
    } else {
      this.tokens.push(token);
    }
  }
};

//
// 4. Encodings
//

// 4.1 Encoders and decoders

/** @const */
var finished = -1;

/**
 * @param {boolean} fatal If true, decoding errors raise an exception.
 * @param {number=} opt_code_point Override the standard fallback code point.
 * @return {number} The code point to insert on a decoding error.
 */
function decoderError(fatal, opt_code_point) {
  if (fatal)
    throw TypeError('Decoder error');
  return opt_code_point || 0xFFFD;
}

//
// 7. API
//

/** @const */ var DEFAULT_ENCODING = 'utf-8';

// 7.1 Interface TextDecoder

/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */
function TextDecoder(encoding, options) {
  if (!(this instanceof TextDecoder)) {
    return new TextDecoder(encoding, options);
  }
  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error('Encoding not supported. Only utf-8 is supported');
  }
  options = ToDictionary(options);

  /** @private @type {boolean} */
  this._streaming = false;
  /** @private @type {boolean} */
  this._BOMseen = false;
  /** @private @type {?Decoder} */
  this._decoder = null;
  /** @private @type {boolean} */
  this._fatal = Boolean(options['fatal']);
  /** @private @type {boolean} */
  this._ignoreBOM = Boolean(options['ignoreBOM']);

  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
  Object.defineProperty(this, 'fatal', {value: this._fatal});
  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
}

TextDecoder.prototype = {
  /**
   * @param {ArrayBufferView=} input The buffer of bytes to decode.
   * @param {Object=} options
   * @return {string} The decoded string.
   */
  decode: function decode(input, options) {
    var bytes;
    if (typeof input === 'object' && input instanceof ArrayBuffer) {
      bytes = new Uint8Array(input);
    } else if (typeof input === 'object' && 'buffer' in input &&
               input.buffer instanceof ArrayBuffer) {
      bytes = new Uint8Array(input.buffer,
                             input.byteOffset,
                             input.byteLength);
    } else {
      bytes = new Uint8Array(0);
    }

    options = ToDictionary(options);

    if (!this._streaming) {
      this._decoder = new UTF8Decoder({fatal: this._fatal});
      this._BOMseen = false;
    }
    this._streaming = Boolean(options['stream']);

    var input_stream = new Stream(bytes);

    var code_points = [];

    /** @type {?(number|!Array.<number>)} */
    var result;

    while (!input_stream.endOfStream()) {
      result = this._decoder.handler(input_stream, input_stream.read());
      if (result === finished)
        break;
      if (result === null)
        continue;
      if (Array.isArray(result))
        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
      else
        code_points.push(result);
    }
    if (!this._streaming) {
      do {
        result = this._decoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (result === null)
          continue;
        if (Array.isArray(result))
          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
        else
          code_points.push(result);
      } while (!input_stream.endOfStream());
      this._decoder = null;
    }

    if (code_points.length) {
      // If encoding is one of utf-8, utf-16be, and utf-16le, and
      // ignore BOM flag and BOM seen flag are unset, run these
      // subsubsteps:
      if (['utf-8'].indexOf(this.encoding) !== -1 &&
          !this._ignoreBOM && !this._BOMseen) {
        // If token is U+FEFF, set BOM seen flag.
        if (code_points[0] === 0xFEFF) {
          this._BOMseen = true;
          code_points.shift();
        } else {
          // Otherwise, if token is not end-of-stream, set BOM seen
          // flag and append token to output.
          this._BOMseen = true;
        }
      }
    }

    return codePointsToString(code_points);
  }
};

// 7.2 Interface TextEncoder

/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */
function TextEncoder(encoding, options) {
  if (!(this instanceof TextEncoder))
    return new TextEncoder(encoding, options);
  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error('Encoding not supported. Only utf-8 is supported');
  }
  options = ToDictionary(options);

  /** @private @type {boolean} */
  this._streaming = false;
  /** @private @type {?Encoder} */
  this._encoder = null;
  /** @private @type {{fatal: boolean}} */
  this._options = {fatal: Boolean(options['fatal'])};

  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
}

TextEncoder.prototype = {
  /**
   * @param {string=} opt_string The string to encode.
   * @param {Object=} options
   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
   */
  encode: function encode(opt_string, options) {
    opt_string = opt_string ? String(opt_string) : '';
    options = ToDictionary(options);

    // NOTE: This option is nonstandard. None of the encodings
    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
    // so streaming is not necessary.
    if (!this._streaming)
      this._encoder = new UTF8Encoder(this._options);
    this._streaming = Boolean(options['stream']);

    var bytes = [];
    var input_stream = new Stream(stringToCodePoints(opt_string));
    /** @type {?(number|!Array.<number>)} */
    var result;
    while (!input_stream.endOfStream()) {
      result = this._encoder.handler(input_stream, input_stream.read());
      if (result === finished)
        break;
      if (Array.isArray(result))
        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
      else
        bytes.push(result);
    }
    if (!this._streaming) {
      while (true) {
        result = this._encoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (Array.isArray(result))
          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
        else
          bytes.push(result);
      }
      this._encoder = null;
    }
    return new Uint8Array(bytes);
  }
};

//
// 8. The encoding
//

// 8.1 utf-8

/**
 * @constructor
 * @implements {Decoder}
 * @param {{fatal: boolean}} options
 */
function UTF8Decoder(options) {
  var fatal = options.fatal;

  // utf-8's decoder's has an associated utf-8 code point, utf-8
  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
  // lower boundary (initially 0x80), and a utf-8 upper boundary
  // (initially 0xBF).
  var /** @type {number} */ utf8_code_point = 0,
      /** @type {number} */ utf8_bytes_seen = 0,
      /** @type {number} */ utf8_bytes_needed = 0,
      /** @type {number} */ utf8_lower_boundary = 0x80,
      /** @type {number} */ utf8_upper_boundary = 0xBF;

  /**
   * @param {Stream} stream The stream of bytes being decoded.
   * @param {number} bite The next byte read from the stream.
   * @return {?(number|!Array.<number>)} The next code point(s)
   *     decoded, or null if not enough data exists in the input
   *     stream to decode a complete code point.
   */
  this.handler = function(stream, bite) {
    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
    // set utf-8 bytes needed to 0 and return error.
    if (bite === end_of_stream && utf8_bytes_needed !== 0) {
      utf8_bytes_needed = 0;
      return decoderError(fatal);
    }

    // 2. If byte is end-of-stream, return finished.
    if (bite === end_of_stream)
      return finished;

    // 3. If utf-8 bytes needed is 0, based on byte:
    if (utf8_bytes_needed === 0) {

      // 0x00 to 0x7F
      if (inRange(bite, 0x00, 0x7F)) {
        // Return a code point whose value is byte.
        return bite;
      }

      // 0xC2 to 0xDF
      if (inRange(bite, 0xC2, 0xDF)) {
        // Set utf-8 bytes needed to 1 and utf-8 code point to byte
        // − 0xC0.
        utf8_bytes_needed = 1;
        utf8_code_point = bite - 0xC0;
      }

      // 0xE0 to 0xEF
      else if (inRange(bite, 0xE0, 0xEF)) {
        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
        if (bite === 0xE0)
          utf8_lower_boundary = 0xA0;
        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
        if (bite === 0xED)
          utf8_upper_boundary = 0x9F;
        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
        // byte − 0xE0.
        utf8_bytes_needed = 2;
        utf8_code_point = bite - 0xE0;
      }

      // 0xF0 to 0xF4
      else if (inRange(bite, 0xF0, 0xF4)) {
        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
        if (bite === 0xF0)
          utf8_lower_boundary = 0x90;
        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
        if (bite === 0xF4)
          utf8_upper_boundary = 0x8F;
        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
        // byte − 0xF0.
        utf8_bytes_needed = 3;
        utf8_code_point = bite - 0xF0;
      }

      // Otherwise
      else {
        // Return error.
        return decoderError(fatal);
      }

      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
      // point to utf-8 code point << (6 × utf-8 bytes needed) and
      // return continue.
      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
      return null;
    }

    // 4. If byte is not in the range utf-8 lower boundary to utf-8
    // upper boundary, run these substeps:
    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
      // utf-8 upper boundary to 0xBF.
      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
      utf8_lower_boundary = 0x80;
      utf8_upper_boundary = 0xBF;

      // 2. Prepend byte to stream.
      stream.prepend(bite);

      // 3. Return error.
      return decoderError(fatal);
    }

    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
    // to 0xBF.
    utf8_lower_boundary = 0x80;
    utf8_upper_boundary = 0xBF;

    // 6. Increase utf-8 bytes seen by one and set utf-8 code point
    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
    // needed − utf-8 bytes seen)).
    utf8_bytes_seen += 1;
    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
    // continue.
    if (utf8_bytes_seen !== utf8_bytes_needed)
      return null;

    // 8. Let code point be utf-8 code point.
    var code_point = utf8_code_point;

    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
    // seen to 0.
    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

    // 10. Return a code point whose value is code point.
    return code_point;
  };
}

/**
 * @constructor
 * @implements {Encoder}
 * @param {{fatal: boolean}} options
 */
function UTF8Encoder(options) {
  var fatal = options.fatal;
  /**
   * @param {Stream} stream Input stream.
   * @param {number} code_point Next code point read from the stream.
   * @return {(number|!Array.<number>)} Byte(s) to emit.
   */
  this.handler = function(stream, code_point) {
    // 1. If code point is end-of-stream, return finished.
    if (code_point === end_of_stream)
      return finished;

    // 2. If code point is in the range U+0000 to U+007F, return a
    // byte whose value is code point.
    if (inRange(code_point, 0x0000, 0x007f))
      return code_point;

    // 3. Set count and offset based on the range code point is in:
    var count, offset;
    // U+0080 to U+07FF:    1 and 0xC0
    if (inRange(code_point, 0x0080, 0x07FF)) {
      count = 1;
      offset = 0xC0;
    }
    // U+0800 to U+FFFF:    2 and 0xE0
    else if (inRange(code_point, 0x0800, 0xFFFF)) {
      count = 2;
      offset = 0xE0;
    }
    // U+10000 to U+10FFFF: 3 and 0xF0
    else if (inRange(code_point, 0x10000, 0x10FFFF)) {
      count = 3;
      offset = 0xF0;
    }

    // 4.Let bytes be a byte sequence whose first byte is (code
    // point >> (6 × count)) + offset.
    var bytes = [(code_point >> (6 * count)) + offset];

    // 5. Run these substeps while count is greater than 0:
    while (count > 0) {

      // 1. Set temp to code point >> (6 × (count − 1)).
      var temp = code_point >> (6 * (count - 1));

      // 2. Append to bytes 0x80 | (temp & 0x3F).
      bytes.push(0x80 | (temp & 0x3F));

      // 3. Decrease count by one.
      count -= 1;
    }

    // 6. Return bytes bytes, in order.
    return bytes;
  };
}

exports.TextEncoder = TextEncoder;
exports.TextDecoder = TextDecoder;
},{}],73:[function(require,module,exports){
/*jshint bitwise: false*/

(function(nacl) {
'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
};

//  Pluggable, initialized in high-level API below.
var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function vn(x, xi, y, yi, n) {
  var i,d = 0;
  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  return (1 & ((d - 1) >>> 8)) - 1;
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x,xi,y,yi,32);
}

function set25519(r, a) {
  var i;
  for (i = 0; i < 16; i++) r[i] = a[i]|0;
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function par25519(a) {
  var d = new Uint8Array(32);
  pack25519(d, a);
  return d[0] & 1;
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 250; a >= 0; a--) {
      S(c, c);
      if(a !== 1) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80), r, i;
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf();
  for (i = 0; i < 31; i++) z[i] = n[i];
  z[31]=(n[31]&127)|64;
  z[0]&=248;
  unpack25519(x,p);
  for (i = 0; i < 16; i++) {
    b[i]=x[i];
    d[i]=a[i]=c[i]=0;
  }
  a[0]=d[0]=1;
  for (i=254; i>=0; --i) {
    r=(z[i>>>3]>>>(i&7))&1;
    sel25519(a,b,r);
    sel25519(c,d,r);
    A(e,a,c);
    Z(a,a,c);
    A(c,b,d);
    Z(b,b,d);
    S(d,e);
    S(f,a);
    M(a,c,a);
    M(c,b,e);
    A(e,a,c);
    Z(a,a,c);
    S(b,a);
    Z(c,d,f);
    M(a,c,_121665);
    A(a,a,d);
    M(c,c,a);
    M(a,d,f);
    M(d,b,x);
    S(b,e);
    sel25519(a,b,r);
    sel25519(c,d,r);
  }
  for (i = 0; i < 16; i++) {
    x[i+16]=a[i];
    x[i+32]=c[i];
    x[i+48]=b[i];
    x[i+64]=d[i];
  }
  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32,x32);
  M(x16,x16,x32);
  pack25519(q,x16);
  return 0;
}

function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9);
}

function crypto_box_keypair(y, x) {
  randombytes(x, 32);
  return crypto_scalarmult_base(y, x);
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  var i;
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for (i = 255; i >= 0; --i) {
    b = (s[(i/8)|0] >> (i&7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function crypto_sign_keypair(pk, sk, seeded) {
  var d;
  var p = [gf(), gf(), gf(), gf()];
  var i;

  if (!seeded) randombytes(sk, 32);
  d = nacl.hash(sk.subarray(0, 32));
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  return 0;
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

function modL(r, x) {
  var carry, i, j, k;
  for (i = 63; i >= 32; --i) {
    carry = 0;
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = (x[j] + 128) >> 8;
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  for (i = 0; i < 32; i++) {
    x[i+1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64), i;
  for (i = 0; i < 64; i++) x[i] = r[i];
  for (i = 0; i < 64; i++) r[i] = 0;
  modL(r, x);
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var d, h, r;
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  d = nacl.hash(sk.subarray(0, 32));
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  r = nacl.hash(sm.subarray(32, smlen));
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for (i = 32; i < 64; i++) sm[i] = sk[i];
  h = nacl.hash(sm.subarray(0, smlen));
  reduce(h);

  for (i = 0; i < 64; i++) x[i] = 0;
  for (i = 0; i < 32; i++) x[i] = r[i];
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i+j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) M(r[0], r[0], I);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) return -1;

  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  M(r[3], r[0], r[1]);
  return 0;
}

function crypto_sign_open(m, sm, n, pk) {
  var i, mlen;
  var t = new Uint8Array(32), h;
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  mlen = -1;
  if (n < 64) return -1;

  if (unpackneg(q, pk)) return -1;

  for (i = 0; i < n; i++) m[i] = sm[i];
  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  h = nacl.hash(m.subarray(0, n));
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0;
    return -1;
  }

  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  mlen = n;
  return mlen;
}

var crypto_scalarmult_BYTES = 32,
    crypto_scalarmult_SCALARBYTES = 32,
    crypto_box_PUBLICKEYBYTES = 32,
    crypto_box_SECRETKEYBYTES = 32,
    crypto_sign_BYTES = 64,
    crypto_sign_PUBLICKEYBYTES = 32,
    crypto_sign_SECRETKEYBYTES = 64,
    crypto_sign_SEEDBYTES = 32;

function checkArrayTypes() {
  for (var i = 0; i < arguments.length; i++) {
    if (!(arguments[i] instanceof Uint8Array))
      throw new TypeError('unexpected type, use Uint8Array');
  }
}

function cleanup(arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0;
}

nacl.scalarMult = function(n, p) {
  checkArrayTypes(n, p);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult(q, n, p);
  return q;
};

nacl.box = {};

nacl.box.keyPair = function() {
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  crypto_box_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.box.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  crypto_scalarmult_base(pk, secretKey);
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  crypto_sign(signedMsg, msg, msg.length, secretKey);
  return signedMsg;
};

nacl.sign.detached = function(msg, secretKey) {
  var signedMsg = nacl.sign(msg, secretKey);
  var sig = new Uint8Array(crypto_sign_BYTES);
  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  return sig;
};

nacl.sign.detached.verify = function(msg, sig, publicKey) {
  checkArrayTypes(msg, sig, publicKey);
  if (sig.length !== crypto_sign_BYTES)
    throw new Error('bad signature size');
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  var i;
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

nacl.sign.keyPair = function() {
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign.keyPair.fromSeed = function(seed) {
  checkArrayTypes(seed);
  if (seed.length !== crypto_sign_SEEDBYTES)
    throw new Error('bad seed size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  crypto_sign_keypair(pk, sk, true);
  return {publicKey: pk, secretKey: sk};
};

nacl.setPRNG = function(fn) {
  randombytes = fn;
};

(function() {
  // Initialize PRNG if environment provides CSPRNG.
  // If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  if (crypto && crypto.getRandomValues) {
    // Browsers.
    var QUOTA = 65536;
    nacl.setPRNG(function(x, n) {
      var i, v = new Uint8Array(n);
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
      }
      for (i = 0; i < n; i++) x[i] = v[i];
      cleanup(v);
    });
  } else if (typeof require !== 'undefined') {
    // Node.js.
    crypto = require('crypto');
    if (crypto && crypto.randomBytes) {
      nacl.setPRNG(function(x, n) {
        var i, v = crypto.randomBytes(n);
        for (i = 0; i < n; i++) x[i] = v[i];
        cleanup(v);
      });
    }
  }
})();

})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

},{"crypto":"crypto"}],74:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webToNode = exports.nodeToWeb = undefined;

var _util = require('./util');

var _streams = require('./streams');

var _streams2 = _interopRequireDefault(_streams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NodeReadableStream = _util.isNode && require('stream').Readable;

/**
 * Web / node stream conversion functions
 * From https://github.com/gwicke/node-web-streams
 */

let nodeToWeb;
let webToNode;

if (NodeReadableStream) {

  /**
   * Convert a Node Readable Stream to a Web ReadableStream
   * @param {Readable} nodeStream
   * @returns {ReadableStream}
   */
  exports.nodeToWeb = nodeToWeb = function nodeToWeb(nodeStream) {
    return new ReadableStream({
      start(controller) {
        nodeStream.pause();
        nodeStream.on('data', chunk => {
          controller.enqueue(chunk);
          nodeStream.pause();
        });
        nodeStream.on('end', () => controller.close());
        nodeStream.on('error', e => controller.error(e));
      },
      pull() {
        nodeStream.resume();
      },
      cancel(reason) {
        nodeStream.pause();
        if (nodeStream.cancel) {
          return nodeStream.cancel(reason);
        }
      }
    });
  };

  class NodeReadable extends NodeReadableStream {
    constructor(webStream, options) {
      super(options);
      this._webStream = webStream;
      this._reader = _streams2.default.getReader(webStream);
      this._reading = false;
      this._doneReadingPromise = Promise.resolve();
      this._cancelling = false;
    }

    _read(size) {
      if (this._reading || this._cancelling) {
        return;
      }
      this._reading = true;
      const doRead = async () => {
        try {
          while (true) {
            var _ref = await this._reader.read();

            const done = _ref.done,
                  value = _ref.value;

            if (done) {
              this.push(null);
              break;
            }
            if (!this.push(value) || this._cancelling) {
              this._reading = false;
              break;
            }
          }
        } catch (e) {
          this.emit('error', e);
        }
      };
      this._doneReadingPromise = doRead();
    }

    async cancel(reason) {
      this._cancelling = true;
      await this._doneReadingPromise;
      this._reader.releaseLock();
      return this._webStream.cancel(reason);
    }
  }

  /**
   * Convert a Web ReadableStream to a Node Readable Stream
   * @param {ReadableStream} webStream
   * @returns {Readable}
   */
  exports.webToNode = webToNode = function webToNode(webStream) {
    return new NodeReadable(webStream);
  };
}

exports.nodeToWeb = nodeToWeb;
exports.webToNode = webToNode;

},{"./streams":76,"./util":77,"stream":"stream"}],75:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.externalBuffer = exports.Reader = undefined;

var _streams = require('./streams');

var _streams2 = _interopRequireDefault(_streams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const doneReadingSet = new WeakSet();
const externalBuffer = Symbol('externalBuffer');

/**
 * A wrapper class over the native ReadableStreamDefaultReader.
 * This additionally implements pushing back data on the stream, which
 * lets us implement peeking and a host of convenience functions.
 * It also lets you read data other than streams, such as a Uint8Array.
 * @class
 */
function Reader(input) {
  this.stream = input;
  if (input[externalBuffer]) {
    this[externalBuffer] = input[externalBuffer].slice();
  }
  let streamType = _streams2.default.isStream(input);
  if (streamType === 'node') {
    input = _streams2.default.nodeToWeb(input);
  }
  if (streamType) {
    const reader = input.getReader();
    this._read = reader.read.bind(reader);
    this._releaseLock = () => {
      reader.closed.catch(function () {});
      reader.releaseLock();
    };
    return;
  }
  let doneReading = false;
  this._read = async () => {
    if (doneReading || doneReadingSet.has(input)) {
      return { value: undefined, done: true };
    }
    doneReading = true;
    return { value: input, done: false };
  };
  this._releaseLock = () => {
    if (doneReading) {
      try {
        doneReadingSet.add(input);
      } catch (e) {}
    }
  };
}

/**
 * Read a chunk of data.
 * @returns {Promise<Object>} Either { done: false, value: Uint8Array | String } or { done: true, value: undefined }
 * @async
 */
Reader.prototype.read = async function () {
  if (this[externalBuffer] && this[externalBuffer].length) {
    const value = this[externalBuffer].shift();
    return { done: false, value };
  }
  return this._read();
};

/**
 * Allow others to read the stream.
 */
Reader.prototype.releaseLock = function () {
  if (this[externalBuffer]) {
    this.stream[externalBuffer] = this[externalBuffer];
  }
  this._releaseLock();
};

/**
 * Read up to and including the first \n character.
 * @returns {Promise<String|Undefined>}
 * @async
 */
Reader.prototype.readLine = async function () {
  let buffer = [];
  let returnVal;
  while (!returnVal) {
    var _ref = await this.read();

    let done = _ref.done,
        value = _ref.value;

    value += '';
    if (done) {
      if (buffer.length) return _streams2.default.concat(buffer);
      return;
    }
    const lineEndIndex = value.indexOf('\n') + 1;
    if (lineEndIndex) {
      returnVal = _streams2.default.concat(buffer.concat(value.substr(0, lineEndIndex)));
      buffer = [];
    }
    if (lineEndIndex !== value.length) {
      buffer.push(value.substr(lineEndIndex));
    }
  }
  this.unshift(...buffer);
  return returnVal;
};

/**
 * Read a single byte/character.
 * @returns {Promise<Number|String|Undefined>}
 * @async
 */
Reader.prototype.readByte = async function () {
  var _ref2 = await this.read();

  const done = _ref2.done,
        value = _ref2.value;

  if (done) return;
  const byte = value[0];
  this.unshift(_streams2.default.slice(value, 1));
  return byte;
};

/**
 * Read a specific amount of bytes/characters, unless the stream ends before that amount.
 * @returns {Promise<Uint8Array|String|Undefined>}
 * @async
 */
Reader.prototype.readBytes = async function (length) {
  const buffer = [];
  let bufferLength = 0;
  while (true) {
    var _ref3 = await this.read();

    const done = _ref3.done,
          value = _ref3.value;

    if (done) {
      if (buffer.length) return _streams2.default.concat(buffer);
      return;
    }
    buffer.push(value);
    bufferLength += value.length;
    if (bufferLength >= length) {
      const bufferConcat = _streams2.default.concat(buffer);
      this.unshift(_streams2.default.slice(bufferConcat, length));
      return _streams2.default.slice(bufferConcat, 0, length);
    }
  }
};

/**
 * Peek (look ahead) a specific amount of bytes/characters, unless the stream ends before that amount.
 * @returns {Promise<Uint8Array|String|Undefined>}
 * @async
 */
Reader.prototype.peekBytes = async function (length) {
  const bytes = await this.readBytes(length);
  this.unshift(bytes);
  return bytes;
};

/**
 * Push data to the front of the stream.
 * @param {...(Uint8Array|String|Undefined)} values
 */
Reader.prototype.unshift = function (...values) {
  if (!this[externalBuffer]) {
    this[externalBuffer] = [];
  }
  this[externalBuffer].unshift(...values.filter(value => value && value.length));
};

/**
 * Read the stream to the end and return its contents, concatenated by the join function (defaults to streams.concat).
 * @param {Function} join
 * @returns {Promise<Uint8array|String|Any>} the return value of join()
 * @async
 */
Reader.prototype.readToEnd = async function (join = _streams2.default.concat) {
  const result = [];
  while (true) {
    var _ref4 = await this.read();

    const done = _ref4.done,
          value = _ref4.value;

    if (done) break;
    result.push(value);
  }
  return join(result);
};

exports.Reader = Reader;
exports.externalBuffer = externalBuffer;

},{"./streams":76}],76:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('./util');

var _nodeConversions = require('./node-conversions');

var _reader = require('./reader');

const NodeBuffer = _util.isNode && require('buffer').Buffer;

/**
 * Convert data to Stream
 * @param {ReadableStream|Uint8array|String} input  data to convert
 * @returns {ReadableStream} Converted data
 */
function toStream(input) {
  let streamType = (0, _util.isStream)(input);
  if (streamType === 'node') {
    return (0, _nodeConversions.nodeToWeb)(input);
  } else if (streamType) {
    return input;
  }
  return new ReadableStream({
    start(controller) {
      controller.enqueue(input);
      controller.close();
    }
  });
}

/**
 * Concat a list of Uint8Arrays, Strings or Streams
 * The caller should not mix Uint8Arrays with Strings, but may mix Streams with non-Streams.
 * @param {Array<Uint8array|String|ReadableStream>} Array of Uint8Arrays/Strings/Streams to concatenate
 * @returns {Uint8array|String|ReadableStream} Concatenated array
 */
function concat(list) {
  if (list.some(_util.isStream)) {
    return concatStream(list);
  }
  if (typeof list[0] === 'string') {
    return list.join('');
  }
  if (NodeBuffer && NodeBuffer.isBuffer(list[0])) {
    return NodeBuffer.concat(list);
  }
  return (0, _util.concatUint8Array)(list);
}

/**
 * Concat a list of Streams
 * @param {Array<ReadableStream|Uint8array|String>} list  Array of Uint8Arrays/Strings/Streams to concatenate
 * @returns {ReadableStream} Concatenated list
 */
function concatStream(list) {
  list = list.map(toStream);
  const transform = transformWithCancel(async function (reason) {
    await Promise.all(transforms.map(stream => cancel(stream, reason)));
  });
  let prev = Promise.resolve();
  const transforms = list.map((stream, i) => transformPair(stream, (readable, writable) => {
    prev = prev.then(() => pipe(readable, transform.writable, {
      preventClose: i !== list.length - 1
    }));
    return prev;
  }));
  return transform.readable;
}

/**
 * Get a Reader
 * @param {ReadableStream|Uint8array|String} input
 * @returns {Reader}
 */
function getReader(input) {
  return new _reader.Reader(input);
}

/**
 * Get a Writer
 * @param {WritableStream} input
 * @returns {WritableStreamDefaultWriter}
 */
function getWriter(input) {
  const writer = input.getWriter();
  const releaseLock = writer.releaseLock;
  writer.releaseLock = () => {
    writer.closed.catch(function () {});
    releaseLock.call(writer);
  };
  return writer;
}

/**
 * Pipe a readable stream to a writable stream. Don't throw on input stream errors, but forward them to the output stream.
 * @param {ReadableStream|Uint8array|String} input
 * @param {WritableStream} target
 * @param {Object} (optional) options
 * @returns {Promise<undefined>} Promise indicating when piping has finished (input stream closed or errored)
 * @async
 */
async function pipe(input, target, options) {
  input = toStream(input);
  try {
    if (input[_reader.externalBuffer]) {
      const writer = getWriter(target);
      for (let i = 0; i < input[_reader.externalBuffer].length; i++) {
        await writer.ready;
        await writer.write(input[_reader.externalBuffer][i]);
      }
      writer.releaseLock();
    }
    return await input.pipeTo(target, options);
  } catch (e) {}
}

/**
 * Pipe a readable stream through a transform stream.
 * @param {ReadableStream|Uint8array|String} input
 * @param {Object} (optional) options
 * @returns {ReadableStream} transformed stream
 */
function transformRaw(input, options) {
  const transformStream = new TransformStream(options);
  pipe(input, transformStream.writable);
  return transformStream.readable;
}

/**
 * Create a cancelable TransformStream.
 * @param {Function} cancel
 * @returns {TransformStream}
 */
function transformWithCancel(cancel) {
  let pulled = false;
  let backpressureChangePromiseResolve;
  let outputController;
  return {
    readable: new ReadableStream({
      start(controller) {
        outputController = controller;
      },
      pull() {
        if (backpressureChangePromiseResolve) {
          backpressureChangePromiseResolve();
        } else {
          pulled = true;
        }
      },
      cancel
    }, { highWaterMark: 0 }),
    writable: new WritableStream({
      write: async function write(chunk) {
        outputController.enqueue(chunk);
        if (!pulled) {
          await new Promise(resolve => {
            backpressureChangePromiseResolve = resolve;
          });
          backpressureChangePromiseResolve = null;
        } else {
          pulled = false;
        }
      },
      close: outputController.close.bind(outputController),
      abort: outputController.error.bind(outputController)
    })
  };
}

/**
 * Transform a stream using helper functions which are called on each chunk, and on stream close, respectively.
 * @param {ReadableStream|Uint8array|String} input
 * @param {Function} process
 * @param {Function} finish
 * @returns {ReadableStream|Uint8array|String}
 */
function transform(input, process = () => undefined, finish = () => undefined) {
  if ((0, _util.isStream)(input)) {
    return transformRaw(input, {
      async transform(value, controller) {
        try {
          const result = await process(value);
          if (result !== undefined) controller.enqueue(result);
        } catch (e) {
          controller.error(e);
        }
      },
      async flush(controller) {
        try {
          const result = await finish();
          if (result !== undefined) controller.enqueue(result);
        } catch (e) {
          controller.error(e);
        }
      }
    });
  }
  const result1 = process(input);
  const result2 = finish();
  if (result1 !== undefined && result2 !== undefined) return concat([result1, result2]);
  return result1 !== undefined ? result1 : result2;
}

/**
 * Transform a stream using a helper function which is passed a readable and a writable stream.
 *   This function also maintains the possibility to cancel the input stream,
 *   and does so on cancelation of the output stream, despite cancelation
 *   normally being impossible when the input stream is being read from.
 * @param {ReadableStream|Uint8array|String} input
 * @param {Function} fn
 * @returns {ReadableStream}
 */
function transformPair(input, fn) {
  let incomingTransformController;
  const incoming = new TransformStream({
    start(controller) {
      incomingTransformController = controller;
    }
  });

  const pipeDonePromise = pipe(input, incoming.writable);

  const outgoing = transformWithCancel(async function () {
    incomingTransformController.error(new Error('Readable side was canceled.'));
    await pipeDonePromise;
    await new Promise(setTimeout);
  });
  fn(incoming.readable, outgoing.writable);
  return outgoing.readable;
}

/**
 * Parse a stream using a helper function which is passed a Reader.
 *   The reader additionally has a remainder() method which returns a
 *   stream pointing to the remainder of input, and is linked to input
 *   for cancelation.
 * @param {ReadableStream|Uint8array|String} input
 * @param {Function} fn
 * @returns {Any} the return value of fn()
 */
function parse(input, fn) {
  let returnValue;
  const transformed = transformPair(input, (readable, writable) => {
    const reader = getReader(readable);
    reader.remainder = () => {
      reader.releaseLock();
      pipe(readable, writable);
      return transformed;
    };
    returnValue = fn(reader);
  });
  return returnValue;
}

/**
 * Tee a Stream for reading it twice. The input stream can no longer be read after tee()ing.
 *   Reading either of the two returned streams will pull from the input stream.
 *   The input stream will only be canceled if both of the returned streams are canceled.
 * @param {ReadableStream|Uint8array|String} input
 * @returns {Array<ReadableStream|Uint8array|String>} array containing two copies of input
 */
function tee(input) {
  if ((0, _util.isStream)(input)) {
    const teed = toStream(input).tee();
    teed[0][_reader.externalBuffer] = teed[1][_reader.externalBuffer] = input[_reader.externalBuffer];
    return teed;
  }
  return [slice(input), slice(input)];
}

/**
 * Clone a Stream for reading it twice. The input stream can still be read after clone()ing.
 *   Reading from the clone will pull from the input stream.
 *   The input stream will only be canceled if both the clone and the input stream are canceled.
 * @param {ReadableStream|Uint8array|String} input
 * @returns {ReadableStream|Uint8array|String} cloned input
 */
function clone(input) {
  if ((0, _util.isStream)(input)) {
    const teed = tee(input);
    overwrite(input, teed[0]);
    return teed[1];
  }
  return slice(input);
}

/**
 * Clone a Stream for reading it twice. Data will arrive at the same rate as the input stream is being read.
 *   Reading from the clone will NOT pull from the input stream. Data only arrives when reading the input stream.
 *   The input stream will NOT be canceled if the clone is canceled, only if the input stream are canceled.
 *   If the input stream is canceled, the clone will be errored.
 * @param {ReadableStream|Uint8array|String} input
 * @returns {ReadableStream|Uint8array|String} cloned input
 */
function passiveClone(input) {
  if ((0, _util.isStream)(input)) {
    return new ReadableStream({
      start(controller) {
        const transformed = transformPair(input, async (readable, writable) => {
          const reader = getReader(readable);
          const writer = getWriter(writable);
          try {
            while (true) {
              await writer.ready;

              var _ref = await reader.read();

              const done = _ref.done,
                    value = _ref.value;

              if (done) {
                try {
                  controller.close();
                } catch (e) {}
                await writer.close();
                return;
              }
              try {
                controller.enqueue(value);
              } catch (e) {}
              await writer.write(value);
            }
          } catch (e) {
            controller.error(e);
            await writer.abort(e);
          }
        });
        overwrite(input, transformed);
      }
    });
  }
  return slice(input);
}

/**
 * Modify a stream object to point to a different stream object.
 *   This is used internally by clone() and passiveClone() to provide an abstraction over tee().
 * @param {ReadableStream} input
 * @param {ReadableStream} clone
 */
function overwrite(input, clone) {
  // Overwrite input.getReader, input.locked, etc to point to clone
  Object.entries(Object.getOwnPropertyDescriptors(ReadableStream.prototype)).forEach(([name, descriptor]) => {
    if (name === 'constructor') {
      return;
    }
    if (descriptor.value) {
      descriptor.value = descriptor.value.bind(clone);
    } else {
      descriptor.get = descriptor.get.bind(clone);
    }
    Object.defineProperty(input, name, descriptor);
  });
}

/**
 * Return a stream pointing to a part of the input stream.
 * @param {ReadableStream|Uint8array|String} input
 * @returns {ReadableStream|Uint8array|String} clone
 */
function slice(input, begin = 0, end = Infinity) {
  if ((0, _util.isStream)(input)) {
    if (begin >= 0 && end >= 0) {
      let bytesRead = 0;
      return transformRaw(input, {
        transform(value, controller) {
          if (bytesRead < end) {
            if (bytesRead + value.length >= begin) {
              controller.enqueue(slice(value, Math.max(begin - bytesRead, 0), end - bytesRead));
            }
            bytesRead += value.length;
          } else {
            controller.terminate();
          }
        }
      });
    }
    if (begin < 0 && (end < 0 || end === Infinity)) {
      let lastBytes = [];
      return transform(input, value => {
        if (value.length >= -begin) lastBytes = [value];else lastBytes.push(value);
      }, () => slice(concat(lastBytes), begin, end));
    }
    if (begin === 0 && end < 0) {
      let lastBytes;
      return transform(input, value => {
        const returnValue = lastBytes ? concat([lastBytes, value]) : value;
        if (returnValue.length >= -end) {
          lastBytes = slice(returnValue, end);
          return slice(returnValue, begin, end);
        } else {
          lastBytes = returnValue;
        }
      });
    }
    console.warn(`stream.slice(input, ${begin}, ${end}) not implemented efficiently.`);
    return fromAsync(async () => slice((await readToEnd(input)), begin, end));
  }
  if (input[_reader.externalBuffer]) {
    input = concat(input[_reader.externalBuffer].concat([input]));
  }
  if ((0, _util.isUint8Array)(input) && !(NodeBuffer && NodeBuffer.isBuffer(input))) {
    if (end === Infinity) end = input.length;
    return input.subarray(begin, end);
  }
  return input.slice(begin, end);
}

/**
 * Read a stream to the end and return its contents, concatenated by the concat function (defaults to concat).
 * @param {ReadableStream|Uint8array|String} input
 * @param {Function} concat
 * @returns {Promise<Uint8array|String|Any>} the return value of concat()
 * @async
 */
async function readToEnd(input, concat) {
  if ((0, _util.isStream)(input)) {
    return getReader(input).readToEnd(concat);
  }
  return input;
}

/**
 * Cancel a stream.
 * @param {ReadableStream|Uint8array|String} input
 * @param {Any} reason
 * @returns {Promise<Any>} indicates when the stream has been canceled
 * @async
 */
async function cancel(input, reason) {
  if ((0, _util.isStream)(input) && input.cancel) {
    return input.cancel(reason);
  }
}

/**
 * Convert an async function to a Stream. When the function returns, its return value is enqueued to the stream.
 * @param {Function} fn
 * @returns {ReadableStream}
 */
function fromAsync(fn) {
  return new ReadableStream({
    pull: async controller => {
      try {
        controller.enqueue((await fn()));
        controller.close();
      } catch (e) {
        controller.error(e);
      }
    }
  });
}

exports.default = { isStream: _util.isStream, isUint8Array: _util.isUint8Array, toStream, concatUint8Array: _util.concatUint8Array, concatStream, concat, getReader, getWriter, pipe, transformRaw, transform, transformPair, parse, clone, passiveClone, slice, readToEnd, cancel, fromAsync, nodeToWeb: _nodeConversions.nodeToWeb, webToNode: _nodeConversions.webToNode };

}).call(this,require('_process'))
},{"./node-conversions":74,"./reader":75,"./util":77,"_process":67,"buffer":"buffer"}],77:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const isNode = typeof global.process === 'object' && typeof global.process.versions === 'object';

const NodeReadableStream = isNode && require('stream').Readable;

/**
 * Check whether data is a Stream, and if so of which type
 * @param {Any} input  data to check
 * @returns {'web'|'node'|false}
 */
function isStream(input) {
  if (ReadableStream.prototype.isPrototypeOf(input)) {
    return 'web';
  }
  if (NodeReadableStream && NodeReadableStream.prototype.isPrototypeOf(input)) {
    return 'node';
  }
  return false;
}

/**
 * Check whether data is a Uint8Array
 * @param {Any} input  data to check
 * @returns {Boolean}
 */
function isUint8Array(input) {
  return Uint8Array.prototype.isPrototypeOf(input);
}

/**
 * Concat Uint8Arrays
 * @param {Array<Uint8array>} Array of Uint8Arrays to concatenate
 * @returns {Uint8array} Concatenated array
 */
function concatUint8Array(arrays) {
  if (arrays.length === 1) return arrays[0];

  let totalLength = 0;
  for (let i = 0; i < arrays.length; i++) {
    if (!isUint8Array(arrays[i])) {
      throw new Error('concatUint8Array: Data must be in the form of a Uint8Array');
    }

    totalLength += arrays[i].length;
  }

  const result = new Uint8Array(totalLength);
  let pos = 0;
  arrays.forEach(function (element) {
    result.set(element, pos);
    pos += element.length;
  });

  return result;
}

exports.isNode = isNode;
exports.isStream = isStream;
exports.isUint8Array = isUint8Array;
exports.concatUint8Array = concatUint8Array;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"stream":"stream"}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CleartextMessage = CleartextMessage;
exports.readArmored = readArmored;
exports.fromText = fromText;

var _armor = require('./encoding/armor');

var _armor2 = _interopRequireDefault(_armor);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _signature = require('./signature');

var _message = require('./message');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @classdesc Class that represents an OpenPGP cleartext signed message.
 * See {@link https://tools.ietf.org/html/rfc4880#section-7}
 * @param  {String}           text       The cleartext of the signed message
 * @param  {module:signature.Signature} signature  The detached signature or an empty signature for unsigned messages
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires encoding/armor
 * @requires enums
 * @requires util
 * @requires packet
 * @requires signature
 * @module cleartext
 */

function CleartextMessage(text, signature) {
  if (!(this instanceof CleartextMessage)) {
    return new CleartextMessage(text, signature);
  }
  // normalize EOL to canonical form <CR><LF>
  this.text = _util2.default.canonicalizeEOL(_util2.default.removeTrailingSpaces(text));
  if (signature && !(signature instanceof _signature.Signature)) {
    throw new Error('Invalid signature input');
  }
  this.signature = signature || new _signature.Signature(new _packet2.default.List());
}

/**
 * Returns the key IDs of the keys that signed the cleartext message
 * @returns {Array<module:type/keyid>} array of keyid objects
 */
CleartextMessage.prototype.getSigningKeyIds = function () {
  const keyIds = [];
  const signatureList = this.signature.packets;
  signatureList.forEach(function (packet) {
    keyIds.push(packet.issuerKeyId);
  });
  return keyIds;
};

/**
 * Sign the cleartext message
 * @param  {Array<module:key.Key>} privateKeys private keys with decrypted secret key data for signing
 * @param  {Signature} signature             (optional) any existing detached signature
 * @param  {Date} date                       (optional) The creation time of the signature that should be created
 * @param  {Array} userIds                   (optional) user IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<module:cleartext.CleartextMessage>} new cleartext message with signed content
 * @async
 */
CleartextMessage.prototype.sign = async function (privateKeys, signature = null, date = new Date(), userIds = []) {
  return new CleartextMessage(this.text, (await this.signDetached(privateKeys, signature, date, userIds)));
};

/**
 * Sign the cleartext message
 * @param  {Array<module:key.Key>} privateKeys private keys with decrypted secret key data for signing
 * @param  {Signature} signature             (optional) any existing detached signature
 * @param  {Date} date                       (optional) The creation time of the signature that should be created
 * @param  {Array} userIds                   (optional) user IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<module:signature.Signature>}      new detached signature of message content
 * @async
 */
CleartextMessage.prototype.signDetached = async function (privateKeys, signature = null, date = new Date(), userIds = []) {
  const literalDataPacket = new _packet2.default.Literal();
  literalDataPacket.setText(this.text);

  return new _signature.Signature((await (0, _message.createSignaturePackets)(literalDataPacket, privateKeys, signature, date, userIds)));
};

/**
 * Verify signatures of cleartext signed message
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Date} date (optional) Verify the signature against the given date, i.e. check signature creation time < date < expiration time
 * @returns {Promise<Array<{keyid: module:type/keyid, valid: Boolean}>>} list of signer's keyid and validity of signature
 * @async
 */
CleartextMessage.prototype.verify = function (keys, date = new Date()) {
  return this.verifyDetached(this.signature, keys, date);
};

/**
 * Verify signatures of cleartext signed message
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Date} date (optional) Verify the signature against the given date, i.e. check signature creation time < date < expiration time
 * @returns {Promise<Array<{keyid: module:type/keyid, valid: Boolean}>>} list of signer's keyid and validity of signature
 * @async
 */
CleartextMessage.prototype.verifyDetached = function (signature, keys, date = new Date()) {
  const signatureList = signature.packets;
  const literalDataPacket = new _packet2.default.Literal();
  // we assume that cleartext signature is generated based on UTF8 cleartext
  literalDataPacket.setText(this.text);
  return (0, _message.createVerificationObjects)(signatureList, [literalDataPacket], keys, date);
};

/**
 * Get cleartext
 * @returns {String} cleartext of message
 */
CleartextMessage.prototype.getText = function () {
  // normalize end of line to \n
  return _util2.default.nativeEOL(this.text);
};

/**
 * Returns ASCII armored text of cleartext signed message
 * @returns {String | ReadableStream<String>} ASCII armor
 */
CleartextMessage.prototype.armor = function () {
  let hashes = this.signature.packets.map(function (packet) {
    return _enums2.default.read(_enums2.default.hash, packet.hashAlgorithm).toUpperCase();
  });
  hashes = hashes.filter(function (item, i, ar) {
    return ar.indexOf(item) === i;
  });
  const body = {
    hash: hashes.join(),
    text: this.text,
    data: this.signature.packets.write()
  };
  return _armor2.default.encode(_enums2.default.armor.signed, body);
};

/**
 * reads an OpenPGP cleartext signed message and returns a CleartextMessage object
 * @param {String | ReadableStream<String>} armoredText text to be parsed
 * @returns {module:cleartext.CleartextMessage} new cleartext message object
 * @async
 * @static
 */
async function readArmored(armoredText) {
  const input = await _armor2.default.decode(armoredText);
  if (input.type !== _enums2.default.armor.signed) {
    throw new Error('No cleartext signed message.');
  }
  const packetlist = new _packet2.default.List();
  await packetlist.read(input.data);
  verifyHeaders(input.headers, packetlist);
  const signature = new _signature.Signature(packetlist);
  return new CleartextMessage(input.text, signature);
}

/**
 * Compare hash algorithm specified in the armor header with signatures
 * @param  {Array<String>} headers    Armor headers
 * @param  {module:packet.List} packetlist The packetlist with signature packets
 * @private
 */
function verifyHeaders(headers, packetlist) {
  const checkHashAlgos = function checkHashAlgos(hashAlgos) {
    const check = packet => algo => packet.hashAlgorithm === algo;

    for (let i = 0; i < packetlist.length; i++) {
      if (packetlist[i].tag === _enums2.default.packet.signature && !hashAlgos.some(check(packetlist[i]))) {
        return false;
      }
    }
    return true;
  };

  let oneHeader = null;
  let hashAlgos = [];
  headers.forEach(function (header) {
    oneHeader = header.match(/Hash: (.+)/); // get header value
    if (oneHeader) {
      oneHeader = oneHeader[1].replace(/\s/g, ''); // remove whitespace
      oneHeader = oneHeader.split(',');
      oneHeader = oneHeader.map(function (hash) {
        hash = hash.toLowerCase();
        try {
          return _enums2.default.write(_enums2.default.hash, hash);
        } catch (e) {
          throw new Error('Unknown hash algorithm in armor header: ' + hash);
        }
      });
      hashAlgos = hashAlgos.concat(oneHeader);
    } else {
      throw new Error('Only "Hash" header allowed in cleartext signed message');
    }
  });

  if (!hashAlgos.length && !checkHashAlgos([_enums2.default.hash.md5])) {
    throw new Error('If no "Hash" header in cleartext signed message, then only MD5 signatures allowed');
  } else if (hashAlgos.length && !checkHashAlgos(hashAlgos)) {
    throw new Error('Hash algorithm mismatch in armor header and signature');
  }
}

/**
 * Creates a new CleartextMessage object from text
 * @param {String} text
 * @static
 */
function fromText(text) {
  return new CleartextMessage(text);
}

},{"./encoding/armor":112,"./enums":114,"./message":121,"./packet":126,"./signature":146,"./util":153}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enums = require("../enums");

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  /**
   * @memberof module:config
   * @property {Integer} prefer_hash_algorithm Default hash algorithm {@link module:enums.hash}
   */
  prefer_hash_algorithm: _enums2.default.hash.sha256,
  /**
   * @memberof module:config
   * @property {Integer} encryption_cipher Default encryption cipher {@link module:enums.symmetric}
   */
  encryption_cipher: _enums2.default.symmetric.aes256,
  /**
   * @memberof module:config
   * @property {Integer} compression Default compression algorithm {@link module:enums.compression}
   */
  compression: _enums2.default.compression.uncompressed,
  /**
   * @memberof module:config
   * @property {Integer} deflate_level Default zip/zlib compression level, between 1 and 9
   */
  deflate_level: 6,

  /**
   * Use Authenticated Encryption with Additional Data (AEAD) protection for symmetric encryption.
   * **NOT INTEROPERABLE WITH OTHER OPENPGP IMPLEMENTATIONS**
   * **FUTURE OPENPGP.JS VERSIONS MAY BREAK COMPATIBILITY WHEN USING THIS OPTION**
   * @memberof module:config
   * @property {Boolean} aead_protect
   */
  aead_protect: false,
  /**
   * Use Authenticated Encryption with Additional Data (AEAD) protection for symmetric encryption.
   * 0 means we implement a variant of {@link https://tools.ietf.org/html/draft-ford-openpgp-format-00|this IETF draft}.
   * 4 means we implement {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04|RFC4880bis-04}.
   * Note that this determines how AEAD packets are parsed even when aead_protect is set to false
   * @memberof module:config
   * @property {Integer} aead_protect_version
   */
  aead_protect_version: 4,
  /**
   * Default Authenticated Encryption with Additional Data (AEAD) encryption mode
   * Only has an effect when aead_protect is set to true.
   * @memberof module:config
   * @property {Integer} aead_mode Default AEAD mode {@link module:enums.aead}
   */
  aead_mode: _enums2.default.aead.eax,
  /**
   * Chunk Size Byte for Authenticated Encryption with Additional Data (AEAD) mode
   * Only has an effect when aead_protect is set to true.
   * Must be an integer value from 0 to 56.
   * @memberof module:config
   * @property {Integer} aead_chunk_size_byte
   */
  aead_chunk_size_byte: 12,
  /**
   * {@link https://tools.ietf.org/html/rfc4880#section-3.7.1.3|RFC4880 3.7.1.3}:
   * Iteration Count Byte for S2K (String to Key)
   * @memberof module:config
   * @property {Integer} s2k_iteration_count_byte
   */
  s2k_iteration_count_byte: 224,
  /** Use integrity protection for symmetric encryption
   * @memberof module:config
   * @property {Boolean} integrity_protect
   */
  integrity_protect: true,
  /**
   * @memberof module:config
   * @property {Boolean} ignore_mdc_error Fail on decrypt if message is not integrity protected
   */
  ignore_mdc_error: false,
  /**
   * @memberof module:config
   * @property {Boolean} allow_unauthenticated_stream Stream unauthenticated data before integrity has been checked
   */
  allow_unauthenticated_stream: false,
  /**
   * @memberof module:config
   * @property {Boolean} checksum_required Do not throw error when armor is missing a checksum
   */
  checksum_required: false,
  /**
   * @memberof module:config
   * @property {Boolean} rsa_blinding
   */
  rsa_blinding: true,
  /**
   * Work-around for rare GPG decryption bug when encrypting with multiple passwords.
   * **Slower and slightly less secure**
   * @memberof module:config
   * @property {Boolean} password_collision_check
   */
  password_collision_check: false,
  /**
   * @memberof module:config
   * @property {Boolean} revocations_expire If true, expired revocation signatures are ignored
   */
  revocations_expire: false,

  /**
   * @memberof module:config
   * @property {Boolean} use_native Use native Node.js crypto/zlib and WebCrypto APIs when available
   */
  use_native: true,
  /**
   * @memberof module:config
   * @property {Integer} min_bytes_for_web_crypto The minimum amount of bytes for which to use native WebCrypto APIs when available
   */
  min_bytes_for_web_crypto: 1000,
  /**
   * @memberof module:config
   * @property {Boolean} Use transferable objects between the Web Worker and main thread
   */
  zero_copy: false,
  /**
   * @memberof module:config
   * @property {Boolean} debug If enabled, debug messages will be printed
   */
  debug: false,
  /**
   * @memberof module:config
   * @property {Boolean} tolerant Ignore unsupported/unrecognizable packets instead of throwing an error
   */
  tolerant: true,

  /**
   * @memberof module:config
   * @property {Boolean} show_version Whether to include {@link module:config/config.versionstring} in armored messages
   */
  show_version: true,
  /**
   * @memberof module:config
   * @property {Boolean} show_comment Whether to include {@link module:config/config.commentstring} in armored messages
   */
  show_comment: true,
  /**
   * @memberof module:config
   * @property {String} versionstring A version string to be included in armored messages
   */
  versionstring: "OpenPGP.js v4.5.5",
  /**
   * @memberof module:config
   * @property {String} commentstring A comment string to be included in armored messages
   */
  commentstring: "https://openpgpjs.org",

  /**
   * @memberof module:config
   * @property {String} keyserver
   */
  keyserver: "https://keyserver.ubuntu.com",
  /**
   * @memberof module:config
   * @property {String} node_store
   */
  node_store: "./openpgp.store",
  /**
   * Max userid string length (used for parsing)
   * @memberof module:config
   * @property {Integer} max_userid_length
   */
  max_userid_length: 1024 * 5,
  /**
   * Contains notatations that are considered "known". Known notations do not trigger
   * validation error when the notation is marked as critical.
   * @memberof module:config
   * @property {Array} known_notations
   */
  known_notations: ["preferred-email-encoding@pgp.com", "pka-address@gnupg.org"]
}; // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Global configuration values.
 * @requires enums
 */

},{"../enums":114}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _config = require('./config.js');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_config).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./config.js":79}],81:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cipher = require('./cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Implementation of RFC 3394 AES Key Wrap & Key Unwrap funcions
 * @see module:crypto/public_key/elliptic/ecdh
 * @requires crypto/cipher
 * @requires util
 * @module crypto/aes_kw
 */

function wrap(key, data) {
  const aes = new _cipher2.default["aes" + key.length * 8](key);
  const IV = new Uint32Array([0xA6A6A6A6, 0xA6A6A6A6]);
  const P = unpack(data);
  let A = IV;
  const R = P;
  const n = P.length / 2;
  const t = new Uint32Array([0, 0]);
  let B = new Uint32Array(4);
  for (let j = 0; j <= 5; ++j) {
    for (let i = 0; i < n; ++i) {
      t[1] = n * j + (1 + i);
      // B = A
      B[0] = A[0];
      B[1] = A[1];
      // B = A || R[i]
      B[2] = R[2 * i];
      B[3] = R[2 * i + 1];
      // B = AES(K, B)
      B = unpack(aes.encrypt(pack(B)));
      // A = MSB(64, B) ^ t
      A = B.subarray(0, 2);
      A[0] ^= t[0];
      A[1] ^= t[1];
      // R[i] = LSB(64, B)
      R[2 * i] = B[2];
      R[2 * i + 1] = B[3];
    }
  }
  return pack(A, R);
}

function unwrap(key, data) {
  const aes = new _cipher2.default["aes" + key.length * 8](key);
  const IV = new Uint32Array([0xA6A6A6A6, 0xA6A6A6A6]);
  const C = unpack(data);
  let A = C.subarray(0, 2);
  const R = C.subarray(2);
  const n = C.length / 2 - 1;
  const t = new Uint32Array([0, 0]);
  let B = new Uint32Array(4);
  for (let j = 5; j >= 0; --j) {
    for (let i = n - 1; i >= 0; --i) {
      t[1] = n * j + (i + 1);
      // B = A ^ t
      B[0] = A[0] ^ t[0];
      B[1] = A[1] ^ t[1];
      // B = (A ^ t) || R[i]
      B[2] = R[2 * i];
      B[3] = R[2 * i + 1];
      // B = AES-1(B)
      B = unpack(aes.decrypt(pack(B)));
      // A = MSB(64, B)
      A = B.subarray(0, 2);
      // R[i] = LSB(64, B)
      R[2 * i] = B[2];
      R[2 * i + 1] = B[3];
    }
  }
  if (A[0] === IV[0] && A[1] === IV[1]) {
    return pack(R);
  }
  throw new Error("Key Data Integrity failed");
}

function createArrayBuffer(data) {
  if (_util2.default.isString(data)) {
    const length = data.length;

    const buffer = new ArrayBuffer(length);
    const view = new Uint8Array(buffer);
    for (let j = 0; j < length; ++j) {
      view[j] = data.charCodeAt(j);
    }
    return buffer;
  }
  return new Uint8Array(data).buffer;
}

function unpack(data) {
  const length = data.length;

  const buffer = createArrayBuffer(data);
  const view = new DataView(buffer);
  const arr = new Uint32Array(length / 4);
  for (let i = 0; i < length / 4; ++i) {
    arr[i] = view.getUint32(4 * i);
  }
  return arr;
}

function pack() {
  let length = 0;
  for (let k = 0; k < arguments.length; ++k) {
    length += 4 * arguments[k].length;
  }
  const buffer = new ArrayBuffer(length);
  const view = new DataView(buffer);
  let offset = 0;
  for (let i = 0; i < arguments.length; ++i) {
    for (let j = 0; j < arguments[i].length; ++j) {
      view.setUint32(offset + 4 * j, arguments[i][j]);
    }
    offset += 4 * arguments[i].length;
  }
  return new Uint8Array(buffer);
}

exports.default = {
  /**
   * AES key wrap
   * @function
   * @param {String} key
   * @param {String} data
   * @returns {Uint8Array}
   */
  wrap,
  /**
   * AES key unwrap
   * @function
   * @param {String} key
   * @param {String} data
   * @returns {Uint8Array}
   * @throws {Error}
   */
  unwrap
};

},{"../util":153,"./cipher":87}],82:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cfb = require('asmcrypto.js/dist_es5/aes/cfb');

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _cipher = require('./cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const webCrypto = _util2.default.getWebCrypto(); // Modified by ProtonTech AG

// Modified by Recurity Labs GmbH

// modified version of https://www.hanewin.net/encrypt/PGdecode.js:

/* OpenPGP encryption using RSA/AES
 * Copyright 2005-2006 Herbert Hanewinkel, www.haneWIN.de
 * version 2.0, check www.haneWIN.de for the latest version

 * This software is provided as-is, without express or implied warranty.
 * Permission to use, copy, modify, distribute or sell this software, with or
 * without fee, for any purpose and by any individual or organization, is hereby
 * granted, provided that the above copyright notice and this paragraph appear
 * in all copies. Distribution as a part of an application or binary must
 * include the above copyright notice in the documentation and/or other
 * materials provided with the application or distribution.
 */

/**
 * @requires web-stream-tools
 * @requires crypto/cipher
 * @requires util
 * @module crypto/cfb
 */

const nodeCrypto = _util2.default.getNodeCrypto();
const Buffer = _util2.default.getNodeBuffer();

exports.default = {
  encrypt: function encrypt(algo, key, plaintext, iv) {
    if (algo.substr(0, 3) === 'aes') {
      return aesEncrypt(algo, key, plaintext, iv);
    }

    const cipherfn = new _cipher2.default[algo](key);
    const block_size = cipherfn.blockSize;

    let blocki = new Uint8Array(block_size);
    const blockc = iv;
    let pos = 0;
    const ciphertext = new Uint8Array(plaintext.length);
    let i;
    let j = 0;

    while (plaintext.length > block_size * pos) {
      const encblock = cipherfn.encrypt(blockc);
      blocki = plaintext.subarray(pos * block_size, pos * block_size + block_size);
      for (i = 0; i < blocki.length; i++) {
        blockc[i] = blocki[i] ^ encblock[i];
        ciphertext[j++] = blockc[i];
      }
      pos++;
    }
    return ciphertext;
  },

  decrypt: async function decrypt(algo, key, ciphertext, iv) {
    if (algo.substr(0, 3) === 'aes') {
      return aesDecrypt(algo, key, ciphertext, iv);
    }

    ciphertext = await _webStreamTools2.default.readToEnd(ciphertext);

    const cipherfn = new _cipher2.default[algo](key);
    const block_size = cipherfn.blockSize;

    let blockp = iv;
    let pos = 0;
    const plaintext = new Uint8Array(ciphertext.length);
    const offset = 0;
    let i;
    let j = 0;

    while (ciphertext.length > block_size * pos) {
      const decblock = cipherfn.encrypt(blockp);
      blockp = ciphertext.subarray(pos * block_size + offset, pos * block_size + block_size + offset);
      for (i = 0; i < blockp.length; i++) {
        plaintext[j++] = blockp[i] ^ decblock[i];
      }
      pos++;
    }

    return plaintext;
  }
};


function aesEncrypt(algo, key, pt, iv) {
  if (_util2.default.getWebCrypto() && key.length !== 24 && // Chrome doesn't support 192 bit keys, see https://www.chromium.org/blink/webcrypto#TOC-AES-support
  !_util2.default.isStream(pt) && pt.length >= 3000 * _config2.default.min_bytes_for_web_crypto // Default to a 3MB minimum. Chrome is pretty slow for small messages, see: https://bugs.chromium.org/p/chromium/issues/detail?id=701188#c2
  ) {
      // Web Crypto
      return webEncrypt(algo, key, pt, iv);
    }
  if (nodeCrypto) {
    // Node crypto library.
    return nodeEncrypt(algo, key, pt, iv);
  } // asm.js fallback
  const cfb = new _cfb.AES_CFB(key, iv);
  return _webStreamTools2.default.transform(pt, value => cfb.AES_Encrypt_process(value), () => cfb.AES_Encrypt_finish());
}

function aesDecrypt(algo, key, ct, iv) {
  if (nodeCrypto) {
    // Node crypto library.
    return nodeDecrypt(algo, key, ct, iv);
  }
  if (_util2.default.isStream(ct)) {
    const cfb = new _cfb.AES_CFB(key, iv);
    return _webStreamTools2.default.transform(ct, value => cfb.AES_Decrypt_process(value), () => cfb.AES_Decrypt_finish());
  }
  return _cfb.AES_CFB.decrypt(ct, key, iv);
}

function xorMut(a, b) {
  for (let i = 0; i < a.length; i++) {
    a[i] = a[i] ^ b[i];
  }
}

async function webEncrypt(algo, key, pt, iv) {
  const ALGO = 'AES-CBC';
  const _key = await webCrypto.importKey('raw', key, { name: ALGO }, false, ['encrypt']);
  const blockSize = _cipher2.default[algo].blockSize;

  const cbc_pt = _util2.default.concatUint8Array([new Uint8Array(blockSize), pt]);
  const ct = new Uint8Array((await webCrypto.encrypt({ name: ALGO, iv }, _key, cbc_pt))).subarray(0, pt.length);
  xorMut(ct, pt);
  return ct;
}

function nodeEncrypt(algo, key, pt, iv) {
  key = new Buffer(key);
  iv = new Buffer(iv);
  const cipherObj = new nodeCrypto.createCipheriv('aes-' + algo.substr(3, 3) + '-cfb', key, iv);
  return _webStreamTools2.default.transform(pt, value => new Uint8Array(cipherObj.update(new Buffer(value))));
}

function nodeDecrypt(algo, key, ct, iv) {
  key = new Buffer(key);
  iv = new Buffer(iv);
  const decipherObj = new nodeCrypto.createDecipheriv('aes-' + algo.substr(3, 3) + '-cfb', key, iv);
  return _webStreamTools2.default.transform(ct, value => new Uint8Array(decipherObj.update(new Buffer(value))));
}

},{"../config":80,"../util":153,"./cipher":87,"asmcrypto.js/dist_es5/aes/cfb":6,"web-stream-tools":76}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ecb = require('asmcrypto.js/dist_es5/aes/ecb');

// TODO use webCrypto or nodeCrypto when possible.
function aes(length) {
  const C = function C(key) {
    const aes_ecb = new _ecb.AES_ECB(key);

    this.encrypt = function (block) {
      return aes_ecb.encrypt(block);
    };

    this.decrypt = function (block) {
      return aes_ecb.decrypt(block);
    };
  };

  C.blockSize = C.prototype.blockSize = 16;
  C.keySize = C.prototype.keySize = length / 8;

  return C;
} /**
   * @requires asmcrypto.js
   */

exports.default = aes;

},{"asmcrypto.js/dist_es5/aes/ecb":8}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* Modified by Recurity Labs GmbH
 *
 * Originally written by nklein software (nklein.com)
 */

/*
 * Javascript implementation based on Bruce Schneier's reference implementation.
 *
 *
 * The constructor doesn't do much of anything.  It's just here
 * so we can start defining properties and methods and such.
 */
function Blowfish() {}

/*
 * Declare the block size so that protocols know what size
 * Initialization Vector (IV) they will need.
 */
Blowfish.prototype.BLOCKSIZE = 8;

/*
 * These are the default SBOXES.
 */
Blowfish.prototype.SBOXES = [[0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a], [0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7], [0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0], [0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6]];

//*
//* This is the default PARRAY
//*
Blowfish.prototype.PARRAY = [0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b];

//*
//* This is the number of rounds the cipher will go
//*
Blowfish.prototype.NN = 16;

//*
//* This function is needed to get rid of problems
//* with the high-bit getting set.  If we don't do
//* this, then sometimes ( aa & 0x00FFFFFFFF ) is not
//* equal to ( bb & 0x00FFFFFFFF ) even when they
//* agree bit-for-bit for the first 32 bits.
//*
Blowfish.prototype._clean = function (xx) {
  if (xx < 0) {
    const yy = xx & 0x7FFFFFFF;
    xx = yy + 0x80000000;
  }
  return xx;
};

//*
//* This is the mixing function that uses the sboxes
//*
Blowfish.prototype._F = function (xx) {
  let yy;

  const dd = xx & 0x00FF;
  xx >>>= 8;
  const cc = xx & 0x00FF;
  xx >>>= 8;
  const bb = xx & 0x00FF;
  xx >>>= 8;
  const aa = xx & 0x00FF;

  yy = this.sboxes[0][aa] + this.sboxes[1][bb];
  yy ^= this.sboxes[2][cc];
  yy += this.sboxes[3][dd];

  return yy;
};

//*
//* This method takes an array with two values, left and right
//* and does NN rounds of Blowfish on them.
//*
Blowfish.prototype._encrypt_block = function (vals) {
  let dataL = vals[0];
  let dataR = vals[1];

  let ii;

  for (ii = 0; ii < this.NN; ++ii) {
    dataL ^= this.parray[ii];
    dataR = this._F(dataL) ^ dataR;

    const tmp = dataL;
    dataL = dataR;
    dataR = tmp;
  }

  dataL ^= this.parray[this.NN + 0];
  dataR ^= this.parray[this.NN + 1];

  vals[0] = this._clean(dataR);
  vals[1] = this._clean(dataL);
};

//*
//* This method takes a vector of numbers and turns them
//* into long words so that they can be processed by the
//* real algorithm.
//*
//* Maybe I should make the real algorithm above take a vector
//* instead.  That will involve more looping, but it won't require
//* the F() method to deconstruct the vector.
//*
Blowfish.prototype.encrypt_block = function (vector) {
  let ii;
  const vals = [0, 0];
  const off = this.BLOCKSIZE / 2;
  for (ii = 0; ii < this.BLOCKSIZE / 2; ++ii) {
    vals[0] = vals[0] << 8 | vector[ii + 0] & 0x00FF;
    vals[1] = vals[1] << 8 | vector[ii + off] & 0x00FF;
  }

  this._encrypt_block(vals);

  const ret = [];
  for (ii = 0; ii < this.BLOCKSIZE / 2; ++ii) {
    ret[ii + 0] = vals[0] >>> 24 - 8 * ii & 0x00FF;
    ret[ii + off] = vals[1] >>> 24 - 8 * ii & 0x00FF;
    // vals[ 0 ] = ( vals[ 0 ] >>> 8 );
    // vals[ 1 ] = ( vals[ 1 ] >>> 8 );
  }

  return ret;
};

//*
//* This method takes an array with two values, left and right
//* and undoes NN rounds of Blowfish on them.
//*
Blowfish.prototype._decrypt_block = function (vals) {
  let dataL = vals[0];
  let dataR = vals[1];

  let ii;

  for (ii = this.NN + 1; ii > 1; --ii) {
    dataL ^= this.parray[ii];
    dataR = this._F(dataL) ^ dataR;

    const tmp = dataL;
    dataL = dataR;
    dataR = tmp;
  }

  dataL ^= this.parray[1];
  dataR ^= this.parray[0];

  vals[0] = this._clean(dataR);
  vals[1] = this._clean(dataL);
};

//*
//* This method takes a key array and initializes the
//* sboxes and parray for this encryption.
//*
Blowfish.prototype.init = function (key) {
  let ii;
  let jj = 0;

  this.parray = [];
  for (ii = 0; ii < this.NN + 2; ++ii) {
    let data = 0x00000000;
    for (let kk = 0; kk < 4; ++kk) {
      data = data << 8 | key[jj] & 0x00FF;
      if (++jj >= key.length) {
        jj = 0;
      }
    }
    this.parray[ii] = this.PARRAY[ii] ^ data;
  }

  this.sboxes = [];
  for (ii = 0; ii < 4; ++ii) {
    this.sboxes[ii] = [];
    for (jj = 0; jj < 256; ++jj) {
      this.sboxes[ii][jj] = this.SBOXES[ii][jj];
    }
  }

  const vals = [0x00000000, 0x00000000];

  for (ii = 0; ii < this.NN + 2; ii += 2) {
    this._encrypt_block(vals);
    this.parray[ii + 0] = vals[0];
    this.parray[ii + 1] = vals[1];
  }

  for (ii = 0; ii < 4; ++ii) {
    for (jj = 0; jj < 256; jj += 2) {
      this._encrypt_block(vals);
      this.sboxes[ii][jj + 0] = vals[0];
      this.sboxes[ii][jj + 1] = vals[1];
    }
  }
};

// added by Recurity Labs
function BF(key) {
  this.bf = new Blowfish();
  this.bf.init(key);

  this.encrypt = function (block) {
    return this.bf.encrypt_block(block);
  };
}

BF.keySize = BF.prototype.keySize = 16;
BF.blockSize = BF.prototype.blockSize = 16;

exports.default = BF;

},{}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Copyright 2010 pjacobs@xeekr.com . All rights reserved.

// Modified by Recurity Labs GmbH

// fixed/modified by Herbert Hanewinkel, www.haneWIN.de
// check www.haneWIN.de for the latest version

// cast5.js is a Javascript implementation of CAST-128, as defined in RFC 2144.
// CAST-128 is a common OpenPGP cipher.


// CAST5 constructor

function OpenpgpSymencCast5() {
  this.BlockSize = 8;
  this.KeySize = 16;

  this.setKey = function (key) {
    this.masking = new Array(16);
    this.rotate = new Array(16);

    this.reset();

    if (key.length === this.KeySize) {
      this.keySchedule(key);
    } else {
      throw new Error('CAST-128: keys must be 16 bytes');
    }
    return true;
  };

  this.reset = function () {
    for (let i = 0; i < 16; i++) {
      this.masking[i] = 0;
      this.rotate[i] = 0;
    }
  };

  this.getBlockSize = function () {
    return this.BlockSize;
  };

  this.encrypt = function (src) {
    const dst = new Array(src.length);

    for (let i = 0; i < src.length; i += 8) {
      let l = src[i] << 24 | src[i + 1] << 16 | src[i + 2] << 8 | src[i + 3];
      let r = src[i + 4] << 24 | src[i + 5] << 16 | src[i + 6] << 8 | src[i + 7];
      let t;

      t = r;
      r = l ^ f1(r, this.masking[0], this.rotate[0]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[1], this.rotate[1]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[2], this.rotate[2]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[3], this.rotate[3]);
      l = t;

      t = r;
      r = l ^ f2(r, this.masking[4], this.rotate[4]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[5], this.rotate[5]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[6], this.rotate[6]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[7], this.rotate[7]);
      l = t;

      t = r;
      r = l ^ f3(r, this.masking[8], this.rotate[8]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[9], this.rotate[9]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[10], this.rotate[10]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[11], this.rotate[11]);
      l = t;

      t = r;
      r = l ^ f1(r, this.masking[12], this.rotate[12]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[13], this.rotate[13]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[14], this.rotate[14]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[15], this.rotate[15]);
      l = t;

      dst[i] = r >>> 24 & 255;
      dst[i + 1] = r >>> 16 & 255;
      dst[i + 2] = r >>> 8 & 255;
      dst[i + 3] = r & 255;
      dst[i + 4] = l >>> 24 & 255;
      dst[i + 5] = l >>> 16 & 255;
      dst[i + 6] = l >>> 8 & 255;
      dst[i + 7] = l & 255;
    }

    return dst;
  };

  this.decrypt = function (src) {
    const dst = new Array(src.length);

    for (let i = 0; i < src.length; i += 8) {
      let l = src[i] << 24 | src[i + 1] << 16 | src[i + 2] << 8 | src[i + 3];
      let r = src[i + 4] << 24 | src[i + 5] << 16 | src[i + 6] << 8 | src[i + 7];
      let t;

      t = r;
      r = l ^ f1(r, this.masking[15], this.rotate[15]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[14], this.rotate[14]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[13], this.rotate[13]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[12], this.rotate[12]);
      l = t;

      t = r;
      r = l ^ f3(r, this.masking[11], this.rotate[11]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[10], this.rotate[10]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[9], this.rotate[9]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[8], this.rotate[8]);
      l = t;

      t = r;
      r = l ^ f2(r, this.masking[7], this.rotate[7]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[6], this.rotate[6]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[5], this.rotate[5]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[4], this.rotate[4]);
      l = t;

      t = r;
      r = l ^ f1(r, this.masking[3], this.rotate[3]);
      l = t;
      t = r;
      r = l ^ f3(r, this.masking[2], this.rotate[2]);
      l = t;
      t = r;
      r = l ^ f2(r, this.masking[1], this.rotate[1]);
      l = t;
      t = r;
      r = l ^ f1(r, this.masking[0], this.rotate[0]);
      l = t;

      dst[i] = r >>> 24 & 255;
      dst[i + 1] = r >>> 16 & 255;
      dst[i + 2] = r >>> 8 & 255;
      dst[i + 3] = r & 255;
      dst[i + 4] = l >>> 24 & 255;
      dst[i + 5] = l >> 16 & 255;
      dst[i + 6] = l >> 8 & 255;
      dst[i + 7] = l & 255;
    }

    return dst;
  };
  const scheduleA = new Array(4);

  scheduleA[0] = new Array(4);
  scheduleA[0][0] = [4, 0, 0xd, 0xf, 0xc, 0xe, 0x8];
  scheduleA[0][1] = [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa];
  scheduleA[0][2] = [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9];
  scheduleA[0][3] = [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb];

  scheduleA[1] = new Array(4);
  scheduleA[1][0] = [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0];
  scheduleA[1][1] = [1, 4, 0, 2, 1, 3, 16 + 2];
  scheduleA[1][2] = [2, 5, 7, 6, 5, 4, 16 + 1];
  scheduleA[1][3] = [3, 7, 0xa, 9, 0xb, 8, 16 + 3];

  scheduleA[2] = new Array(4);
  scheduleA[2][0] = [4, 0, 0xd, 0xf, 0xc, 0xe, 8];
  scheduleA[2][1] = [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa];
  scheduleA[2][2] = [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9];
  scheduleA[2][3] = [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb];

  scheduleA[3] = new Array(4);
  scheduleA[3][0] = [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0];
  scheduleA[3][1] = [1, 4, 0, 2, 1, 3, 16 + 2];
  scheduleA[3][2] = [2, 5, 7, 6, 5, 4, 16 + 1];
  scheduleA[3][3] = [3, 7, 0xa, 9, 0xb, 8, 16 + 3];

  const scheduleB = new Array(4);

  scheduleB[0] = new Array(4);
  scheduleB[0][0] = [16 + 8, 16 + 9, 16 + 7, 16 + 6, 16 + 2];
  scheduleB[0][1] = [16 + 0xa, 16 + 0xb, 16 + 5, 16 + 4, 16 + 6];
  scheduleB[0][2] = [16 + 0xc, 16 + 0xd, 16 + 3, 16 + 2, 16 + 9];
  scheduleB[0][3] = [16 + 0xe, 16 + 0xf, 16 + 1, 16 + 0, 16 + 0xc];

  scheduleB[1] = new Array(4);
  scheduleB[1][0] = [3, 2, 0xc, 0xd, 8];
  scheduleB[1][1] = [1, 0, 0xe, 0xf, 0xd];
  scheduleB[1][2] = [7, 6, 8, 9, 3];
  scheduleB[1][3] = [5, 4, 0xa, 0xb, 7];

  scheduleB[2] = new Array(4);
  scheduleB[2][0] = [16 + 3, 16 + 2, 16 + 0xc, 16 + 0xd, 16 + 9];
  scheduleB[2][1] = [16 + 1, 16 + 0, 16 + 0xe, 16 + 0xf, 16 + 0xc];
  scheduleB[2][2] = [16 + 7, 16 + 6, 16 + 8, 16 + 9, 16 + 2];
  scheduleB[2][3] = [16 + 5, 16 + 4, 16 + 0xa, 16 + 0xb, 16 + 6];

  scheduleB[3] = new Array(4);
  scheduleB[3][0] = [8, 9, 7, 6, 3];
  scheduleB[3][1] = [0xa, 0xb, 5, 4, 7];
  scheduleB[3][2] = [0xc, 0xd, 3, 2, 8];
  scheduleB[3][3] = [0xe, 0xf, 1, 0, 0xd];

  // changed 'in' to 'inn' (in javascript 'in' is a reserved word)
  this.keySchedule = function (inn) {
    const t = new Array(8);
    const k = new Array(32);

    let j;

    for (let i = 0; i < 4; i++) {
      j = i * 4;
      t[i] = inn[j] << 24 | inn[j + 1] << 16 | inn[j + 2] << 8 | inn[j + 3];
    }

    const x = [6, 7, 4, 5];
    let ki = 0;
    let w;

    for (let half = 0; half < 2; half++) {
      for (let round = 0; round < 4; round++) {
        for (j = 0; j < 4; j++) {
          const a = scheduleA[round][j];
          w = t[a[1]];

          w ^= sBox[4][t[a[2] >>> 2] >>> 24 - 8 * (a[2] & 3) & 0xff];
          w ^= sBox[5][t[a[3] >>> 2] >>> 24 - 8 * (a[3] & 3) & 0xff];
          w ^= sBox[6][t[a[4] >>> 2] >>> 24 - 8 * (a[4] & 3) & 0xff];
          w ^= sBox[7][t[a[5] >>> 2] >>> 24 - 8 * (a[5] & 3) & 0xff];
          w ^= sBox[x[j]][t[a[6] >>> 2] >>> 24 - 8 * (a[6] & 3) & 0xff];
          t[a[0]] = w;
        }

        for (j = 0; j < 4; j++) {
          const b = scheduleB[round][j];
          w = sBox[4][t[b[0] >>> 2] >>> 24 - 8 * (b[0] & 3) & 0xff];

          w ^= sBox[5][t[b[1] >>> 2] >>> 24 - 8 * (b[1] & 3) & 0xff];
          w ^= sBox[6][t[b[2] >>> 2] >>> 24 - 8 * (b[2] & 3) & 0xff];
          w ^= sBox[7][t[b[3] >>> 2] >>> 24 - 8 * (b[3] & 3) & 0xff];
          w ^= sBox[4 + j][t[b[4] >>> 2] >>> 24 - 8 * (b[4] & 3) & 0xff];
          k[ki] = w;
          ki++;
        }
      }
    }

    for (let i = 0; i < 16; i++) {
      this.masking[i] = k[i];
      this.rotate[i] = k[16 + i] & 0x1f;
    }
  };

  // These are the three 'f' functions. See RFC 2144, section 2.2.

  function f1(d, m, r) {
    const t = m + d;
    const I = t << r | t >>> 32 - r;
    return (sBox[0][I >>> 24] ^ sBox[1][I >>> 16 & 255]) - sBox[2][I >>> 8 & 255] + sBox[3][I & 255];
  }

  function f2(d, m, r) {
    const t = m ^ d;
    const I = t << r | t >>> 32 - r;
    return sBox[0][I >>> 24] - sBox[1][I >>> 16 & 255] + sBox[2][I >>> 8 & 255] ^ sBox[3][I & 255];
  }

  function f3(d, m, r) {
    const t = m - d;
    const I = t << r | t >>> 32 - r;
    return (sBox[0][I >>> 24] + sBox[1][I >>> 16 & 255] ^ sBox[2][I >>> 8 & 255]) - sBox[3][I & 255];
  }

  const sBox = new Array(8);
  sBox[0] = [0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f, 0x9c004dd3, 0x6003e540, 0xcf9fc949, 0xbfd4af27, 0x88bbbdb5, 0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d, 0x22d4ff8e, 0x28683b6f, 0xc07fd059, 0xff2379c8, 0x775f50e2, 0x43c340d3, 0xdf2f8656, 0x887ca41a, 0xa2d2bd2d, 0xa1c9e0d6, 0x346c4819, 0x61b76d87, 0x22540f2f, 0x2abe32e1, 0xaa54166b, 0x22568e3a, 0xa2d341d0, 0x66db40c8, 0xa784392f, 0x004dff2f, 0x2db9d2de, 0x97943fac, 0x4a97c1d8, 0x527644b7, 0xb5f437a7, 0xb82cbaef, 0xd751d159, 0x6ff7f0ed, 0x5a097a1f, 0x827b68d0, 0x90ecf52e, 0x22b0c054, 0xbc8e5935, 0x4b6d2f7f, 0x50bb64a2, 0xd2664910, 0xbee5812d, 0xb7332290, 0xe93b159f, 0xb48ee411, 0x4bff345d, 0xfd45c240, 0xad31973f, 0xc4f6d02e, 0x55fc8165, 0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d, 0xc19b0c50, 0x882240f2, 0x0c6e4f38, 0xa4e4bfd7, 0x4f5ba272, 0x564c1d2f, 0xc59c5319, 0xb949e354, 0xb04669fe, 0xb1b6ab8a, 0xc71358dd, 0x6385c545, 0x110f935d, 0x57538ad5, 0x6a390493, 0xe63d37e0, 0x2a54f6b3, 0x3a787d5f, 0x6276a0b5, 0x19a6fcdf, 0x7a42206a, 0x29f9d4d5, 0xf61b1891, 0xbb72275e, 0xaa508167, 0x38901091, 0xc6b505eb, 0x84c7cb8c, 0x2ad75a0f, 0x874a1427, 0xa2d1936b, 0x2ad286af, 0xaa56d291, 0xd7894360, 0x425c750d, 0x93b39e26, 0x187184c9, 0x6c00b32d, 0x73e2bb14, 0xa0bebc3c, 0x54623779, 0x64459eab, 0x3f328b82, 0x7718cf82, 0x59a2cea6, 0x04ee002e, 0x89fe78e6, 0x3fab0950, 0x325ff6c2, 0x81383f05, 0x6963c5c8, 0x76cb5ad6, 0xd49974c9, 0xca180dcf, 0x380782d5, 0xc7fa5cf6, 0x8ac31511, 0x35e79e13, 0x47da91d0, 0xf40f9086, 0xa7e2419e, 0x31366241, 0x051ef495, 0xaa573b04, 0x4a805d8d, 0x548300d0, 0x00322a3c, 0xbf64cddf, 0xba57a68e, 0x75c6372b, 0x50afd341, 0xa7c13275, 0x915a0bf5, 0x6b54bfab, 0x2b0b1426, 0xab4cc9d7, 0x449ccd82, 0xf7fbf265, 0xab85c5f3, 0x1b55db94, 0xaad4e324, 0xcfa4bd3f, 0x2deaa3e2, 0x9e204d02, 0xc8bd25ac, 0xeadf55b3, 0xd5bd9e98, 0xe31231b2, 0x2ad5ad6c, 0x954329de, 0xadbe4528, 0xd8710f69, 0xaa51c90f, 0xaa786bf6, 0x22513f1e, 0xaa51a79b, 0x2ad344cc, 0x7b5a41f0, 0xd37cfbad, 0x1b069505, 0x41ece491, 0xb4c332e6, 0x032268d4, 0xc9600acc, 0xce387e6d, 0xbf6bb16c, 0x6a70fb78, 0x0d03d9c9, 0xd4df39de, 0xe01063da, 0x4736f464, 0x5ad328d8, 0xb347cc96, 0x75bb0fc3, 0x98511bfb, 0x4ffbcc35, 0xb58bcf6a, 0xe11f0abc, 0xbfc5fe4a, 0xa70aec10, 0xac39570a, 0x3f04442f, 0x6188b153, 0xe0397a2e, 0x5727cb79, 0x9ceb418f, 0x1cacd68d, 0x2ad37c96, 0x0175cb9d, 0xc69dff09, 0xc75b65f0, 0xd9db40d8, 0xec0e7779, 0x4744ead4, 0xb11c3274, 0xdd24cb9e, 0x7e1c54bd, 0xf01144f9, 0xd2240eb1, 0x9675b3fd, 0xa3ac3755, 0xd47c27af, 0x51c85f4d, 0x56907596, 0xa5bb15e6, 0x580304f0, 0xca042cf1, 0x011a37ea, 0x8dbfaadb, 0x35ba3e4a, 0x3526ffa0, 0xc37b4d09, 0xbc306ed9, 0x98a52666, 0x5648f725, 0xff5e569d, 0x0ced63d0, 0x7c63b2cf, 0x700b45e1, 0xd5ea50f1, 0x85a92872, 0xaf1fbda7, 0xd4234870, 0xa7870bf3, 0x2d3b4d79, 0x42e04198, 0x0cd0ede7, 0x26470db8, 0xf881814c, 0x474d6ad7, 0x7c0c5e5c, 0xd1231959, 0x381b7298, 0xf5d2f4db, 0xab838653, 0x6e2f1e23, 0x83719c9e, 0xbd91e046, 0x9a56456e, 0xdc39200c, 0x20c8c571, 0x962bda1c, 0xe1e696ff, 0xb141ab08, 0x7cca89b9, 0x1a69e783, 0x02cc4843, 0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00, 0x5c8165bf];

  sBox[1] = [0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a, 0xeec5207a, 0x55889c94, 0x72fc0651, 0xada7ef79, 0x4e1d7235, 0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d, 0xa1d6eff3, 0xa0b52f7b, 0x59e83605, 0xee15b094, 0xe9ffd909, 0xdc440086, 0xef944459, 0xba83ccb3, 0xe0c3cdfb, 0xd1da4181, 0x3b092ab1, 0xf997f1c1, 0xa5e6cf7b, 0x01420ddb, 0xe4e7ef5b, 0x25a1ff41, 0xe180f806, 0x1fc41080, 0x179bee7a, 0xd37ac6a9, 0xfe5830a4, 0x98de8b7f, 0x77e83f4e, 0x79929269, 0x24fa9f7b, 0xe113c85b, 0xacc40083, 0xd7503525, 0xf7ea615f, 0x62143154, 0x0d554b63, 0x5d681121, 0xc866c359, 0x3d63cf73, 0xcee234c0, 0xd4d87e87, 0x5c672b21, 0x071f6181, 0x39f7627f, 0x361e3084, 0xe4eb573b, 0x602f64a4, 0xd63acd9c, 0x1bbc4635, 0x9e81032d, 0x2701f50c, 0x99847ab4, 0xa0e3df79, 0xba6cf38c, 0x10843094, 0x2537a95e, 0xf46f6ffe, 0xa1ff3b1f, 0x208cfb6a, 0x8f458c74, 0xd9e0a227, 0x4ec73a34, 0xfc884f69, 0x3e4de8df, 0xef0e0088, 0x3559648d, 0x8a45388c, 0x1d804366, 0x721d9bfd, 0xa58684bb, 0xe8256333, 0x844e8212, 0x128d8098, 0xfed33fb4, 0xce280ae1, 0x27e19ba5, 0xd5a6c252, 0xe49754bd, 0xc5d655dd, 0xeb667064, 0x77840b4d, 0xa1b6a801, 0x84db26a9, 0xe0b56714, 0x21f043b7, 0xe5d05860, 0x54f03084, 0x066ff472, 0xa31aa153, 0xdadc4755, 0xb5625dbf, 0x68561be6, 0x83ca6b94, 0x2d6ed23b, 0xeccf01db, 0xa6d3d0ba, 0xb6803d5c, 0xaf77a709, 0x33b4a34c, 0x397bc8d6, 0x5ee22b95, 0x5f0e5304, 0x81ed6f61, 0x20e74364, 0xb45e1378, 0xde18639b, 0x881ca122, 0xb96726d1, 0x8049a7e8, 0x22b7da7b, 0x5e552d25, 0x5272d237, 0x79d2951c, 0xc60d894c, 0x488cb402, 0x1ba4fe5b, 0xa4b09f6b, 0x1ca815cf, 0xa20c3005, 0x8871df63, 0xb9de2fcb, 0x0cc6c9e9, 0x0beeff53, 0xe3214517, 0xb4542835, 0x9f63293c, 0xee41e729, 0x6e1d2d7c, 0x50045286, 0x1e6685f3, 0xf33401c6, 0x30a22c95, 0x31a70850, 0x60930f13, 0x73f98417, 0xa1269859, 0xec645c44, 0x52c877a9, 0xcdff33a6, 0xa02b1741, 0x7cbad9a2, 0x2180036f, 0x50d99c08, 0xcb3f4861, 0xc26bd765, 0x64a3f6ab, 0x80342676, 0x25a75e7b, 0xe4e6d1fc, 0x20c710e6, 0xcdf0b680, 0x17844d3b, 0x31eef84d, 0x7e0824e4, 0x2ccb49eb, 0x846a3bae, 0x8ff77888, 0xee5d60f6, 0x7af75673, 0x2fdd5cdb, 0xa11631c1, 0x30f66f43, 0xb3faec54, 0x157fd7fa, 0xef8579cc, 0xd152de58, 0xdb2ffd5e, 0x8f32ce19, 0x306af97a, 0x02f03ef8, 0x99319ad5, 0xc242fa0f, 0xa7e3ebb0, 0xc68e4906, 0xb8da230c, 0x80823028, 0xdcdef3c8, 0xd35fb171, 0x088a1bc8, 0xbec0c560, 0x61a3c9e8, 0xbca8f54d, 0xc72feffa, 0x22822e99, 0x82c570b4, 0xd8d94e89, 0x8b1c34bc, 0x301e16e6, 0x273be979, 0xb0ffeaa6, 0x61d9b8c6, 0x00b24869, 0xb7ffce3f, 0x08dc283b, 0x43daf65a, 0xf7e19798, 0x7619b72f, 0x8f1c9ba4, 0xdc8637a0, 0x16a7d3b1, 0x9fc393b7, 0xa7136eeb, 0xc6bcc63e, 0x1a513742, 0xef6828bc, 0x520365d6, 0x2d6a77ab, 0x3527ed4b, 0x821fd216, 0x095c6e2e, 0xdb92f2fb, 0x5eea29cb, 0x145892f5, 0x91584f7f, 0x5483697b, 0x2667a8cc, 0x85196048, 0x8c4bacea, 0x833860d4, 0x0d23e0f9, 0x6c387e8a, 0x0ae6d249, 0xb284600c, 0xd835731d, 0xdcb1c647, 0xac4c56ea, 0x3ebd81b3, 0x230eabb0, 0x6438bc87, 0xf0b5b1fa, 0x8f5ea2b3, 0xfc184642, 0x0a036b7a, 0x4fb089bd, 0x649da589, 0xa345415e, 0x5c038323, 0x3e5d3bb9, 0x43d79572, 0x7e6dd07c, 0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605, 0x4523ecf1];

  sBox[2] = [0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff, 0x369fe44b, 0x8c1fc644, 0xaececa90, 0xbeb1f9bf, 0xeefbcaea, 0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83, 0x927010d5, 0x11107d9f, 0x07647db9, 0xb2e3e4d4, 0x3d4f285e, 0xb9afa820, 0xfade82e0, 0xa067268b, 0x8272792e, 0x553fb2c0, 0x489ae22b, 0xd4ef9794, 0x125e3fbc, 0x21fffcee, 0x825b1bfd, 0x9255c5ed, 0x1257a240, 0x4e1a8302, 0xbae07fff, 0x528246e7, 0x8e57140e, 0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8, 0xc982b5a5, 0xa8c01db7, 0x579fc264, 0x67094f31, 0xf2bd3f5f, 0x40fff7c1, 0x1fb78dfc, 0x8e6bd2c1, 0x437be59b, 0x99b03dbf, 0xb5dbc64b, 0x638dc0e6, 0x55819d99, 0xa197c81c, 0x4a012d6e, 0xc5884a28, 0xccc36f71, 0xb843c213, 0x6c0743f1, 0x8309893c, 0x0feddd5f, 0x2f7fe850, 0xd7c07f7e, 0x02507fbf, 0x5afb9a04, 0xa747d2d0, 0x1651192e, 0xaf70bf3e, 0x58c31380, 0x5f98302e, 0x727cc3c4, 0x0a0fb402, 0x0f7fef82, 0x8c96fdad, 0x5d2c2aae, 0x8ee99a49, 0x50da88b8, 0x8427f4a0, 0x1eac5790, 0x796fb449, 0x8252dc15, 0xefbd7d9b, 0xa672597d, 0xada840d8, 0x45f54504, 0xfa5d7403, 0xe83ec305, 0x4f91751a, 0x925669c2, 0x23efe941, 0xa903f12e, 0x60270df2, 0x0276e4b6, 0x94fd6574, 0x927985b2, 0x8276dbcb, 0x02778176, 0xf8af918d, 0x4e48f79e, 0x8f616ddf, 0xe29d840e, 0x842f7d83, 0x340ce5c8, 0x96bbb682, 0x93b4b148, 0xef303cab, 0x984faf28, 0x779faf9b, 0x92dc560d, 0x224d1e20, 0x8437aa88, 0x7d29dc96, 0x2756d3dc, 0x8b907cee, 0xb51fd240, 0xe7c07ce3, 0xe566b4a1, 0xc3e9615e, 0x3cf8209d, 0x6094d1e3, 0xcd9ca341, 0x5c76460e, 0x00ea983b, 0xd4d67881, 0xfd47572c, 0xf76cedd9, 0xbda8229c, 0x127dadaa, 0x438a074e, 0x1f97c090, 0x081bdb8a, 0x93a07ebe, 0xb938ca15, 0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec, 0x64380e51, 0x68cc7bfb, 0xd90f2788, 0x12490181, 0x5de5ffd4, 0xdd7ef86a, 0x76a2e214, 0xb9a40368, 0x925d958f, 0x4b39fffa, 0xba39aee9, 0xa4ffd30b, 0xfaf7933b, 0x6d498623, 0x193cbcfa, 0x27627545, 0x825cf47a, 0x61bd8ba0, 0xd11e42d1, 0xcead04f4, 0x127ea392, 0x10428db7, 0x8272a972, 0x9270c4a8, 0x127de50b, 0x285ba1c8, 0x3c62f44f, 0x35c0eaa5, 0xe805d231, 0x428929fb, 0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b, 0x1f081fab, 0x108618ae, 0xfcfd086d, 0xf9ff2889, 0x694bcc11, 0x236a5cae, 0x12deca4d, 0x2c3f8cc5, 0xd2d02dfe, 0xf8ef5896, 0xe4cf52da, 0x95155b67, 0x494a488c, 0xb9b6a80c, 0x5c8f82bc, 0x89d36b45, 0x3a609437, 0xec00c9a9, 0x44715253, 0x0a874b49, 0xd773bc40, 0x7c34671c, 0x02717ef6, 0x4feb5536, 0xa2d02fff, 0xd2bf60c4, 0xd43f03c0, 0x50b4ef6d, 0x07478cd1, 0x006e1888, 0xa2e53f55, 0xb9e6d4bc, 0xa2048016, 0x97573833, 0xd7207d67, 0xde0f8f3d, 0x72f87b33, 0xabcc4f33, 0x7688c55d, 0x7b00a6b0, 0x947b0001, 0x570075d2, 0xf9bb88f8, 0x8942019e, 0x4264a5ff, 0x856302e0, 0x72dbd92b, 0xee971b69, 0x6ea22fde, 0x5f08ae2b, 0xaf7a616d, 0xe5c98767, 0xcf1febd2, 0x61efc8c2, 0xf1ac2571, 0xcc8239c2, 0x67214cb8, 0xb1e583d1, 0xb7dc3e62, 0x7f10bdce, 0xf90a5c38, 0x0ff0443d, 0x606e6dc6, 0x60543a49, 0x5727c148, 0x2be98a1d, 0x8ab41738, 0x20e1be24, 0xaf96da0f, 0x68458425, 0x99833be5, 0x600d457d, 0x282f9350, 0x8334b362, 0xd91d1120, 0x2b6d8da0, 0x642b1e31, 0x9c305a00, 0x52bce688, 0x1b03588a, 0xf7baefd5, 0x4142ed9c, 0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c, 0xee353783];

  sBox[3] = [0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb, 0x64ad8c57, 0x85510443, 0xfa020ed1, 0x7e287aff, 0xe60fb663, 0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63, 0x241e4adf, 0x28147f5f, 0x4fa2b8cd, 0xc9430040, 0x0cc32220, 0xfdd30b30, 0xc0a5374f, 0x1d2d00d9, 0x24147b15, 0xee4d111a, 0x0fca5167, 0x71ff904c, 0x2d195ffe, 0x1a05645f, 0x0c13fefe, 0x081b08ca, 0x05170121, 0x80530100, 0xe83e5efe, 0xac9af4f8, 0x7fe72701, 0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a, 0x7293ea25, 0xce84ffdf, 0xf5718801, 0x3dd64b04, 0xa26f263b, 0x7ed48400, 0x547eebe6, 0x446d4ca0, 0x6cf3d6f5, 0x2649abdf, 0xaea0c7f5, 0x36338cc1, 0x503f7e93, 0xd3772061, 0x11b638e1, 0x72500e03, 0xf80eb2bb, 0xabe0502e, 0xec8d77de, 0x57971e81, 0xe14f6746, 0xc9335400, 0x6920318f, 0x081dbb99, 0xffc304a5, 0x4d351805, 0x7f3d5ce3, 0xa6c866c6, 0x5d5bcca9, 0xdaec6fea, 0x9f926f91, 0x9f46222f, 0x3991467d, 0xa5bf6d8e, 0x1143c44f, 0x43958302, 0xd0214eeb, 0x022083b8, 0x3fb6180c, 0x18f8931e, 0x281658e6, 0x26486e3e, 0x8bd78a70, 0x7477e4c1, 0xb506e07c, 0xf32d0a25, 0x79098b02, 0xe4eabb81, 0x28123b23, 0x69dead38, 0x1574ca16, 0xdf871b62, 0x211c40b7, 0xa51a9ef9, 0x0014377b, 0x041e8ac8, 0x09114003, 0xbd59e4d2, 0xe3d156d5, 0x4fe876d5, 0x2f91a340, 0x557be8de, 0x00eae4a7, 0x0ce5c2ec, 0x4db4bba6, 0xe756bdff, 0xdd3369ac, 0xec17b035, 0x06572327, 0x99afc8b0, 0x56c8c391, 0x6b65811c, 0x5e146119, 0x6e85cb75, 0xbe07c002, 0xc2325577, 0x893ff4ec, 0x5bbfc92d, 0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24, 0x20c763ef, 0xc366a5fc, 0x9c382880, 0x0ace3205, 0xaac9548a, 0xeca1d7c7, 0x041afa32, 0x1d16625a, 0x6701902c, 0x9b757a54, 0x31d477f7, 0x9126b031, 0x36cc6fdb, 0xc70b8b46, 0xd9e66a48, 0x56e55a79, 0x026a4ceb, 0x52437eff, 0x2f8f76b4, 0x0df980a5, 0x8674cde3, 0xedda04eb, 0x17a9be04, 0x2c18f4df, 0xb7747f9d, 0xab2af7b4, 0xefc34d20, 0x2e096b7c, 0x1741a254, 0xe5b6a035, 0x213d42f6, 0x2c1c7c26, 0x61c2f50f, 0x6552daf9, 0xd2c231f8, 0x25130f69, 0xd8167fa2, 0x0418f2c8, 0x001a96a6, 0x0d1526ab, 0x63315c21, 0x5e0a72ec, 0x49bafefd, 0x187908d9, 0x8d0dbd86, 0x311170a7, 0x3e9b640c, 0xcc3e10d7, 0xd5cad3b6, 0x0caec388, 0xf73001e1, 0x6c728aff, 0x71eae2a1, 0x1f9af36e, 0xcfcbd12f, 0xc1de8417, 0xac07be6b, 0xcb44a1d8, 0x8b9b0f56, 0x013988c3, 0xb1c52fca, 0xb4be31cd, 0xd8782806, 0x12a3a4e2, 0x6f7de532, 0x58fd7eb6, 0xd01ee900, 0x24adffc2, 0xf4990fc5, 0x9711aac5, 0x001d7b95, 0x82e5e7d2, 0x109873f6, 0x00613096, 0xc32d9521, 0xada121ff, 0x29908415, 0x7fbb977f, 0xaf9eb3db, 0x29c9ed2a, 0x5ce2a465, 0xa730f32c, 0xd0aa3fe8, 0x8a5cc091, 0xd49e2ce7, 0x0ce454a9, 0xd60acd86, 0x015f1919, 0x77079103, 0xdea03af6, 0x78a8565e, 0xdee356df, 0x21f05cbe, 0x8b75e387, 0xb3c50651, 0xb8a5c3ef, 0xd8eeb6d2, 0xe523be77, 0xc2154529, 0x2f69efdf, 0xafe67afb, 0xf470c4b2, 0xf3e0eb5b, 0xd6cc9876, 0x39e4460c, 0x1fda8538, 0x1987832f, 0xca007367, 0xa99144f8, 0x296b299e, 0x492fc295, 0x9266beab, 0xb5676e69, 0x9bd3ddda, 0xdf7e052f, 0xdb25701c, 0x1b5e51ee, 0xf65324e6, 0x6afce36c, 0x0316cc04, 0x8644213e, 0xb7dc59d0, 0x7965291f, 0xccd6fd43, 0x41823979, 0x932bcdf6, 0xb657c34d, 0x4edfd282, 0x7ae5290c, 0x3cb9536b, 0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1, 0x0aef7ed2];

  sBox[4] = [0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff, 0x1dd358f5, 0x44dd9d44, 0x1731167f, 0x08fbf1fa, 0xe7f511cc, 0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a, 0x69befd7a, 0xe6a2e77f, 0xf0c720cd, 0xc4494816, 0xccf5c180, 0x38851640, 0x15b0a848, 0xe68b18cb, 0x4caadeff, 0x5f480a01, 0x0412b2aa, 0x259814fc, 0x41d0efe2, 0x4e40b48d, 0x248eb6fb, 0x8dba1cfe, 0x41a99b02, 0x1a550a04, 0xba8f65cb, 0x7251f4e7, 0x95a51725, 0xc106ecd7, 0x97a5980a, 0xc539b9aa, 0x4d79fe6a, 0xf2f3f763, 0x68af8040, 0xed0c9e56, 0x11b4958b, 0xe1eb5a88, 0x8709e6b0, 0xd7e07156, 0x4e29fea7, 0x6366e52d, 0x02d1c000, 0xc4ac8e05, 0x9377f571, 0x0c05372a, 0x578535f2, 0x2261be02, 0xd642a0c9, 0xdf13a280, 0x74b55bd2, 0x682199c0, 0xd421e5ec, 0x53fb3ce8, 0xc8adedb3, 0x28a87fc9, 0x3d959981, 0x5c1ff900, 0xfe38d399, 0x0c4eff0b, 0x062407ea, 0xaa2f4fb1, 0x4fb96976, 0x90c79505, 0xb0a8a774, 0xef55a1ff, 0xe59ca2c2, 0xa6b62d27, 0xe66a4263, 0xdf65001f, 0x0ec50966, 0xdfdd55bc, 0x29de0655, 0x911e739a, 0x17af8975, 0x32c7911c, 0x89f89468, 0x0d01e980, 0x524755f4, 0x03b63cc9, 0x0cc844b2, 0xbcf3f0aa, 0x87ac36e9, 0xe53a7426, 0x01b3d82b, 0x1a9e7449, 0x64ee2d7e, 0xcddbb1da, 0x01c94910, 0xb868bf80, 0x0d26f3fd, 0x9342ede7, 0x04a5c284, 0x636737b6, 0x50f5b616, 0xf24766e3, 0x8eca36c1, 0x136e05db, 0xfef18391, 0xfb887a37, 0xd6e7f7d4, 0xc7fb7dc9, 0x3063fcdf, 0xb6f589de, 0xec2941da, 0x26e46695, 0xb7566419, 0xf654efc5, 0xd08d58b7, 0x48925401, 0xc1bacb7f, 0xe5ff550f, 0xb6083049, 0x5bb5d0e8, 0x87d72e5a, 0xab6a6ee1, 0x223a66ce, 0xc62bf3cd, 0x9e0885f9, 0x68cb3e47, 0x086c010f, 0xa21de820, 0xd18b69de, 0xf3f65777, 0xfa02c3f6, 0x407edac3, 0xcbb3d550, 0x1793084d, 0xb0d70eba, 0x0ab378d5, 0xd951fb0c, 0xded7da56, 0x4124bbe4, 0x94ca0b56, 0x0f5755d1, 0xe0e1e56e, 0x6184b5be, 0x580a249f, 0x94f74bc0, 0xe327888e, 0x9f7b5561, 0xc3dc0280, 0x05687715, 0x646c6bd7, 0x44904db3, 0x66b4f0a3, 0xc0f1648a, 0x697ed5af, 0x49e92ff6, 0x309e374f, 0x2cb6356a, 0x85808573, 0x4991f840, 0x76f0ae02, 0x083be84d, 0x28421c9a, 0x44489406, 0x736e4cb8, 0xc1092910, 0x8bc95fc6, 0x7d869cf4, 0x134f616f, 0x2e77118d, 0xb31b2be1, 0xaa90b472, 0x3ca5d717, 0x7d161bba, 0x9cad9010, 0xaf462ba2, 0x9fe459d2, 0x45d34559, 0xd9f2da13, 0xdbc65487, 0xf3e4f94e, 0x176d486f, 0x097c13ea, 0x631da5c7, 0x445f7382, 0x175683f4, 0xcdc66a97, 0x70be0288, 0xb3cdcf72, 0x6e5dd2f3, 0x20936079, 0x459b80a5, 0xbe60e2db, 0xa9c23101, 0xeba5315c, 0x224e42f2, 0x1c5c1572, 0xf6721b2c, 0x1ad2fff3, 0x8c25404e, 0x324ed72f, 0x4067b7fd, 0x0523138e, 0x5ca3bc78, 0xdc0fd66e, 0x75922283, 0x784d6b17, 0x58ebb16e, 0x44094f85, 0x3f481d87, 0xfcfeae7b, 0x77b5ff76, 0x8c2302bf, 0xaaf47556, 0x5f46b02a, 0x2b092801, 0x3d38f5f7, 0x0ca81f36, 0x52af4a8a, 0x66d5e7c0, 0xdf3b0874, 0x95055110, 0x1b5ad7a8, 0xf61ed5ad, 0x6cf6e479, 0x20758184, 0xd0cefa65, 0x88f7be58, 0x4a046826, 0x0ff6f8f3, 0xa09c7f70, 0x5346aba0, 0x5ce96c28, 0xe176eda3, 0x6bac307f, 0x376829d2, 0x85360fa9, 0x17e3fe2a, 0x24b79767, 0xf5a96b20, 0xd6cd2595, 0x68ff1ebf, 0x7555442c, 0xf19f06be, 0xf9e0659a, 0xeeb9491d, 0x34010718, 0xbb30cab8, 0xe822fe15, 0x88570983, 0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08, 0xefe9e7d4];

  sBox[5] = [0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7, 0x016843b4, 0xeced5cbc, 0x325553ac, 0xbf9f0960, 0xdfa1e2ed, 0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732, 0x8989b138, 0x33f14961, 0xc01937bd, 0xf506c6da, 0xe4625e7e, 0xa308ea99, 0x4e23e33c, 0x79cbd7cc, 0x48a14367, 0xa3149619, 0xfec94bd5, 0xa114174a, 0xeaa01866, 0xa084db2d, 0x09a8486f, 0xa888614a, 0x2900af98, 0x01665991, 0xe1992863, 0xc8f30c60, 0x2e78ef3c, 0xd0d51932, 0xcf0fec14, 0xf7ca07d2, 0xd0a82072, 0xfd41197e, 0x9305a6b0, 0xe86be3da, 0x74bed3cd, 0x372da53c, 0x4c7f4448, 0xdab5d440, 0x6dba0ec3, 0x083919a7, 0x9fbaeed9, 0x49dbcfb0, 0x4e670c53, 0x5c3d9c01, 0x64bdb941, 0x2c0e636a, 0xba7dd9cd, 0xea6f7388, 0xe70bc762, 0x35f29adb, 0x5c4cdd8d, 0xf0d48d8c, 0xb88153e2, 0x08a19866, 0x1ae2eac8, 0x284caf89, 0xaa928223, 0x9334be53, 0x3b3a21bf, 0x16434be3, 0x9aea3906, 0xefe8c36e, 0xf890cdd9, 0x80226dae, 0xc340a4a3, 0xdf7e9c09, 0xa694a807, 0x5b7c5ecc, 0x221db3a6, 0x9a69a02f, 0x68818a54, 0xceb2296f, 0x53c0843a, 0xfe893655, 0x25bfe68a, 0xb4628abc, 0xcf222ebf, 0x25ac6f48, 0xa9a99387, 0x53bddb65, 0xe76ffbe7, 0xe967fd78, 0x0ba93563, 0x8e342bc1, 0xe8a11be9, 0x4980740d, 0xc8087dfc, 0x8de4bf99, 0xa11101a0, 0x7fd37975, 0xda5a26c0, 0xe81f994f, 0x9528cd89, 0xfd339fed, 0xb87834bf, 0x5f04456d, 0x22258698, 0xc9c4c83b, 0x2dc156be, 0x4f628daa, 0x57f55ec5, 0xe2220abe, 0xd2916ebf, 0x4ec75b95, 0x24f2c3c0, 0x42d15d99, 0xcd0d7fa0, 0x7b6e27ff, 0xa8dc8af0, 0x7345c106, 0xf41e232f, 0x35162386, 0xe6ea8926, 0x3333b094, 0x157ec6f2, 0x372b74af, 0x692573e4, 0xe9a9d848, 0xf3160289, 0x3a62ef1d, 0xa787e238, 0xf3a5f676, 0x74364853, 0x20951063, 0x4576698d, 0xb6fad407, 0x592af950, 0x36f73523, 0x4cfb6e87, 0x7da4cec0, 0x6c152daa, 0xcb0396a8, 0xc50dfe5d, 0xfcd707ab, 0x0921c42f, 0x89dff0bb, 0x5fe2be78, 0x448f4f33, 0x754613c9, 0x2b05d08d, 0x48b9d585, 0xdc049441, 0xc8098f9b, 0x7dede786, 0xc39a3373, 0x42410005, 0x6a091751, 0x0ef3c8a6, 0x890072d6, 0x28207682, 0xa9a9f7be, 0xbf32679d, 0xd45b5b75, 0xb353fd00, 0xcbb0e358, 0x830f220a, 0x1f8fb214, 0xd372cf08, 0xcc3c4a13, 0x8cf63166, 0x061c87be, 0x88c98f88, 0x6062e397, 0x47cf8e7a, 0xb6c85283, 0x3cc2acfb, 0x3fc06976, 0x4e8f0252, 0x64d8314d, 0xda3870e3, 0x1e665459, 0xc10908f0, 0x513021a5, 0x6c5b68b7, 0x822f8aa0, 0x3007cd3e, 0x74719eef, 0xdc872681, 0x073340d4, 0x7e432fd9, 0x0c5ec241, 0x8809286c, 0xf592d891, 0x08a930f6, 0x957ef305, 0xb7fbffbd, 0xc266e96f, 0x6fe4ac98, 0xb173ecc0, 0xbc60b42a, 0x953498da, 0xfba1ae12, 0x2d4bd736, 0x0f25faab, 0xa4f3fceb, 0xe2969123, 0x257f0c3d, 0x9348af49, 0x361400bc, 0xe8816f4a, 0x3814f200, 0xa3f94043, 0x9c7a54c2, 0xbc704f57, 0xda41e7f9, 0xc25ad33a, 0x54f4a084, 0xb17f5505, 0x59357cbe, 0xedbd15c8, 0x7f97c5ab, 0xba5ac7b5, 0xb6f6deaf, 0x3a479c3a, 0x5302da25, 0x653d7e6a, 0x54268d49, 0x51a477ea, 0x5017d55b, 0xd7d25d88, 0x44136c76, 0x0404a8c8, 0xb8e5a121, 0xb81a928a, 0x60ed5869, 0x97c55b96, 0xeaec991b, 0x29935913, 0x01fdb7f1, 0x088e8dfa, 0x9ab6f6f5, 0x3b4cbf9f, 0x4a5de3ab, 0xe6051d35, 0xa0e1d855, 0xd36b4cf1, 0xf544edeb, 0xb0e93524, 0xbebb8fbd, 0xa2d762cf, 0x49c92f54, 0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd, 0xd675cf2f];

  sBox[6] = [0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f, 0xab9bc912, 0xde6008a1, 0x2028da1f, 0x0227bce7, 0x4d642916, 0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2, 0xb28707de, 0xa05fbcf6, 0xcd4181e9, 0xe150210c, 0xe24ef1bd, 0xb168c381, 0xfde4e789, 0x5c79b0d8, 0x1e8bfd43, 0x4d495001, 0x38be4341, 0x913cee1d, 0x92a79c3f, 0x089766be, 0xbaeeadf4, 0x1286becf, 0xb6eacb19, 0x2660c200, 0x7565bde4, 0x64241f7a, 0x8248dca9, 0xc3b3ad66, 0x28136086, 0x0bd8dfa8, 0x356d1cf2, 0x107789be, 0xb3b2e9ce, 0x0502aa8f, 0x0bc0351e, 0x166bf52a, 0xeb12ff82, 0xe3486911, 0xd34d7516, 0x4e7b3aff, 0x5f43671b, 0x9cf6e037, 0x4981ac83, 0x334266ce, 0x8c9341b7, 0xd0d854c0, 0xcb3a6c88, 0x47bc2829, 0x4725ba37, 0xa66ad22b, 0x7ad61f1e, 0x0c5cbafa, 0x4437f107, 0xb6e79962, 0x42d2d816, 0x0a961288, 0xe1a5c06e, 0x13749e67, 0x72fc081a, 0xb1d139f7, 0xf9583745, 0xcf19df58, 0xbec3f756, 0xc06eba30, 0x07211b24, 0x45c28829, 0xc95e317f, 0xbc8ec511, 0x38bc46e9, 0xc6e6fa14, 0xbae8584a, 0xad4ebc46, 0x468f508b, 0x7829435f, 0xf124183b, 0x821dba9f, 0xaff60ff4, 0xea2c4e6d, 0x16e39264, 0x92544a8b, 0x009b4fc3, 0xaba68ced, 0x9ac96f78, 0x06a5b79a, 0xb2856e6e, 0x1aec3ca9, 0xbe838688, 0x0e0804e9, 0x55f1be56, 0xe7e5363b, 0xb3a1f25d, 0xf7debb85, 0x61fe033c, 0x16746233, 0x3c034c28, 0xda6d0c74, 0x79aac56c, 0x3ce4e1ad, 0x51f0c802, 0x98f8f35a, 0x1626a49f, 0xeed82b29, 0x1d382fe3, 0x0c4fb99a, 0xbb325778, 0x3ec6d97b, 0x6e77a6a9, 0xcb658b5c, 0xd45230c7, 0x2bd1408b, 0x60c03eb7, 0xb9068d78, 0xa33754f4, 0xf430c87d, 0xc8a71302, 0xb96d8c32, 0xebd4e7be, 0xbe8b9d2d, 0x7979fb06, 0xe7225308, 0x8b75cf77, 0x11ef8da4, 0xe083c858, 0x8d6b786f, 0x5a6317a6, 0xfa5cf7a0, 0x5dda0033, 0xf28ebfb0, 0xf5b9c310, 0xa0eac280, 0x08b9767a, 0xa3d9d2b0, 0x79d34217, 0x021a718d, 0x9ac6336a, 0x2711fd60, 0x438050e3, 0x069908a8, 0x3d7fedc4, 0x826d2bef, 0x4eeb8476, 0x488dcf25, 0x36c9d566, 0x28e74e41, 0xc2610aca, 0x3d49a9cf, 0xbae3b9df, 0xb65f8de6, 0x92aeaf64, 0x3ac7d5e6, 0x9ea80509, 0xf22b017d, 0xa4173f70, 0xdd1e16c3, 0x15e0d7f9, 0x50b1b887, 0x2b9f4fd5, 0x625aba82, 0x6a017962, 0x2ec01b9c, 0x15488aa9, 0xd716e740, 0x40055a2c, 0x93d29a22, 0xe32dbf9a, 0x058745b9, 0x3453dc1e, 0xd699296e, 0x496cff6f, 0x1c9f4986, 0xdfe2ed07, 0xb87242d1, 0x19de7eae, 0x053e561a, 0x15ad6f8c, 0x66626c1c, 0x7154c24c, 0xea082b2a, 0x93eb2939, 0x17dcb0f0, 0x58d4f2ae, 0x9ea294fb, 0x52cf564c, 0x9883fe66, 0x2ec40581, 0x763953c3, 0x01d6692e, 0xd3a0c108, 0xa1e7160e, 0xe4f2dfa6, 0x693ed285, 0x74904698, 0x4c2b0edd, 0x4f757656, 0x5d393378, 0xa132234f, 0x3d321c5d, 0xc3f5e194, 0x4b269301, 0xc79f022f, 0x3c997e7e, 0x5e4f9504, 0x3ffafbbd, 0x76f7ad0e, 0x296693f4, 0x3d1fce6f, 0xc61e45be, 0xd3b5ab34, 0xf72bf9b7, 0x1b0434c0, 0x4e72b567, 0x5592a33d, 0xb5229301, 0xcfd2a87f, 0x60aeb767, 0x1814386b, 0x30bcc33d, 0x38a0c07d, 0xfd1606f2, 0xc363519b, 0x589dd390, 0x5479f8e6, 0x1cb8d647, 0x97fd61a9, 0xea7759f4, 0x2d57539d, 0x569a58cf, 0xe84e63ad, 0x462e1b78, 0x6580f87e, 0xf3817914, 0x91da55f4, 0x40a230f3, 0xd1988f35, 0xb6e318d2, 0x3ffa50bc, 0x3d40f021, 0xc3c0bdae, 0x4958c24c, 0x518f36b2, 0x84b1d370, 0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b, 0x954b8aa3];

  sBox[7] = [0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7, 0xe6c1121b, 0x0e241600, 0x052ce8b5, 0x11a9cfb0, 0xe5952f11, 0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a, 0x37ddddfc, 0xde9adeb1, 0x0a0cc32c, 0xbe197029, 0x84a00940, 0xbb243a0f, 0xb4d137cf, 0xb44e79f0, 0x049eedfd, 0x0b15a15d, 0x480d3168, 0x8bbbde5a, 0x669ded42, 0xc7ece831, 0x3f8f95e7, 0x72df191b, 0x7580330d, 0x94074251, 0x5c7dcdfa, 0xabbe6d63, 0xaa402164, 0xb301d40a, 0x02e7d1ca, 0x53571dae, 0x7a3182a2, 0x12a8ddec, 0xfdaa335d, 0x176f43e8, 0x71fb46d4, 0x38129022, 0xce949ad4, 0xb84769ad, 0x965bd862, 0x82f3d055, 0x66fb9767, 0x15b80b4e, 0x1d5b47a0, 0x4cfde06f, 0xc28ec4b8, 0x57e8726e, 0x647a78fc, 0x99865d44, 0x608bd593, 0x6c200e03, 0x39dc5ff6, 0x5d0b00a3, 0xae63aff2, 0x7e8bd632, 0x70108c0c, 0xbbd35049, 0x2998df04, 0x980cf42a, 0x9b6df491, 0x9e7edd53, 0x06918548, 0x58cb7e07, 0x3b74ef2e, 0x522fffb1, 0xd24708cc, 0x1c7e27cd, 0xa4eb215b, 0x3cf1d2e2, 0x19b47a38, 0x424f7618, 0x35856039, 0x9d17dee7, 0x27eb35e6, 0xc9aff67b, 0x36baf5b8, 0x09c467cd, 0xc18910b1, 0xe11dbf7b, 0x06cd1af8, 0x7170c608, 0x2d5e3354, 0xd4de495a, 0x64c6d006, 0xbcc0c62c, 0x3dd00db3, 0x708f8f34, 0x77d51b42, 0x264f620f, 0x24b8d2bf, 0x15c1b79e, 0x46a52564, 0xf8d7e54e, 0x3e378160, 0x7895cda5, 0x859c15a5, 0xe6459788, 0xc37bc75f, 0xdb07ba0c, 0x0676a3ab, 0x7f229b1e, 0x31842e7b, 0x24259fd7, 0xf8bef472, 0x835ffcb8, 0x6df4c1f2, 0x96f5b195, 0xfd0af0fc, 0xb0fe134c, 0xe2506d3d, 0x4f9b12ea, 0xf215f225, 0xa223736f, 0x9fb4c428, 0x25d04979, 0x34c713f8, 0xc4618187, 0xea7a6e98, 0x7cd16efc, 0x1436876c, 0xf1544107, 0xbedeee14, 0x56e9af27, 0xa04aa441, 0x3cf7c899, 0x92ecbae6, 0xdd67016d, 0x151682eb, 0xa842eedf, 0xfdba60b4, 0xf1907b75, 0x20e3030f, 0x24d8c29e, 0xe139673b, 0xefa63fb8, 0x71873054, 0xb6f2cf3b, 0x9f326442, 0xcb15a4cc, 0xb01a4504, 0xf1e47d8d, 0x844a1be5, 0xbae7dfdc, 0x42cbda70, 0xcd7dae0a, 0x57e85b7a, 0xd53f5af6, 0x20cf4d8c, 0xcea4d428, 0x79d130a4, 0x3486ebfb, 0x33d3cddc, 0x77853b53, 0x37effcb5, 0xc5068778, 0xe580b3e6, 0x4e68b8f4, 0xc5c8b37e, 0x0d809ea2, 0x398feb7c, 0x132a4f94, 0x43b7950e, 0x2fee7d1c, 0x223613bd, 0xdd06caa2, 0x37df932b, 0xc4248289, 0xacf3ebc3, 0x5715f6b7, 0xef3478dd, 0xf267616f, 0xc148cbe4, 0x9052815e, 0x5e410fab, 0xb48a2465, 0x2eda7fa4, 0xe87b40e4, 0xe98ea084, 0x5889e9e1, 0xefd390fc, 0xdd07d35b, 0xdb485694, 0x38d7e5b2, 0x57720101, 0x730edebc, 0x5b643113, 0x94917e4f, 0x503c2fba, 0x646f1282, 0x7523d24a, 0xe0779695, 0xf9c17a8f, 0x7a5b2121, 0xd187b896, 0x29263a4d, 0xba510cdf, 0x81f47c9f, 0xad1163ed, 0xea7b5965, 0x1a00726e, 0x11403092, 0x00da6d77, 0x4a0cdd61, 0xad1f4603, 0x605bdfb0, 0x9eedc364, 0x22ebe6a8, 0xcee7d28a, 0xa0e736a0, 0x5564a6b9, 0x10853209, 0xc7eb8f37, 0x2de705ca, 0x8951570f, 0xdf09822b, 0xbd691a6c, 0xaa12e4f2, 0x87451c0f, 0xe0f6a27a, 0x3ada4819, 0x4cf1764f, 0x0d771c2b, 0x67cdb156, 0x350d8384, 0x5938fa0f, 0x42399ef3, 0x36997b07, 0x0e84093d, 0x4aa93e61, 0x8360d87b, 0x1fa98b0c, 0x1149382c, 0xe97625a5, 0x0614d1b7, 0x0e25244b, 0x0c768347, 0x589e8d82, 0x0d2059d1, 0xa466bb1e, 0xf8da0a82, 0x04f19130, 0xba6e4ec0, 0x99265164, 0x1ee7230d, 0x50b2ad80, 0xeaee6801, 0x8db2a283, 0xea8bf59e];
}

function Cast5(key) {
  this.cast5 = new OpenpgpSymencCast5();
  this.cast5.setKey(key);

  this.encrypt = function (block) {
    return this.cast5.encrypt(block);
  };
}

Cast5.blockSize = Cast5.prototype.blockSize = 8;
Cast5.keySize = Cast5.prototype.keySize = 16;

exports.default = Cast5;

},{}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
//Paul Tero, July 2001
//http://www.tero.co.uk/des/
//
//Optimised for performance with large blocks by Michael Hayworth, November 2001
//http://www.netdealing.com
//
// Modified by Recurity Labs GmbH

//THIS SOFTWARE IS PROVIDED "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//SUCH DAMAGE.

//des
//this takes the key, the message, and whether to encrypt or decrypt

function des(keys, message, encrypt, mode, iv, padding) {
  //declaring this locally speeds things up a bit
  const spfunction1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];
  const spfunction2 = [-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000];
  const spfunction3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];
  const spfunction4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];
  const spfunction5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];
  const spfunction6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];
  const spfunction7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];
  const spfunction8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];

  //create the 16 or 48 subkeys we will need
  let m = 0;
  let i;
  let j;
  let temp;
  let right1;
  let right2;
  let left;
  let right;
  let looping;
  let cbcleft;
  let cbcleft2;
  let cbcright;
  let cbcright2;
  let endloop;
  let loopinc;
  let len = message.length;

  //set up the loops for single and triple des
  const iterations = keys.length === 32 ? 3 : 9; //single or triple des
  if (iterations === 3) {
    looping = encrypt ? [0, 32, 2] : [30, -2, -2];
  } else {
    looping = encrypt ? [0, 32, 2, 62, 30, -2, 64, 96, 2] : [94, 62, -2, 32, 64, 2, 30, -2, -2];
  }

  //pad the message depending on the padding parameter
  //only add padding if encrypting - note that you need to use the same padding option for both encrypt and decrypt
  if (encrypt) {
    message = des_addPadding(message, padding);
    len = message.length;
  }

  //store the result here
  let result = new Uint8Array(len);
  let k = 0;

  if (mode === 1) {
    //CBC mode
    cbcleft = iv[m++] << 24 | iv[m++] << 16 | iv[m++] << 8 | iv[m++];
    cbcright = iv[m++] << 24 | iv[m++] << 16 | iv[m++] << 8 | iv[m++];
    m = 0;
  }

  //loop through each 64 bit chunk of the message
  while (m < len) {
    left = message[m++] << 24 | message[m++] << 16 | message[m++] << 8 | message[m++];
    right = message[m++] << 24 | message[m++] << 16 | message[m++] << 8 | message[m++];

    //for Cipher Block Chaining mode, xor the message with the previous result
    if (mode === 1) {
      if (encrypt) {
        left ^= cbcleft;
        right ^= cbcright;
      } else {
        cbcleft2 = cbcleft;
        cbcright2 = cbcright;
        cbcleft = left;
        cbcright = right;
      }
    }

    //first each 64 but chunk of the message must be permuted according to IP
    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= temp;
    left ^= temp << 4;
    temp = (left >>> 16 ^ right) & 0x0000ffff;
    right ^= temp;
    left ^= temp << 16;
    temp = (right >>> 2 ^ left) & 0x33333333;
    left ^= temp;
    right ^= temp << 2;
    temp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= temp;
    right ^= temp << 8;
    temp = (left >>> 1 ^ right) & 0x55555555;
    right ^= temp;
    left ^= temp << 1;

    left = left << 1 | left >>> 31;
    right = right << 1 | right >>> 31;

    //do this either 1 or 3 times for each chunk of the message
    for (j = 0; j < iterations; j += 3) {
      endloop = looping[j + 1];
      loopinc = looping[j + 2];
      //now go through and perform the encryption or decryption
      for (i = looping[j]; i !== endloop; i += loopinc) {
        //for efficiency
        right1 = right ^ keys[i];
        right2 = (right >>> 4 | right << 28) ^ keys[i + 1];
        //the result is attained by passing these bytes through the S selection functions
        temp = left;
        left = right;
        right = temp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);
      }
      temp = left;
      left = right;
      right = temp; //unreverse left and right
    } //for either 1 or 3 iterations

    //move then each one bit to the right
    left = left >>> 1 | left << 31;
    right = right >>> 1 | right << 31;

    //now perform IP-1, which is IP in the opposite direction
    temp = (left >>> 1 ^ right) & 0x55555555;
    right ^= temp;
    left ^= temp << 1;
    temp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= temp;
    right ^= temp << 8;
    temp = (right >>> 2 ^ left) & 0x33333333;
    left ^= temp;
    right ^= temp << 2;
    temp = (left >>> 16 ^ right) & 0x0000ffff;
    right ^= temp;
    left ^= temp << 16;
    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= temp;
    left ^= temp << 4;

    //for Cipher Block Chaining mode, xor the message with the previous result
    if (mode === 1) {
      if (encrypt) {
        cbcleft = left;
        cbcright = right;
      } else {
        left ^= cbcleft2;
        right ^= cbcright2;
      }
    }

    result[k++] = left >>> 24;
    result[k++] = left >>> 16 & 0xff;
    result[k++] = left >>> 8 & 0xff;
    result[k++] = left & 0xff;
    result[k++] = right >>> 24;
    result[k++] = right >>> 16 & 0xff;
    result[k++] = right >>> 8 & 0xff;
    result[k++] = right & 0xff;
  } //for every 8 characters, or 64 bits in the message

  //only remove padding if decrypting - note that you need to use the same padding option for both encrypt and decrypt
  if (!encrypt) {
    result = des_removePadding(result, padding);
  }

  return result;
} //end of des


//des_createKeys
//this takes as input a 64 bit key (even though only 56 bits are used)
//as an array of 2 integers, and returns 16 48 bit keys

function des_createKeys(key) {
  //declaring this locally speeds things up a bit
  const pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204];
  const pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101];
  const pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808];
  const pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000];
  const pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010];
  const pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420];
  const pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002];
  const pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800];
  const pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002];
  const pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408];
  const pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020];
  const pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200];
  const pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010];
  const pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105];

  //how many iterations (1 for des, 3 for triple des)
  const iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
  //stores the return keys
  const keys = new Array(32 * iterations);
  //now define the left shifts which need to be done
  const shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
  //other variables
  let lefttemp;
  let righttemp;
  let m = 0;
  let n = 0;
  let temp;

  for (let j = 0; j < iterations; j++) {
    //either 1 or 3 iterations
    let left = key[m++] << 24 | key[m++] << 16 | key[m++] << 8 | key[m++];
    let right = key[m++] << 24 | key[m++] << 16 | key[m++] << 8 | key[m++];

    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= temp;
    left ^= temp << 4;
    temp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= temp;
    right ^= temp << -16;
    temp = (left >>> 2 ^ right) & 0x33333333;
    right ^= temp;
    left ^= temp << 2;
    temp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= temp;
    right ^= temp << -16;
    temp = (left >>> 1 ^ right) & 0x55555555;
    right ^= temp;
    left ^= temp << 1;
    temp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= temp;
    right ^= temp << 8;
    temp = (left >>> 1 ^ right) & 0x55555555;
    right ^= temp;
    left ^= temp << 1;

    //the right side needs to be shifted and to get the last four bits of the left side
    temp = left << 8 | right >>> 20 & 0x000000f0;
    //left needs to be put upside down
    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;
    right = temp;

    //now go through and perform these shifts on the left and right keys
    for (let i = 0; i < shifts.length; i++) {
      //shift the keys either one or two bits to the left
      if (shifts[i]) {
        left = left << 2 | left >>> 26;
        right = right << 2 | right >>> 26;
      } else {
        left = left << 1 | left >>> 27;
        right = right << 1 | right >>> 27;
      }
      left &= -0xf;
      right &= -0xf;

      //now apply PC-2, in such a way that E is easier when encrypting or decrypting
      //this conversion will look like PC-2 except only the last 6 bits of each byte are used
      //rather than 48 consecutive bits and the order of lines will be according to
      //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7
      lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];
      righttemp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];
      temp = (righttemp >>> 16 ^ lefttemp) & 0x0000ffff;
      keys[n++] = lefttemp ^ temp;
      keys[n++] = righttemp ^ temp << 16;
    }
  } //for each iterations
  //return the keys we've created
  return keys;
} //end of des_createKeys


function des_addPadding(message, padding) {
  const padLength = 8 - message.length % 8;

  let pad;
  if (padding === 2 && padLength < 8) {
    //pad the message with spaces
    pad = " ".charCodeAt(0);
  } else if (padding === 1) {
    //PKCS7 padding
    pad = padLength;
  } else if (!padding && padLength < 8) {
    //pad the message out with null bytes
    pad = 0;
  } else if (padLength === 8) {
    return message;
  } else {
    throw new Error('des: invalid padding');
  }

  const paddedMessage = new Uint8Array(message.length + padLength);
  for (let i = 0; i < message.length; i++) {
    paddedMessage[i] = message[i];
  }
  for (let j = 0; j < padLength; j++) {
    paddedMessage[message.length + j] = pad;
  }

  return paddedMessage;
}

function des_removePadding(message, padding) {
  let padLength = null;
  let pad;
  if (padding === 2) {
    // space padded
    pad = " ".charCodeAt(0);
  } else if (padding === 1) {
    // PKCS7
    padLength = message[message.length - 1];
  } else if (!padding) {
    // null padding
    pad = 0;
  } else {
    throw new Error('des: invalid padding');
  }

  if (!padLength) {
    padLength = 1;
    while (message[message.length - padLength] === pad) {
      padLength++;
    }
    padLength--;
  }

  return message.subarray(0, message.length - padLength);
}

// added by Recurity Labs

function TripleDES(key) {
  this.key = [];

  for (let i = 0; i < 3; i++) {
    this.key.push(new Uint8Array(key.subarray(i * 8, i * 8 + 8)));
  }

  this.encrypt = function (block) {
    return des(des_createKeys(this.key[2]), des(des_createKeys(this.key[1]), des(des_createKeys(this.key[0]), block, true, 0, null, null), false, 0, null, null), true, 0, null, null);
  };
}

TripleDES.keySize = TripleDES.prototype.keySize = 24;
TripleDES.blockSize = TripleDES.prototype.blockSize = 8;

// This is "original" DES

function DES(key) {
  this.key = key;

  this.encrypt = function (block, padding) {
    const keys = des_createKeys(this.key);
    return des(keys, block, true, 0, null, padding);
  };

  this.decrypt = function (block, padding) {
    const keys = des_createKeys(this.key);
    return des(keys, block, false, 0, null, padding);
  };
}

exports.default = { DES, TripleDES };

},{}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _aes = require('./aes');

var _aes2 = _interopRequireDefault(_aes);

var _des = require('./des.js');

var _des2 = _interopRequireDefault(_des);

var _cast = require('./cast5');

var _cast2 = _interopRequireDefault(_cast);

var _twofish = require('./twofish');

var _twofish2 = _interopRequireDefault(_twofish);

var _blowfish = require('./blowfish');

var _blowfish2 = _interopRequireDefault(_blowfish);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  /**
   * AES-128 encryption and decryption (ID 7)
   * @function
   * @param {String} key 128-bit key
   * @see {@link https://github.com/asmcrypto/asmcrypto.js|asmCrypto}
   * @see {@link https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf|NIST FIPS-197}
   * @returns {Object}
   * @requires asmcrypto.js
   */
  aes128: (0, _aes2.default)(128),
  /**
   * AES-128 Block Cipher (ID 8)
   * @function
   * @param {String} key 192-bit key
   * @see {@link https://github.com/asmcrypto/asmcrypto.js|asmCrypto}
   * @see {@link https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf|NIST FIPS-197}
   * @returns {Object}
   * @requires asmcrypto.js
   */
  aes192: (0, _aes2.default)(192),
  /**
   * AES-128 Block Cipher (ID 9)
   * @function
   * @param {String} key 256-bit key
   * @see {@link https://github.com/asmcrypto/asmcrypto.js|asmCrypto}
   * @see {@link https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf|NIST FIPS-197}
   * @returns {Object}
   * @requires asmcrypto.js
   */
  aes256: (0, _aes2.default)(256),
  // Not in OpenPGP specifications
  des: _des2.default.DES,
  /**
   * Triple DES Block Cipher (ID 2)
   * @function
   * @param {String} key 192-bit key
   * @see {@link https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-67r2.pdf|NIST SP 800-67}
   * @returns {Object}
   */
  tripledes: _des2.default.TripleDES,
  '3des': _des2.default.TripleDES,
  /**
   * CAST-128 Block Cipher (ID 3)
   * @function
   * @param {String} key 128-bit key
   * @see {@link https://tools.ietf.org/html/rfc2144|The CAST-128 Encryption Algorithm}
   * @returns {Object}
   */
  cast5: _cast2.default,
  /**
   * Twofish Block Cipher (ID 10)
   * @function
   * @param {String} key 256-bit key
   * @see {@link https://tools.ietf.org/html/rfc4880#ref-TWOFISH|TWOFISH}
   * @returns {Object}
   */
  twofish: _twofish2.default,
  /**
   * Blowfish Block Cipher (ID 4)
   * @function
   * @param {String} key 128-bit key
   * @see {@link https://tools.ietf.org/html/rfc4880#ref-BLOWFISH|BLOWFISH}
   * @returns {Object}
   */
  blowfish: _blowfish2.default,
  /**
   * Not implemented
   * @function
   * @throws {Error}
   */
  idea: function idea() {
    throw new Error('IDEA symmetric-key algorithm not implemented');
  }
}; /**
    * @fileoverview Symmetric cryptography functions
    * @requires crypto/cipher/aes
    * @requires crypto/cipher/des
    * @requires crypto/cipher/cast5
    * @requires crypto/cipher/twofish
    * @requires crypto/cipher/blowfish
    * @module crypto/cipher
    */

},{"./aes":83,"./blowfish":84,"./cast5":85,"./des.js":86,"./twofish":88}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* eslint-disable no-mixed-operators, no-fallthrough */

/* Modified by Recurity Labs GmbH
 *
 * Cipher.js
 * A block-cipher algorithm implementation on JavaScript
 * See Cipher.readme.txt for further information.
 *
 * Copyright(c) 2009 Atsushi Oka [ http://oka.nu/ ]
 * This script file is distributed under the LGPL
 *
 * ACKNOWLEDGMENT
 *
 *     The main subroutines are written by Michiel van Everdingen.
 *
 *     Michiel van Everdingen
 *     http://home.versatel.nl/MAvanEverdingen/index.html
 *
 *     All rights for these routines are reserved to Michiel van Everdingen.
 *
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Math
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const MAXINT = 0xFFFFFFFF;

function rotw(w, n) {
  return (w << n | w >>> 32 - n) & MAXINT;
}

function getW(a, i) {
  return a[i] | a[i + 1] << 8 | a[i + 2] << 16 | a[i + 3] << 24;
}

function setW(a, i, w) {
  a.splice(i, 4, w & 0xFF, w >>> 8 & 0xFF, w >>> 16 & 0xFF, w >>> 24 & 0xFF);
}

function getB(x, n) {
  return x >>> n * 8 & 0xFF;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Twofish
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function createTwofish() {
  //
  let keyBytes = null;
  let dataBytes = null;
  let dataOffset = -1;
  // var dataLength = -1;
  // var idx2 = -1;
  //

  let tfsKey = [];
  let tfsM = [[], [], [], []];

  function tfsInit(key) {
    keyBytes = key;
    let i;
    let a;
    let b;
    let c;
    let d;
    const meKey = [];
    const moKey = [];
    const inKey = [];
    let kLen;
    const sKey = [];
    let f01;
    let f5b;
    let fef;

    const q0 = [[8, 1, 7, 13, 6, 15, 3, 2, 0, 11, 5, 9, 14, 12, 10, 4], [2, 8, 11, 13, 15, 7, 6, 14, 3, 1, 9, 4, 0, 10, 12, 5]];
    const q1 = [[14, 12, 11, 8, 1, 2, 3, 5, 15, 4, 10, 6, 7, 0, 9, 13], [1, 14, 2, 11, 4, 12, 3, 7, 6, 13, 10, 5, 15, 9, 0, 8]];
    const q2 = [[11, 10, 5, 14, 6, 13, 9, 0, 12, 8, 15, 3, 2, 4, 7, 1], [4, 12, 7, 5, 1, 6, 9, 10, 0, 14, 13, 8, 2, 11, 3, 15]];
    const q3 = [[13, 7, 15, 4, 1, 2, 6, 14, 9, 11, 3, 0, 8, 5, 12, 10], [11, 9, 5, 1, 12, 3, 13, 14, 6, 4, 7, 15, 2, 0, 8, 10]];
    const ror4 = [0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15];
    const ashx = [0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 5, 14, 7];
    const q = [[], []];
    const m = [[], [], [], []];

    function ffm5b(x) {
      return x ^ x >> 2 ^ [0, 90, 180, 238][x & 3];
    }

    function ffmEf(x) {
      return x ^ x >> 1 ^ x >> 2 ^ [0, 238, 180, 90][x & 3];
    }

    function mdsRem(p, q) {
      let i;
      let t;
      let u;
      for (i = 0; i < 8; i++) {
        t = q >>> 24;
        q = q << 8 & MAXINT | p >>> 24;
        p = p << 8 & MAXINT;
        u = t << 1;
        if (t & 128) {
          u ^= 333;
        }
        q ^= t ^ u << 16;
        u ^= t >>> 1;
        if (t & 1) {
          u ^= 166;
        }
        q ^= u << 24 | u << 8;
      }
      return q;
    }

    function qp(n, x) {
      const a = x >> 4;
      const b = x & 15;
      const c = q0[n][a ^ b];
      const d = q1[n][ror4[b] ^ ashx[a]];
      return q3[n][ror4[d] ^ ashx[c]] << 4 | q2[n][c ^ d];
    }

    function hFun(x, key) {
      let a = getB(x, 0);
      let b = getB(x, 1);
      let c = getB(x, 2);
      let d = getB(x, 3);
      switch (kLen) {
        case 4:
          a = q[1][a] ^ getB(key[3], 0);
          b = q[0][b] ^ getB(key[3], 1);
          c = q[0][c] ^ getB(key[3], 2);
          d = q[1][d] ^ getB(key[3], 3);
        case 3:
          a = q[1][a] ^ getB(key[2], 0);
          b = q[1][b] ^ getB(key[2], 1);
          c = q[0][c] ^ getB(key[2], 2);
          d = q[0][d] ^ getB(key[2], 3);
        case 2:
          a = q[0][q[0][a] ^ getB(key[1], 0)] ^ getB(key[0], 0);
          b = q[0][q[1][b] ^ getB(key[1], 1)] ^ getB(key[0], 1);
          c = q[1][q[0][c] ^ getB(key[1], 2)] ^ getB(key[0], 2);
          d = q[1][q[1][d] ^ getB(key[1], 3)] ^ getB(key[0], 3);
      }
      return m[0][a] ^ m[1][b] ^ m[2][c] ^ m[3][d];
    }

    keyBytes = keyBytes.slice(0, 32);
    i = keyBytes.length;
    while (i !== 16 && i !== 24 && i !== 32) {
      keyBytes[i++] = 0;
    }

    for (i = 0; i < keyBytes.length; i += 4) {
      inKey[i >> 2] = getW(keyBytes, i);
    }
    for (i = 0; i < 256; i++) {
      q[0][i] = qp(0, i);
      q[1][i] = qp(1, i);
    }
    for (i = 0; i < 256; i++) {
      f01 = q[1][i];
      f5b = ffm5b(f01);
      fef = ffmEf(f01);
      m[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);
      m[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);
      f01 = q[0][i];
      f5b = ffm5b(f01);
      fef = ffmEf(f01);
      m[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);
      m[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);
    }

    kLen = inKey.length / 2;
    for (i = 0; i < kLen; i++) {
      a = inKey[i + i];
      meKey[i] = a;
      b = inKey[i + i + 1];
      moKey[i] = b;
      sKey[kLen - i - 1] = mdsRem(a, b);
    }
    for (i = 0; i < 40; i += 2) {
      a = 0x1010101 * i;
      b = a + 0x1010101;
      a = hFun(a, meKey);
      b = rotw(hFun(b, moKey), 8);
      tfsKey[i] = a + b & MAXINT;
      tfsKey[i + 1] = rotw(a + 2 * b, 9);
    }
    for (i = 0; i < 256; i++) {
      a = b = c = d = i;
      switch (kLen) {
        case 4:
          a = q[1][a] ^ getB(sKey[3], 0);
          b = q[0][b] ^ getB(sKey[3], 1);
          c = q[0][c] ^ getB(sKey[3], 2);
          d = q[1][d] ^ getB(sKey[3], 3);
        case 3:
          a = q[1][a] ^ getB(sKey[2], 0);
          b = q[1][b] ^ getB(sKey[2], 1);
          c = q[0][c] ^ getB(sKey[2], 2);
          d = q[0][d] ^ getB(sKey[2], 3);
        case 2:
          tfsM[0][i] = m[0][q[0][q[0][a] ^ getB(sKey[1], 0)] ^ getB(sKey[0], 0)];
          tfsM[1][i] = m[1][q[0][q[1][b] ^ getB(sKey[1], 1)] ^ getB(sKey[0], 1)];
          tfsM[2][i] = m[2][q[1][q[0][c] ^ getB(sKey[1], 2)] ^ getB(sKey[0], 2)];
          tfsM[3][i] = m[3][q[1][q[1][d] ^ getB(sKey[1], 3)] ^ getB(sKey[0], 3)];
      }
    }
  }

  function tfsG0(x) {
    return tfsM[0][getB(x, 0)] ^ tfsM[1][getB(x, 1)] ^ tfsM[2][getB(x, 2)] ^ tfsM[3][getB(x, 3)];
  }

  function tfsG1(x) {
    return tfsM[0][getB(x, 3)] ^ tfsM[1][getB(x, 0)] ^ tfsM[2][getB(x, 1)] ^ tfsM[3][getB(x, 2)];
  }

  function tfsFrnd(r, blk) {
    let a = tfsG0(blk[0]);
    let b = tfsG1(blk[1]);
    blk[2] = rotw(blk[2] ^ a + b + tfsKey[4 * r + 8] & MAXINT, 31);
    blk[3] = rotw(blk[3], 1) ^ a + 2 * b + tfsKey[4 * r + 9] & MAXINT;
    a = tfsG0(blk[2]);
    b = tfsG1(blk[3]);
    blk[0] = rotw(blk[0] ^ a + b + tfsKey[4 * r + 10] & MAXINT, 31);
    blk[1] = rotw(blk[1], 1) ^ a + 2 * b + tfsKey[4 * r + 11] & MAXINT;
  }

  function tfsIrnd(i, blk) {
    let a = tfsG0(blk[0]);
    let b = tfsG1(blk[1]);
    blk[2] = rotw(blk[2], 1) ^ a + b + tfsKey[4 * i + 10] & MAXINT;
    blk[3] = rotw(blk[3] ^ a + 2 * b + tfsKey[4 * i + 11] & MAXINT, 31);
    a = tfsG0(blk[2]);
    b = tfsG1(blk[3]);
    blk[0] = rotw(blk[0], 1) ^ a + b + tfsKey[4 * i + 8] & MAXINT;
    blk[1] = rotw(blk[1] ^ a + 2 * b + tfsKey[4 * i + 9] & MAXINT, 31);
  }

  function tfsClose() {
    tfsKey = [];
    tfsM = [[], [], [], []];
  }

  function tfsEncrypt(data, offset) {
    dataBytes = data;
    dataOffset = offset;
    const blk = [getW(dataBytes, dataOffset) ^ tfsKey[0], getW(dataBytes, dataOffset + 4) ^ tfsKey[1], getW(dataBytes, dataOffset + 8) ^ tfsKey[2], getW(dataBytes, dataOffset + 12) ^ tfsKey[3]];
    for (let j = 0; j < 8; j++) {
      tfsFrnd(j, blk);
    }
    setW(dataBytes, dataOffset, blk[2] ^ tfsKey[4]);
    setW(dataBytes, dataOffset + 4, blk[3] ^ tfsKey[5]);
    setW(dataBytes, dataOffset + 8, blk[0] ^ tfsKey[6]);
    setW(dataBytes, dataOffset + 12, blk[1] ^ tfsKey[7]);
    dataOffset += 16;
    return dataBytes;
  }

  function tfsDecrypt(data, offset) {
    dataBytes = data;
    dataOffset = offset;
    const blk = [getW(dataBytes, dataOffset) ^ tfsKey[4], getW(dataBytes, dataOffset + 4) ^ tfsKey[5], getW(dataBytes, dataOffset + 8) ^ tfsKey[6], getW(dataBytes, dataOffset + 12) ^ tfsKey[7]];
    for (let j = 7; j >= 0; j--) {
      tfsIrnd(j, blk);
    }
    setW(dataBytes, dataOffset, blk[2] ^ tfsKey[0]);
    setW(dataBytes, dataOffset + 4, blk[3] ^ tfsKey[1]);
    setW(dataBytes, dataOffset + 8, blk[0] ^ tfsKey[2]);
    setW(dataBytes, dataOffset + 12, blk[1] ^ tfsKey[3]);
    dataOffset += 16;
  }

  // added by Recurity Labs

  function tfsFinal() {
    return dataBytes;
  }

  return {
    name: "twofish",
    blocksize: 128 / 8,
    open: tfsInit,
    close: tfsClose,
    encrypt: tfsEncrypt,
    decrypt: tfsDecrypt,
    // added by Recurity Labs
    finalize: tfsFinal
  };
}

// added by Recurity Labs

function TF(key) {
  this.tf = createTwofish();
  this.tf.open(Array.from(key), 0);

  this.encrypt = function (block) {
    return this.tf.encrypt(Array.from(block), 0);
  };
}

TF.keySize = TF.prototype.keySize = 32;
TF.blockSize = TF.prototype.blockSize = 16;

exports.default = TF;

},{}],89:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cbc = require('asmcrypto.js/dist_es5/aes/cbc');

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview This module implements AES-CMAC on top of
 * native AES-CBC using either the WebCrypto API or Node.js' crypto API.
 * @requires asmcrypto.js
 * @requires util
 * @module crypto/cmac
 */

const webCrypto = _util2.default.getWebCrypto();
const nodeCrypto = _util2.default.getNodeCrypto();
const Buffer = _util2.default.getNodeBuffer();

/**
 * This implementation of CMAC is based on the description of OMAC in
 * http://web.cs.ucdavis.edu/~rogaway/papers/eax.pdf. As per that
 * document:
 *
 * We have made a small modification to the OMAC algorithm as it was
 * originally presented, changing one of its two constants.
 * Specifically, the constant 4 at line 85 was the constant 1/2 (the
 * multiplicative inverse of 2) in the original definition of OMAC [14].
 * The OMAC authors indicate that they will promulgate this modification
 * [15], which slightly simplifies implementations.
 */

const blockLength = 16;

/**
 * xor `padding` into the end of `data`. This function implements "the
 * operation xor→ [which] xors the shorter string into the end of longer
 * one". Since data is always as least as long as padding, we can
 * simplify the implementation.
 * @param {Uint8Array} data
 * @param {Uint8Array} padding
 */
function rightXorMut(data, padding) {
  const offset = data.length - blockLength;
  for (let i = 0; i < blockLength; i++) {
    data[i + offset] ^= padding[i];
  }
  return data;
}

function pad(data, padding, padding2) {
  // if |M| in {n, 2n, 3n, ...}
  if (data.length && data.length % blockLength === 0) {
    // then return M xor→ B,
    return rightXorMut(data, padding);
  }
  // else return (M || 10^(n−1−(|M| mod n))) xor→ P
  const padded = new Uint8Array(data.length + (blockLength - data.length % blockLength));
  padded.set(data);
  padded[data.length] = 0b10000000;
  return rightXorMut(padded, padding2);
}

const zeroBlock = new Uint8Array(blockLength);

exports.default = async function CMAC(key) {
  const cbc = await CBC(key);

  // L ← E_K(0^n); B ← 2L; P ← 4L
  const padding = _util2.default.double((await cbc(zeroBlock)));
  const padding2 = _util2.default.double(padding);

  return async function (data) {
    // return CBC_K(pad(M; B, P))
    return (await cbc(pad(data, padding, padding2))).subarray(-blockLength);
  };
};

async function CBC(key) {
  if (_util2.default.getWebCrypto() && key.length !== 24) {
    // WebCrypto (no 192 bit support) see: https://www.chromium.org/blink/webcrypto#TOC-AES-support
    key = await webCrypto.importKey('raw', key, { name: 'AES-CBC', length: key.length * 8 }, false, ['encrypt']);
    return async function (pt) {
      const ct = await webCrypto.encrypt({ name: 'AES-CBC', iv: zeroBlock, length: blockLength * 8 }, key, pt);
      return new Uint8Array(ct).subarray(0, ct.byteLength - blockLength);
    };
  }
  if (_util2.default.getNodeCrypto()) {
    // Node crypto library
    key = new Buffer(key);
    return async function (pt) {
      pt = new Buffer(pt);
      const en = new nodeCrypto.createCipheriv('aes-' + key.length * 8 + '-cbc', key, zeroBlock);
      const ct = en.update(pt);
      return new Uint8Array(ct);
    };
  }
  // asm.js fallback
  return async function (pt) {
    return _cbc.AES_CBC.encrypt(pt, key, false, zeroBlock);
  };
}

},{"../util":153,"asmcrypto.js/dist_es5/aes/cbc":5}],90:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _public_key = require('./public_key');

var _public_key2 = _interopRequireDefault(_public_key);

var _cipher = require('./cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _random = require('./random');

var _random2 = _interopRequireDefault(_random);

var _ecdh_symkey = require('../type/ecdh_symkey');

var _ecdh_symkey2 = _interopRequireDefault(_ecdh_symkey);

var _kdf_params = require('../type/kdf_params');

var _kdf_params2 = _interopRequireDefault(_kdf_params);

var _mpi = require('../type/mpi');

var _mpi2 = _interopRequireDefault(_mpi);

var _oid = require('../type/oid');

var _oid2 = _interopRequireDefault(_oid);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

// The GPG4Browsers crypto interface

/**
 * @fileoverview Provides functions for asymmetric encryption and decryption as
 * well as key generation and parameter handling for all public-key cryptosystems.
 * @requires bn.js
 * @requires crypto/public_key
 * @requires crypto/cipher
 * @requires crypto/random
 * @requires type/ecdh_symkey
 * @requires type/kdf_params
 * @requires type/mpi
 * @requires type/oid
 * @requires enums
 * @requires util
 * @module crypto/crypto
 */

function constructParams(types, data) {
  return types.map(function (type, i) {
    if (data && data[i]) {
      return new type(data[i]);
    }
    return new type();
  });
}

exports.default = {
  /**
   * Encrypts data using specified algorithm and public key parameters.
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1} for public key algorithms.
   * @param {module:enums.publicKey}        algo        Public key algorithm
   * @param {Array<module:type/mpi|
                   module:type/oid|
                   module:type/kdf_params>} pub_params  Algorithm-specific public key parameters
   * @param {module:type/mpi}               data        Data to be encrypted as MPI
   * @param {String}                        fingerprint Recipient fingerprint
   * @returns {Array<module:type/mpi|
   *                 module:type/ecdh_symkey>}          encrypted session key parameters
   * @async
   */
  publicKeyEncrypt: async function publicKeyEncrypt(algo, pub_params, data, fingerprint) {
    const types = this.getEncSessionKeyParamTypes(algo);
    switch (algo) {
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_encrypt_sign:
        {
          const m = data.toBN();
          const n = pub_params[0].toBN();
          const e = pub_params[1].toBN();
          const res = await _public_key2.default.rsa.encrypt(m, n, e);
          return constructParams(types, [res]);
        }
      case _enums2.default.publicKey.elgamal:
        {
          const m = data.toBN();
          const p = pub_params[0].toBN();
          const g = pub_params[1].toBN();
          const y = pub_params[2].toBN();
          const res = await _public_key2.default.elgamal.encrypt(m, p, g, y);
          return constructParams(types, [res.c1, res.c2]);
        }
      case _enums2.default.publicKey.ecdh:
        {
          const oid = pub_params[0];
          const Q = pub_params[1].toUint8Array();
          const kdf_params = pub_params[2];

          var _ref = await _public_key2.default.elliptic.ecdh.encrypt(oid, kdf_params.cipher, kdf_params.hash, data, Q, fingerprint);

          const V = _ref.publicKey,
                C = _ref.wrappedKey;

          return constructParams(types, [new _bn2.default(V), C]);
        }
      default:
        return [];
    }
  },

  /**
   * Decrypts data using specified algorithm and private key parameters.
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1} for public key algorithms.
   * @param {module:enums.publicKey}        algo        Public key algorithm
   * @param {Array<module:type/mpi|
                   module:type/oid|
                   module:type/kdf_params>} key_params  Algorithm-specific public, private key parameters
   * @param {Array<module:type/mpi|
                   module:type/ecdh_symkey>}
                                            data_params encrypted session key parameters
   * @param {String}                        fingerprint Recipient fingerprint
   * @returns {BN}                          A BN containing the decrypted data
   * @async
   */
  publicKeyDecrypt: async function publicKeyDecrypt(algo, key_params, data_params, fingerprint) {
    switch (algo) {
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_encrypt:
        {
          const c = data_params[0].toBN();
          const n = key_params[0].toBN(); // n = pq
          const e = key_params[1].toBN();
          const d = key_params[2].toBN(); // de = 1 mod (p-1)(q-1)
          const p = key_params[3].toBN();
          const q = key_params[4].toBN();
          const u = key_params[5].toBN(); // q^-1 mod p
          return _public_key2.default.rsa.decrypt(c, n, e, d, p, q, u);
        }
      case _enums2.default.publicKey.elgamal:
        {
          const c1 = data_params[0].toBN();
          const c2 = data_params[1].toBN();
          const p = key_params[0].toBN();
          const x = key_params[3].toBN();
          return _public_key2.default.elgamal.decrypt(c1, c2, p, x);
        }
      case _enums2.default.publicKey.ecdh:
        {
          const oid = key_params[0];
          const kdf_params = key_params[2];
          const V = data_params[0].toUint8Array();
          const C = data_params[1].data;
          const d = key_params[3].toUint8Array();
          return _public_key2.default.elliptic.ecdh.decrypt(oid, kdf_params.cipher, kdf_params.hash, V, C, d, fingerprint);
        }
      default:
        throw new Error('Invalid public key encryption algorithm.');
    }
  },

  /** Returns the types comprising the private key of an algorithm
   * @param {String} algo The public key algorithm
   * @returns {Array<String>} The array of types
   */
  getPrivKeyParamTypes: function getPrivKeyParamTypes(algo) {
    switch (algo) {
      //   Algorithm-Specific Fields for RSA secret keys:
      //       - multiprecision integer (MPI) of RSA secret exponent d.
      //       - MPI of RSA secret prime value p.
      //       - MPI of RSA secret prime value q (p < q).
      //       - MPI of u, the multiplicative inverse of p, mod q.
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_sign:
        return [_mpi2.default, _mpi2.default, _mpi2.default, _mpi2.default];
      //   Algorithm-Specific Fields for Elgamal secret keys:
      //        - MPI of Elgamal secret exponent x.
      case _enums2.default.publicKey.elgamal:
        return [_mpi2.default];
      //   Algorithm-Specific Fields for DSA secret keys:
      //      - MPI of DSA secret exponent x.
      case _enums2.default.publicKey.dsa:
        return [_mpi2.default];
      //   Algorithm-Specific Fields for ECDSA or ECDH secret keys:
      //       - MPI of an integer representing the secret key.
      case _enums2.default.publicKey.ecdh:
      case _enums2.default.publicKey.ecdsa:
      case _enums2.default.publicKey.eddsa:
        return [_mpi2.default];
      default:
        throw new Error('Invalid public key encryption algorithm.');
    }
  },

  /** Returns the types comprising the public key of an algorithm
   * @param {String} algo The public key algorithm
   * @returns {Array<String>} The array of types
   */
  getPubKeyParamTypes: function getPubKeyParamTypes(algo) {
    switch (algo) {
      //   Algorithm-Specific Fields for RSA public keys:
      //       - a multiprecision integer (MPI) of RSA public modulus n;
      //       - an MPI of RSA public encryption exponent e.
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_sign:
        return [_mpi2.default, _mpi2.default];
      //   Algorithm-Specific Fields for Elgamal public keys:
      //       - MPI of Elgamal prime p;
      //       - MPI of Elgamal group generator g;
      //       - MPI of Elgamal public key value y (= g**x mod p where x  is secret).
      case _enums2.default.publicKey.elgamal:
        return [_mpi2.default, _mpi2.default, _mpi2.default];
      //   Algorithm-Specific Fields for DSA public keys:
      //       - MPI of DSA prime p;
      //       - MPI of DSA group order q (q is a prime divisor of p-1);
      //       - MPI of DSA group generator g;
      //       - MPI of DSA public-key value y (= g**x mod p where x  is secret).
      case _enums2.default.publicKey.dsa:
        return [_mpi2.default, _mpi2.default, _mpi2.default, _mpi2.default];
      //   Algorithm-Specific Fields for ECDSA/EdDSA public keys:
      //       - OID of curve;
      //       - MPI of EC point representing public key.
      case _enums2.default.publicKey.ecdsa:
      case _enums2.default.publicKey.eddsa:
        return [_oid2.default, _mpi2.default];
      //   Algorithm-Specific Fields for ECDH public keys:
      //       - OID of curve;
      //       - MPI of EC point representing public key.
      //       - KDF: variable-length field containing KDF parameters.
      case _enums2.default.publicKey.ecdh:
        return [_oid2.default, _mpi2.default, _kdf_params2.default];
      default:
        throw new Error('Invalid public key encryption algorithm.');
    }
  },

  /** Returns the types comprising the encrypted session key of an algorithm
   * @param {String} algo The public key algorithm
   * @returns {Array<String>} The array of types
   */
  getEncSessionKeyParamTypes: function getEncSessionKeyParamTypes(algo) {
    switch (algo) {
      //   Algorithm-Specific Fields for RSA encrypted session keys:
      //       - MPI of RSA encrypted value m**e mod n.
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_encrypt_sign:
        return [_mpi2.default];

      //   Algorithm-Specific Fields for Elgamal encrypted session keys:
      //       - MPI of Elgamal value g**k mod p
      //       - MPI of Elgamal value m * y**k mod p
      case _enums2.default.publicKey.elgamal:
        return [_mpi2.default, _mpi2.default];
      //   Algorithm-Specific Fields for ECDH encrypted session keys:
      //       - MPI containing the ephemeral key used to establish the shared secret
      //       - ECDH Symmetric Key
      case _enums2.default.publicKey.ecdh:
        return [_mpi2.default, _ecdh_symkey2.default];
      default:
        throw new Error('Invalid public key encryption algorithm.');
    }
  },

  /** Generate algorithm-specific key parameters
   * @param {String}          algo The public key algorithm
   * @param {Integer}         bits Bit length for RSA keys
   * @param {module:type/oid} oid  Object identifier for ECC keys
   * @returns {Array}              The array of parameters
   * @async
   */
  generateParams: function generateParams(algo, bits, oid) {
    const types = [].concat(this.getPubKeyParamTypes(algo), this.getPrivKeyParamTypes(algo));
    switch (algo) {
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_sign:
        {
          return _public_key2.default.rsa.generate(bits, "10001").then(function (keyObject) {
            return constructParams(types, [keyObject.n, keyObject.e, keyObject.d, keyObject.p, keyObject.q, keyObject.u]);
          });
        }
      case _enums2.default.publicKey.dsa:
      case _enums2.default.publicKey.elgamal:
        throw new Error('Unsupported algorithm for key generation.');
      case _enums2.default.publicKey.ecdsa:
      case _enums2.default.publicKey.eddsa:
        return _public_key2.default.elliptic.generate(oid).then(function (keyObject) {
          return constructParams(types, [keyObject.oid, keyObject.Q, keyObject.d]);
        });
      case _enums2.default.publicKey.ecdh:
        return _public_key2.default.elliptic.generate(oid).then(function (keyObject) {
          return constructParams(types, [keyObject.oid, keyObject.Q, [keyObject.hash, keyObject.cipher], keyObject.d]);
        });
      default:
        throw new Error('Invalid public key algorithm.');
    }
  },

  /**
   * Generates a random byte prefix for the specified algorithm
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.
   * @param {module:enums.symmetric} algo Symmetric encryption algorithm
   * @returns {Uint8Array}                Random bytes with length equal to the block size of the cipher, plus the last two bytes repeated.
   * @async
   */
  getPrefixRandom: async function getPrefixRandom(algo) {
    const prefixrandom = await _random2.default.getRandomBytes(_cipher2.default[algo].blockSize);
    const repeat = new Uint8Array([prefixrandom[prefixrandom.length - 2], prefixrandom[prefixrandom.length - 1]]);
    return _util2.default.concat([prefixrandom, repeat]);
  },

  /**
   * Generating a session key for the specified symmetric algorithm
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.
   * @param {module:enums.symmetric} algo Symmetric encryption algorithm
   * @returns {Uint8Array}                Random bytes as a string to be used as a key
   * @async
   */
  generateSessionKey: function generateSessionKey(algo) {
    return _random2.default.getRandomBytes(_cipher2.default[algo].keySize);
  },

  constructParams: constructParams
};

},{"../enums":114,"../type/ecdh_symkey":147,"../type/kdf_params":148,"../type/mpi":150,"../type/oid":151,"../util":153,"./cipher":87,"./public_key":107,"./random":110,"bn.js":17}],91:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2018 ProtonTech AG
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This module implements AES-EAX en/decryption on top of
 * native AES-CTR using either the WebCrypto API or Node.js' crypto API.
 * @requires asmcrypto.js
 * @requires crypto/cmac
 * @requires util
 * @module crypto/eax
 */

var _ctr = require('asmcrypto.js/dist_es5/aes/ctr');

var _cmac = require('./cmac');

var _cmac2 = _interopRequireDefault(_cmac);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const webCrypto = _util2.default.getWebCrypto();
const nodeCrypto = _util2.default.getNodeCrypto();
const Buffer = _util2.default.getNodeBuffer();

const blockLength = 16;
const ivLength = blockLength;
const tagLength = blockLength;

const zero = new Uint8Array(blockLength);
const one = new Uint8Array(blockLength);one[blockLength - 1] = 1;
const two = new Uint8Array(blockLength);two[blockLength - 1] = 2;

async function OMAC(key) {
  const cmac = await (0, _cmac2.default)(key);
  return function (t, message) {
    return cmac(_util2.default.concatUint8Array([t, message]));
  };
}

async function CTR(key) {
  if (_util2.default.getWebCrypto() && key.length !== 24 && // WebCrypto (no 192 bit support) see: https://www.chromium.org/blink/webcrypto#TOC-AES-support
  navigator.userAgent.indexOf('Edge') === -1) {
    key = await webCrypto.importKey('raw', key, { name: 'AES-CTR', length: key.length * 8 }, false, ['encrypt']);
    return async function (pt, iv) {
      const ct = await webCrypto.encrypt({ name: 'AES-CTR', counter: iv, length: blockLength * 8 }, key, pt);
      return new Uint8Array(ct);
    };
  }
  if (_util2.default.getNodeCrypto()) {
    // Node crypto library
    key = new Buffer(key);
    return async function (pt, iv) {
      pt = new Buffer(pt);
      iv = new Buffer(iv);
      const en = new nodeCrypto.createCipheriv('aes-' + key.length * 8 + '-ctr', key, iv);
      const ct = Buffer.concat([en.update(pt), en.final()]);
      return new Uint8Array(ct);
    };
  }
  // asm.js fallback
  return async function (pt, iv) {
    return _ctr.AES_CTR.encrypt(pt, key, iv);
  };
}

/**
 * Class to en/decrypt using EAX mode.
 * @param  {String}     cipher      The symmetric cipher algorithm to use e.g. 'aes128'
 * @param  {Uint8Array} key         The encryption key
 */
async function EAX(cipher, key) {
  if (cipher.substr(0, 3) !== 'aes') {
    throw new Error('EAX mode supports only AES cipher');
  }

  var _ref = await Promise.all([OMAC(key), CTR(key)]),
      _ref2 = _slicedToArray(_ref, 2);

  const omac = _ref2[0],
        ctr = _ref2[1];


  return {
    /**
     * Encrypt plaintext input.
     * @param  {Uint8Array} plaintext   The cleartext input to be encrypted
     * @param  {Uint8Array} nonce       The nonce (16 bytes)
     * @param  {Uint8Array} adata       Associated data to sign
     * @returns {Promise<Uint8Array>}    The ciphertext output
     */
    encrypt: async function encrypt(plaintext, nonce, adata) {
      var _ref3 = await Promise.all([omac(zero, nonce), omac(one, adata)]),
          _ref4 = _slicedToArray(_ref3, 2);

      const omacNonce = _ref4[0],
            omacAdata = _ref4[1];

      const ciphered = await ctr(plaintext, omacNonce);
      const omacCiphered = await omac(two, ciphered);
      const tag = omacCiphered; // Assumes that omac(*).length === tagLength.
      for (let i = 0; i < tagLength; i++) {
        tag[i] ^= omacAdata[i] ^ omacNonce[i];
      }
      return _util2.default.concatUint8Array([ciphered, tag]);
    },

    /**
     * Decrypt ciphertext input.
     * @param  {Uint8Array} ciphertext   The ciphertext input to be decrypted
     * @param  {Uint8Array} nonce        The nonce (16 bytes)
     * @param  {Uint8Array} adata        Associated data to verify
     * @returns {Promise<Uint8Array>}     The plaintext output
     */
    decrypt: async function decrypt(ciphertext, nonce, adata) {
      if (ciphertext.length < tagLength) throw new Error('Invalid EAX ciphertext');
      const ciphered = ciphertext.subarray(0, -tagLength);
      const ctTag = ciphertext.subarray(-tagLength);

      var _ref5 = await Promise.all([omac(zero, nonce), omac(one, adata), omac(two, ciphered)]),
          _ref6 = _slicedToArray(_ref5, 3);

      const omacNonce = _ref6[0],
            omacAdata = _ref6[1],
            omacCiphered = _ref6[2];

      const tag = omacCiphered; // Assumes that omac(*).length === tagLength.
      for (let i = 0; i < tagLength; i++) {
        tag[i] ^= omacAdata[i] ^ omacNonce[i];
      }
      if (!_util2.default.equalsUint8Array(ctTag, tag)) throw new Error('Authentication tag mismatch');
      const plaintext = await ctr(ciphered, omacNonce);
      return plaintext;
    }
  };
}

/**
 * Get EAX nonce as defined by {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.1|RFC4880bis-04, section 5.16.1}.
 * @param  {Uint8Array} iv           The initialization vector (16 bytes)
 * @param  {Uint8Array} chunkIndex   The chunk index (8 bytes)
 */
EAX.getNonce = function (iv, chunkIndex) {
  const nonce = iv.slice();
  for (let i = 0; i < chunkIndex.length; i++) {
    nonce[8 + i] ^= chunkIndex[i];
  }
  return nonce;
};

EAX.blockLength = blockLength;
EAX.ivLength = ivLength;
EAX.tagLength = tagLength;

exports.default = EAX;

},{"../util":153,"./cmac":89,"asmcrypto.js/dist_es5/aes/ctr":7}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gcm = require('asmcrypto.js/dist_es5/aes/gcm');

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2016 Tankred Hase
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This module wraps native AES-GCM en/decryption for both
 * the WebCrypto api as well as node.js' crypto api.
 * @requires asmcrypto.js
 * @requires util
 * @module crypto/gcm
 */

const webCrypto = _util2.default.getWebCrypto(); // no GCM support in IE11, Safari 9
const nodeCrypto = _util2.default.getNodeCrypto();
const Buffer = _util2.default.getNodeBuffer();

const blockLength = 16;
const ivLength = 12; // size of the IV in bytes
const tagLength = 16; // size of the tag in bytes
const ALGO = 'AES-GCM';

/**
 * Class to en/decrypt using GCM mode.
 * @param  {String}     cipher      The symmetric cipher algorithm to use e.g. 'aes128'
 * @param  {Uint8Array} key         The encryption key
 */
async function GCM(cipher, key) {
  if (cipher.substr(0, 3) !== 'aes') {
    throw new Error('GCM mode supports only AES cipher');
  }

  if (_util2.default.getWebCrypto() && key.length !== 24) {
    // WebCrypto (no 192 bit support) see: https://www.chromium.org/blink/webcrypto#TOC-AES-support
    const _key = await webCrypto.importKey('raw', key, { name: ALGO }, false, ['encrypt', 'decrypt']);

    return {
      encrypt: async function encrypt(pt, iv, adata = new Uint8Array()) {
        if (!pt.length ||
        // iOS does not support GCM-en/decrypting empty messages
        // Also, synchronous en/decryption might be faster in this case.
        !adata.length && navigator.userAgent.indexOf('Edge') !== -1
        // Edge does not support GCM-en/decrypting without ADATA
        ) {
            return _gcm.AES_GCM.encrypt(pt, key, iv, adata);
          }
        const ct = await webCrypto.encrypt({ name: ALGO, iv, additionalData: adata, tagLength: tagLength * 8 }, _key, pt);
        return new Uint8Array(ct);
      },

      decrypt: async function decrypt(ct, iv, adata = new Uint8Array()) {
        if (ct.length === tagLength ||
        // iOS does not support GCM-en/decrypting empty messages
        // Also, synchronous en/decryption might be faster in this case.
        !adata.length && navigator.userAgent.indexOf('Edge') !== -1
        // Edge does not support GCM-en/decrypting without ADATA
        ) {
            return _gcm.AES_GCM.decrypt(ct, key, iv, adata);
          }
        const pt = await webCrypto.decrypt({ name: ALGO, iv, additionalData: adata, tagLength: tagLength * 8 }, _key, ct);
        return new Uint8Array(pt);
      }
    };
  }

  if (_util2.default.getNodeCrypto()) {
    // Node crypto library
    key = new Buffer(key);

    return {
      encrypt: async function encrypt(pt, iv, adata = new Uint8Array()) {
        pt = new Buffer(pt);
        iv = new Buffer(iv);
        adata = new Buffer(adata);
        const en = new nodeCrypto.createCipheriv('aes-' + key.length * 8 + '-gcm', key, iv);
        en.setAAD(adata);
        const ct = Buffer.concat([en.update(pt), en.final(), en.getAuthTag()]); // append auth tag to ciphertext
        return new Uint8Array(ct);
      },

      decrypt: async function decrypt(ct, iv, adata = new Uint8Array()) {
        ct = new Buffer(ct);
        iv = new Buffer(iv);
        adata = new Buffer(adata);
        const de = new nodeCrypto.createDecipheriv('aes-' + key.length * 8 + '-gcm', key, iv);
        de.setAAD(adata);
        de.setAuthTag(ct.slice(ct.length - tagLength, ct.length)); // read auth tag at end of ciphertext
        const pt = Buffer.concat([de.update(ct.slice(0, ct.length - tagLength)), de.final()]);
        return new Uint8Array(pt);
      }
    };
  }

  return {
    encrypt: async function encrypt(pt, iv, adata) {
      return _gcm.AES_GCM.encrypt(pt, key, iv, adata);
    },

    decrypt: async function decrypt(ct, iv, adata) {
      return _gcm.AES_GCM.decrypt(ct, key, iv, adata);
    }
  };
}

/**
 * Get GCM nonce. Note: this operation is not defined by the standard.
 * A future version of the standard may define GCM mode differently,
 * hopefully under a different ID (we use Private/Experimental algorithm
 * ID 100) so that we can maintain backwards compatibility.
 * @param  {Uint8Array} iv           The initialization vector (12 bytes)
 * @param  {Uint8Array} chunkIndex   The chunk index (8 bytes)
 */
GCM.getNonce = function (iv, chunkIndex) {
  const nonce = iv.slice();
  for (let i = 0; i < chunkIndex.length; i++) {
    nonce[4 + i] ^= chunkIndex[i];
  }
  return nonce;
};

GCM.blockLength = blockLength;
GCM.ivLength = ivLength;
GCM.tagLength = tagLength;

exports.default = GCM;

},{"../util":153,"asmcrypto.js/dist_es5/aes/gcm":9}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sha = require('asmcrypto.js/dist_es5/hash/sha1/sha1');

var _sha2 = require('asmcrypto.js/dist_es5/hash/sha256/sha256');

var _ = require('hash.js/lib/hash/sha/224');

var _2 = _interopRequireDefault(_);

var _3 = require('hash.js/lib/hash/sha/384');

var _4 = _interopRequireDefault(_3);

var _5 = require('hash.js/lib/hash/sha/512');

var _6 = _interopRequireDefault(_5);

var _ripemd = require('hash.js/lib/hash/ripemd');

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _md = require('./md5');

var _md2 = _interopRequireDefault(_md);

var _config = require('../../config');

var _config2 = _interopRequireDefault(_config);

var _util = require('../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview Provides an interface to hashing functions available in Node.js or external libraries.
 * @see {@link https://github.com/asmcrypto/asmcrypto.js|asmCrypto}
 * @see {@link https://github.com/indutny/hash.js|hash.js}
 * @requires asmcrypto.js
 * @requires hash.js
 * @requires web-stream-tools
 * @requires crypto/hash/md5
 * @requires config
 * @requires util
 * @module crypto/hash
 */

const webCrypto = _util2.default.getWebCrypto();
const nodeCrypto = _util2.default.getNodeCrypto();
const Buffer = _util2.default.getNodeBuffer();

function node_hash(type) {
  return async function (data) {
    const shasum = nodeCrypto.createHash(type);
    return _webStreamTools2.default.transform(data, value => {
      shasum.update(new Buffer(value));
    }, () => new Uint8Array(shasum.digest()));
  };
}

function hashjs_hash(hash, webCryptoHash) {
  return async function (data) {
    if (!_util2.default.isStream(data) && webCrypto && webCryptoHash && data.length >= _config2.default.min_bytes_for_web_crypto) {
      return new Uint8Array((await webCrypto.digest(webCryptoHash, data)));
    }
    const hashInstance = hash();
    return _webStreamTools2.default.transform(data, value => {
      hashInstance.update(value);
    }, () => new Uint8Array(hashInstance.digest()));
  };
}

function asmcrypto_hash(hash, webCryptoHash) {
  return async function (data) {
    if (_util2.default.isStream(data)) {
      const hashInstance = new hash();
      return _webStreamTools2.default.transform(data, value => {
        hashInstance.process(value);
      }, () => hashInstance.finish().result);
    } else if (webCrypto && webCryptoHash && data.length >= _config2.default.min_bytes_for_web_crypto) {
      return new Uint8Array((await webCrypto.digest(webCryptoHash, data)));
    } else {
      return hash.bytes(data);
    }
  };
}

let hash_fns;
if (nodeCrypto) {
  // Use Node native crypto for all hash functions
  hash_fns = {
    md5: node_hash('md5'),
    sha1: node_hash('sha1'),
    sha224: node_hash('sha224'),
    sha256: node_hash('sha256'),
    sha384: node_hash('sha384'),
    sha512: node_hash('sha512'),
    ripemd: node_hash('ripemd160')
  };
} else {
  // Use JS fallbacks
  hash_fns = {
    md5: _md2.default,
    sha1: asmcrypto_hash(_sha.Sha1, navigator.userAgent.indexOf('Edge') === -1 && 'SHA-1'),
    sha224: hashjs_hash(_2.default),
    sha256: asmcrypto_hash(_sha2.Sha256, 'SHA-256'),
    sha384: hashjs_hash(_4.default, 'SHA-384'),
    sha512: hashjs_hash(_6.default, 'SHA-512'), // asmcrypto sha512 is huge.
    ripemd: hashjs_hash(_ripemd.ripemd160)
  };
}

exports.default = {

  /** @see module:md5 */
  md5: hash_fns.md5,
  /** @see asmCrypto */
  sha1: hash_fns.sha1,
  /** @see hash.js */
  sha224: hash_fns.sha224,
  /** @see asmCrypto */
  sha256: hash_fns.sha256,
  /** @see hash.js */
  sha384: hash_fns.sha384,
  /** @see asmCrypto */
  sha512: hash_fns.sha512,
  /** @see hash.js */
  ripemd: hash_fns.ripemd,

  /**
   * Create a hash on the specified data using the specified algorithm
   * @param {module:enums.hash} algo Hash algorithm type (see {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4})
   * @param {Uint8Array} data Data to be hashed
   * @returns {Promise<Uint8Array>} hash value
   */
  digest: function digest(algo, data) {
    switch (algo) {
      case 1:
        // - MD5 [HAC]
        return this.md5(data);
      case 2:
        // - SHA-1 [FIPS180]
        return this.sha1(data);
      case 3:
        // - RIPE-MD/160 [HAC]
        return this.ripemd(data);
      case 8:
        // - SHA256 [FIPS180]
        return this.sha256(data);
      case 9:
        // - SHA384 [FIPS180]
        return this.sha384(data);
      case 10:
        // - SHA512 [FIPS180]
        return this.sha512(data);
      case 11:
        // - SHA224 [FIPS180]
        return this.sha224(data);
      default:
        throw new Error('Invalid hash function.');
    }
  },

  /**
   * Returns the hash size in bytes of the specified hash algorithm type
   * @param {module:enums.hash} algo Hash algorithm type (See {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4})
   * @returns {Integer} Size in bytes of the resulting hash
   */
  getHashByteLength: function getHashByteLength(algo) {
    switch (algo) {
      case 1:
        // - MD5 [HAC]
        return 16;
      case 2: // - SHA-1 [FIPS180]
      case 3:
        // - RIPE-MD/160 [HAC]
        return 20;
      case 8:
        // - SHA256 [FIPS180]
        return 32;
      case 9:
        // - SHA384 [FIPS180]
        return 48;
      case 10:
        // - SHA512 [FIPS180]
        return 64;
      case 11:
        // - SHA224 [FIPS180]
        return 28;
      default:
        throw new Error('Invalid hash algorithm.');
    }
  }
};

},{"../../config":80,"../../util":153,"./md5":94,"asmcrypto.js/dist_es5/hash/sha1/sha1":12,"asmcrypto.js/dist_es5/hash/sha256/sha256":14,"hash.js/lib/hash/ripemd":38,"hash.js/lib/hash/sha/224":41,"hash.js/lib/hash/sha/384":43,"hash.js/lib/hash/sha/512":44,"web-stream-tools":76}],94:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// MD5 Digest
async function md5(entree) {
  const digest = md51(_util2.default.Uint8Array_to_str(entree));
  return _util2.default.hex_to_Uint8Array(hex(digest));
} /**
   * A fast MD5 JavaScript implementation
   * Copyright (c) 2012 Joseph Myers
   * http://www.myersdaily.org/joseph/javascript/md5-text.html
   *
   * Permission to use, copy, modify, and distribute this software
   * and its documentation for any purposes and without
   * fee is hereby granted provided that this copyright notice
   * appears in all copies.
   *
   * Of course, this soft is provided "as is" without express or implied
   * warranty of any kind.
   */

/**
 * @requires util
 */

function md5cycle(x, k) {
  let a = x[0];
  let b = x[1];
  let c = x[2];
  let d = x[3];

  a = ff(a, b, c, d, k[0], 7, -680876936);
  d = ff(d, a, b, c, k[1], 12, -389564586);
  c = ff(c, d, a, b, k[2], 17, 606105819);
  b = ff(b, c, d, a, k[3], 22, -1044525330);
  a = ff(a, b, c, d, k[4], 7, -176418897);
  d = ff(d, a, b, c, k[5], 12, 1200080426);
  c = ff(c, d, a, b, k[6], 17, -1473231341);
  b = ff(b, c, d, a, k[7], 22, -45705983);
  a = ff(a, b, c, d, k[8], 7, 1770035416);
  d = ff(d, a, b, c, k[9], 12, -1958414417);
  c = ff(c, d, a, b, k[10], 17, -42063);
  b = ff(b, c, d, a, k[11], 22, -1990404162);
  a = ff(a, b, c, d, k[12], 7, 1804603682);
  d = ff(d, a, b, c, k[13], 12, -40341101);
  c = ff(c, d, a, b, k[14], 17, -1502002290);
  b = ff(b, c, d, a, k[15], 22, 1236535329);

  a = gg(a, b, c, d, k[1], 5, -165796510);
  d = gg(d, a, b, c, k[6], 9, -1069501632);
  c = gg(c, d, a, b, k[11], 14, 643717713);
  b = gg(b, c, d, a, k[0], 20, -373897302);
  a = gg(a, b, c, d, k[5], 5, -701558691);
  d = gg(d, a, b, c, k[10], 9, 38016083);
  c = gg(c, d, a, b, k[15], 14, -660478335);
  b = gg(b, c, d, a, k[4], 20, -405537848);
  a = gg(a, b, c, d, k[9], 5, 568446438);
  d = gg(d, a, b, c, k[14], 9, -1019803690);
  c = gg(c, d, a, b, k[3], 14, -187363961);
  b = gg(b, c, d, a, k[8], 20, 1163531501);
  a = gg(a, b, c, d, k[13], 5, -1444681467);
  d = gg(d, a, b, c, k[2], 9, -51403784);
  c = gg(c, d, a, b, k[7], 14, 1735328473);
  b = gg(b, c, d, a, k[12], 20, -1926607734);

  a = hh(a, b, c, d, k[5], 4, -378558);
  d = hh(d, a, b, c, k[8], 11, -2022574463);
  c = hh(c, d, a, b, k[11], 16, 1839030562);
  b = hh(b, c, d, a, k[14], 23, -35309556);
  a = hh(a, b, c, d, k[1], 4, -1530992060);
  d = hh(d, a, b, c, k[4], 11, 1272893353);
  c = hh(c, d, a, b, k[7], 16, -155497632);
  b = hh(b, c, d, a, k[10], 23, -1094730640);
  a = hh(a, b, c, d, k[13], 4, 681279174);
  d = hh(d, a, b, c, k[0], 11, -358537222);
  c = hh(c, d, a, b, k[3], 16, -722521979);
  b = hh(b, c, d, a, k[6], 23, 76029189);
  a = hh(a, b, c, d, k[9], 4, -640364487);
  d = hh(d, a, b, c, k[12], 11, -421815835);
  c = hh(c, d, a, b, k[15], 16, 530742520);
  b = hh(b, c, d, a, k[2], 23, -995338651);

  a = ii(a, b, c, d, k[0], 6, -198630844);
  d = ii(d, a, b, c, k[7], 10, 1126891415);
  c = ii(c, d, a, b, k[14], 15, -1416354905);
  b = ii(b, c, d, a, k[5], 21, -57434055);
  a = ii(a, b, c, d, k[12], 6, 1700485571);
  d = ii(d, a, b, c, k[3], 10, -1894986606);
  c = ii(c, d, a, b, k[10], 15, -1051523);
  b = ii(b, c, d, a, k[1], 21, -2054922799);
  a = ii(a, b, c, d, k[8], 6, 1873313359);
  d = ii(d, a, b, c, k[15], 10, -30611744);
  c = ii(c, d, a, b, k[6], 15, -1560198380);
  b = ii(b, c, d, a, k[13], 21, 1309151649);
  a = ii(a, b, c, d, k[4], 6, -145523070);
  d = ii(d, a, b, c, k[11], 10, -1120210379);
  c = ii(c, d, a, b, k[2], 15, 718787259);
  b = ii(b, c, d, a, k[9], 21, -343485551);

  x[0] = add32(a, x[0]);
  x[1] = add32(b, x[1]);
  x[2] = add32(c, x[2]);
  x[3] = add32(d, x[3]);
}

function cmn(q, a, b, x, s, t) {
  a = add32(add32(a, q), add32(x, t));
  return add32(a << s | a >>> 32 - s, b);
}

function ff(a, b, c, d, x, s, t) {
  return cmn(b & c | ~b & d, a, b, x, s, t);
}

function gg(a, b, c, d, x, s, t) {
  return cmn(b & d | c & ~d, a, b, x, s, t);
}

function hh(a, b, c, d, x, s, t) {
  return cmn(b ^ c ^ d, a, b, x, s, t);
}

function ii(a, b, c, d, x, s, t) {
  return cmn(c ^ (b | ~d), a, b, x, s, t);
}

function md51(s) {
  const n = s.length;
  const state = [1732584193, -271733879, -1732584194, 271733878];
  let i;
  for (i = 64; i <= s.length; i += 64) {
    md5cycle(state, md5blk(s.substring(i - 64, i)));
  }
  s = s.substring(i - 64);
  const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (i = 0; i < s.length; i++) {
    tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
  }
  tail[i >> 2] |= 0x80 << (i % 4 << 3);
  if (i > 55) {
    md5cycle(state, tail);
    for (i = 0; i < 16; i++) {
      tail[i] = 0;
    }
  }
  tail[14] = n * 8;
  md5cycle(state, tail);
  return state;
}

/* there needs to be support for Unicode here,
 * unless we pretend that we can redefine the MD-5
 * algorithm for multi-byte characters (perhaps
 * by adding every four 16-bit characters and
 * shortening the sum to 32 bits). Otherwise
 * I suggest performing MD-5 as if every character
 * was two bytes--e.g., 0040 0025 = @%--but then
 * how will an ordinary MD-5 sum be matched?
 * There is no way to standardize text to something
 * like UTF-8 before transformation; speed cost is
 * utterly prohibitive. The JavaScript standard
 * itself needs to look at this: it should start
 * providing access to strings as preformed UTF-8
 * 8-bit unsigned value arrays.
 */
function md5blk(s) {
  /* I figured global was faster.   */
  const md5blks = [];
  let i; /* Andy King said do it this way. */
  for (i = 0; i < 64; i += 4) {
    md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
  }
  return md5blks;
}

const hex_chr = '0123456789abcdef'.split('');

function rhex(n) {
  let s = '';
  let j = 0;
  for (; j < 4; j++) {
    s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];
  }
  return s;
}

function hex(x) {
  for (let i = 0; i < x.length; i++) {
    x[i] = rhex(x[i]);
  }
  return x.join('');
}

/* this function is much faster,
so if possible we use it. Some IEs
are the only ones I know of that
need the idiotic second function,
generated by an if clause.  */

function add32(a, b) {
  return a + b & 0xFFFFFFFF;
}

exports.default = md5;

},{"../../util":153}],95:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cipher = require('./cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _hash = require('./hash');

var _hash2 = _interopRequireDefault(_hash);

var _cfb = require('./cfb');

var _cfb2 = _interopRequireDefault(_cfb);

var _gcm = require('./gcm');

var _gcm2 = _interopRequireDefault(_gcm);

var _eax = require('./eax');

var _eax2 = _interopRequireDefault(_eax);

var _ocb = require('./ocb');

var _ocb2 = _interopRequireDefault(_ocb);

var _public_key = require('./public_key');

var _public_key2 = _interopRequireDefault(_public_key);

var _signature = require('./signature');

var _signature2 = _interopRequireDefault(_signature);

var _random = require('./random');

var _random2 = _interopRequireDefault(_random);

var _pkcs = require('./pkcs1');

var _pkcs2 = _interopRequireDefault(_pkcs);

var _pkcs3 = require('./pkcs5');

var _pkcs4 = _interopRequireDefault(_pkcs3);

var _crypto = require('./crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _aes_kw = require('./aes_kw');

var _aes_kw2 = _interopRequireDefault(_aes_kw);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO move cfb and gcm to cipher
const mod = {
  /** @see module:crypto/cipher */
  cipher: _cipher2.default,
  /** @see module:crypto/hash */
  hash: _hash2.default,
  /** @see module:crypto/cfb */
  cfb: _cfb2.default,
  /** @see module:crypto/gcm */
  gcm: _gcm2.default,
  experimental_gcm: _gcm2.default,
  /** @see module:crypto/eax */
  eax: _eax2.default,
  /** @see module:crypto/ocb */
  ocb: _ocb2.default,
  /** @see module:crypto/public_key */
  publicKey: _public_key2.default,
  /** @see module:crypto/signature */
  signature: _signature2.default,
  /** @see module:crypto/random */
  random: _random2.default,
  /** @see module:crypto/pkcs1 */
  pkcs1: _pkcs2.default,
  /** @see module:crypto/pkcs5 */
  pkcs5: _pkcs4.default,
  /** @see module:crypto/aes_kw */
  aes_kw: _aes_kw2.default
}; /**
    * @fileoverview Provides access to all cryptographic primitives used in OpenPGP.js
    * @see module:crypto/crypto
    * @see module:crypto/signature
    * @see module:crypto/public_key
    * @see module:crypto/cipher
    * @see module:crypto/random
    * @see module:crypto/hash
    * @module crypto
    */

Object.assign(mod, _crypto2.default);

exports.default = mod;

},{"./aes_kw":81,"./cfb":82,"./cipher":87,"./crypto":90,"./eax":91,"./gcm":92,"./hash":93,"./ocb":96,"./pkcs1":97,"./pkcs5":98,"./public_key":107,"./random":110,"./signature":111}],96:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cipher = require('./cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2018 ProtonTech AG
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This module implements AES-OCB en/decryption.
 * @requires crypto/cipher
 * @requires util
 * @module crypto/ocb
 */

const blockLength = 16;
const ivLength = 15;

// https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.2:
// While OCB [RFC7253] allows the authentication tag length to be of any
// number up to 128 bits long, this document requires a fixed
// authentication tag length of 128 bits (16 octets) for simplicity.
const tagLength = 16;

function ntz(n) {
  let ntz = 0;
  for (let i = 1; (n & i) === 0; i <<= 1) {
    ntz++;
  }
  return ntz;
}

function xorMut(S, T) {
  for (let i = 0; i < S.length; i++) {
    S[i] ^= T[i];
  }
  return S;
}

function xor(S, T) {
  return xorMut(S.slice(), T);
}

const zeroBlock = new Uint8Array(blockLength);
const one = new Uint8Array([1]);

/**
 * Class to en/decrypt using OCB mode.
 * @param  {String}     cipher      The symmetric cipher algorithm to use e.g. 'aes128'
 * @param  {Uint8Array} key         The encryption key
 */
async function OCB(cipher, key) {

  let maxNtz = 0;
  let encipher;
  let decipher;
  let mask;

  constructKeyVariables(cipher, key);

  function constructKeyVariables(cipher, key) {
    const aes = new _cipher2.default[cipher](key);
    encipher = aes.encrypt.bind(aes);
    decipher = aes.decrypt.bind(aes);

    const mask_x = encipher(zeroBlock);
    const mask_$ = _util2.default.double(mask_x);
    mask = [];
    mask[0] = _util2.default.double(mask_$);

    mask.x = mask_x;
    mask.$ = mask_$;
  }

  function extendKeyVariables(text, adata) {
    const newMaxNtz = _util2.default.nbits(Math.max(text.length, adata.length) / blockLength | 0) - 1;
    for (let i = maxNtz + 1; i <= newMaxNtz; i++) {
      mask[i] = _util2.default.double(mask[i - 1]);
    }
    maxNtz = newMaxNtz;
  }

  function hash(adata) {
    if (!adata.length) {
      // Fast path
      return zeroBlock;
    }

    //
    // Consider A as a sequence of 128-bit blocks
    //
    const m = adata.length / blockLength | 0;

    const offset = new Uint8Array(blockLength);
    const sum = new Uint8Array(blockLength);
    for (let i = 0; i < m; i++) {
      xorMut(offset, mask[ntz(i + 1)]);
      xorMut(sum, encipher(xor(offset, adata)));
      adata = adata.subarray(blockLength);
    }

    //
    // Process any final partial block; compute final hash value
    //
    if (adata.length) {
      xorMut(offset, mask.x);

      const cipherInput = new Uint8Array(blockLength);
      cipherInput.set(adata, 0);
      cipherInput[adata.length] = 0b10000000;
      xorMut(cipherInput, offset);

      xorMut(sum, encipher(cipherInput));
    }

    return sum;
  }

  /**
   * Encrypt/decrypt data.
   * @param  {encipher|decipher} fn   Encryption/decryption block cipher function
   * @param  {Uint8Array} text        The cleartext or ciphertext (without tag) input
   * @param  {Uint8Array} nonce       The nonce (15 bytes)
   * @param  {Uint8Array} adata       Associated data to sign
   * @returns {Promise<Uint8Array>}    The ciphertext or plaintext output, with tag appended in both cases
   */
  function crypt(fn, text, nonce, adata) {
    //
    // Consider P as a sequence of 128-bit blocks
    //
    const m = text.length / blockLength | 0;

    //
    // Key-dependent variables
    //
    extendKeyVariables(text, adata);

    //
    // Nonce-dependent and per-encryption variables
    //
    //    Nonce = num2str(TAGLEN mod 128,7) || zeros(120-bitlen(N)) || 1 || N
    // Note: We assume here that tagLength mod 16 == 0.
    const paddedNonce = _util2.default.concatUint8Array([zeroBlock.subarray(0, ivLength - nonce.length), one, nonce]);
    //    bottom = str2num(Nonce[123..128])
    const bottom = paddedNonce[blockLength - 1] & 0b111111;
    //    Ktop = ENCIPHER(K, Nonce[1..122] || zeros(6))
    paddedNonce[blockLength - 1] &= 0b11000000;
    const kTop = encipher(paddedNonce);
    //    Stretch = Ktop || (Ktop[1..64] xor Ktop[9..72])
    const stretched = _util2.default.concatUint8Array([kTop, xor(kTop.subarray(0, 8), kTop.subarray(1, 9))]);
    //    Offset_0 = Stretch[1+bottom..128+bottom]
    const offset = _util2.default.shiftRight(stretched.subarray(0 + (bottom >> 3), 17 + (bottom >> 3)), 8 - (bottom & 7)).subarray(1);
    //    Checksum_0 = zeros(128)
    const checksum = new Uint8Array(blockLength);

    const ct = new Uint8Array(text.length + tagLength);

    //
    // Process any whole blocks
    //
    let i;
    let pos = 0;
    for (i = 0; i < m; i++) {
      // Offset_i = Offset_{i-1} xor L_{ntz(i)}
      xorMut(offset, mask[ntz(i + 1)]);
      // C_i = Offset_i xor ENCIPHER(K, P_i xor Offset_i)
      // P_i = Offset_i xor DECIPHER(K, C_i xor Offset_i)
      ct.set(xorMut(fn(xor(offset, text)), offset), pos);
      // Checksum_i = Checksum_{i-1} xor P_i
      xorMut(checksum, fn === encipher ? text : ct.subarray(pos));

      text = text.subarray(blockLength);
      pos += blockLength;
    }

    //
    // Process any final partial block and compute raw tag
    //
    if (text.length) {
      // Offset_* = Offset_m xor L_*
      xorMut(offset, mask.x);
      // Pad = ENCIPHER(K, Offset_*)
      const padding = encipher(offset);
      // C_* = P_* xor Pad[1..bitlen(P_*)]
      ct.set(xor(text, padding), pos);

      // Checksum_* = Checksum_m xor (P_* || 1 || new Uint8Array(127-bitlen(P_*)))
      const xorInput = new Uint8Array(blockLength);
      xorInput.set(fn === encipher ? text : ct.subarray(pos, -tagLength), 0);
      xorInput[text.length] = 0b10000000;
      xorMut(checksum, xorInput);
      pos += text.length;
    }
    // Tag = ENCIPHER(K, Checksum_* xor Offset_* xor L_$) xor HASH(K,A)
    const tag = xorMut(encipher(xorMut(xorMut(checksum, offset), mask.$)), hash(adata));

    //
    // Assemble ciphertext
    //
    // C = C_1 || C_2 || ... || C_m || C_* || Tag[1..TAGLEN]
    ct.set(tag, pos);
    return ct;
  }

  return {
    /**
     * Encrypt plaintext input.
     * @param  {Uint8Array} plaintext   The cleartext input to be encrypted
     * @param  {Uint8Array} nonce       The nonce (15 bytes)
     * @param  {Uint8Array} adata       Associated data to sign
     * @returns {Promise<Uint8Array>}    The ciphertext output
     */
    encrypt: async function encrypt(plaintext, nonce, adata) {
      return crypt(encipher, plaintext, nonce, adata);
    },

    /**
     * Decrypt ciphertext input.
     * @param  {Uint8Array} ciphertext  The ciphertext input to be decrypted
     * @param  {Uint8Array} nonce       The nonce (15 bytes)
     * @param  {Uint8Array} adata       Associated data to sign
     * @returns {Promise<Uint8Array>}    The ciphertext output
     */
    decrypt: async function decrypt(ciphertext, nonce, adata) {
      if (ciphertext.length < tagLength) throw new Error('Invalid OCB ciphertext');

      const tag = ciphertext.subarray(-tagLength);
      ciphertext = ciphertext.subarray(0, -tagLength);

      const crypted = crypt(decipher, ciphertext, nonce, adata);
      // if (Tag[1..TAGLEN] == T)
      if (_util2.default.equalsUint8Array(tag, crypted.subarray(-tagLength))) {
        return crypted.subarray(0, -tagLength);
      }
      throw new Error('Authentication tag mismatch');
    }
  };
}

/**
 * Get OCB nonce as defined by {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.16.2|RFC4880bis-04, section 5.16.2}.
 * @param  {Uint8Array} iv           The initialization vector (15 bytes)
 * @param  {Uint8Array} chunkIndex   The chunk index (8 bytes)
 */
OCB.getNonce = function (iv, chunkIndex) {
  const nonce = iv.slice();
  for (let i = 0; i < chunkIndex.length; i++) {
    nonce[7 + i] ^= chunkIndex[i];
  }
  return nonce;
};

OCB.blockLength = blockLength;
OCB.ivLength = ivLength;
OCB.tagLength = tagLength;

exports.default = OCB;

},{"../util":153,"./cipher":87}],97:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _random = require('./random');

var _random2 = _interopRequireDefault(_random);

var _hash = require('./hash');

var _hash2 = _interopRequireDefault(_hash);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @namespace */
const eme = {};
/** @namespace */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Provides EME-PKCS1-v1_5 encoding and decoding and EMSA-PKCS1-v1_5 encoding function
 * @see module:crypto/public_key/rsa
 * @see module:crypto/public_key/elliptic/ecdh
 * @see module:packet.PublicKeyEncryptedSessionKey
 * @requires crypto/random
 * @requires crypto/hash
 * @requires util
 * @module crypto/pkcs1
 */

const emsa = {};

/**
 * ASN1 object identifiers for hashes
 * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.2}
 */
const hash_headers = [];
hash_headers[1] = [0x30, 0x20, 0x30, 0x0c, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10];
hash_headers[2] = [0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14];
hash_headers[3] = [0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x24, 0x03, 0x02, 0x01, 0x05, 0x00, 0x04, 0x14];
hash_headers[8] = [0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20];
hash_headers[9] = [0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30];
hash_headers[10] = [0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40];
hash_headers[11] = [0x30, 0x2d, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x05, 0x00, 0x04, 0x1C];

/**
 * Create padding with secure random data
 * @private
 * @param  {Integer} length Length of the padding in bytes
 * @returns {String}        Padding as string
 * @async
 */
async function getPkcs1Padding(length) {
  let result = '';
  while (result.length < length) {
    const randomBytes = await _random2.default.getRandomBytes(length - result.length);
    for (let i = 0; i < randomBytes.length; i++) {
      if (randomBytes[i] !== 0) {
        result += String.fromCharCode(randomBytes[i]);
      }
    }
  }
  return result;
}

/**
 * Create a EME-PKCS1-v1_5 padded message
 * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.1|RFC 4880 13.1.1}
 * @param {String} M message to be encoded
 * @param {Integer} k the length in octets of the key modulus
 * @returns {Promise<String>} EME-PKCS1 padded message
 * @async
 */
eme.encode = async function (M, k) {
  const mLen = M.length;
  // length checking
  if (mLen > k - 11) {
    throw new Error('Message too long');
  }
  // Generate an octet string PS of length k - mLen - 3 consisting of
  // pseudo-randomly generated nonzero octets
  const PS = await getPkcs1Padding(k - mLen - 3);
  // Concatenate PS, the message M, and other padding to form an
  // encoded message EM of length k octets as EM = 0x00 || 0x02 || PS || 0x00 || M.
  return String.fromCharCode(0) + String.fromCharCode(2) + PS + String.fromCharCode(0) + M;
};

/**
 * Decode a EME-PKCS1-v1_5 padded message
 * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.2|RFC 4880 13.1.2}
 * @param {String} EM encoded message, an octet string
 * @returns {String} message, an octet string
 */
eme.decode = function (EM) {
  // leading zeros truncated by bn.js
  if (EM.charCodeAt(0) !== 0) {
    EM = String.fromCharCode(0) + EM;
  }
  const firstOct = EM.charCodeAt(0);
  const secondOct = EM.charCodeAt(1);
  let i = 2;
  while (EM.charCodeAt(i) !== 0 && i < EM.length) {
    i++;
  }
  const psLen = i - 2;
  const separator = EM.charCodeAt(i++);
  if (firstOct === 0 && secondOct === 2 && psLen >= 8 && separator === 0) {
    return EM.substr(i);
  }
  throw new Error('Decryption error');
};

/**
 * Create a EMSA-PKCS1-v1_5 padded message
 * @see {@link https://tools.ietf.org/html/rfc4880#section-13.1.3|RFC 4880 13.1.3}
 * @param {Integer} algo Hash algorithm type used
 * @param {Uint8Array} hashed message to be encoded
 * @param {Integer} emLen intended length in octets of the encoded message
 * @returns {String} encoded message
 */
emsa.encode = async function (algo, hashed, emLen) {
  let i;
  const H = _util2.default.Uint8Array_to_str(hashed);
  if (H.length !== _hash2.default.getHashByteLength(algo)) {
    throw new Error('Invalid hash length');
  }
  // produce an ASN.1 DER value for the hash function used.
  // Let T be the full hash prefix
  let T = '';
  for (i = 0; i < hash_headers[algo].length; i++) {
    T += String.fromCharCode(hash_headers[algo][i]);
  }
  // add hash value to prefix
  T += H;
  // and let tLen be the length in octets of T
  const tLen = T.length;
  if (emLen < tLen + 11) {
    throw new Error('Intended encoded message length too short');
  }
  // an octet string PS consisting of emLen - tLen - 3 octets with hexadecimal value 0xFF
  // The length of PS will be at least 8 octets
  let PS = '';
  for (i = 0; i < emLen - tLen - 3; i++) {
    PS += String.fromCharCode(0xff);
  }
  // Concatenate PS, the hash prefix T, and other padding to form the
  // encoded message EM as EM = 0x00 || 0x01 || PS || 0x00 || T.
  const EM = String.fromCharCode(0x00) + String.fromCharCode(0x01) + PS + String.fromCharCode(0x00) + T;
  return _util2.default.str_to_hex(EM);
};

exports.default = { eme, emsa };

},{"../util":153,"./hash":93,"./random":110}],98:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Functions to add and remove PKCS5 padding
 * @see module:packet.PublicKeyEncryptedSessionKey
 * @module crypto/pkcs5
 */

/**
 * Add pkcs5 padding to a text.
 * @param  {String}  msg  Text to add padding
 * @returns {String}       Text with padding added
 */
function encode(msg) {
  const c = 8 - msg.length % 8;
  const padding = String.fromCharCode(c).repeat(c);
  return msg + padding;
}

/**
 * Remove pkcs5 padding from a string.
 * @param  {String}  msg  Text to remove padding from
 * @returns {String}       Text with padding removed
 */
function decode(msg) {
  const len = msg.length;
  if (len > 0) {
    const c = msg.charCodeAt(len - 1);
    if (c >= 1 && c <= 8) {
      const provided = msg.substr(len - c);
      const computed = String.fromCharCode(c).repeat(c);
      if (provided === computed) {
        return msg.substr(0, len - c);
      }
    }
  }
  throw new Error('Invalid padding');
}

exports.default = { encode, decode };

},{}],99:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _random = require('../random');

var _random2 = _interopRequireDefault(_random);

var _util = require('../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const one = new _bn2.default(1); // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview A Digital signature algorithm implementation
 * @requires bn.js
 * @requires crypto/random
 * @requires util
 * @module crypto/public_key/dsa
 */

const zero = new _bn2.default(0);

/*
  TODO regarding the hash function, read:
   https://tools.ietf.org/html/rfc4880#section-13.6
   https://tools.ietf.org/html/rfc4880#section-14
*/

exports.default = {
  /**
   * DSA Sign function
   * @param {Integer} hash_algo
   * @param {Uint8Array} hashed
   * @param {BN} g
   * @param {BN} p
   * @param {BN} q
   * @param {BN} x
   * @returns {{ r: BN, s: BN }}
   * @async
   */
  sign: async function sign(hash_algo, hashed, g, p, q, x) {
    let k;
    let r;
    let s;
    let t;
    const redp = new _bn2.default.red(p);
    const redq = new _bn2.default.red(q);
    const gred = g.toRed(redp);
    const xred = x.toRed(redq);
    // If the output size of the chosen hash is larger than the number of
    // bits of q, the hash result is truncated to fit by taking the number
    // of leftmost bits equal to the number of bits of q.  This (possibly
    // truncated) hash function result is treated as a number and used
    // directly in the DSA signature algorithm.
    const h = new _bn2.default(_util2.default.getLeftNBits(hashed, q.bitLength())).toRed(redq);
    // FIPS-186-4, section 4.6:
    // The values of r and s shall be checked to determine if r = 0 or s = 0.
    // If either r = 0 or s = 0, a new value of k shall be generated, and the
    // signature shall be recalculated. It is extremely unlikely that r = 0
    // or s = 0 if signatures are generated properly.
    while (true) {
      // See Appendix B here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
      k = await _random2.default.getRandomBN(one, q); // returns in [1, q-1]
      r = gred.redPow(k).fromRed().toRed(redq); // (g**k mod p) mod q
      if (zero.cmp(r) === 0) {
        continue;
      }
      t = h.redAdd(xred.redMul(r)); // H(m) + x*r mod q
      s = k.toRed(redq).redInvm().redMul(t); // k**-1 * (H(m) + x*r) mod q
      if (zero.cmp(s) === 0) {
        continue;
      }
      break;
    }
    return { r: r.toArrayLike(Uint8Array),
      s: s.toArrayLike(Uint8Array) };
  },

  /**
   * DSA Verify function
   * @param {Integer} hash_algo
   * @param {BN} r
   * @param {BN} s
   * @param {Uint8Array} hashed
   * @param {BN} g
   * @param {BN} p
   * @param {BN} q
   * @param {BN} y
   * @returns BN
   * @async
   */
  verify: async function verify(hash_algo, r, s, hashed, g, p, q, y) {
    if (zero.ucmp(r) >= 0 || r.ucmp(q) >= 0 || zero.ucmp(s) >= 0 || s.ucmp(q) >= 0) {
      _util2.default.print_debug("invalid DSA Signature");
      return null;
    }
    const redp = new _bn2.default.red(p);
    const redq = new _bn2.default.red(q);
    const h = new _bn2.default(_util2.default.getLeftNBits(hashed, q.bitLength()));
    const w = s.toRed(redq).redInvm(); // s**-1 mod q
    if (zero.cmp(w) === 0) {
      _util2.default.print_debug("invalid DSA Signature");
      return null;
    }
    const u1 = h.toRed(redq).redMul(w); // H(m) * w mod q
    const u2 = r.toRed(redq).redMul(w); // r * w mod q
    const t1 = g.toRed(redp).redPow(u1.fromRed()); // g**u1 mod p
    const t2 = y.toRed(redp).redPow(u2.fromRed()); // y**u2 mod p
    const v = t1.redMul(t2).fromRed().mod(q); // (g**u1 * y**u2 mod p) mod q
    return v.cmp(r) === 0;
  }
};

},{"../../util":153,"../random":110,"bn.js":17}],100:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _random = require('../random');

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview ElGamal implementation
 * @requires bn.js
 * @requires crypto/random
 * @module crypto/public_key/elgamal
 */

const zero = new _bn2.default(0);

exports.default = {
  /**
   * ElGamal Encryption function
   * @param {BN} m
   * @param {BN} p
   * @param {BN} g
   * @param {BN} y
   * @returns {{ c1: BN, c2: BN }}
   * @async
   */
  encrypt: async function encrypt(m, p, g, y) {
    const redp = new _bn2.default.red(p);
    const mred = m.toRed(redp);
    const gred = g.toRed(redp);
    const yred = y.toRed(redp);
    // See Section 11.5 here: https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_4.pdf
    const k = await _random2.default.getRandomBN(zero, p); // returns in [0, p-1]
    return {
      c1: gred.redPow(k).fromRed(),
      c2: yred.redPow(k).redMul(mred).fromRed()
    };
  },

  /**
   * ElGamal Encryption function
   * @param {BN} c1
   * @param {BN} c2
   * @param {BN} p
   * @param {BN} x
   * @returns BN
   * @async
   */
  decrypt: async function decrypt(c1, c2, p, x) {
    const redp = new _bn2.default.red(p);
    const c1red = c1.toRed(redp);
    const c2red = c2.toRed(redp);
    return c1red.redPow(x).redInvm().redMul(c2red).fromRed();
  }
};

},{"../random":110,"bn.js":17}],101:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPreferredHashAlgo = exports.generate = exports.nodeCurves = exports.webCurves = exports.curves = undefined;

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _elliptic = require('elliptic');

var _key = require('./key');

var _key2 = _interopRequireDefault(_key);

var _random = require('../../random');

var _random2 = _interopRequireDefault(_random);

var _enums = require('../../../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../../../util');

var _util2 = _interopRequireDefault(_util);

var _oid = require('../../../type/oid');

var _oid2 = _interopRequireDefault(_oid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const webCrypto = _util2.default.getWebCrypto(); // OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Wrapper of an instance of an Elliptic Curve
 * @requires bn.js
 * @requires elliptic
 * @requires crypto/public_key/elliptic/key
 * @requires crypto/random
 * @requires enums
 * @requires util
 * @requires type/oid
 * @module crypto/public_key/elliptic/curve
 */

const nodeCrypto = _util2.default.getNodeCrypto();

const webCurves = {
  'p256': 'P-256',
  'p384': 'P-384',
  'p521': 'P-521'
};
const knownCurves = nodeCrypto ? nodeCrypto.getCurves() : [];
const nodeCurves = nodeCrypto ? {
  secp256k1: knownCurves.includes('secp256k1') ? 'secp256k1' : undefined,
  p256: knownCurves.includes('prime256v1') ? 'prime256v1' : undefined,
  p384: knownCurves.includes('secp384r1') ? 'secp384r1' : undefined,
  p521: knownCurves.includes('secp521r1') ? 'secp521r1' : undefined,
  ed25519: knownCurves.includes('ED25519') ? 'ED25519' : undefined,
  curve25519: knownCurves.includes('X25519') ? 'X25519' : undefined,
  brainpoolP256r1: knownCurves.includes('brainpoolP256r1') ? 'brainpoolP256r1' : undefined,
  brainpoolP384r1: knownCurves.includes('brainpoolP384r1') ? 'brainpoolP384r1' : undefined,
  brainpoolP512r1: knownCurves.includes('brainpoolP512r1') ? 'brainpoolP512r1' : undefined
} : {};

const curves = {
  p256: {
    oid: [0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha256,
    cipher: _enums2.default.symmetric.aes128,
    node: nodeCurves.p256,
    web: webCurves.p256,
    payloadSize: 32
  },
  p384: {
    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x22],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha384,
    cipher: _enums2.default.symmetric.aes192,
    node: nodeCurves.p384,
    web: webCurves.p384,
    payloadSize: 48
  },
  p521: {
    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x23],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha512,
    cipher: _enums2.default.symmetric.aes256,
    node: nodeCurves.p521,
    web: webCurves.p521,
    payloadSize: 66
  },
  secp256k1: {
    oid: [0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x0A],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha256,
    cipher: _enums2.default.symmetric.aes128,
    node: nodeCurves.secp256k1
  },
  ed25519: {
    oid: [0x06, 0x09, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xDA, 0x47, 0x0F, 0x01],
    keyType: _enums2.default.publicKey.eddsa,
    hash: _enums2.default.hash.sha512,
    node: false // nodeCurves.ed25519 TODO
  },
  curve25519: {
    oid: [0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x97, 0x55, 0x01, 0x05, 0x01],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha256,
    cipher: _enums2.default.symmetric.aes128,
    node: false // nodeCurves.curve25519 TODO
  },
  brainpoolP256r1: {
    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x07],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha256,
    cipher: _enums2.default.symmetric.aes128,
    node: nodeCurves.brainpoolP256r1
  },
  brainpoolP384r1: {
    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x0B],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha384,
    cipher: _enums2.default.symmetric.aes192,
    node: nodeCurves.brainpoolP384r1
  },
  brainpoolP512r1: {
    oid: [0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x0D],
    keyType: _enums2.default.publicKey.ecdsa,
    hash: _enums2.default.hash.sha512,
    cipher: _enums2.default.symmetric.aes256,
    node: nodeCurves.brainpoolP512r1
  }
};

/**
 * @constructor
 */
function Curve(oid_or_name, params) {
  try {
    if (_util2.default.isArray(oid_or_name) || _util2.default.isUint8Array(oid_or_name)) {
      // by oid byte array
      oid_or_name = new _oid2.default(oid_or_name);
    }
    if (oid_or_name instanceof _oid2.default) {
      // by curve OID
      oid_or_name = oid_or_name.getName();
    }
    // by curve name or oid string
    this.name = _enums2.default.write(_enums2.default.curve, oid_or_name);
  } catch (err) {
    throw new Error('Not valid curve');
  }
  params = params || curves[this.name];

  this.keyType = params.keyType;
  switch (this.keyType) {
    case _enums2.default.publicKey.ecdsa:
      this.curve = new _elliptic.ec(this.name);
      break;
    case _enums2.default.publicKey.eddsa:
      this.curve = new _elliptic.eddsa(this.name);
      break;
    default:
      throw new Error('Unknown elliptic key type;');
  }

  this.oid = params.oid;
  this.hash = params.hash;
  this.cipher = params.cipher;
  this.node = params.node && curves[this.name];
  this.web = params.web && curves[this.name];
  this.payloadSize = params.payloadSize;
}

Curve.prototype.keyFromPrivate = function (priv) {
  // Not for ed25519
  return new _key2.default(this, { priv: priv });
};

Curve.prototype.keyFromPublic = function (pub) {
  const keyPair = new _key2.default(this, { pub: pub });
  if (this.keyType === _enums2.default.publicKey.ecdsa && keyPair.keyPair.validate().result !== true) {
    throw new Error('Invalid elliptic public key');
  }
  return keyPair;
};

Curve.prototype.genKeyPair = async function () {
  let keyPair;
  if (this.web && _util2.default.getWebCrypto()) {
    // If browser doesn't support a curve, we'll catch it
    try {
      keyPair = await webGenKeyPair(this.name);
    } catch (err) {
      _util2.default.print_debug("Browser did not support signing: " + err.message);
    }
  } else if (this.node && _util2.default.getNodeCrypto()) {
    keyPair = await nodeGenKeyPair(this.name);
  }

  if (!keyPair || !keyPair.priv) {
    // elliptic fallback
    const r = await this.curve.genKeyPair({
      entropy: _util2.default.Uint8Array_to_str((await _random2.default.getRandomBytes(32)))
    });
    const compact = this.curve.curve.type === 'edwards' || this.curve.curve.type === 'mont';
    if (this.keyType === _enums2.default.publicKey.eddsa) {
      keyPair = { secret: r.getSecret() };
    } else {
      keyPair = { pub: r.getPublic('array', compact), priv: r.getPrivate().toArray() };
    }
  }
  return new _key2.default(this, keyPair);
};

async function generate(curve) {
  curve = new Curve(curve);
  const keyPair = await curve.genKeyPair();
  return {
    oid: curve.oid,
    Q: new _bn2.default(keyPair.getPublic()),
    d: new _bn2.default(keyPair.getPrivate()),
    hash: curve.hash,
    cipher: curve.cipher
  };
}

function getPreferredHashAlgo(oid) {
  return curves[_enums2.default.write(_enums2.default.curve, oid.toHex())].hash;
}

exports.default = Curve;
exports.curves = curves;
exports.webCurves = webCurves;
exports.nodeCurves = nodeCurves;
exports.generate = generate;
exports.getPreferredHashAlgo = getPreferredHashAlgo;

//////////////////////////
//                      //
//   Helper functions   //
//                      //
//////////////////////////


async function webGenKeyPair(name) {
  // Note: keys generated with ECDSA and ECDH are structurally equivalent
  const webCryptoKey = await webCrypto.generateKey({ name: "ECDSA", namedCurve: webCurves[name] }, true, ["sign", "verify"]);

  const privateKey = await webCrypto.exportKey("jwk", webCryptoKey.privateKey);
  const publicKey = await webCrypto.exportKey("jwk", webCryptoKey.publicKey);

  return {
    pub: {
      x: _util2.default.b64_to_Uint8Array(publicKey.x, true),
      y: _util2.default.b64_to_Uint8Array(publicKey.y, true)
    },
    priv: _util2.default.b64_to_Uint8Array(privateKey.d, true)
  };
}

async function nodeGenKeyPair(name) {
  // Note: ECDSA and ECDH key generation is structurally equivalent
  const ecdh = nodeCrypto.createECDH(nodeCurves[name]);
  await ecdh.generateKeys();

  return {
    pub: ecdh.getPublicKey().toJSON().data,
    priv: ecdh.getPrivateKey().toJSON().data
  };
}

},{"../../../enums":114,"../../../type/oid":151,"../../../util":153,"../../random":110,"./key":106,"bn.js":17,"elliptic":19}],102:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _naclFastLight = require('tweetnacl/nacl-fast-light.js');

var _naclFastLight2 = _interopRequireDefault(_naclFastLight);

var _curves = require('./curves');

var _curves2 = _interopRequireDefault(_curves);

var _aes_kw = require('../../aes_kw');

var _aes_kw2 = _interopRequireDefault(_aes_kw);

var _cipher = require('../../cipher');

var _cipher2 = _interopRequireDefault(_cipher);

var _hash = require('../../hash');

var _hash2 = _interopRequireDefault(_hash);

var _kdf_params = require('../../../type/kdf_params');

var _kdf_params2 = _interopRequireDefault(_kdf_params);

var _enums = require('../../../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Build Param for ECDH algorithm (RFC 6637)
function buildEcdhParam(public_algo, oid, cipher_algo, hash_algo, fingerprint) {
  const kdf_params = new _kdf_params2.default([hash_algo, cipher_algo]);
  return _util2.default.concatUint8Array([oid.write(), new Uint8Array([public_algo]), kdf_params.write(), _util2.default.str_to_Uint8Array("Anonymous Sender    "), fingerprint.subarray(0, 20)]);
}

// Key Derivation Function (RFC 6637)
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Key encryption and decryption for RFC 6637 ECDH
 * @requires bn.js
 * @requires tweetnacl
 * @requires crypto/public_key/elliptic/curve
 * @requires crypto/aes_kw
 * @requires crypto/cipher
 * @requires crypto/hash
 * @requires type/kdf_params
 * @requires enums
 * @requires util
 * @module crypto/public_key/elliptic/ecdh
 */

async function kdf(hash_algo, X, length, param, stripLeading = false, stripTrailing = false) {
  // Note: X is little endian for Curve25519, big-endian for all others.
  // This is not ideal, but the RFC's are unclear
  // https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-02#appendix-B
  let i;
  if (stripLeading) {
    // Work around old go crypto bug
    for (i = 0; i < X.length && X[i] === 0; i++);
    X = X.subarray(i);
  }
  if (stripTrailing) {
    // Work around old OpenPGP.js bug
    for (i = X.length - 1; i >= 0 && X[i] === 0; i--);
    X = X.subarray(0, i + 1);
  }
  const digest = await _hash2.default.digest(hash_algo, _util2.default.concatUint8Array([new Uint8Array([0, 0, 0, 1]), X, param]));
  return digest.subarray(0, length);
}

/**
 * Generate ECDHE ephemeral key and secret from public key
 *
 * @param  {Curve}                  curve        Elliptic curve object
 * @param  {Uint8Array}             Q                   Recipient public key
 * @returns {Promise<{V: Uint8Array, S: BN}>}   Returns public part of ephemeral key and generated ephemeral secret
 * @async
 */
async function genPublicEphemeralKey(curve, Q) {
  if (curve.name === 'curve25519') {
    var _nacl$box$keyPair = _naclFastLight2.default.box.keyPair();

    const d = _nacl$box$keyPair.secretKey;

    var _ref = await genPrivateEphemeralKey(curve, Q, d);

    const secretKey = _ref.secretKey,
          sharedKey = _ref.sharedKey;

    var _nacl$box$keyPair$fro = _naclFastLight2.default.box.keyPair.fromSecretKey(secretKey);

    let publicKey = _nacl$box$keyPair$fro.publicKey;

    publicKey = _util2.default.concatUint8Array([new Uint8Array([0x40]), publicKey]);
    return { publicKey, sharedKey }; // Note: sharedKey is little-endian here, unlike below
  }
  const v = await curve.genKeyPair();
  Q = curve.keyFromPublic(Q);
  const publicKey = new Uint8Array(v.getPublic());
  const S = v.derive(Q);
  const len = curve.curve.curve.p.byteLength();
  const sharedKey = S.toArrayLike(Uint8Array, 'be', len);
  return { publicKey, sharedKey };
}

/**
 * Encrypt and wrap a session key
 *
 * @param  {module:type/oid}        oid          Elliptic curve object identifier
 * @param  {module:enums.symmetric} cipher_algo  Symmetric cipher to use
 * @param  {module:enums.hash}      hash_algo    Hash algorithm to use
 * @param  {module:type/mpi}        m            Value derived from session key (RFC 6637)
 * @param  {Uint8Array}             Q            Recipient public key
 * @param  {String}                 fingerprint  Recipient fingerprint
 * @returns {Promise<{V: BN, C: BN}>}            Returns public part of ephemeral key and encoded session key
 * @async
 */
async function encrypt(oid, cipher_algo, hash_algo, m, Q, fingerprint) {
  const curve = new _curves2.default(oid);

  var _ref2 = await genPublicEphemeralKey(curve, Q);

  const publicKey = _ref2.publicKey,
        sharedKey = _ref2.sharedKey;

  const param = buildEcdhParam(_enums2.default.publicKey.ecdh, oid, cipher_algo, hash_algo, fingerprint);
  cipher_algo = _enums2.default.read(_enums2.default.symmetric, cipher_algo);
  const Z = await kdf(hash_algo, sharedKey, _cipher2.default[cipher_algo].keySize, param);
  const wrappedKey = _aes_kw2.default.wrap(Z, m.toString());
  return { publicKey, wrappedKey };
}

/**
 * Generate ECDHE secret from private key and public part of ephemeral key
 *
 * @param  {Curve}                  curve        Elliptic curve object
 * @param  {Uint8Array}             V            Public part of ephemeral key
 * @param  {Uint8Array}             d            Recipient private key
 * @returns {Promise<BN>}                        Generated ephemeral secret
 * @async
 */
async function genPrivateEphemeralKey(curve, V, d) {
  if (curve.name === 'curve25519') {
    const one = new _bn2.default(1);
    const mask = one.ushln(255 - 3).sub(one).ushln(3);
    let secretKey = new _bn2.default(d);
    secretKey = secretKey.or(one.ushln(255 - 1));
    secretKey = secretKey.and(mask);
    secretKey = secretKey.toArrayLike(Uint8Array, 'le', 32);
    const sharedKey = _naclFastLight2.default.scalarMult(secretKey, V.subarray(1));
    return { secretKey, sharedKey }; // Note: sharedKey is little-endian here, unlike below
  }
  V = curve.keyFromPublic(V);
  d = curve.keyFromPrivate(d);
  const secretKey = new Uint8Array(d.getPrivate());
  const S = d.derive(V);
  const len = curve.curve.curve.p.byteLength();
  const sharedKey = S.toArrayLike(Uint8Array, 'be', len);
  return { secretKey, sharedKey };
}

/**
 * Decrypt and unwrap the value derived from session key
 *
 * @param  {module:type/oid}        oid          Elliptic curve object identifier
 * @param  {module:enums.symmetric} cipher_algo  Symmetric cipher to use
 * @param  {module:enums.hash}      hash_algo    Hash algorithm to use
 * @param  {Uint8Array}             V            Public part of ephemeral key
 * @param  {Uint8Array}             C            Encrypted and wrapped value derived from session key
 * @param  {Uint8Array}             d            Recipient private key
 * @param  {String}                 fingerprint  Recipient fingerprint
 * @returns {Promise<BN>}                        Value derived from session
 * @async
 */
async function decrypt(oid, cipher_algo, hash_algo, V, C, d, fingerprint) {
  const curve = new _curves2.default(oid);

  var _ref3 = await genPrivateEphemeralKey(curve, V, d);

  const sharedKey = _ref3.sharedKey;

  const param = buildEcdhParam(_enums2.default.publicKey.ecdh, oid, cipher_algo, hash_algo, fingerprint);
  cipher_algo = _enums2.default.read(_enums2.default.symmetric, cipher_algo);
  let err;
  for (let i = 0; i < 3; i++) {
    try {
      // Work around old go crypto bug and old OpenPGP.js bug, respectively.
      const Z = await kdf(hash_algo, sharedKey, _cipher2.default[cipher_algo].keySize, param, i === 1, i === 2);
      return new _bn2.default(_aes_kw2.default.unwrap(Z, C));
    } catch (e) {
      err = e;
    }
  }
  throw err;
}

exports.default = { encrypt, decrypt, genPublicEphemeralKey, genPrivateEphemeralKey, buildEcdhParam, kdf };

},{"../../../enums":114,"../../../type/kdf_params":148,"../../../util":153,"../../aes_kw":81,"../../cipher":87,"../../hash":93,"./curves":101,"bn.js":17,"tweetnacl/nacl-fast-light.js":73}],103:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curves = require('./curves');

var _curves2 = _interopRequireDefault(_curves);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sign a message using the provided key
 * @param  {module:type/oid}   oid       Elliptic curve object identifier
 * @param  {module:enums.hash} hash_algo Hash algorithm used to sign
 * @param  {Uint8Array}        m         Message to sign
 * @param  {Uint8Array}        d         Private key used to sign the message
 * @param  {Uint8Array}        hashed    The hashed message
 * @returns {{r: Uint8Array,
 *            s: Uint8Array}}            Signature of the message
 * @async
 */
async function sign(oid, hash_algo, m, d, hashed) {
  const curve = new _curves2.default(oid);
  const key = curve.keyFromPrivate(d);
  const signature = await key.sign(m, hash_algo, hashed);
  return { r: signature.r.toArrayLike(Uint8Array),
    s: signature.s.toArrayLike(Uint8Array) };
}

/**
 * Verifies if a signature is valid for a message
 * @param  {module:type/oid}   oid       Elliptic curve object identifier
 * @param  {module:enums.hash} hash_algo Hash algorithm used in the signature
 * @param  {{r: Uint8Array,
             s: Uint8Array}}   signature Signature to verify
 * @param  {Uint8Array}        m         Message to verify
 * @param  {Uint8Array}        Q         Public key used to verify the message
 * @param  {Uint8Array}        hashed    The hashed message
 * @returns {Boolean}
 * @async
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Implementation of ECDSA following RFC6637 for Openpgpjs
 * @requires crypto/public_key/elliptic/curve
 * @module crypto/public_key/elliptic/ecdsa
 */

async function verify(oid, hash_algo, signature, m, Q, hashed) {
  const curve = new _curves2.default(oid);
  const key = curve.keyFromPublic(Q);
  return key.verify(m, signature, hash_algo, hashed);
}

exports.default = { sign, verify };

},{"./curves":101}],104:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ = require('hash.js/lib/hash/sha/512');

var _2 = _interopRequireDefault(_);

var _naclFastLight = require('tweetnacl/nacl-fast-light.js');

var _naclFastLight2 = _interopRequireDefault(_naclFastLight);

var _util = require('../../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_naclFastLight2.default.hash = bytes => new Uint8Array((0, _2.default)().update(bytes).digest());

/**
 * Sign a message using the provided key
 * @param  {module:type/oid}   oid       Elliptic curve object identifier
 * @param  {module:enums.hash} hash_algo Hash algorithm used to sign
 * @param  {Uint8Array}        m         Message to sign
 * @param  {Uint8Array}        d         Private key used to sign
 * @param  {Uint8Array}        hashed    The hashed message
 * @returns {{R: Uint8Array,
 *            S: Uint8Array}}            Signature of the message
 * @async
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2018 Proton Technologies AG
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Implementation of EdDSA following RFC4880bis-03 for OpenPGP
 * @requires hash.js
 * @requires tweetnacl
 * @requires crypto/public_key/elliptic/curve
 * @requires util
 * @module crypto/public_key/elliptic/eddsa
 */

async function sign(oid, hash_algo, m, d, hashed) {
  var _nacl$sign$keyPair$fr = _naclFastLight2.default.sign.keyPair.fromSeed(d);

  const secretKey = _nacl$sign$keyPair$fr.secretKey;

  const signature = _naclFastLight2.default.sign.detached(hashed, secretKey);
  // EdDSA signature params are returned in little-endian format
  return {
    R: signature.subarray(0, 32),
    S: signature.subarray(32)
  };
}

/**
 * Verifies if a signature is valid for a message
 * @param  {module:type/oid}   oid       Elliptic curve object identifier
 * @param  {module:enums.hash} hash_algo Hash algorithm used in the signature
 * @param  {{R: Uint8Array,
             S: Uint8Array}}   signature Signature to verify the message
 * @param  {Uint8Array}        m         Message to verify
 * @param  {Uint8Array}        publicKey Public key used to verify the message
 * @param  {Uint8Array}        hashed    The hashed message
 * @returns {Boolean}
 * @async
 */
async function verify(oid, hash_algo, { R, S }, m, publicKey, hashed) {
  const signature = _util2.default.concatUint8Array([R, S]);
  return _naclFastLight2.default.sign.detached.verify(hashed, signature, publicKey.subarray(1));
}

exports.default = { sign, verify };

},{"../../../util":153,"hash.js/lib/hash/sha/512":44,"tweetnacl/nacl-fast-light.js":73}],105:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curves = require('./curves');

var _curves2 = _interopRequireDefault(_curves);

var _ecdsa = require('./ecdsa');

var _ecdsa2 = _interopRequireDefault(_ecdsa);

var _eddsa = require('./eddsa');

var _eddsa2 = _interopRequireDefault(_eddsa);

var _ecdh = require('./ecdh');

var _ecdh2 = _interopRequireDefault(_ecdh);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Functions to access Elliptic Curve Cryptography
 * @see module:crypto/public_key/elliptic/curve
 * @see module:crypto/public_key/elliptic/ecdh
 * @see module:crypto/public_key/elliptic/ecdsa
 * @see module:crypto/public_key/elliptic/eddsa
 * @module crypto/public_key/elliptic
 */

exports.default = {
  Curve: _curves2.default, ecdh: _ecdh2.default, ecdsa: _ecdsa2.default, eddsa: _eddsa2.default, generate: _curves.generate, getPreferredHashAlgo: _curves.getPreferredHashAlgo
};

},{"./curves":101,"./ecdh":102,"./ecdsa":103,"./eddsa":104}],106:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _curves = require('./curves');

var _util = require('../../../util');

var _util2 = _interopRequireDefault(_util);

var _enums = require('../../../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const webCrypto = _util2.default.getWebCrypto(); // OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Wrapper for a KeyPair of an Elliptic Curve
 * @requires bn.js
 * @requires web-stream-tools
 * @requires crypto/public_key/elliptic/curves
 * @requires util
 * @requires enums
 * @requires asn1.js
 * @module crypto/public_key/elliptic/key
 */

const nodeCrypto = _util2.default.getNodeCrypto();

/**
 * @constructor
 */
function KeyPair(curve, options) {
  this.curve = curve;
  this.keyType = curve.curve.type === 'edwards' ? _enums2.default.publicKey.eddsa : _enums2.default.publicKey.ecdsa;
  this.keyPair = this.curve.curve.keyPair(options);
}

KeyPair.prototype.sign = async function (message, hash_algo, hashed) {
  if (message && !message.locked) {
    message = await _webStreamTools2.default.readToEnd(message);
    if (this.curve.web && _util2.default.getWebCrypto()) {
      // If browser doesn't support a curve, we'll catch it
      try {
        // need to await to make sure browser succeeds
        const signature = await webSign(this.curve, hash_algo, message, this.keyPair);
        return signature;
      } catch (err) {
        _util2.default.print_debug("Browser did not support signing: " + err.message);
      }
    } else if (this.curve.node && _util2.default.getNodeCrypto()) {
      return nodeSign(this.curve, hash_algo, message, this.keyPair);
    }
  }
  const digest = typeof hash_algo === 'undefined' ? message : hashed;
  return this.keyPair.sign(digest);
};

KeyPair.prototype.verify = async function (message, signature, hash_algo, hashed) {
  if (message && !message.locked) {
    message = await _webStreamTools2.default.readToEnd(message);
    if (this.curve.web && _util2.default.getWebCrypto()) {
      // If browser doesn't support a curve, we'll catch it
      try {
        // need to await to make sure browser succeeds
        const result = await webVerify(this.curve, hash_algo, signature, message, this.keyPair.getPublic());
        return result;
      } catch (err) {
        _util2.default.print_debug("Browser did not support signing: " + err.message);
      }
    } else if (this.curve.node && _util2.default.getNodeCrypto()) {
      return nodeVerify(this.curve, hash_algo, signature, message, this.keyPair.getPublic());
    }
  }
  const digest = typeof hash_algo === 'undefined' ? message : hashed;
  return this.keyPair.verify(digest, signature);
};

KeyPair.prototype.derive = function (pub) {
  if (this.keyType === _enums2.default.publicKey.eddsa) {
    throw new Error('Key can only be used for EdDSA');
  }
  return this.keyPair.derive(pub.keyPair.getPublic());
};

KeyPair.prototype.getPublic = function () {
  const compact = this.curve.curve.curve.type === 'edwards' || this.curve.curve.curve.type === 'mont';
  return this.keyPair.getPublic('array', compact);
};

KeyPair.prototype.getPrivate = function () {
  if (this.curve.keyType === _enums2.default.publicKey.eddsa) {
    return this.keyPair.getSecret();
  }
  return this.keyPair.getPrivate().toArray();
};

exports.default = KeyPair;

//////////////////////////
//                      //
//   Helper functions   //
//                      //
//////////////////////////


async function webSign(curve, hash_algo, message, keyPair) {
  const len = curve.payloadSize;
  const key = await webCrypto.importKey("jwk", {
    "kty": "EC",
    "crv": _curves.webCurves[curve.name],
    "x": _util2.default.Uint8Array_to_b64(new Uint8Array(keyPair.getPublic().getX().toArray('be', len)), true),
    "y": _util2.default.Uint8Array_to_b64(new Uint8Array(keyPair.getPublic().getY().toArray('be', len)), true),
    "d": _util2.default.Uint8Array_to_b64(new Uint8Array(keyPair.getPrivate().toArray('be', len)), true),
    "use": "sig",
    "kid": "ECDSA Private Key"
  }, {
    "name": "ECDSA",
    "namedCurve": _curves.webCurves[curve.name],
    "hash": { name: _enums2.default.read(_enums2.default.webHash, curve.hash) }
  }, false, ["sign"]);

  const signature = new Uint8Array((await webCrypto.sign({
    "name": 'ECDSA',
    "namedCurve": _curves.webCurves[curve.name],
    "hash": { name: _enums2.default.read(_enums2.default.webHash, hash_algo) }
  }, key, message)));

  return {
    r: new _bn2.default(signature.slice(0, len)),
    s: new _bn2.default(signature.slice(len, len << 1))
  };
}

async function webVerify(curve, hash_algo, { r, s }, message, publicKey) {
  const len = curve.payloadSize;
  const key = await webCrypto.importKey("jwk", {
    "kty": "EC",
    "crv": _curves.webCurves[curve.name],
    "x": _util2.default.Uint8Array_to_b64(new Uint8Array(publicKey.getX().toArray('be', len)), true),
    "y": _util2.default.Uint8Array_to_b64(new Uint8Array(publicKey.getY().toArray('be', len)), true),
    "use": "sig",
    "kid": "ECDSA Public Key"
  }, {
    "name": "ECDSA",
    "namedCurve": _curves.webCurves[curve.name],
    "hash": { name: _enums2.default.read(_enums2.default.webHash, curve.hash) }
  }, false, ["verify"]);

  const signature = _util2.default.concatUint8Array([new Uint8Array(len - r.length), r, new Uint8Array(len - s.length), s]).buffer;

  return webCrypto.verify({
    "name": 'ECDSA',
    "namedCurve": _curves.webCurves[curve.name],
    "hash": { name: _enums2.default.read(_enums2.default.webHash, hash_algo) }
  }, key, signature, message);
}

async function nodeSign(curve, hash_algo, message, keyPair) {
  const sign = nodeCrypto.createSign(_enums2.default.read(_enums2.default.hash, hash_algo));
  sign.write(message);
  sign.end();

  const key = ECPrivateKey.encode({
    version: 1,
    parameters: curve.oid,
    privateKey: keyPair.getPrivate().toArray(),
    publicKey: { unused: 0, data: keyPair.getPublic().encode() }
  }, 'pem', {
    label: 'EC PRIVATE KEY'
  });

  return ECDSASignature.decode(sign.sign(key), 'der');
}

async function nodeVerify(curve, hash_algo, { r, s }, message, publicKey) {
  const verify = nodeCrypto.createVerify(_enums2.default.read(_enums2.default.hash, hash_algo));
  verify.write(message);
  verify.end();

  const key = SubjectPublicKeyInfo.encode({
    algorithm: {
      algorithm: [1, 2, 840, 10045, 2, 1],
      parameters: curve.oid
    },
    subjectPublicKey: { unused: 0, data: publicKey.encode() }
  }, 'pem', {
    label: 'PUBLIC KEY'
  });

  const signature = ECDSASignature.encode({
    r: new _bn2.default(r), s: new _bn2.default(s)
  }, 'der');

  try {
    return verify.verify(key, signature);
  } catch (err) {
    return false;
  }
}

// Originally written by Owen Smith https://github.com/omsmith
// Adapted on Feb 2018 from https://github.com/Brightspace/node-jwk-to-pem/

/* eslint-disable no-invalid-this */

const asn1 = nodeCrypto ? dereq_asn1 : undefined;

const ECDSASignature = nodeCrypto ? asn1.define('ECDSASignature', function () {
  this.seq().obj(this.key('r').int(), this.key('s').int());
}) : undefined;

const ECPrivateKey = nodeCrypto ? asn1.define('ECPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').explicit(0).optional().any(), this.key('publicKey').explicit(1).optional().bitstr());
}) : undefined;

const AlgorithmIdentifier = nodeCrypto ? asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional().any());
}) : undefined;

const SubjectPublicKeyInfo = nodeCrypto ? asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
}) : undefined;

},{"../../../enums":114,"../../../util":153,"./curves":101,"asn1.js":"asn1.js","bn.js":17,"web-stream-tools":76}],107:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _naclFastLight = require('tweetnacl/nacl-fast-light.js');

var _naclFastLight2 = _interopRequireDefault(_naclFastLight);

var _rsa = require('./rsa');

var _rsa2 = _interopRequireDefault(_rsa);

var _elgamal = require('./elgamal');

var _elgamal2 = _interopRequireDefault(_elgamal);

var _elliptic = require('./elliptic');

var _elliptic2 = _interopRequireDefault(_elliptic);

var _dsa = require('./dsa');

var _dsa2 = _interopRequireDefault(_dsa);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  /** @see module:crypto/public_key/rsa */
  rsa: _rsa2.default,
  /** @see module:crypto/public_key/elgamal */
  elgamal: _elgamal2.default,
  /** @see module:crypto/public_key/elliptic */
  elliptic: _elliptic2.default,
  /** @see module:crypto/public_key/dsa */
  dsa: _dsa2.default,
  /** @see tweetnacl */
  nacl: _naclFastLight2.default
}; /**
    * @fileoverview Asymmetric cryptography functions
    * @requires tweetnacl
    * @requires crypto/public_key/dsa
    * @requires crypto/public_key/elgamal
    * @requires crypto/public_key/elliptic
    * @requires crypto/public_key/rsa
    * @module crypto/public_key
    */

},{"./dsa":99,"./elgamal":100,"./elliptic":105,"./rsa":109,"tweetnacl/nacl-fast-light.js":73}],108:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _random = require('../random');

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2018 Proton Technologies AG
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Algorithms for probabilistic random prime generation
 * @requires bn.js
 * @requires crypto/random
 * @module crypto/public_key/prime
 */

exports.default = {
  randomProbablePrime, isProbablePrime, fermat, millerRabin, divisionTest
};

/**
 * Probabilistic random number generator
 * @param {Integer} bits Bit length of the prime
 * @param {BN}      e    Optional RSA exponent to check against the prime
 * @param {Integer} k    Optional number of iterations of Miller-Rabin test
 * @returns BN
 * @async
 */

async function randomProbablePrime(bits, e, k) {
  const min = new _bn2.default(1).shln(bits - 1);
  const thirty = new _bn2.default(30);
  /*
   * We can avoid any multiples of 3 and 5 by looking at n mod 30
   * n mod 30 = 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
   * the next possible prime is mod 30:
   *            1  7  7  7  7  7  7 11 11 11 11 13 13 17 17 17 17 19 19 23 23 23 23 29 29 29 29 29 29 1
   */
  const adds = [1, 6, 5, 4, 3, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 2];

  let n = await _random2.default.getRandomBN(min, min.shln(1));
  let i = n.mod(thirty).toNumber();

  do {
    n.iaddn(adds[i]);
    i = (i + adds[i]) % adds.length;
    // If reached the maximum, go back to the minimum.
    if (n.bitLength() > bits) {
      n = n.mod(min.shln(1)).iadd(min);
      i = n.mod(thirty).toNumber();
    }
  } while (!(await isProbablePrime(n, e, k)));
  return n;
}

/**
 * Probabilistic primality testing
 * @param {BN}      n Number to test
 * @param {BN}      e Optional RSA exponent to check against the prime
 * @param {Integer} k Optional number of iterations of Miller-Rabin test
 * @returns {boolean}
 * @async
 */
async function isProbablePrime(n, e, k) {
  if (e && !n.subn(1).gcd(e).eqn(1)) {
    return false;
  }
  if (!divisionTest(n)) {
    return false;
  }
  if (!fermat(n)) {
    return false;
  }
  if (!(await millerRabin(n, k))) {
    return false;
  }
  // TODO implement the Lucas test
  // See Section C.3.3 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
  return true;
}

/**
 * Tests whether n is probably prime or not using Fermat's test with b = 2.
 * Fails if b^(n-1) mod n === 1.
 * @param {BN}      n Number to test
 * @param {Integer} b Optional Fermat test base
 * @returns {boolean}
 */
function fermat(n, b) {
  b = b || new _bn2.default(2);
  return b.toRed(_bn2.default.mont(n)).redPow(n.subn(1)).fromRed().cmpn(1) === 0;
}

function divisionTest(n) {
  return small_primes.every(m => {
    return n.modn(m) !== 0;
  });
}

// https://github.com/gpg/libgcrypt/blob/master/cipher/primegen.c
const small_primes = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999];

// Miller-Rabin - Miller Rabin algorithm for primality test
// Copyright Fedor Indutny, 2014.
//
// This software is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Adapted on Jan 2018 from version 4.0.1 at https://github.com/indutny/miller-rabin

// Sample syntax for Fixed-Base Miller-Rabin:
// millerRabin(n, k, () => new BN(small_primes[Math.random() * small_primes.length | 0]))

/**
 * Tests whether n is probably prime or not using the Miller-Rabin test.
 * See HAC Remark 4.28.
 * @param {BN}       n    Number to test
 * @param {Integer}  k    Optional number of iterations of Miller-Rabin test
 * @param {Function} rand Optional function to generate potential witnesses
 * @returns {boolean}
 * @async
 */
async function millerRabin(n, k, rand) {
  const len = n.bitLength();
  const red = _bn2.default.mont(n);
  const rone = new _bn2.default(1).toRed(red);

  if (!k) {
    k = Math.max(1, len / 48 | 0);
  }

  const n1 = n.subn(1);
  const rn1 = n1.toRed(red);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  let s = 0;
  while (!n1.testn(s)) {
    s++;
  }
  const d = n.shrn(s);

  for (; k > 0; k--) {
    const a = rand ? rand() : await _random2.default.getRandomBN(new _bn2.default(2), n1);

    let x = a.toRed(red).redPow(d);
    if (x.eq(rone) || x.eq(rn1)) {
      continue;
    }

    let i;
    for (i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.eq(rone)) {
        return false;
      }
      if (x.eq(rn1)) {
        break;
      }
    }

    if (i === s) {
      return false;
    }
  }

  return true;
}

},{"../random":110,"bn.js":17}],109:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _prime = require('./prime');

var _prime2 = _interopRequireDefault(_prime);

var _random = require('../random');

var _random2 = _interopRequireDefault(_random);

var _config = require('../../config');

var _config2 = _interopRequireDefault(_config);

var _util = require('../../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Helper for IE11 KeyOperation objects
function promisifyIE11Op(keyObj, err) {
  if (typeof keyObj.then !== 'function') {
    // IE11 KeyOperation
    return new Promise(function (resolve, reject) {
      keyObj.onerror = function () {
        reject(new Error(err));
      };
      keyObj.oncomplete = function (e) {
        resolve(e.target.result);
      };
    });
  }
  return keyObj;
} // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview RSA implementation
 * @requires bn.js
 * @requires crypto/public_key/prime
 * @requires crypto/random
 * @requires config
 * @requires util
 * @module crypto/public_key/rsa
 */

exports.default = {
  /** Create signature
   * @param {BN} m message
   * @param {BN} n RSA public modulus
   * @param {BN} e RSA public exponent
   * @param {BN} d RSA private exponent
   * @returns {BN} RSA Signature
   * @async
   */
  sign: async function sign(m, n, e, d) {
    if (n.cmp(m) <= 0) {
      throw new Error('Message size cannot exceed modulus size');
    }
    const nred = new _bn2.default.red(n);
    return m.toRed(nred).redPow(d).toArrayLike(Uint8Array, 'be', n.byteLength());
  },

  /**
   * Verify signature
   * @param {BN} s signature
   * @param {BN} n RSA public modulus
   * @param {BN} e RSA public exponent
   * @returns {BN}
   * @async
   */
  verify: async function verify(s, n, e) {
    if (n.cmp(s) <= 0) {
      throw new Error('Signature size cannot exceed modulus size');
    }
    const nred = new _bn2.default.red(n);
    return s.toRed(nred).redPow(e).toArrayLike(Uint8Array, 'be', n.byteLength());
  },

  /**
   * Encrypt message
   * @param {BN} m message
   * @param {BN} n RSA public modulus
   * @param {BN} e RSA public exponent
   * @returns {BN} RSA Ciphertext
   * @async
   */
  encrypt: async function encrypt(m, n, e) {
    if (n.cmp(m) <= 0) {
      throw new Error('Message size cannot exceed modulus size');
    }
    const nred = new _bn2.default.red(n);
    return m.toRed(nred).redPow(e).toArrayLike(Uint8Array, 'be', n.byteLength());
  },

  /**
   * Decrypt RSA message
   * @param {BN} m message
   * @param {BN} n RSA public modulus
   * @param {BN} e RSA public exponent
   * @param {BN} d RSA private exponent
   * @param {BN} p RSA private prime p
   * @param {BN} q RSA private prime q
   * @param {BN} u RSA private inverse of prime q
   * @returns {BN} RSA Plaintext
   * @async
   */
  decrypt: async function decrypt(m, n, e, d, p, q, u) {
    if (n.cmp(m) <= 0) {
      throw new Error('Data too large.');
    }
    const dq = d.mod(q.subn(1)); // d mod (q-1)
    const dp = d.mod(p.subn(1)); // d mod (p-1)
    const pred = new _bn2.default.red(p);
    const qred = new _bn2.default.red(q);
    const nred = new _bn2.default.red(n);

    let blinder;
    let unblinder;
    if (_config2.default.rsa_blinding) {
      unblinder = (await _random2.default.getRandomBN(new _bn2.default(2), n)).toRed(nred);
      blinder = unblinder.redInvm().redPow(e);
      m = m.toRed(nred).redMul(blinder).fromRed();
    }

    const mp = m.toRed(pred).redPow(dp);
    const mq = m.toRed(qred).redPow(dq);
    const t = mq.redSub(mp.fromRed().toRed(qred));
    const h = u.toRed(qred).redMul(t).fromRed();

    let result = h.mul(p).add(mp).toRed(nred);

    if (_config2.default.rsa_blinding) {
      result = result.redMul(unblinder);
    }

    return result.toArrayLike(Uint8Array, 'be', n.byteLength());
  },

  /**
   * Generate a new random private key B bits long with public exponent E.
   *
   * When possible, webCrypto is used. Otherwise, primes are generated using
   * 40 rounds of the Miller-Rabin probabilistic random prime generation algorithm.
   * @see module:crypto/public_key/prime
   * @param {Integer} B RSA bit length
   * @param {String}  E RSA public exponent in hex string
   * @returns {{n: BN, e: BN, d: BN,
   *            p: BN, q: BN, u: BN}} RSA public modulus, RSA public exponent, RSA private exponent,
   *                                  RSA private prime p, RSA private prime q, u = q ** -1 mod p
   * @async
   */
  generate: async function generate(B, E) {
    let key;
    E = new _bn2.default(E, 16);
    const webCrypto = _util2.default.getWebCryptoAll();

    // Native RSA keygen using Web Crypto
    if (webCrypto) {
      let keyPair;
      let keyGenOpt;
      if (window.crypto && window.crypto.subtle || window.msCrypto) {
        // current standard spec
        keyGenOpt = {
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: B, // the specified keysize in bits
          publicExponent: E.toArrayLike(Uint8Array), // take three bytes (max 65537) for exponent
          hash: {
            name: 'SHA-1' // not required for actual RSA keys, but for crypto api 'sign' and 'verify'
          }
        };
        keyPair = webCrypto.generateKey(keyGenOpt, true, ['sign', 'verify']);
        keyPair = await promisifyIE11Op(keyPair, 'Error generating RSA key pair.');
      } else if (window.crypto && window.crypto.webkitSubtle) {
        // outdated spec implemented by old Webkit
        keyGenOpt = {
          name: 'RSA-OAEP',
          modulusLength: B, // the specified keysize in bits
          publicExponent: E.toArrayLike(Uint8Array), // take three bytes (max 65537) for exponent
          hash: {
            name: 'SHA-1' // not required for actual RSA keys, but for crypto api 'sign' and 'verify'
          }
        };
        keyPair = await webCrypto.generateKey(keyGenOpt, true, ['encrypt', 'decrypt']);
      } else {
        throw new Error('Unknown WebCrypto implementation');
      }

      // export the generated keys as JsonWebKey (JWK)
      // https://tools.ietf.org/html/draft-ietf-jose-json-web-key-33
      let jwk = webCrypto.exportKey('jwk', keyPair.privateKey);
      jwk = await promisifyIE11Op(jwk, 'Error exporting RSA key pair.');

      // parse raw ArrayBuffer bytes to jwk/json (WebKit/Safari/IE11 quirk)
      if (jwk instanceof ArrayBuffer) {
        jwk = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(jwk)));
      }

      // map JWK parameters to BN
      key = {};
      key.n = new _bn2.default(_util2.default.b64_to_Uint8Array(jwk.n));
      key.e = E;
      key.d = new _bn2.default(_util2.default.b64_to_Uint8Array(jwk.d));
      key.p = new _bn2.default(_util2.default.b64_to_Uint8Array(jwk.p));
      key.q = new _bn2.default(_util2.default.b64_to_Uint8Array(jwk.q));
      key.u = key.p.invm(key.q);
      return key;
    }

    // RSA keygen fallback using 40 iterations of the Miller-Rabin test
    // See https://stackoverflow.com/a/6330138 for justification
    // Also see section C.3 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST
    let p = await _prime2.default.randomProbablePrime(B - (B >> 1), E, 40);
    let q = await _prime2.default.randomProbablePrime(B >> 1, E, 40);

    if (p.cmp(q) < 0) {
      var _ref = [q, p];
      p = _ref[0];
      q = _ref[1];
    }

    const phi = p.subn(1).mul(q.subn(1));
    return {
      n: p.mul(q),
      e: E,
      d: E.invm(phi),
      p: p,
      q: q,
      // dp: d.mod(p.subn(1)),
      // dq: d.mod(q.subn(1)),
      u: p.invm(q)
    };
  },

  prime: _prime2.default
};

},{"../../config":80,"../../util":153,"../random":110,"./prime":108,"bn.js":17}],110:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Do not use util.getNodeCrypto because we need this regardless of use_native setting
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

// The GPG4Browsers crypto interface

/**
 * @fileoverview Provides tools for retrieving secure randomness from browsers or Node.js
 * @requires bn.js
 * @requires util
 * @module crypto/random
 */

const nodeCrypto = _util2.default.detectNode() && require('crypto');

exports.default = {
  /**
   * Retrieve secure random byte array of the specified length
   * @param {Integer} length Length in bytes to generate
   * @returns {Uint8Array} Random byte array
   * @async
   */
  getRandomBytes: async function getRandomBytes(length) {
    const buf = new Uint8Array(length);
    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {
      window.crypto.getRandomValues(buf);
    } else if (typeof window !== 'undefined' && typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'function') {
      window.msCrypto.getRandomValues(buf);
    } else if (nodeCrypto) {
      const bytes = nodeCrypto.randomBytes(buf.length);
      buf.set(bytes);
    } else if (this.randomBuffer.buffer) {
      await this.randomBuffer.get(buf);
    } else {
      throw new Error('No secure random number generator available.');
    }
    return buf;
  },

  /**
   * Create a secure random MPI that is greater than or equal to min and less than max.
   * @param {module:type/mpi} min Lower bound, included
   * @param {module:type/mpi} max Upper bound, excluded
   * @returns {module:BN} Random MPI
   * @async
   */
  getRandomBN: async function getRandomBN(min, max) {
    if (max.cmp(min) <= 0) {
      throw new Error('Illegal parameter value: max <= min');
    }

    const modulus = max.sub(min);
    const bytes = modulus.byteLength();

    // Using a while loop is necessary to avoid bias introduced by the mod operation.
    // However, we request 64 extra random bits so that the bias is negligible.
    // Section B.1.1 here: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
    const r = new _bn2.default((await this.getRandomBytes(bytes + 8)));
    return r.mod(modulus).add(min);
  },

  randomBuffer: new RandomBuffer()
};

/**
 * Buffer for secure random numbers
 */

function RandomBuffer() {
  this.buffer = null;
  this.size = null;
  this.callback = null;
}

/**
 * Initialize buffer
 * @param  {Integer} size size of buffer
 */
RandomBuffer.prototype.init = function (size, callback) {
  this.buffer = new Uint8Array(size);
  this.size = 0;
  this.callback = callback;
};

/**
 * Concat array of secure random numbers to buffer
 * @param {Uint8Array} buf
 */
RandomBuffer.prototype.set = function (buf) {
  if (!this.buffer) {
    throw new Error('RandomBuffer is not initialized');
  }
  if (!(buf instanceof Uint8Array)) {
    throw new Error('Invalid type: buf not an Uint8Array');
  }
  const freeSpace = this.buffer.length - this.size;
  if (buf.length > freeSpace) {
    buf = buf.subarray(0, freeSpace);
  }
  // set buf with offset old size of buffer
  this.buffer.set(buf, this.size);
  this.size += buf.length;
};

/**
 * Take numbers out of buffer and copy to array
 * @param {Uint8Array} buf the destination array
 */
RandomBuffer.prototype.get = async function (buf) {
  if (!this.buffer) {
    throw new Error('RandomBuffer is not initialized');
  }
  if (!(buf instanceof Uint8Array)) {
    throw new Error('Invalid type: buf not an Uint8Array');
  }
  if (this.size < buf.length) {
    if (!this.callback) {
      throw new Error('Random number buffer depleted');
    }
    // Wait for random bytes from main context, then try again
    await this.callback();
    return this.get(buf);
  }
  for (let i = 0; i < buf.length; i++) {
    buf[i] = this.buffer[--this.size];
    // clear buffer value
    this.buffer[this.size] = 0;
  }
};

},{"../util":153,"bn.js":17,"crypto":"crypto"}],111:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _crypto = require('./crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _public_key = require('./public_key');

var _public_key2 = _interopRequireDefault(_public_key);

var _pkcs = require('./pkcs1');

var _pkcs2 = _interopRequireDefault(_pkcs);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview Provides functions for asymmetric signing and signature verification
 * @requires bn.js
 * @requires crypto/crypto
 * @requires crypto/public_key
 * @requires crypto/pkcs1
 * @requires enums
 * @requires util
 * @module crypto/signature
*/

exports.default = {
  /**
   * Verifies the signature provided for data using specified algorithms and public key parameters.
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1}
   * and {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4}
   * for public key and hash algorithms.
   * @param {module:enums.publicKey} algo      Public key algorithm
   * @param {module:enums.hash}      hash_algo Hash algorithm
   * @param {Array<module:type/mpi>} msg_MPIs  Algorithm-specific signature parameters
   * @param {Array<module:type/mpi>} pub_MPIs  Algorithm-specific public key parameters
   * @param {Uint8Array}             data      Data for which the signature was created
   * @param {Uint8Array}             hashed    The hashed data
   * @returns {Boolean}                        True if signature is valid
   * @async
   */
  verify: async function verify(algo, hash_algo, msg_MPIs, pub_MPIs, data, hashed) {
    const types = _crypto2.default.getPubKeyParamTypes(algo);
    if (pub_MPIs.length < types.length) {
      throw new Error('Missing public key parameters');
    }
    switch (algo) {
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_sign:
        {
          const m = msg_MPIs[0].toBN();
          const n = pub_MPIs[0].toBN();
          const e = pub_MPIs[1].toBN();
          const EM = await _public_key2.default.rsa.verify(m, n, e);
          const EM2 = await _pkcs2.default.emsa.encode(hash_algo, hashed, n.byteLength());
          return _util2.default.Uint8Array_to_hex(EM) === EM2;
        }
      case _enums2.default.publicKey.dsa:
        {
          const r = msg_MPIs[0].toBN();
          const s = msg_MPIs[1].toBN();
          const p = pub_MPIs[0].toBN();
          const q = pub_MPIs[1].toBN();
          const g = pub_MPIs[2].toBN();
          const y = pub_MPIs[3].toBN();
          return _public_key2.default.dsa.verify(hash_algo, r, s, hashed, g, p, q, y);
        }
      case _enums2.default.publicKey.ecdsa:
        {
          const oid = pub_MPIs[0];
          const signature = { r: msg_MPIs[0].toUint8Array(), s: msg_MPIs[1].toUint8Array() };
          const Q = pub_MPIs[1].toUint8Array();
          return _public_key2.default.elliptic.ecdsa.verify(oid, hash_algo, signature, data, Q, hashed);
        }
      case _enums2.default.publicKey.eddsa:
        {
          const oid = pub_MPIs[0];
          // EdDSA signature params are expected in little-endian format
          const signature = { R: msg_MPIs[0].toUint8Array('le', 32),
            S: msg_MPIs[1].toUint8Array('le', 32) };
          const Q = pub_MPIs[1].toUint8Array('be', 33);
          return _public_key2.default.elliptic.eddsa.verify(oid, hash_algo, signature, data, Q, hashed);
        }
      default:
        throw new Error('Invalid signature algorithm.');
    }
  },

  /**
   * Creates a signature on data using specified algorithms and private key parameters.
   * See {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC 4880 9.1}
   * and {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC 4880 9.4}
   * for public key and hash algorithms.
   * @param {module:enums.publicKey} algo       Public key algorithm
   * @param {module:enums.hash}      hash_algo  Hash algorithm
   * @param {Array<module:type/mpi>} key_params Algorithm-specific public and private key parameters
   * @param {Uint8Array}             data       Data to be signed
   * @param {Uint8Array}             hashed     The hashed data
   * @returns {Uint8Array}                      Signature
   * @async
   */
  sign: async function sign(algo, hash_algo, key_params, data, hashed) {
    const types = [].concat(_crypto2.default.getPubKeyParamTypes(algo), _crypto2.default.getPrivKeyParamTypes(algo));
    if (key_params.length < types.length) {
      throw new Error('Missing private key parameters');
    }
    switch (algo) {
      case _enums2.default.publicKey.rsa_encrypt_sign:
      case _enums2.default.publicKey.rsa_encrypt:
      case _enums2.default.publicKey.rsa_sign:
        {
          const n = key_params[0].toBN();
          const e = key_params[1].toBN();
          const d = key_params[2].toBN();
          const m = new _bn2.default((await _pkcs2.default.emsa.encode(hash_algo, hashed, n.byteLength())), 16);
          const signature = await _public_key2.default.rsa.sign(m, n, e, d);
          return _util2.default.Uint8Array_to_MPI(signature);
        }
      case _enums2.default.publicKey.dsa:
        {
          const p = key_params[0].toBN();
          const q = key_params[1].toBN();
          const g = key_params[2].toBN();
          const x = key_params[4].toBN();
          const signature = await _public_key2.default.dsa.sign(hash_algo, hashed, g, p, q, x);
          return _util2.default.concatUint8Array([_util2.default.Uint8Array_to_MPI(signature.r), _util2.default.Uint8Array_to_MPI(signature.s)]);
        }
      case _enums2.default.publicKey.elgamal:
        {
          throw new Error('Signing with Elgamal is not defined in the OpenPGP standard.');
        }
      case _enums2.default.publicKey.ecdsa:
        {
          const oid = key_params[0];
          const d = key_params[2].toUint8Array();
          const signature = await _public_key2.default.elliptic.ecdsa.sign(oid, hash_algo, data, d, hashed);
          return _util2.default.concatUint8Array([_util2.default.Uint8Array_to_MPI(signature.r), _util2.default.Uint8Array_to_MPI(signature.s)]);
        }
      case _enums2.default.publicKey.eddsa:
        {
          const oid = key_params[0];
          const d = key_params[2].toUint8Array('be', 32);
          const signature = await _public_key2.default.elliptic.eddsa.sign(oid, hash_algo, data, d, hashed);
          return _util2.default.concatUint8Array([_util2.default.Uint8Array_to_MPI(signature.R), _util2.default.Uint8Array_to_MPI(signature.S)]);
        }
      default:
        throw new Error('Invalid signature algorithm.');
    }
  }
};

},{"../enums":114,"../util":153,"./crypto":90,"./pkcs1":97,"./public_key":107,"bn.js":17}],112:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _base = require('./base64.js');

var _base2 = _interopRequireDefault(_base);

var _enums = require('../enums.js');

var _enums2 = _interopRequireDefault(_enums);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Finds out which Ascii Armoring type is used. Throws error if unknown type.
 * @private
 * @param {String} text [String] ascii armored text
 * @returns {Integer} 0 = MESSAGE PART n of m
 *         1 = MESSAGE PART n
 *         2 = SIGNED MESSAGE
 *         3 = PGP MESSAGE
 *         4 = PUBLIC KEY BLOCK
 *         5 = PRIVATE KEY BLOCK
 *         6 = SIGNATURE
 */
function getType(text) {
  const reHeader = /^-----BEGIN PGP (MESSAGE, PART \d+\/\d+|MESSAGE, PART \d+|SIGNED MESSAGE|MESSAGE|PUBLIC KEY BLOCK|PRIVATE KEY BLOCK|SIGNATURE)-----$/m;

  const header = text.match(reHeader);

  if (!header) {
    throw new Error('Unknown ASCII armor type');
  }

  // BEGIN PGP MESSAGE, PART X/Y
  // Used for multi-part messages, where the armor is split amongst Y
  // parts, and this is the Xth part out of Y.
  if (/MESSAGE, PART \d+\/\d+/.test(header[1])) {
    return _enums2.default.armor.multipart_section;
  } else
    // BEGIN PGP MESSAGE, PART X
    // Used for multi-part messages, where this is the Xth part of an
    // unspecified number of parts. Requires the MESSAGE-ID Armor
    // Header to be used.
    if (/MESSAGE, PART \d+/.test(header[1])) {
      return _enums2.default.armor.multipart_last;
    } else
      // BEGIN PGP SIGNED MESSAGE
      if (/SIGNED MESSAGE/.test(header[1])) {
        return _enums2.default.armor.signed;
      } else
        // BEGIN PGP MESSAGE
        // Used for signed, encrypted, or compressed files.
        if (/MESSAGE/.test(header[1])) {
          return _enums2.default.armor.message;
        } else
          // BEGIN PGP PUBLIC KEY BLOCK
          // Used for armoring public keys.
          if (/PUBLIC KEY BLOCK/.test(header[1])) {
            return _enums2.default.armor.public_key;
          } else
            // BEGIN PGP PRIVATE KEY BLOCK
            // Used for armoring private keys.
            if (/PRIVATE KEY BLOCK/.test(header[1])) {
              return _enums2.default.armor.private_key;
            } else
              // BEGIN PGP SIGNATURE
              // Used for detached signatures, OpenPGP/MIME signatures, and
              // cleartext signatures. Note that PGP 2.x uses BEGIN PGP MESSAGE
              // for detached signatures.
              if (/SIGNATURE/.test(header[1])) {
                return _enums2.default.armor.signature;
              }
}

/**
 * Add additional information to the armor version of an OpenPGP binary
 * packet block.
 * @author  Alex
 * @version 2011-12-16
 * @param {String} customComment (optional) additional comment to add to the armored string
 * @returns {String} The header information
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires encoding/base64
 * @requires enums
 * @requires config
 * @requires util
 * @module encoding/armor
 */

function addheader(customComment) {
  let result = "";
  if (_config2.default.show_version) {
    result += "Version: " + _config2.default.versionstring + '\r\n';
  }
  if (_config2.default.show_comment) {
    result += "Comment: " + _config2.default.commentstring + '\r\n';
  }
  if (customComment) {
    result += "Comment: " + customComment + '\r\n';
  }
  result += '\r\n';
  return result;
}

/**
 * Calculates a checksum over the given data and returns it base64 encoded
 * @param {String | ReadableStream<String>} data Data to create a CRC-24 checksum for
 * @returns {String | ReadableStream<String>} Base64 encoded checksum
 */
function getCheckSum(data) {
  const crc = createcrc24(data);
  return _base2.default.encode(crc);
}

const crc_table = [0x00000000, 0x00864cfb, 0x018ad50d, 0x010c99f6, 0x0393e6e1, 0x0315aa1a, 0x021933ec, 0x029f7f17, 0x07a18139, 0x0727cdc2, 0x062b5434, 0x06ad18cf, 0x043267d8, 0x04b42b23, 0x05b8b2d5, 0x053efe2e, 0x0fc54e89, 0x0f430272, 0x0e4f9b84, 0x0ec9d77f, 0x0c56a868, 0x0cd0e493, 0x0ddc7d65, 0x0d5a319e, 0x0864cfb0, 0x08e2834b, 0x09ee1abd, 0x09685646, 0x0bf72951, 0x0b7165aa, 0x0a7dfc5c, 0x0afbb0a7, 0x1f0cd1e9, 0x1f8a9d12, 0x1e8604e4, 0x1e00481f, 0x1c9f3708, 0x1c197bf3, 0x1d15e205, 0x1d93aefe, 0x18ad50d0, 0x182b1c2b, 0x192785dd, 0x19a1c926, 0x1b3eb631, 0x1bb8faca, 0x1ab4633c, 0x1a322fc7, 0x10c99f60, 0x104fd39b, 0x11434a6d, 0x11c50696, 0x135a7981, 0x13dc357a, 0x12d0ac8c, 0x1256e077, 0x17681e59, 0x17ee52a2, 0x16e2cb54, 0x166487af, 0x14fbf8b8, 0x147db443, 0x15712db5, 0x15f7614e, 0x3e19a3d2, 0x3e9fef29, 0x3f9376df, 0x3f153a24, 0x3d8a4533, 0x3d0c09c8, 0x3c00903e, 0x3c86dcc5, 0x39b822eb, 0x393e6e10, 0x3832f7e6, 0x38b4bb1d, 0x3a2bc40a, 0x3aad88f1, 0x3ba11107, 0x3b275dfc, 0x31dced5b, 0x315aa1a0, 0x30563856, 0x30d074ad, 0x324f0bba, 0x32c94741, 0x33c5deb7, 0x3343924c, 0x367d6c62, 0x36fb2099, 0x37f7b96f, 0x3771f594, 0x35ee8a83, 0x3568c678, 0x34645f8e, 0x34e21375, 0x2115723b, 0x21933ec0, 0x209fa736, 0x2019ebcd, 0x228694da, 0x2200d821, 0x230c41d7, 0x238a0d2c, 0x26b4f302, 0x2632bff9, 0x273e260f, 0x27b86af4, 0x252715e3, 0x25a15918, 0x24adc0ee, 0x242b8c15, 0x2ed03cb2, 0x2e567049, 0x2f5ae9bf, 0x2fdca544, 0x2d43da53, 0x2dc596a8, 0x2cc90f5e, 0x2c4f43a5, 0x2971bd8b, 0x29f7f170, 0x28fb6886, 0x287d247d, 0x2ae25b6a, 0x2a641791, 0x2b688e67, 0x2beec29c, 0x7c3347a4, 0x7cb50b5f, 0x7db992a9, 0x7d3fde52, 0x7fa0a145, 0x7f26edbe, 0x7e2a7448, 0x7eac38b3, 0x7b92c69d, 0x7b148a66, 0x7a181390, 0x7a9e5f6b, 0x7801207c, 0x78876c87, 0x798bf571, 0x790db98a, 0x73f6092d, 0x737045d6, 0x727cdc20, 0x72fa90db, 0x7065efcc, 0x70e3a337, 0x71ef3ac1, 0x7169763a, 0x74578814, 0x74d1c4ef, 0x75dd5d19, 0x755b11e2, 0x77c46ef5, 0x7742220e, 0x764ebbf8, 0x76c8f703, 0x633f964d, 0x63b9dab6, 0x62b54340, 0x62330fbb, 0x60ac70ac, 0x602a3c57, 0x6126a5a1, 0x61a0e95a, 0x649e1774, 0x64185b8f, 0x6514c279, 0x65928e82, 0x670df195, 0x678bbd6e, 0x66872498, 0x66016863, 0x6cfad8c4, 0x6c7c943f, 0x6d700dc9, 0x6df64132, 0x6f693e25, 0x6fef72de, 0x6ee3eb28, 0x6e65a7d3, 0x6b5b59fd, 0x6bdd1506, 0x6ad18cf0, 0x6a57c00b, 0x68c8bf1c, 0x684ef3e7, 0x69426a11, 0x69c426ea, 0x422ae476, 0x42aca88d, 0x43a0317b, 0x43267d80, 0x41b90297, 0x413f4e6c, 0x4033d79a, 0x40b59b61, 0x458b654f, 0x450d29b4, 0x4401b042, 0x4487fcb9, 0x461883ae, 0x469ecf55, 0x479256a3, 0x47141a58, 0x4defaaff, 0x4d69e604, 0x4c657ff2, 0x4ce33309, 0x4e7c4c1e, 0x4efa00e5, 0x4ff69913, 0x4f70d5e8, 0x4a4e2bc6, 0x4ac8673d, 0x4bc4fecb, 0x4b42b230, 0x49ddcd27, 0x495b81dc, 0x4857182a, 0x48d154d1, 0x5d26359f, 0x5da07964, 0x5cace092, 0x5c2aac69, 0x5eb5d37e, 0x5e339f85, 0x5f3f0673, 0x5fb94a88, 0x5a87b4a6, 0x5a01f85d, 0x5b0d61ab, 0x5b8b2d50, 0x59145247, 0x59921ebc, 0x589e874a, 0x5818cbb1, 0x52e37b16, 0x526537ed, 0x5369ae1b, 0x53efe2e0, 0x51709df7, 0x51f6d10c, 0x50fa48fa, 0x507c0401, 0x5542fa2f, 0x55c4b6d4, 0x54c82f22, 0x544e63d9, 0x56d11cce, 0x56575035, 0x575bc9c3, 0x57dd8538];

/**
 * Internal function to calculate a CRC-24 checksum over a given string (data)
 * @param {String | ReadableStream<String>} data Data to create a CRC-24 checksum for
 * @returns {Uint8Array | ReadableStream<Uint8Array>} The CRC-24 checksum
 */
function createcrc24(input) {
  let crc = 0xB704CE;
  return _webStreamTools2.default.transform(input, value => {
    for (let index = 0; index < value.length; index++) {
      crc = crc << 8 ^ crc_table[(crc >> 16 ^ value[index]) & 0xff];
    }
  }, () => new Uint8Array([crc >> 16, crc >> 8, crc]));
}

/**
 * Verify armored headers. RFC4880, section 6.3: "OpenPGP should consider improperly formatted
 * Armor Headers to be corruption of the ASCII Armor."
 * @private
 * @param  {Array<String>} headers Armor headers
 */
function verifyHeaders(headers) {
  for (let i = 0; i < headers.length; i++) {
    if (!/^([^\s:]|[^\s:][^:]*[^\s:]): .+$/.test(headers[i])) {
      throw new Error('Improperly formatted armor header: ' + headers[i]);
    }
    if (!/^(Version|Comment|MessageID|Hash|Charset): .+$/.test(headers[i])) {
      _util2.default.print_debug_error(new Error('Unknown header: ' + headers[i]));
    }
  }
}

/**
 * Splits a message into two parts, the body and the checksum. This is an internal function
 * @param {String} text OpenPGP armored message part
 * @returns {Object} An object with attribute "body" containing the body
 * and an attribute "checksum" containing the checksum.
 */
function splitChecksum(text) {
  let body = text;
  let checksum = "";

  const lastEquals = text.lastIndexOf("=");

  if (lastEquals >= 0 && lastEquals !== text.length - 1) {
    // '=' as the last char means no checksum
    body = text.slice(0, lastEquals);
    checksum = text.slice(lastEquals + 1).substr(0, 4);
  }

  return { body: body, checksum: checksum };
}

/**
 * DeArmor an OpenPGP armored message; verify the checksum and return
 * the encoded bytes
 * @param {String} text OpenPGP armored message
 * @returns {Promise<Object>} An object with attribute "text" containing the message text,
 * an attribute "data" containing a stream of bytes and "type" for the ASCII armor type
 * @async
 * @static
 */
function dearmor(input) {
  return new Promise(async (resolve, reject) => {
    try {
      const reSplit = /^-----[^-]+-----$/m;
      const reEmptyLine = /^[ \f\r\t\u00a0\u2000-\u200a\u202f\u205f\u3000]*$/;

      let type;
      const headers = [];
      let lastHeaders = headers;
      let headersDone;
      let text = [];
      let textDone;
      let checksum;
      let data = _base2.default.decode(_webStreamTools2.default.transformPair(input, async (readable, writable) => {
        const reader = _webStreamTools2.default.getReader(readable);
        try {
          while (true) {
            let line = await reader.readLine();
            if (line === undefined) {
              throw new Error('Misformed armored text');
            }
            // remove trailing whitespace at end of lines
            line = _util2.default.removeTrailingSpaces(line.replace(/[\r\n]/g, ''));
            if (!type) {
              if (reSplit.test(line)) {
                type = getType(line);
              }
            } else if (!headersDone) {
              if (reSplit.test(line)) {
                reject(new Error('Mandatory blank line missing between armor headers and armor data'));
              }
              if (!reEmptyLine.test(line)) {
                lastHeaders.push(line);
              } else {
                verifyHeaders(lastHeaders);
                headersDone = true;
                if (textDone || type !== 2) {
                  resolve({ text, data, headers, type });
                  break;
                }
              }
            } else if (!textDone && type === 2) {
              if (!reSplit.test(line)) {
                // Reverse dash-escaping for msg
                text.push(line.replace(/^- /, ''));
              } else {
                text = text.join('\r\n');
                textDone = true;
                verifyHeaders(lastHeaders);
                lastHeaders = [];
                headersDone = false;
              }
            }
          }
        } catch (e) {
          reject(e);
          return;
        }
        const writer = _webStreamTools2.default.getWriter(writable);
        try {
          while (true) {
            await writer.ready;

            var _ref = await reader.read();

            const done = _ref.done,
                  value = _ref.value;

            if (done) {
              throw new Error('Misformed armored text');
            }
            const line = value + '';
            if (line.indexOf('=') === -1 && line.indexOf('-') === -1) {
              await writer.write(line);
            } else {
              let remainder = await reader.readToEnd();
              if (!remainder.length) remainder = '';
              remainder = line + remainder;
              remainder = _util2.default.removeTrailingSpaces(remainder.replace(/\r/g, ''));
              const parts = remainder.split(reSplit);
              if (parts.length === 1) {
                throw new Error('Misformed armored text');
              }
              const split = splitChecksum(parts[0].slice(0, -1));
              checksum = split.checksum;
              await writer.write(split.body);
              break;
            }
          }
          await writer.ready;
          await writer.close();
        } catch (e) {
          await writer.abort(e);
        }
      }));
      data = _webStreamTools2.default.transformPair(data, async (readable, writable) => {
        const checksumVerified = getCheckSum(_webStreamTools2.default.passiveClone(readable));
        await _webStreamTools2.default.pipe(readable, writable, {
          preventClose: true
        });
        const writer = _webStreamTools2.default.getWriter(writable);
        try {
          const checksumVerifiedString = await _webStreamTools2.default.readToEnd(checksumVerified);
          if (checksum !== checksumVerifiedString && (checksum || _config2.default.checksum_required)) {
            throw new Error("Ascii armor integrity check on message failed: '" + checksum + "' should be '" + checksumVerifiedString + "'");
          }
          await writer.ready;
          await writer.close();
        } catch (e) {
          await writer.abort(e);
        }
      });
    } catch (e) {
      reject(e);
    }
  });
}

/**
 * Armor an OpenPGP binary packet block
 * @param {Integer} messagetype type of the message
 * @param body
 * @param {Integer} partindex
 * @param {Integer} parttotal
 * @param {String} customComment (optional) additional comment to add to the armored string
 * @returns {String | ReadableStream<String>} Armored text
 * @static
 */
function armor(messagetype, body, partindex, parttotal, customComment) {
  let text;
  let hash;
  if (messagetype === _enums2.default.armor.signed) {
    text = body.text;
    hash = body.hash;
    body = body.data;
  }
  const bodyClone = _webStreamTools2.default.passiveClone(body);
  const result = [];
  switch (messagetype) {
    case _enums2.default.armor.multipart_section:
      result.push("-----BEGIN PGP MESSAGE, PART " + partindex + "/" + parttotal + "-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP MESSAGE, PART " + partindex + "/" + parttotal + "-----\r\n");
      break;
    case _enums2.default.armor.multipart_last:
      result.push("-----BEGIN PGP MESSAGE, PART " + partindex + "-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP MESSAGE, PART " + partindex + "-----\r\n");
      break;
    case _enums2.default.armor.signed:
      result.push("\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\n");
      result.push("Hash: " + hash + "\r\n\r\n");
      result.push(text.replace(/^-/mg, "- -"));
      result.push("\r\n-----BEGIN PGP SIGNATURE-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP SIGNATURE-----\r\n");
      break;
    case _enums2.default.armor.message:
      result.push("-----BEGIN PGP MESSAGE-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP MESSAGE-----\r\n");
      break;
    case _enums2.default.armor.public_key:
      result.push("-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP PUBLIC KEY BLOCK-----\r\n");
      break;
    case _enums2.default.armor.private_key:
      result.push("-----BEGIN PGP PRIVATE KEY BLOCK-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP PRIVATE KEY BLOCK-----\r\n");
      break;
    case _enums2.default.armor.signature:
      result.push("-----BEGIN PGP SIGNATURE-----\r\n");
      result.push(addheader(customComment));
      result.push(_base2.default.encode(body));
      result.push("\r\n=", getCheckSum(bodyClone), "\r\n");
      result.push("-----END PGP SIGNATURE-----\r\n");
      break;
  }

  return _util2.default.concat(result);
}

exports.default = {
  encode: armor,
  decode: dearmor
};

},{"../config":80,"../enums.js":114,"../util":153,"./base64.js":113,"web-stream-tools":76}],113:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const b64s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Standard radix-64
/* OpenPGP radix-64/base64 string encoding/decoding
 * Copyright 2005 Herbert Hanewinkel, www.haneWIN.de
 * version 1.0, check www.haneWIN.de for the latest version
 *
 * This software is provided as-is, without express or implied warranty.
 * Permission to use, copy, modify, distribute or sell this software, with or
 * without fee, for any purpose and by any individual or organization, is hereby
 * granted, provided that the above copyright notice and this paragraph appear
 * in all copies. Distribution as a part of an application or binary must
 * include the above copyright notice in the documentation and/or other materials
 * provided with the application or distribution.
 */

/**
 * @requires web-stream-tools
 * @module encoding/base64
 */

const b64u = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'; // URL-safe radix-64

const b64toByte = [];
for (let i = 0; i < b64s.length; i++) {
  b64toByte[b64s.charCodeAt(i)] = i;
}
b64toByte[b64u.charCodeAt(62)] = 62;
b64toByte[b64u.charCodeAt(63)] = 63;

/**
 * Convert binary array to radix-64
 * @param {Uint8Array | ReadableStream<Uint8Array>} t Uint8Array to convert
 * @param {bool} u if true, output is URL-safe
 * @returns {String | ReadableStream<String>} radix-64 version of input string
 * @static
 */
function s2r(t, u = false) {
  // TODO check btoa alternative
  const b64 = u ? b64u : b64s;
  let a;
  let c;

  let l = 0;
  let s = 0;

  return _webStreamTools2.default.transform(t, value => {
    const r = [];
    const tl = value.length;
    for (let n = 0; n < tl; n++) {
      if (l && l % 60 === 0 && !u) {
        r.push("\r\n");
      }
      c = value[n];
      if (s === 0) {
        r.push(b64.charAt(c >> 2 & 63));
        a = (c & 3) << 4;
      } else if (s === 1) {
        r.push(b64.charAt(a | c >> 4 & 15));
        a = (c & 15) << 2;
      } else if (s === 2) {
        r.push(b64.charAt(a | c >> 6 & 3));
        l += 1;
        if (l % 60 === 0 && !u) {
          r.push("\r\n");
        }
        r.push(b64.charAt(c & 63));
      }
      l += 1;
      s += 1;
      if (s === 3) {
        s = 0;
      }
    }
    return r.join('');
  }, () => {
    const r = [];
    if (s > 0) {
      r.push(b64.charAt(a));
      l += 1;
      if (l % 60 === 0 && !u) {
        r.push("\r\n");
      }
      if (!u) {
        r.push('=');
        l += 1;
      }
    }
    if (s === 1 && !u) {
      if (l % 60 === 0 && !u) {
        r.push("\r\n");
      }
      r.push('=');
    }
    return r.join('');
  });
}

/**
 * Convert radix-64 to binary array
 * @param {String | ReadableStream<String>} t radix-64 string to convert
 * @param {bool} u if true, input is interpreted as URL-safe
 * @returns {Uint8Array | ReadableStream<Uint8Array>} binary array version of input string
 * @static
 */
function r2s(t, u) {
  // TODO check atob alternative
  let c;

  let s = 0;
  let a = 0;

  return _webStreamTools2.default.transform(t, value => {
    const tl = value.length;
    const r = new Uint8Array(Math.ceil(0.75 * tl));
    let index = 0;
    for (let n = 0; n < tl; n++) {
      c = b64toByte[value.charCodeAt(n)];
      if (c >= 0) {
        if (s) {
          r[index++] = a | c >> 6 - s & 255;
        }
        s = s + 2 & 7;
        a = c << s & 255;
      }
    }
    return r.subarray(0, index);
  });
}

exports.default = {
  encode: s2r,
  decode: r2s
};

},{"web-stream-tools":76}],114:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @module enums
 */

const byValue = Symbol('byValue');

exports.default = {

  /** Maps curve names under various standards to one
   * @see {@link https://wiki.gnupg.org/ECC|ECC - GnuPG wiki}
   * @enum {String}
   * @readonly
   */
  curve: {
    /** NIST P-256 Curve */
    "p256": "p256",
    "P-256": "p256",
    "secp256r1": "p256",
    "prime256v1": "p256",
    "1.2.840.10045.3.1.7": "p256",
    "2a8648ce3d030107": "p256",
    "2A8648CE3D030107": "p256",

    /** NIST P-384 Curve */
    "p384": "p384",
    "P-384": "p384",
    "secp384r1": "p384",
    "1.3.132.0.34": "p384",
    "2b81040022": "p384",
    "2B81040022": "p384",

    /** NIST P-521 Curve */
    "p521": "p521",
    "P-521": "p521",
    "secp521r1": "p521",
    "1.3.132.0.35": "p521",
    "2b81040023": "p521",
    "2B81040023": "p521",

    /** SECG SECP256k1 Curve */
    "secp256k1": "secp256k1",
    "1.3.132.0.10": "secp256k1",
    "2b8104000a": "secp256k1",
    "2B8104000A": "secp256k1",

    /** Ed25519 */
    "ED25519": "ed25519",
    "ed25519": "ed25519",
    "Ed25519": "ed25519",
    "1.3.6.1.4.1.11591.15.1": "ed25519",
    "2b06010401da470f01": "ed25519",
    "2B06010401DA470F01": "ed25519",

    /** Curve25519 */
    "X25519": "curve25519",
    "cv25519": "curve25519",
    "curve25519": "curve25519",
    "Curve25519": "curve25519",
    "1.3.6.1.4.1.3029.1.5.1": "curve25519",
    "2b060104019755010501": "curve25519",
    "2B060104019755010501": "curve25519",

    /** BrainpoolP256r1 Curve */
    "brainpoolP256r1": "brainpoolP256r1",
    "1.3.36.3.3.2.8.1.1.7": "brainpoolP256r1",
    "2b2403030208010107": "brainpoolP256r1",
    "2B2403030208010107": "brainpoolP256r1",

    /** BrainpoolP384r1 Curve */
    "brainpoolP384r1": "brainpoolP384r1",
    "1.3.36.3.3.2.8.1.1.11": "brainpoolP384r1",
    "2b240303020801010b": "brainpoolP384r1",
    "2B240303020801010B": "brainpoolP384r1",

    /** BrainpoolP512r1 Curve */
    "brainpoolP512r1": "brainpoolP512r1",
    "1.3.36.3.3.2.8.1.1.13": "brainpoolP512r1",
    "2b240303020801010d": "brainpoolP512r1",
    "2B240303020801010D": "brainpoolP512r1"
  },

  /** A string to key specifier type
   * @enum {Integer}
   * @readonly
   */
  s2k: {
    simple: 0,
    salted: 1,
    iterated: 3,
    gnu: 101
  },

  /** {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-9.1|RFC4880bis-04, section 9.1}
   * @enum {Integer}
   * @readonly
   */
  publicKey: {
    /** RSA (Encrypt or Sign) [HAC] */
    rsa_encrypt_sign: 1,
    /** RSA (Encrypt only) [HAC] */
    rsa_encrypt: 2,
    /** RSA (Sign only) [HAC] */
    rsa_sign: 3,
    /** Elgamal (Encrypt only) [ELGAMAL] [HAC] */
    elgamal: 16,
    /** DSA (Sign only) [FIPS186] [HAC] */
    dsa: 17,
    /** ECDH (Encrypt only) [RFC6637] */
    ecdh: 18,
    /** ECDSA (Sign only) [RFC6637] */
    ecdsa: 19,
    /** EdDSA (Sign only)
     * [{@link https://tools.ietf.org/html/draft-koch-eddsa-for-openpgp-04|Draft RFC}] */
    eddsa: 22,
    /** Reserved for AEDH */
    aedh: 23,
    /** Reserved for AEDSA */
    aedsa: 24
  },

  /** {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC4880, section 9.2}
   * @enum {Integer}
   * @readonly
   */
  symmetric: {
    plaintext: 0,
    /** Not implemented! */
    idea: 1,
    '3des': 2,
    tripledes: 2,
    cast5: 3,
    blowfish: 4,
    aes128: 7,
    aes192: 8,
    aes256: 9,
    twofish: 10
  },

  /** {@link https://tools.ietf.org/html/rfc4880#section-9.3|RFC4880, section 9.3}
   * @enum {Integer}
   * @readonly
   */
  compression: {
    uncompressed: 0,
    /** RFC1951 */
    zip: 1,
    /** RFC1950 */
    zlib: 2,
    bzip2: 3
  },

  /** {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC4880, section 9.4}
   * @enum {Integer}
   * @readonly
   */
  hash: {
    md5: 1,
    sha1: 2,
    ripemd: 3,
    sha256: 8,
    sha384: 9,
    sha512: 10,
    sha224: 11
  },

  /** A list of hash names as accepted by webCrypto functions.
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest|Parameters, algo}
   * @enum {String}
   */
  webHash: {
    'SHA-1': 2,
    'SHA-256': 8,
    'SHA-384': 9,
    'SHA-512': 10
  },

  /** {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-9.6|RFC4880bis-04, section 9.6}
   * @enum {Integer}
   * @readonly
   */
  aead: {
    eax: 1,
    ocb: 2,
    experimental_gcm: 100 // Private algorithm
  },

  /** A list of packet types and numeric tags associated with them.
   * @enum {Integer}
   * @readonly
   */
  packet: {
    publicKeyEncryptedSessionKey: 1,
    signature: 2,
    symEncryptedSessionKey: 3,
    onePassSignature: 4,
    secretKey: 5,
    publicKey: 6,
    secretSubkey: 7,
    compressed: 8,
    symmetricallyEncrypted: 9,
    marker: 10,
    literal: 11,
    trust: 12,
    userid: 13,
    publicSubkey: 14,
    userAttribute: 17,
    symEncryptedIntegrityProtected: 18,
    modificationDetectionCode: 19,
    symEncryptedAEADProtected: 20 // see IETF draft: https://tools.ietf.org/html/draft-ford-openpgp-format-00#section-2.1
  },

  /** Data types in the literal packet
   * @enum {Integer}
   * @readonly
   */
  literal: {
    /** Binary data 'b' */
    binary: 'b'.charCodeAt(),
    /** Text data 't' */
    text: 't'.charCodeAt(),
    /** Utf8 data 'u' */
    utf8: 'u'.charCodeAt(),
    /** MIME message body part 'm' */
    mime: 'm'.charCodeAt()
  },

  /** One pass signature packet type
   * @enum {Integer}
   * @readonly
   */
  signature: {
    /** 0x00: Signature of a binary document. */
    binary: 0,
    /** 0x01: Signature of a canonical text document.
     *
     * Canonicalyzing the document by converting line endings. */
    text: 1,
    /** 0x02: Standalone signature.
     *
     * This signature is a signature of only its own subpacket contents.
     * It is calculated identically to a signature over a zero-lengh
     * binary document.  Note that it doesn't make sense to have a V3
     * standalone signature. */
    standalone: 2,
    /** 0x10: Generic certification of a User ID and Public-Key packet.
     *
     * The issuer of this certification does not make any particular
     * assertion as to how well the certifier has checked that the owner
     * of the key is in fact the person described by the User ID. */
    cert_generic: 16,
    /** 0x11: Persona certification of a User ID and Public-Key packet.
     *
     * The issuer of this certification has not done any verification of
     * the claim that the owner of this key is the User ID specified. */
    cert_persona: 17,
    /** 0x12: Casual certification of a User ID and Public-Key packet.
     *
     * The issuer of this certification has done some casual
     * verification of the claim of identity. */
    cert_casual: 18,
    /** 0x13: Positive certification of a User ID and Public-Key packet.
     *
     * The issuer of this certification has done substantial
     * verification of the claim of identity.
     *
     * Most OpenPGP implementations make their "key signatures" as 0x10
     * certifications.  Some implementations can issue 0x11-0x13
     * certifications, but few differentiate between the types. */
    cert_positive: 19,
    /** 0x30: Certification revocation signature
     *
     * This signature revokes an earlier User ID certification signature
     * (signature class 0x10 through 0x13) or direct-key signature
     * (0x1F).  It should be issued by the same key that issued the
     * revoked signature or an authorized revocation key.  The signature
     * is computed over the same data as the certificate that it
     * revokes, and should have a later creation date than that
     * certificate. */
    cert_revocation: 48,
    /** 0x18: Subkey Binding Signature
     *
     * This signature is a statement by the top-level signing key that
     * indicates that it owns the subkey.  This signature is calculated
     * directly on the primary key and subkey, and not on any User ID or
     * other packets.  A signature that binds a signing subkey MUST have
     * an Embedded Signature subpacket in this binding signature that
     * contains a 0x19 signature made by the signing subkey on the
     * primary key and subkey. */
    subkey_binding: 24,
    /** 0x19: Primary Key Binding Signature
     *
     * This signature is a statement by a signing subkey, indicating
     * that it is owned by the primary key and subkey.  This signature
     * is calculated the same way as a 0x18 signature: directly on the
     * primary key and subkey, and not on any User ID or other packets.
     *
     * When a signature is made over a key, the hash data starts with the
     * octet 0x99, followed by a two-octet length of the key, and then body
     * of the key packet.  (Note that this is an old-style packet header for
     * a key packet with two-octet length.)  A subkey binding signature
     * (type 0x18) or primary key binding signature (type 0x19) then hashes
     * the subkey using the same format as the main key (also using 0x99 as
     * the first octet). */
    key_binding: 25,
    /** 0x1F: Signature directly on a key
     *
     * This signature is calculated directly on a key.  It binds the
     * information in the Signature subpackets to the key, and is
     * appropriate to be used for subpackets that provide information
     * about the key, such as the Revocation Key subpacket.  It is also
     * appropriate for statements that non-self certifiers want to make
     * about the key itself, rather than the binding between a key and a
     * name. */
    key: 31,
    /** 0x20: Key revocation signature
     *
     * The signature is calculated directly on the key being revoked.  A
     * revoked key is not to be used.  Only revocation signatures by the
     * key being revoked, or by an authorized revocation key, should be
     * considered valid revocation signatures.a */
    key_revocation: 32,
    /** 0x28: Subkey revocation signature
     *
     * The signature is calculated directly on the subkey being revoked.
     * A revoked subkey is not to be used.  Only revocation signatures
     * by the top-level signature key that is bound to this subkey, or
     * by an authorized revocation key, should be considered valid
     * revocation signatures.
     *
     * Key revocation signatures (types 0x20 and 0x28)
     * hash only the key being revoked. */
    subkey_revocation: 40,
    /** 0x40: Timestamp signature.
     * This signature is only meaningful for the timestamp contained in
     * it. */
    timestamp: 64,
    /** 0x50: Third-Party Confirmation signature.
     *
     * This signature is a signature over some other OpenPGP Signature
     * packet(s).  It is analogous to a notary seal on the signed data.
     * A third-party signature SHOULD include Signature Target
     * subpacket(s) to give easy identification.  Note that we really do
     * mean SHOULD.  There are plausible uses for this (such as a blind
     * party that only sees the signature, not the key or source
     * document) that cannot include a target subpacket. */
    third_party: 80
  },

  /** Signature subpacket type
   * @enum {Integer}
   * @readonly
   */
  signatureSubpacket: {
    signature_creation_time: 2,
    signature_expiration_time: 3,
    exportable_certification: 4,
    trust_signature: 5,
    regular_expression: 6,
    revocable: 7,
    key_expiration_time: 9,
    placeholder_backwards_compatibility: 10,
    preferred_symmetric_algorithms: 11,
    revocation_key: 12,
    issuer: 16,
    notation_data: 20,
    preferred_hash_algorithms: 21,
    preferred_compression_algorithms: 22,
    key_server_preferences: 23,
    preferred_key_server: 24,
    primary_user_id: 25,
    policy_uri: 26,
    key_flags: 27,
    signers_user_id: 28,
    reason_for_revocation: 29,
    features: 30,
    signature_target: 31,
    embedded_signature: 32,
    issuer_fingerprint: 33,
    preferred_aead_algorithms: 34
  },

  /** Key flags
   * @enum {Integer}
   * @readonly
   */
  keyFlags: {
    /** 0x01 - This key may be used to certify other keys. */
    certify_keys: 1,
    /** 0x02 - This key may be used to sign data. */
    sign_data: 2,
    /** 0x04 - This key may be used to encrypt communications. */
    encrypt_communication: 4,
    /** 0x08 - This key may be used to encrypt storage. */
    encrypt_storage: 8,
    /** 0x10 - The private component of this key may have been split
     *        by a secret-sharing mechanism. */
    split_private_key: 16,
    /** 0x20 - This key may be used for authentication. */
    authentication: 32,
    /** 0x80 - The private component of this key may be in the
     *        possession of more than one person. */
    shared_private_key: 128
  },

  /** Key status
   * @enum {Integer}
   * @readonly
   */
  keyStatus: {
    invalid: 0,
    expired: 1,
    revoked: 2,
    valid: 3,
    no_self_cert: 4
  },

  /** Armor type
   * @enum {Integer}
   * @readonly
   */
  armor: {
    multipart_section: 0,
    multipart_last: 1,
    signed: 2,
    message: 3,
    public_key: 4,
    private_key: 5,
    signature: 6
  },

  /** {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.23|RFC4880, section 5.2.3.23}
   * @enum {Integer}
   * @readonly
   */
  reasonForRevocation: {
    /** No reason specified (key revocations or cert revocations) */
    no_reason: 0,
    /** Key is superseded (key revocations) */
    key_superseded: 1,
    /** Key material has been compromised (key revocations) */
    key_compromised: 2,
    /** Key is retired and no longer used (key revocations) */
    key_retired: 3,
    /** User ID information is no longer valid (cert revocations) */
    userid_invalid: 32
  },

  /** {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.2.3.25|RFC4880bis-04, section 5.2.3.25}
   * @enum {Integer}
   * @readonly
   */
  features: {
    /** 0x01 - Modification Detection (packets 18 and 19) */
    modification_detection: 1,
    /** 0x02 - AEAD Encrypted Data Packet (packet 20) and version 5
     *         Symmetric-Key Encrypted Session Key Packets (packet 3) */
    aead: 2,
    /** 0x04 - Version 5 Public-Key Packet format and corresponding new
      *        fingerprint format */
    v5_keys: 4
  },

  /** Asserts validity and converts from string/integer to integer. */
  write: function write(type, e) {
    if (typeof e === 'number') {
      e = this.read(type, e);
    }

    if (type[e] !== undefined) {
      return type[e];
    }

    throw new Error('Invalid enum value.');
  },

  /** Converts from an integer to string. */
  read: function read(type, e) {
    if (!type[byValue]) {
      type[byValue] = [];
      Object.entries(type).forEach(([key, value]) => {
        type[byValue][value] = key;
      });
    }

    if (type[byValue][e] !== undefined) {
      return type[byValue][e];
    }

    throw new Error('Invalid enum value.');
  }

};

},{}],115:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initialize the HKP client and configure it with the key server url and fetch function.
 * @constructor
 * @param {String}    keyServerBaseUrl  (optional) The HKP key server base url including
 *   the protocol to use, e.g. 'https://pgp.mit.edu'; defaults to
 *   openpgp.config.keyserver (https://keyserver.ubuntu.com)
 */
function HKP(keyServerBaseUrl) {
  this._baseUrl = keyServerBaseUrl || _config2.default.keyserver;
  this._fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');
}

/**
 * Search for a public key on the key server either by key ID or part of the user ID.
 * @param  {String}   options.keyID   The long public key ID.
 * @param  {String}   options.query   This can be any part of the key user ID such as name
 *   or email address.
 * @returns {Promise<String>}          The ascii armored public key.
 * @async
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015 Tankred Hase
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This class implements a client for the OpenPGP HTTP Keyserver Protocol (HKP)
 * in order to lookup and upload keys on standard public key servers.
 * @module hkp
 */

HKP.prototype.lookup = function (options) {
  let uri = this._baseUrl + '/pks/lookup?op=get&options=mr&search=';
  const fetch = this._fetch;

  if (options.keyId) {
    uri += '0x' + encodeURIComponent(options.keyId);
  } else if (options.query) {
    uri += encodeURIComponent(options.query);
  } else {
    throw new Error('You must provide a query parameter!');
  }

  return fetch(uri).then(function (response) {
    if (response.status === 200) {
      return response.text();
    }
  }).then(function (publicKeyArmored) {
    if (!publicKeyArmored || publicKeyArmored.indexOf('-----END PGP PUBLIC KEY BLOCK-----') < 0) {
      return;
    }
    return publicKeyArmored.trim();
  });
};

/**
 * Upload a public key to the server.
 * @param  {String}   publicKeyArmored  An ascii armored public key to be uploaded.
 * @returns {Promise}
 * @async
 */
HKP.prototype.upload = function (publicKeyArmored) {
  const uri = this._baseUrl + '/pks/add';
  const fetch = this._fetch;

  return fetch(uri, {
    method: 'post',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    },
    body: 'keytext=' + encodeURIComponent(publicKeyArmored)
  });
};

exports.default = HKP;

},{"./config":80,"node-fetch":"node-fetch"}],116:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WKD = exports.HKP = exports.AsyncProxy = exports.Keyring = exports.crypto = exports.config = exports.enums = exports.armor = exports.stream = exports.OID = exports.KDFParams = exports.ECDHSymmetricKey = exports.Keyid = exports.S2K = exports.MPI = exports.packet = exports.util = exports.cleartext = exports.message = exports.signature = exports.key = exports.destroyWorker = exports.getWorker = exports.initWorker = exports.decryptSessionKeys = exports.encryptSessionKey = exports.decryptKey = exports.revokeKey = exports.reformatKey = exports.generateKey = exports.verify = exports.sign = exports.decrypt = exports.encrypt = undefined;

var _openpgp = require('./openpgp');

Object.defineProperty(exports, 'encrypt', {
  enumerable: true,
  get: function get() {
    return _openpgp.encrypt;
  }
});
Object.defineProperty(exports, 'decrypt', {
  enumerable: true,
  get: function get() {
    return _openpgp.decrypt;
  }
});
Object.defineProperty(exports, 'sign', {
  enumerable: true,
  get: function get() {
    return _openpgp.sign;
  }
});
Object.defineProperty(exports, 'verify', {
  enumerable: true,
  get: function get() {
    return _openpgp.verify;
  }
});
Object.defineProperty(exports, 'generateKey', {
  enumerable: true,
  get: function get() {
    return _openpgp.generateKey;
  }
});
Object.defineProperty(exports, 'reformatKey', {
  enumerable: true,
  get: function get() {
    return _openpgp.reformatKey;
  }
});
Object.defineProperty(exports, 'revokeKey', {
  enumerable: true,
  get: function get() {
    return _openpgp.revokeKey;
  }
});
Object.defineProperty(exports, 'decryptKey', {
  enumerable: true,
  get: function get() {
    return _openpgp.decryptKey;
  }
});
Object.defineProperty(exports, 'encryptSessionKey', {
  enumerable: true,
  get: function get() {
    return _openpgp.encryptSessionKey;
  }
});
Object.defineProperty(exports, 'decryptSessionKeys', {
  enumerable: true,
  get: function get() {
    return _openpgp.decryptSessionKeys;
  }
});
Object.defineProperty(exports, 'initWorker', {
  enumerable: true,
  get: function get() {
    return _openpgp.initWorker;
  }
});
Object.defineProperty(exports, 'getWorker', {
  enumerable: true,
  get: function get() {
    return _openpgp.getWorker;
  }
});
Object.defineProperty(exports, 'destroyWorker', {
  enumerable: true,
  get: function get() {
    return _openpgp.destroyWorker;
  }
});

var _util = require('./util');

Object.defineProperty(exports, 'util', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_util).default;
  }
});

var _packet = require('./packet');

Object.defineProperty(exports, 'packet', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_packet).default;
  }
});

var _mpi = require('./type/mpi');

Object.defineProperty(exports, 'MPI', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mpi).default;
  }
});

var _s2k = require('./type/s2k');

Object.defineProperty(exports, 'S2K', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_s2k).default;
  }
});

var _keyid = require('./type/keyid');

Object.defineProperty(exports, 'Keyid', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_keyid).default;
  }
});

var _ecdh_symkey = require('./type/ecdh_symkey');

Object.defineProperty(exports, 'ECDHSymmetricKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ecdh_symkey).default;
  }
});

var _kdf_params = require('./type/kdf_params');

Object.defineProperty(exports, 'KDFParams', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_kdf_params).default;
  }
});

var _oid = require('./type/oid');

Object.defineProperty(exports, 'OID', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_oid).default;
  }
});

var _webStreamTools = require('web-stream-tools');

Object.defineProperty(exports, 'stream', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_webStreamTools).default;
  }
});

var _armor = require('./encoding/armor');

Object.defineProperty(exports, 'armor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_armor).default;
  }
});

var _enums = require('./enums');

Object.defineProperty(exports, 'enums', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_enums).default;
  }
});

var _config = require('./config/config');

Object.defineProperty(exports, 'config', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_config).default;
  }
});

var _crypto = require('./crypto');

Object.defineProperty(exports, 'crypto', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_crypto).default;
  }
});

var _keyring = require('./keyring');

Object.defineProperty(exports, 'Keyring', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_keyring).default;
  }
});

var _async_proxy = require('./worker/async_proxy');

Object.defineProperty(exports, 'AsyncProxy', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_async_proxy).default;
  }
});

var _hkp = require('./hkp');

Object.defineProperty(exports, 'HKP', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_hkp).default;
  }
});

var _wkd = require('./wkd');

Object.defineProperty(exports, 'WKD', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wkd).default;
  }
});

var openpgp = _interopRequireWildcard(_openpgp);

var _key = require('./key');

var keyMod = _interopRequireWildcard(_key);

var _signature = require('./signature');

var signatureMod = _interopRequireWildcard(_signature);

var _message = require('./message');

var messageMod = _interopRequireWildcard(_message);

var _cleartext = require('./cleartext');

var cleartextMod = _interopRequireWildcard(_cleartext);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = openpgp;

/**
 * Export each high level api function separately.
 * Usage:
 *
 *   import { encryptMessage } from 'openpgp.js'
 *   encryptMessage(keys, text)
 */
/* eslint-disable import/newline-after-import, import/first */

/**
 * Export high level api as default.
 * Usage:
 *
 *   import openpgp from 'openpgp.js'
 *   openpgp.encryptMessage(keys, text)
 */


/**
 * @see module:key
 * @name module:openpgp.key
 */

const key = exports.key = keyMod;

/**
 * @see module:signature
 * @name module:openpgp.signature
 */
const signature = exports.signature = signatureMod;

/**
 * @see module:message
 * @name module:openpgp.message
 */
const message = exports.message = messageMod;

/**
 * @see module:cleartext
 * @name module:openpgp.cleartext
 */
const cleartext = exports.cleartext = cleartextMod;

/**
 * @see module:util
 * @name module:openpgp.util
 */

},{"./cleartext":78,"./config/config":79,"./crypto":95,"./encoding/armor":112,"./enums":114,"./hkp":115,"./key":117,"./keyring":118,"./message":121,"./openpgp":122,"./packet":126,"./signature":146,"./type/ecdh_symkey":147,"./type/kdf_params":148,"./type/keyid":149,"./type/mpi":150,"./type/oid":151,"./type/s2k":152,"./util":153,"./wkd":154,"./worker/async_proxy":155,"web-stream-tools":76}],117:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires encoding/armor
 * @requires crypto
 * @requires packet
 * @requires config
 * @requires enums
 * @requires util
 * @module key
 */

exports.Key = Key;
exports.createSignaturePacket = createSignaturePacket;
exports.read = read;
exports.readArmored = readArmored;
exports.generate = generate;
exports.reformat = reformat;
exports.getPreferredHashAlgo = getPreferredHashAlgo;
exports.getPreferredAlgo = getPreferredAlgo;
exports.isAeadSupported = isAeadSupported;

var _armor = require('./encoding/armor');

var _armor2 = _interopRequireDefault(_armor);

var _crypto = require('./crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @classdesc Class that represents an OpenPGP key. Must contain a primary key.
 * Can contain additional subkeys, signatures, user ids, user attributes.
 * @param  {module:packet.List} packetlist The packets that form this key
 * @borrows module:packet.PublicKey#getKeyId as Key#getKeyId
 * @borrows module:packet.PublicKey#getFingerprint as Key#getFingerprint
 * @borrows module:packet.PublicKey#hasSameFingerprintAs as Key#hasSameFingerprintAs
 * @borrows module:packet.PublicKey#getAlgorithmInfo as Key#getAlgorithmInfo
 * @borrows module:packet.PublicKey#getCreationTime as Key#getCreationTime
 * @borrows module:packet.PublicKey#isDecrypted as Key#isDecrypted
 */
function Key(packetlist) {
  if (!(this instanceof Key)) {
    return new Key(packetlist);
  }
  // same data as in packetlist but in structured form
  this.keyPacket = null;
  this.revocationSignatures = [];
  this.directSignatures = [];
  this.users = [];
  this.subKeys = [];
  this.packetlist2structure(packetlist);
  if (!this.keyPacket || !this.users.length) {
    throw new Error('Invalid key: need at least key and user ID packet');
  }
}

Object.defineProperty(Key.prototype, 'primaryKey', {
  get() {
    return this.keyPacket;
  },
  configurable: true,
  enumerable: true
});

/**
 * Transforms packetlist to structured key data
 * @param  {module:packet.List} packetlist The packets that form a key
 */
Key.prototype.packetlist2structure = function (packetlist) {
  let user;
  let primaryKeyId;
  let subKey;
  for (let i = 0; i < packetlist.length; i++) {
    switch (packetlist[i].tag) {
      case _enums2.default.packet.publicKey:
      case _enums2.default.packet.secretKey:
        this.keyPacket = packetlist[i];
        primaryKeyId = this.getKeyId();
        break;
      case _enums2.default.packet.userid:
      case _enums2.default.packet.userAttribute:
        user = new User(packetlist[i]);
        this.users.push(user);
        break;
      case _enums2.default.packet.publicSubkey:
      case _enums2.default.packet.secretSubkey:
        user = null;
        subKey = new SubKey(packetlist[i]);
        this.subKeys.push(subKey);
        break;
      case _enums2.default.packet.signature:
        switch (packetlist[i].signatureType) {
          case _enums2.default.signature.cert_generic:
          case _enums2.default.signature.cert_persona:
          case _enums2.default.signature.cert_casual:
          case _enums2.default.signature.cert_positive:
            if (!user) {
              _util2.default.print_debug('Dropping certification signatures without preceding user packet');
              continue;
            }
            if (packetlist[i].issuerKeyId.equals(primaryKeyId)) {
              checkRevocationKey(packetlist[i], primaryKeyId);
              user.selfCertifications.push(packetlist[i]);
            } else {
              user.otherCertifications.push(packetlist[i]);
            }
            break;
          case _enums2.default.signature.cert_revocation:
            if (user) {
              user.revocationSignatures.push(packetlist[i]);
            } else {
              this.directSignatures.push(packetlist[i]);
            }
            break;
          case _enums2.default.signature.key:
            checkRevocationKey(packetlist[i], primaryKeyId);
            this.directSignatures.push(packetlist[i]);
            break;
          case _enums2.default.signature.subkey_binding:
            if (!subKey) {
              _util2.default.print_debug('Dropping subkey binding signature without preceding subkey packet');
              continue;
            }
            checkRevocationKey(packetlist[i], primaryKeyId);
            subKey.bindingSignatures.push(packetlist[i]);
            break;
          case _enums2.default.signature.key_revocation:
            this.revocationSignatures.push(packetlist[i]);
            break;
          case _enums2.default.signature.subkey_revocation:
            if (!subKey) {
              _util2.default.print_debug('Dropping subkey revocation signature without preceding subkey packet');
              continue;
            }
            subKey.revocationSignatures.push(packetlist[i]);
            break;
        }
        break;
    }
  }
};

/**
 * Transforms structured key data to packetlist
 * @returns {module:packet.List} The packets that form a key
 */
Key.prototype.toPacketlist = function () {
  const packetlist = new _packet2.default.List();
  packetlist.push(this.keyPacket);
  packetlist.concat(this.revocationSignatures);
  packetlist.concat(this.directSignatures);
  this.users.map(user => packetlist.concat(user.toPacketlist()));
  this.subKeys.map(subKey => packetlist.concat(subKey.toPacketlist()));
  return packetlist;
};

/**
 * Returns an array containing all public or private subkeys matching keyId;
 * If keyId is not present, returns all subkeys.
 * @param  {type/keyid} keyId
 * @returns {Array<module:key~SubKey>}
 */
Key.prototype.getSubkeys = function (keyId = null) {
  const subKeys = [];
  this.subKeys.forEach(subKey => {
    if (!keyId || subKey.getKeyId().equals(keyId, true)) {
      subKeys.push(subKey);
    }
  });
  return subKeys;
};

/**
 * Returns an array containing all public or private keys matching keyId.
 * If keyId is not present, returns all keys starting with the primary key.
 * @param  {type/keyid} keyId
 * @returns {Array<module:key.Key|module:key~SubKey>}
 */
Key.prototype.getKeys = function (keyId = null) {
  const keys = [];
  if (!keyId || this.getKeyId().equals(keyId, true)) {
    keys.push(this);
  }
  return keys.concat(this.getSubkeys(keyId));
};

/**
 * Returns key IDs of all keys
 * @returns {Array<module:type/keyid>}
 */
Key.prototype.getKeyIds = function () {
  return this.getKeys().map(key => key.getKeyId());
};

/**
 * Returns userids
 * @returns {Array<string>} array of userids
 */
Key.prototype.getUserIds = function () {
  return this.users.map(user => {
    return user.userId ? user.userId.userid : null;
  }).filter(userid => userid !== null);
};

/**
 * Returns true if this is a public key
 * @returns {Boolean}
 */
Key.prototype.isPublic = function () {
  return this.keyPacket.tag === _enums2.default.packet.publicKey;
};

/**
 * Returns true if this is a private key
 * @returns {Boolean}
 */
Key.prototype.isPrivate = function () {
  return this.keyPacket.tag === _enums2.default.packet.secretKey;
};

/**
 * Returns key as public key (shallow copy)
 * @returns {module:key.Key} new public Key
 */
Key.prototype.toPublic = function () {
  const packetlist = new _packet2.default.List();
  const keyPackets = this.toPacketlist();
  let bytes;
  let pubKeyPacket;
  let pubSubkeyPacket;
  for (let i = 0; i < keyPackets.length; i++) {
    switch (keyPackets[i].tag) {
      case _enums2.default.packet.secretKey:
        bytes = keyPackets[i].writePublicKey();
        pubKeyPacket = new _packet2.default.PublicKey();
        pubKeyPacket.read(bytes);
        packetlist.push(pubKeyPacket);
        break;
      case _enums2.default.packet.secretSubkey:
        bytes = keyPackets[i].writePublicKey();
        pubSubkeyPacket = new _packet2.default.PublicSubkey();
        pubSubkeyPacket.read(bytes);
        packetlist.push(pubSubkeyPacket);
        break;
      default:
        packetlist.push(keyPackets[i]);
    }
  }
  return new Key(packetlist);
};

/**
 * Returns ASCII armored text of key
 * @returns {ReadableStream<String>} ASCII armor
 */
Key.prototype.armor = function () {
  const type = this.isPublic() ? _enums2.default.armor.public_key : _enums2.default.armor.private_key;
  return _armor2.default.encode(type, this.toPacketlist().write());
};

/**
 * Returns the valid and non-expired signature that has the latest creation date, while ignoring signatures created in the future.
 * @param  {Array<module:packet.Signature>} signatures  List of signatures
 * @param  {Date}                           date        Use the given date instead of the current time
 * @returns {Promise<module:packet.Signature>} The latest valid signature
 * @async
 */
async function getLatestValidSignature(signatures, primaryKey, signatureType, dataToVerify, date = new Date()) {
  let signature;
  for (let i = signatures.length - 1; i >= 0; i--) {
    if ((!signature || signatures[i].created >= signature.created) &&
    // check binding signature is not expired (ie, check for V4 expiration time)
    !signatures[i].isExpired(date) && (
    // check binding signature is verified
    signatures[i].verified || (await signatures[i].verify(primaryKey, signatureType, dataToVerify)))) {
      signature = signatures[i];
    }
  }
  return signature;
}

/**
 * Returns last created key or key by given keyId that is available for signing and verification
 * @param  {module:type/keyid} keyId, optional
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId, optional user ID
 * @returns {Promise<module:key.Key|module:key~SubKey|null>} key or null if no signing key has been found
 * @async
 */
Key.prototype.getSigningKey = async function (keyId = null, date = new Date(), userId = {}) {
  const primaryKey = this.keyPacket;
  if ((await this.verifyPrimaryKey(date, userId)) === _enums2.default.keyStatus.valid) {
    const subKeys = this.subKeys.slice().sort((a, b) => b.keyPacket.created - a.keyPacket.created);
    for (let i = 0; i < subKeys.length; i++) {
      if (!keyId || subKeys[i].getKeyId().equals(keyId)) {
        if ((await subKeys[i].verify(primaryKey, date)) === _enums2.default.keyStatus.valid) {
          const dataToVerify = { key: primaryKey, bind: subKeys[i].keyPacket };
          const bindingSignature = await getLatestValidSignature(subKeys[i].bindingSignatures, primaryKey, _enums2.default.signature.subkey_binding, dataToVerify, date);
          if (bindingSignature && bindingSignature.embeddedSignature && isValidSigningKeyPacket(subKeys[i].keyPacket, bindingSignature) && (await getLatestValidSignature([bindingSignature.embeddedSignature], subKeys[i].keyPacket, _enums2.default.signature.key_binding, dataToVerify, date))) {
            return subKeys[i];
          }
        }
      }
    }
    const primaryUser = await this.getPrimaryUser(date, userId);
    if (primaryUser && (!keyId || primaryKey.getKeyId().equals(keyId)) && isValidSigningKeyPacket(primaryKey, primaryUser.selfCertification)) {
      return this;
    }
  }
  return null;

  function isValidSigningKeyPacket(keyPacket, signature) {
    if (!signature.verified || signature.revoked !== false) {
      // Sanity check
      throw new Error('Signature not verified');
    }
    return keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.rsa_encrypt) && keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.elgamal) && keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.ecdh) && (!signature.keyFlags || (signature.keyFlags[0] & _enums2.default.keyFlags.sign_data) !== 0);
  }
};

/**
 * Returns last created key or key by given keyId that is available for encryption or decryption
 * @param  {module:type/keyid} keyId, optional
 * @param  {Date}              date, optional
 * @param  {String}            userId, optional
 * @returns {Promise<module:key.Key|module:key~SubKey|null>} key or null if no encryption key has been found
 * @async
 */
Key.prototype.getEncryptionKey = async function (keyId, date = new Date(), userId = {}) {
  const primaryKey = this.keyPacket;
  if ((await this.verifyPrimaryKey(date, userId)) === _enums2.default.keyStatus.valid) {
    // V4: by convention subkeys are preferred for encryption service
    const subKeys = this.subKeys.slice().sort((a, b) => b.keyPacket.created - a.keyPacket.created);
    for (let i = 0; i < subKeys.length; i++) {
      if (!keyId || subKeys[i].getKeyId().equals(keyId)) {
        if ((await subKeys[i].verify(primaryKey, date)) === _enums2.default.keyStatus.valid) {
          const dataToVerify = { key: primaryKey, bind: subKeys[i].keyPacket };
          const bindingSignature = await getLatestValidSignature(subKeys[i].bindingSignatures, primaryKey, _enums2.default.signature.subkey_binding, dataToVerify, date);
          if (bindingSignature && isValidEncryptionKeyPacket(subKeys[i].keyPacket, bindingSignature)) {
            return subKeys[i];
          }
        }
      }
    }
    // if no valid subkey for encryption, evaluate primary key
    const primaryUser = await this.getPrimaryUser(date, userId);
    if (primaryUser && (!keyId || primaryKey.getKeyId().equals(keyId)) && isValidEncryptionKeyPacket(primaryKey, primaryUser.selfCertification)) {
      return this;
    }
  }
  return null;

  function isValidEncryptionKeyPacket(keyPacket, signature) {
    if (!signature.verified || signature.revoked !== false) {
      // Sanity check
      throw new Error('Signature not verified');
    }
    return keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.dsa) && keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.rsa_sign) && keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.ecdsa) && keyPacket.algorithm !== _enums2.default.read(_enums2.default.publicKey, _enums2.default.publicKey.eddsa) && (!signature.keyFlags || (signature.keyFlags[0] & _enums2.default.keyFlags.encrypt_communication) !== 0 || (signature.keyFlags[0] & _enums2.default.keyFlags.encrypt_storage) !== 0);
  }
};

/**
 * Encrypts all secret key and subkey packets matching keyId
 * @param  {String|Array<String>} passphrases - if multiple passphrases, then should be in same order as packets each should encrypt
 * @param  {module:type/keyid} keyId
 * @returns {Promise<Array<module:packet.SecretKey|module:packet.SecretSubkey>>}
 * @async
 */
Key.prototype.encrypt = async function (passphrases, keyId = null) {
  if (!this.isPrivate()) {
    throw new Error("Nothing to encrypt in a public key");
  }

  const keys = this.getKeys(keyId);
  passphrases = _util2.default.isArray(passphrases) ? passphrases : new Array(keys.length).fill(passphrases);
  if (passphrases.length !== keys.length) {
    throw new Error("Invalid number of passphrases for key");
  }

  return Promise.all(keys.map(async function (key, i) {
    const keyPacket = key.keyPacket;

    await keyPacket.encrypt(passphrases[i]);
    keyPacket.clearPrivateParams();
    return keyPacket;
  }));
};

/**
 * Decrypts all secret key and subkey packets matching keyId
 * @param  {String|Array<String>} passphrases
 * @param  {module:type/keyid} keyId
 * @returns {Promise<Boolean>} true if all matching key and subkey packets decrypted successfully
 * @async
 */
Key.prototype.decrypt = async function (passphrases, keyId = null) {
  if (!this.isPrivate()) {
    throw new Error("Nothing to decrypt in a public key");
  }
  passphrases = _util2.default.isArray(passphrases) ? passphrases : [passphrases];

  const results = await Promise.all(this.getKeys(keyId).map(async function (key) {
    let decrypted = false;
    let error = null;
    await Promise.all(passphrases.map(async function (passphrase) {
      try {
        await key.keyPacket.decrypt(passphrase);
        decrypted = true;
      } catch (e) {
        error = e;
      }
    }));
    if (!decrypted) {
      throw error;
    }
    return decrypted;
  }));
  return results.every(result => result === true);
};

/**
 * Checks if a signature on a key is revoked
 * @param  {module:packet.SecretKey|
 * @param  {module:packet.Signature}  signature    The signature to verify
 * @param  {module:packet.PublicSubkey|
 *          module:packet.SecretSubkey|
 *          module:packet.PublicKey|
 *          module:packet.SecretKey} key, optional The key to verify the signature
 * @param  {Date}                     date          Use the given date instead of the current time
 * @returns {Promise<Boolean>}                      True if the certificate is revoked
 * @async
 */
Key.prototype.isRevoked = async function (signature, key, date = new Date()) {
  return isDataRevoked(this.keyPacket, _enums2.default.signature.key_revocation, { key: this.keyPacket }, this.revocationSignatures, signature, key, date);
};

/**
 * Verify primary key. Checks for revocation signatures, expiration time
 * and valid self signature
 * @param {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId (optional) user ID
 * @returns {Promise<module:enums.keyStatus>} The status of the primary key
 * @async
 */
Key.prototype.verifyPrimaryKey = async function (date = new Date(), userId = {}) {
  const primaryKey = this.keyPacket;
  // check for key revocation signatures
  if (await this.isRevoked(null, null, date)) {
    return _enums2.default.keyStatus.revoked;
  }
  // check for at least one self signature. Self signature of user ID not mandatory
  // See {@link https://tools.ietf.org/html/rfc4880#section-11.1}
  if (!this.users.some(user => user.userId && user.selfCertifications.length)) {
    return _enums2.default.keyStatus.no_self_cert;
  }
  // check for valid, unrevoked, unexpired self signature

  var _ref = (await this.getPrimaryUser(date, userId)) || {};

  const user = _ref.user,
        selfCertification = _ref.selfCertification;

  if (!user) {
    return _enums2.default.keyStatus.invalid;
  }
  // check for expiration time
  if (isDataExpired(primaryKey, selfCertification, date)) {
    return _enums2.default.keyStatus.expired;
  }
  return _enums2.default.keyStatus.valid;
};

/**
 * Returns the latest date when the key can be used for encrypting, signing, or both, depending on the `capabilities` paramater.
 * When `capabilities` is null, defaults to returning the expiry date of the primary key.
 * Returns null if `capabilities` is passed and the key does not have the specified capabilities or is revoked or invalid.
 * Returns Infinity if the key doesn't expire.
 * @param  {encrypt|sign|encrypt_sign} capabilities, optional
 * @param  {module:type/keyid} keyId, optional
 * @param  {Object} userId, optional user ID
 * @returns {Promise<Date | Infinity | null>}
 * @async
 */
Key.prototype.getExpirationTime = async function (capabilities, keyId, userId) {
  const primaryUser = await this.getPrimaryUser(null, userId);
  if (!primaryUser) {
    throw new Error('Could not find primary user');
  }
  const selfCert = primaryUser.selfCertification;
  const keyExpiry = getExpirationTime(this.keyPacket, selfCert);
  const sigExpiry = selfCert.getExpirationTime();
  let expiry = keyExpiry < sigExpiry ? keyExpiry : sigExpiry;
  if (capabilities === 'encrypt' || capabilities === 'encrypt_sign') {
    const encryptKey = (await this.getEncryptionKey(keyId, expiry, userId)) || (await this.getEncryptionKey(keyId, null, userId));
    if (!encryptKey) return null;
    const encryptExpiry = await encryptKey.getExpirationTime(this.keyPacket);
    if (encryptExpiry < expiry) expiry = encryptExpiry;
  }
  if (capabilities === 'sign' || capabilities === 'encrypt_sign') {
    const signKey = (await this.getSigningKey(keyId, expiry, userId)) || (await this.getSigningKey(keyId, null, userId));
    if (!signKey) return null;
    const signExpiry = await signKey.getExpirationTime(this.keyPacket);
    if (signExpiry < expiry) expiry = signExpiry;
  }
  return expiry;
};

/**
 * Returns primary user and most significant (latest valid) self signature
 * - if multiple primary users exist, returns the one with the latest self signature
 * - otherwise, returns the user with the latest self signature
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId (optional) user ID to get instead of the primary user, if it exists
 * @returns {Promise<{user: module:key.User,
 *                    selfCertification: module:packet.Signature}>} The primary user and the self signature
 * @async
 */
Key.prototype.getPrimaryUser = async function (date = new Date(), userId = {}) {
  const primaryKey = this.keyPacket;
  const users = [];
  for (let i = 0; i < this.users.length; i++) {
    const user = this.users[i];
    if (!user.userId || !((userId.name === undefined || user.userId.name === userId.name) && (userId.email === undefined || user.userId.email === userId.email) && (userId.comment === undefined || user.userId.comment === userId.comment))) continue;
    const dataToVerify = { userId: user.userId, key: primaryKey };
    const selfCertification = await getLatestValidSignature(user.selfCertifications, primaryKey, _enums2.default.signature.cert_generic, dataToVerify, date);
    if (!selfCertification) continue;
    users.push({ index: i, user, selfCertification });
  }
  if (!users.length) {
    if (userId.name !== undefined || userId.email !== undefined || userId.comment !== undefined) {
      throw new Error('Could not find user that matches that user ID');
    }
    return null;
  }
  await Promise.all(users.map(async function (a) {
    return a.user.revoked || a.user.isRevoked(primaryKey, a.selfCertification, null, date);
  }));
  // sort by primary user flag and signature creation time
  const primaryUser = users.sort(function (a, b) {
    const A = a.selfCertification;
    const B = b.selfCertification;
    return B.revoked - A.revoked || A.isPrimaryUserID - B.isPrimaryUserID || A.created - B.created;
  }).pop();
  const user = primaryUser.user,
        cert = primaryUser.selfCertification;

  if (cert.revoked || (await user.isRevoked(primaryKey, cert, null, date))) {
    return null;
  }
  return primaryUser;
};

/**
 * Update key with new components from specified key with same key ID:
 * users, subkeys, certificates are merged into the destination key,
 * duplicates and expired signatures are ignored.
 *
 * If the specified key is a private key and the destination key is public,
 * the destination key is transformed to a private key.
 * @param  {module:key.Key} key Source key to merge
 * @returns {Promise<undefined>}
 * @async
 */
Key.prototype.update = async function (key) {
  if ((await key.verifyPrimaryKey()) === _enums2.default.keyStatus.invalid) {
    return;
  }
  if (!this.hasSameFingerprintAs(key)) {
    throw new Error('Key update method: fingerprints of keys not equal');
  }
  if (this.isPublic() && key.isPrivate()) {
    // check for equal subkey packets
    const equal = this.subKeys.length === key.subKeys.length && this.subKeys.every(destSubKey => {
      return key.subKeys.some(srcSubKey => {
        return destSubKey.hasSameFingerprintAs(srcSubKey);
      });
    });
    if (!equal) {
      throw new Error('Cannot update public key with private key if subkey mismatch');
    }
    this.keyPacket = key.keyPacket;
  }
  // revocation signatures
  await mergeSignatures(key, this, 'revocationSignatures', srcRevSig => {
    return isDataRevoked(this.keyPacket, _enums2.default.signature.key_revocation, this, [srcRevSig], null, key.keyPacket);
  });
  // direct signatures
  await mergeSignatures(key, this, 'directSignatures');
  // TODO replace when Promise.some or Promise.any are implemented
  // users
  await Promise.all(key.users.map(async srcUser => {
    let found = false;
    await Promise.all(this.users.map(async dstUser => {
      if (srcUser.userId && dstUser.userId && srcUser.userId.userid === dstUser.userId.userid || srcUser.userAttribute && srcUser.userAttribute.equals(dstUser.userAttribute)) {
        await dstUser.update(srcUser, this.keyPacket);
        found = true;
      }
    }));
    if (!found) {
      this.users.push(srcUser);
    }
  }));
  // TODO replace when Promise.some or Promise.any are implemented
  // subkeys
  await Promise.all(key.subKeys.map(async srcSubKey => {
    let found = false;
    await Promise.all(this.subKeys.map(async dstSubKey => {
      if (dstSubKey.hasSameFingerprintAs(srcSubKey)) {
        await dstSubKey.update(srcSubKey, this.keyPacket);
        found = true;
      }
    }));
    if (!found) {
      this.subKeys.push(srcSubKey);
    }
  }));
};

/**
 * Merges signatures from source[attr] to dest[attr]
 * @private
 * @param  {Object} source
 * @param  {Object} dest
 * @param  {String} attr
 * @param  {Function} checkFn optional, signature only merged if true
 */
async function mergeSignatures(source, dest, attr, checkFn) {
  source = source[attr];
  if (source) {
    if (!dest[attr].length) {
      dest[attr] = source;
    } else {
      await Promise.all(source.map(async function (sourceSig) {
        if (!sourceSig.isExpired() && (!checkFn || (await checkFn(sourceSig))) && !dest[attr].some(function (destSig) {
          return _util2.default.equalsUint8Array(destSig.signature, sourceSig.signature);
        })) {
          dest[attr].push(sourceSig);
        }
      }));
    }
  }
}

/**
 * Revokes the key
 * @param  {Object} reasonForRevocation optional, object indicating the reason for revocation
 * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag optional, flag indicating the reason for revocation
 * @param  {String} reasonForRevocation.string optional, string explaining the reason for revocation
 * @param  {Date} date optional, override the creationtime of the revocation signature
 * @returns {Promise<module:key.Key>} new key with revocation signature
 * @async
 */
Key.prototype.revoke = async function ({
  flag: reasonForRevocationFlag = _enums2.default.reasonForRevocation.no_reason,
  string: reasonForRevocationString = ''
} = {}, date = new Date()) {
  if (this.isPublic()) {
    throw new Error('Need private key for revoking');
  }
  const dataToSign = { key: this.keyPacket };
  const key = new Key(this.toPacketlist());
  key.revocationSignatures.push((await createSignaturePacket(dataToSign, null, this.keyPacket, {
    signatureType: _enums2.default.signature.key_revocation,
    reasonForRevocationFlag: _enums2.default.write(_enums2.default.reasonForRevocation, reasonForRevocationFlag),
    reasonForRevocationString
  }, date)));
  return key;
};

/**
 * Get revocation certificate from a revoked key.
 *   (To get a revocation certificate for an unrevoked key, call revoke() first.)
 * @returns {Promise<String>} armored revocation certificate
 * @async
 */
Key.prototype.getRevocationCertificate = async function () {
  const dataToVerify = { key: this.keyPacket };
  const revocationSignature = await getLatestValidSignature(this.revocationSignatures, this.keyPacket, _enums2.default.signature.key_revocation, dataToVerify);
  if (revocationSignature) {
    const packetlist = new _packet2.default.List();
    packetlist.push(revocationSignature);
    return _armor2.default.encode(_enums2.default.armor.public_key, packetlist.write(), null, null, 'This is a revocation certificate');
  }
};

/**
 * Applies a revocation certificate to a key
 * This adds the first signature packet in the armored text to the key,
 * if it is a valid revocation signature.
 * @param  {String} revocationCertificate armored revocation certificate
 * @returns {Promise<module:key.Key>} new revoked key
 * @async
 */
Key.prototype.applyRevocationCertificate = async function (revocationCertificate) {
  const input = await _armor2.default.decode(revocationCertificate);
  const packetlist = new _packet2.default.List();
  await packetlist.read(input.data);
  const revocationSignature = packetlist.findPacket(_enums2.default.packet.signature);
  if (!revocationSignature || revocationSignature.signatureType !== _enums2.default.signature.key_revocation) {
    throw new Error('Could not find revocation signature packet');
  }
  if (!revocationSignature.issuerKeyId.equals(this.getKeyId())) {
    throw new Error('Revocation signature does not match key');
  }
  if (revocationSignature.isExpired()) {
    throw new Error('Revocation signature is expired');
  }
  if (!(await revocationSignature.verify(this.keyPacket, _enums2.default.signature.key_revocation, { key: this.keyPacket }))) {
    throw new Error('Could not verify revocation signature');
  }
  const key = new Key(this.toPacketlist());
  key.revocationSignatures.push(revocationSignature);
  return key;
};

/**
 * Signs primary user of key
 * @param  {Array<module:key.Key>} privateKey decrypted private keys for signing
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId (optional) user ID to get instead of the primary user, if it exists
 * @returns {Promise<module:key.Key>} new public key with new certificate signature
 * @async
 */
Key.prototype.signPrimaryUser = async function (privateKeys, date, userId) {
  var _ref2 = (await this.getPrimaryUser(date, userId)) || {};

  const index = _ref2.index,
        user = _ref2.user;

  if (!user) {
    throw new Error('Could not find primary user');
  }
  const userSign = await user.sign(this.keyPacket, privateKeys);
  const key = new Key(this.toPacketlist());
  key.users[index] = userSign;
  return key;
};

/**
 * Signs all users of key
 * @param  {Array<module:key.Key>} privateKeys decrypted private keys for signing
 * @returns {Promise<module:key.Key>} new public key with new certificate signature
 * @async
 */
Key.prototype.signAllUsers = async function (privateKeys) {
  const that = this;
  const key = new Key(this.toPacketlist());
  key.users = await Promise.all(this.users.map(function (user) {
    return user.sign(that.keyPacket, privateKeys);
  }));
  return key;
};

/**
 * Verifies primary user of key
 * - if no arguments are given, verifies the self certificates;
 * - otherwise, verifies all certificates signed with given keys.
 * @param  {Array<module:key.Key>} keys array of keys to verify certificate signatures
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId (optional) user ID to get instead of the primary user, if it exists
 * @returns {Promise<Array<{keyid: module:type/keyid,
 *                          valid: Boolean}>>}    List of signer's keyid and validity of signature
 * @async
 */
Key.prototype.verifyPrimaryUser = async function (keys, date, userId) {
  const primaryKey = this.keyPacket;

  var _ref3 = (await this.getPrimaryUser(date, userId)) || {};

  const user = _ref3.user;

  if (!user) {
    throw new Error('Could not find primary user');
  }
  const results = keys ? await user.verifyAllCertifications(primaryKey, keys) : [{ keyid: primaryKey.keyid, valid: (await user.verify(primaryKey)) === _enums2.default.keyStatus.valid }];
  return results;
};

/**
 * Verifies all users of key
 * - if no arguments are given, verifies the self certificates;
 * - otherwise, verifies all certificates signed with given keys.
 * @param  {Array<module:key.Key>} keys array of keys to verify certificate signatures
 * @returns {Promise<Array<{userid: String,
 *                          keyid: module:type/keyid,
 *                          valid: Boolean}>>} list of userid, signer's keyid and validity of signature
 * @async
 */
Key.prototype.verifyAllUsers = async function (keys) {
  const results = [];
  const primaryKey = this.keyPacket;
  await Promise.all(this.users.map(async function (user) {
    const signatures = keys ? await user.verifyAllCertifications(primaryKey, keys) : [{ keyid: primaryKey.keyid, valid: (await user.verify(primaryKey)) === _enums2.default.keyStatus.valid }];
    signatures.forEach(signature => {
      results.push({
        userid: user.userId.userid,
        keyid: signature.keyid,
        valid: signature.valid
      });
    });
  }));
  return results;
};

/**
 * @class
 * @classdesc Class that represents an user ID or attribute packet and the relevant signatures.
 */
function User(userPacket) {
  if (!(this instanceof User)) {
    return new User(userPacket);
  }
  this.userId = userPacket.tag === _enums2.default.packet.userid ? userPacket : null;
  this.userAttribute = userPacket.tag === _enums2.default.packet.userAttribute ? userPacket : null;
  this.selfCertifications = [];
  this.otherCertifications = [];
  this.revocationSignatures = [];
}

/**
 * Transforms structured user data to packetlist
 * @returns {module:packet.List}
 */
User.prototype.toPacketlist = function () {
  const packetlist = new _packet2.default.List();
  packetlist.push(this.userId || this.userAttribute);
  packetlist.concat(this.revocationSignatures);
  packetlist.concat(this.selfCertifications);
  packetlist.concat(this.otherCertifications);
  return packetlist;
};

/**
 * Signs user
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey  The primary key packet
 * @param  {Array<module:key.Key>}    privateKeys Decrypted private keys for signing
 * @returns {Promise<module:key.Key>}             New user with new certificate signatures
 * @async
 */
User.prototype.sign = async function (primaryKey, privateKeys) {
  const dataToSign = {
    userId: this.userId,
    userAttribute: this.userAttribute,
    key: primaryKey
  };
  const user = new User(dataToSign.userId || dataToSign.userAttribute);
  user.otherCertifications = await Promise.all(privateKeys.map(async function (privateKey) {
    if (privateKey.isPublic()) {
      throw new Error('Need private key for signing');
    }
    if (privateKey.hasSameFingerprintAs(primaryKey)) {
      throw new Error('Not implemented for self signing');
    }
    const signingKey = await privateKey.getSigningKey();
    if (!signingKey) {
      throw new Error('Could not find valid signing key packet in key ' + privateKey.getKeyId().toHex());
    }
    return createSignaturePacket(dataToSign, privateKey, signingKey.keyPacket, {
      // Most OpenPGP implementations use generic certification (0x10)
      signatureType: _enums2.default.signature.cert_generic,
      keyFlags: [_enums2.default.keyFlags.certify_keys | _enums2.default.keyFlags.sign_data]
    });
  }));
  await user.update(this, primaryKey);
  return user;
};

/**
 * Checks if a given certificate of the user is revoked
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey    The primary key packet
 * @param  {module:packet.Signature}  certificate   The certificate to verify
 * @param  {module:packet.PublicSubkey|
 *          module:packet.SecretSubkey|
 *          module:packet.PublicKey|
 *          module:packet.SecretKey} key, optional The key to verify the signature
 * @param  {Date}                     date          Use the given date instead of the current time
 * @returns {Promise<Boolean>}                      True if the certificate is revoked
 * @async
 */
User.prototype.isRevoked = async function (primaryKey, certificate, key, date = new Date()) {
  return isDataRevoked(primaryKey, _enums2.default.signature.cert_revocation, {
    key: primaryKey,
    userId: this.userId,
    userAttribute: this.userAttribute
  }, this.revocationSignatures, certificate, key, date);
};

/**
 * Create signature packet
 * @param  {Object}                          dataToSign Contains packets to be signed
 * @param  {module:packet.SecretKey|
 *          module:packet.SecretSubkey}      signingKeyPacket secret key packet for signing
 * @param  {Object} signatureProperties      (optional) properties to write on the signature packet before signing
 * @param  {Date} date                       (optional) override the creationtime of the signature
 * @param  {Object} userId                   (optional) user ID
 * @returns {module:packet/signature}         signature packet
 */
async function createSignaturePacket(dataToSign, privateKey, signingKeyPacket, signatureProperties, date, userId) {
  if (!signingKeyPacket.isDecrypted()) {
    throw new Error('Private key is not decrypted.');
  }
  const signaturePacket = new _packet2.default.Signature(date);
  Object.assign(signaturePacket, signatureProperties);
  signaturePacket.publicKeyAlgorithm = signingKeyPacket.algorithm;
  signaturePacket.hashAlgorithm = await getPreferredHashAlgo(privateKey, signingKeyPacket, date, userId);
  await signaturePacket.sign(signingKeyPacket, dataToSign);
  return signaturePacket;
}

/**
 * Verifies the user certificate
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey  The primary key packet
 * @param  {module:packet.Signature}  certificate A certificate of this user
 * @param  {Array<module:key.Key>}    keys        Array of keys to verify certificate signatures
 * @param  {Date}                     date        Use the given date instead of the current time
 * @returns {Promise<module:enums.keyStatus>}     status of the certificate
 * @async
 */
User.prototype.verifyCertificate = async function (primaryKey, certificate, keys, date = new Date()) {
  const that = this;
  const keyid = certificate.issuerKeyId;
  const dataToVerify = {
    userId: this.userId,
    userAttribute: this.userAttribute,
    key: primaryKey
  };
  const results = await Promise.all(keys.map(async function (key) {
    if (!key.getKeyIds().some(id => id.equals(keyid))) {
      return;
    }
    const signingKey = await key.getSigningKey(keyid, date);
    if (certificate.revoked || (await that.isRevoked(primaryKey, certificate, signingKey.keyPacket, date))) {
      return _enums2.default.keyStatus.revoked;
    }
    if (!(certificate.verified || (await certificate.verify(signingKey.keyPacket, _enums2.default.signature.cert_generic, dataToVerify)))) {
      return _enums2.default.keyStatus.invalid;
    }
    if (certificate.isExpired(date)) {
      return _enums2.default.keyStatus.expired;
    }
    return _enums2.default.keyStatus.valid;
  }));
  return results.find(result => result !== undefined);
};

/**
 * Verifies all user certificates
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey The primary key packet
 * @param  {Array<module:key.Key>}    keys       Array of keys to verify certificate signatures
 * @param  {Date}                     date        Use the given date instead of the current time
 * @returns {Promise<Array<{keyid: module:type/keyid,
 *                          valid: Boolean}>>}   List of signer's keyid and validity of signature
 * @async
 */
User.prototype.verifyAllCertifications = async function (primaryKey, keys, date = new Date()) {
  const that = this;
  const certifications = this.selfCertifications.concat(this.otherCertifications);
  return Promise.all(certifications.map(async function (certification) {
    const status = await that.verifyCertificate(primaryKey, certification, keys, date);
    return {
      keyid: certification.issuerKeyId,
      valid: status === undefined ? null : status === _enums2.default.keyStatus.valid
    };
  }));
};

/**
 * Verify User. Checks for existence of self signatures, revocation signatures
 * and validity of self signature
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey The primary key packet
 * @param  {Date}                    date       Use the given date instead of the current time
 * @returns {Promise<module:enums.keyStatus>}    Status of user
 * @async
 */
User.prototype.verify = async function (primaryKey, date = new Date()) {
  if (!this.selfCertifications.length) {
    return _enums2.default.keyStatus.no_self_cert;
  }
  const that = this;
  const dataToVerify = {
    userId: this.userId,
    userAttribute: this.userAttribute,
    key: primaryKey
  };
  // TODO replace when Promise.some or Promise.any are implemented
  const results = [_enums2.default.keyStatus.invalid].concat((await Promise.all(this.selfCertifications.map(async function (selfCertification) {
    if (selfCertification.revoked || (await that.isRevoked(primaryKey, selfCertification, undefined, date))) {
      return _enums2.default.keyStatus.revoked;
    }
    if (!(selfCertification.verified || (await selfCertification.verify(primaryKey, _enums2.default.signature.cert_generic, dataToVerify)))) {
      return _enums2.default.keyStatus.invalid;
    }
    if (selfCertification.isExpired(date)) {
      return _enums2.default.keyStatus.expired;
    }
    return _enums2.default.keyStatus.valid;
  }))));
  return results.some(status => status === _enums2.default.keyStatus.valid) ? _enums2.default.keyStatus.valid : results.pop();
};

/**
 * Update user with new components from specified user
 * @param  {module:key.User}             user       Source user to merge
 * @param  {module:packet.SecretKey|
 *          module:packet.SecretSubkey} primaryKey primary key used for validation
 * @returns {Promise<undefined>}
 * @async
 */
User.prototype.update = async function (user, primaryKey) {
  const dataToVerify = {
    userId: this.userId,
    userAttribute: this.userAttribute,
    key: primaryKey
  };
  // self signatures
  await mergeSignatures(user, this, 'selfCertifications', async function (srcSelfSig) {
    return srcSelfSig.verified || srcSelfSig.verify(primaryKey, _enums2.default.signature.cert_generic, dataToVerify);
  });
  // other signatures
  await mergeSignatures(user, this, 'otherCertifications');
  // revocation signatures
  await mergeSignatures(user, this, 'revocationSignatures', function (srcRevSig) {
    return isDataRevoked(primaryKey, _enums2.default.signature.cert_revocation, dataToVerify, [srcRevSig]);
  });
};

/**
 * @class
 * @classdesc Class that represents a subkey packet and the relevant signatures.
 * @borrows module:packet.PublicSubkey#getKeyId as SubKey#getKeyId
 * @borrows module:packet.PublicSubkey#getFingerprint as SubKey#getFingerprint
 * @borrows module:packet.PublicSubkey#hasSameFingerprintAs as SubKey#hasSameFingerprintAs
 * @borrows module:packet.PublicSubkey#getAlgorithmInfo as SubKey#getAlgorithmInfo
 * @borrows module:packet.PublicSubkey#getCreationTime as SubKey#getCreationTime
 * @borrows module:packet.PublicSubkey#isDecrypted as SubKey#isDecrypted
 */
function SubKey(subKeyPacket) {
  if (!(this instanceof SubKey)) {
    return new SubKey(subKeyPacket);
  }
  this.keyPacket = subKeyPacket;
  this.bindingSignatures = [];
  this.revocationSignatures = [];
}

/**
 * Transforms structured subkey data to packetlist
 * @returns {module:packet.List}
 */
SubKey.prototype.toPacketlist = function () {
  const packetlist = new _packet2.default.List();
  packetlist.push(this.keyPacket);
  packetlist.concat(this.revocationSignatures);
  packetlist.concat(this.bindingSignatures);
  return packetlist;
};

/**
 * Checks if a binding signature of a subkey is revoked
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey    The primary key packet
 * @param  {module:packet.Signature}  signature     The binding signature to verify
 * @param  {module:packet.PublicSubkey|
 *          module:packet.SecretSubkey|
 *          module:packet.PublicKey|
 *          module:packet.SecretKey} key, optional The key to verify the signature
 * @param  {Date}                     date          Use the given date instead of the current time
 * @returns {Promise<Boolean>}                      True if the binding signature is revoked
 * @async
 */
SubKey.prototype.isRevoked = async function (primaryKey, signature, key, date = new Date()) {
  return isDataRevoked(primaryKey, _enums2.default.signature.subkey_revocation, {
    key: primaryKey,
    bind: this.keyPacket
  }, this.revocationSignatures, signature, key, date);
};

/**
 * Verify subkey. Checks for revocation signatures, expiration time
 * and valid binding signature
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey The primary key packet
 * @param  {Date}                     date       Use the given date instead of the current time
 * @returns {Promise<module:enums.keyStatus>}    The status of the subkey
 * @async
 */
SubKey.prototype.verify = async function (primaryKey, date = new Date()) {
  const that = this;
  const dataToVerify = { key: primaryKey, bind: this.keyPacket };
  // check subkey binding signatures
  const bindingSignature = await getLatestValidSignature(this.bindingSignatures, primaryKey, _enums2.default.signature.subkey_binding, dataToVerify, date);
  // check binding signature is verified
  if (!bindingSignature) {
    return _enums2.default.keyStatus.invalid;
  }
  // check binding signature is not revoked
  if (bindingSignature.revoked || (await that.isRevoked(primaryKey, bindingSignature, null, date))) {
    return _enums2.default.keyStatus.revoked;
  }
  // check for expiration time
  if (isDataExpired(this.keyPacket, bindingSignature, date)) {
    return _enums2.default.keyStatus.expired;
  }
  return _enums2.default.keyStatus.valid; // binding signature passed all checks
};

/**
 * Returns the expiration time of the subkey or Infinity if key does not expire
 * Returns null if the subkey is invalid.
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey} primaryKey  The primary key packet
 * @param  {Date}                     date       Use the given date instead of the current time
 * @returns {Promise<Date | Infinity | null>}
 * @async
 */
SubKey.prototype.getExpirationTime = async function (primaryKey, date = new Date()) {
  const dataToVerify = { key: primaryKey, bind: this.keyPacket };
  const bindingSignature = await getLatestValidSignature(this.bindingSignatures, primaryKey, _enums2.default.signature.subkey_binding, dataToVerify, date);
  if (!bindingSignature) return null;
  const keyExpiry = getExpirationTime(this.keyPacket, bindingSignature);
  const sigExpiry = bindingSignature.getExpirationTime();
  return keyExpiry < sigExpiry ? keyExpiry : sigExpiry;
};

/**
 * Update subkey with new components from specified subkey
 * @param  {module:key~SubKey}           subKey     Source subkey to merge
 * @param  {module:packet.SecretKey|
            module:packet.SecretSubkey} primaryKey primary key used for validation
 * @returns {Promise<undefined>}
 * @async
 */
SubKey.prototype.update = async function (subKey, primaryKey) {
  if ((await subKey.verify(primaryKey)) === _enums2.default.keyStatus.invalid) {
    return;
  }
  if (!this.hasSameFingerprintAs(subKey)) {
    throw new Error('SubKey update method: fingerprints of subkeys not equal');
  }
  // key packet
  if (this.keyPacket.tag === _enums2.default.packet.publicSubkey && subKey.keyPacket.tag === _enums2.default.packet.secretSubkey) {
    this.keyPacket = subKey.keyPacket;
  }
  // update missing binding signatures
  const that = this;
  const dataToVerify = { key: primaryKey, bind: that.keyPacket };
  await mergeSignatures(subKey, this, 'bindingSignatures', async function (srcBindSig) {
    if (!(srcBindSig.verified || (await srcBindSig.verify(primaryKey, _enums2.default.signature.subkey_binding, dataToVerify)))) {
      return false;
    }
    for (let i = 0; i < that.bindingSignatures.length; i++) {
      if (that.bindingSignatures[i].issuerKeyId.equals(srcBindSig.issuerKeyId)) {
        if (srcBindSig.created > that.bindingSignatures[i].created) {
          that.bindingSignatures[i] = srcBindSig;
        }
        return false;
      }
    }
    return true;
  });
  // revocation signatures
  await mergeSignatures(subKey, this, 'revocationSignatures', function (srcRevSig) {
    return isDataRevoked(primaryKey, _enums2.default.signature.subkey_revocation, dataToVerify, [srcRevSig]);
  });
};

/**
 * Revokes the subkey
 * @param  {module:packet.SecretKey} primaryKey decrypted private primary key for revocation
 * @param  {Object} reasonForRevocation optional, object indicating the reason for revocation
 * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag optional, flag indicating the reason for revocation
 * @param  {String} reasonForRevocation.string optional, string explaining the reason for revocation
 * @param  {Date} date optional, override the creationtime of the revocation signature
 * @returns {Promise<module:key~SubKey>} new subkey with revocation signature
 * @async
 */
SubKey.prototype.revoke = async function (primaryKey, {
  flag: reasonForRevocationFlag = _enums2.default.reasonForRevocation.no_reason,
  string: reasonForRevocationString = ''
} = {}, date = new Date()) {
  const dataToSign = { key: primaryKey, bind: this.keyPacket };
  const subKey = new SubKey(this.keyPacket);
  subKey.revocationSignatures.push((await createSignaturePacket(dataToSign, null, primaryKey, {
    signatureType: _enums2.default.signature.subkey_revocation,
    reasonForRevocationFlag: _enums2.default.write(_enums2.default.reasonForRevocation, reasonForRevocationFlag),
    reasonForRevocationString
  }, date)));
  await subKey.update(this, primaryKey);
  return subKey;
};

['getKeyId', 'getFingerprint', 'getAlgorithmInfo', 'getCreationTime', 'isDecrypted'].forEach(name => {
  Key.prototype[name] = SubKey.prototype[name] = function () {
    return this.keyPacket[name]();
  };
});

Key.prototype.hasSameFingerprintAs = SubKey.prototype.hasSameFingerprintAs = function (other) {
  return this.keyPacket.hasSameFingerprintAs(other.keyPacket || other);
};

/**
 * Reads an unarmored OpenPGP key list and returns one or multiple key objects
 * @param {Uint8Array} data to be parsed
 * @returns {Promise<{keys: Array<module:key.Key>,
 *            err: (Array<Error>|null)}>} result object with key and error arrays
 * @async
 * @static
 */
async function read(data) {
  const result = {};
  result.keys = [];
  const err = [];
  try {
    const packetlist = new _packet2.default.List();
    await packetlist.read(data);
    const keyIndex = packetlist.indexOfTag(_enums2.default.packet.publicKey, _enums2.default.packet.secretKey);
    if (keyIndex.length === 0) {
      throw new Error('No key packet found');
    }
    for (let i = 0; i < keyIndex.length; i++) {
      const oneKeyList = packetlist.slice(keyIndex[i], keyIndex[i + 1]);
      try {
        const newKey = new Key(oneKeyList);
        result.keys.push(newKey);
      } catch (e) {
        err.push(e);
      }
    }
  } catch (e) {
    err.push(e);
  }
  if (err.length) {
    result.err = err;
  }
  return result;
}

/**
 * Reads an OpenPGP armored text and returns one or multiple key objects
 * @param {String | ReadableStream<String>} armoredText text to be parsed
 * @returns {Promise<{keys: Array<module:key.Key>,
 *            err: (Array<Error>|null)}>} result object with key and error arrays
 * @async
 * @static
 */
async function readArmored(armoredText) {
  try {
    const input = await _armor2.default.decode(armoredText);
    if (!(input.type === _enums2.default.armor.public_key || input.type === _enums2.default.armor.private_key)) {
      throw new Error('Armored text not of type key');
    }
    return read(input.data);
  } catch (e) {
    const result = { keys: [], err: [] };
    result.err.push(e);
    return result;
  }
}

/**
 * Generates a new OpenPGP key. Supports RSA and ECC keys.
 * Primary and subkey will be of same type.
 * @param {module:enums.publicKey} [options.keyType=module:enums.publicKey.rsa_encrypt_sign]
 *                             To indicate what type of key to make.
 *                             RSA is 1. See {@link https://tools.ietf.org/html/rfc4880#section-9.1}
 * @param {Integer} options.numBits    number of bits for the key creation.
 * @param {String|Array<String>}  options.userIds
 *                             Assumes already in form of "User Name <username@email.com>"
 *                             If array is used, the first userId is set as primary user Id
 * @param {String}  options.passphrase The passphrase used to encrypt the resulting private key
 * @param {Number} [options.keyExpirationTime=0]
 *                             The number of seconds after the key creation time that the key expires
 * @param  {String} curve            (optional) elliptic curve for ECC keys
 * @param  {Date} date         Override the creation date of the key and the key signatures
 * @param  {Array<Object>} subkeys   (optional) options for each subkey, default to main key options. e.g. [{sign: true, passphrase: '123'}]
 *                                              sign parameter defaults to false, and indicates whether the subkey should sign rather than encrypt
 * @returns {Promise<module:key.Key>}
 * @async
 * @static
 */
async function generate(options) {
  options.sign = true; // primary key is always a signing key
  options = sanitizeKeyOptions(options);
  options.subkeys = options.subkeys.map(function (subkey, index) {
    return sanitizeKeyOptions(options.subkeys[index], options);
  });

  let promises = [generateSecretKey(options)];
  promises = promises.concat(options.subkeys.map(generateSecretSubkey));
  return Promise.all(promises).then(packets => wrapKeyObject(packets[0], packets.slice(1), options));

  function sanitizeKeyOptions(options, subkeyDefaults = {}) {
    options.curve = options.curve || subkeyDefaults.curve;
    options.numBits = options.numBits || subkeyDefaults.numBits;
    options.keyExpirationTime = options.keyExpirationTime !== undefined ? options.keyExpirationTime : subkeyDefaults.keyExpirationTime;
    options.passphrase = _util2.default.isString(options.passphrase) ? options.passphrase : subkeyDefaults.passphrase;
    options.date = options.date || subkeyDefaults.date;

    options.sign = options.sign || false;

    if (options.curve) {
      try {
        options.curve = _enums2.default.write(_enums2.default.curve, options.curve);
      } catch (e) {
        throw new Error('Not valid curve.');
      }
      if (options.curve === _enums2.default.curve.ed25519 || options.curve === _enums2.default.curve.curve25519) {
        if (options.sign) {
          options.algorithm = _enums2.default.publicKey.eddsa;
          options.curve = _enums2.default.curve.ed25519;
        } else {
          options.algorithm = _enums2.default.publicKey.ecdh;
          options.curve = _enums2.default.curve.curve25519;
        }
      } else {
        if (options.sign) {
          options.algorithm = _enums2.default.publicKey.ecdsa;
        } else {
          options.algorithm = _enums2.default.publicKey.ecdh;
        }
      }
    } else if (options.numBits) {
      options.algorithm = _enums2.default.publicKey.rsa_encrypt_sign;
    } else {
      throw new Error('Unrecognized key type');
    }
    return options;
  }

  async function generateSecretKey(options) {
    const secretKeyPacket = new _packet2.default.SecretKey(options.date);
    secretKeyPacket.packets = null;
    secretKeyPacket.algorithm = _enums2.default.read(_enums2.default.publicKey, options.algorithm);
    await secretKeyPacket.generate(options.numBits, options.curve);
    return secretKeyPacket;
  }

  async function generateSecretSubkey(options) {
    const secretSubkeyPacket = new _packet2.default.SecretSubkey(options.date);
    secretSubkeyPacket.packets = null;
    secretSubkeyPacket.algorithm = _enums2.default.read(_enums2.default.publicKey, options.algorithm);
    await secretSubkeyPacket.generate(options.numBits, options.curve);
    return secretSubkeyPacket;
  }
}

/**
 * Reformats and signs an OpenPGP key with a given User ID. Currently only supports RSA keys.
 * @param {module:key.Key} options.privateKey   The private key to reformat
 * @param {module:enums.publicKey} [options.keyType=module:enums.publicKey.rsa_encrypt_sign]
 * @param {String|Array<String>}  options.userIds
 *                             Assumes already in form of "User Name <username@email.com>"
 *                             If array is used, the first userId is set as primary user Id
 * @param {String}  options.passphrase The passphrase used to encrypt the resulting private key
 * @param {Number} [options.keyExpirationTime=0]
 *                             The number of seconds after the key creation time that the key expires
 * @param  {Date} date         Override the creation date of the key and the key signatures
 * @param  {Array<Object>} subkeys   (optional) options for each subkey, default to main key options. e.g. [{sign: true, passphrase: '123'}]
 *
 * @returns {Promise<module:key.Key>}
 * @async
 * @static
 */
async function reformat(options) {
  options = sanitizeKeyOptions(options);

  try {
    const isDecrypted = options.privateKey.getKeys().every(key => key.isDecrypted());
    if (!isDecrypted) {
      await options.privateKey.decrypt();
    }
  } catch (err) {
    throw new Error('Key not decrypted');
  }

  const packetlist = options.privateKey.toPacketlist();
  let secretKeyPacket;
  const secretSubkeyPackets = [];
  for (let i = 0; i < packetlist.length; i++) {
    if (packetlist[i].tag === _enums2.default.packet.secretKey) {
      secretKeyPacket = packetlist[i];
    } else if (packetlist[i].tag === _enums2.default.packet.secretSubkey) {
      secretSubkeyPackets.push(packetlist[i]);
    }
  }
  if (!secretKeyPacket) {
    throw new Error('Key does not contain a secret key packet');
  }

  if (!options.subkeys) {
    options.subkeys = await Promise.all(secretSubkeyPackets.map(async secretSubkeyPacket => ({
      sign: (await options.privateKey.getSigningKey(secretSubkeyPacket.getKeyId(), null)) && !(await options.privateKey.getEncryptionKey(secretSubkeyPacket.getKeyId(), null))
    })));
  }

  if (options.subkeys.length !== secretSubkeyPackets.length) {
    throw new Error('Number of subkey options does not match number of subkeys');
  }

  options.subkeys = options.subkeys.map(function (subkey, index) {
    return sanitizeKeyOptions(options.subkeys[index], options);
  });

  return wrapKeyObject(secretKeyPacket, secretSubkeyPackets, options);

  function sanitizeKeyOptions(options, subkeyDefaults = {}) {
    options.keyExpirationTime = options.keyExpirationTime || subkeyDefaults.keyExpirationTime;
    options.passphrase = _util2.default.isString(options.passphrase) ? options.passphrase : subkeyDefaults.passphrase;
    options.date = options.date || subkeyDefaults.date;

    return options;
  }
}

async function wrapKeyObject(secretKeyPacket, secretSubkeyPackets, options) {
  // set passphrase protection
  if (options.passphrase) {
    await secretKeyPacket.encrypt(options.passphrase);
  }

  await Promise.all(secretSubkeyPackets.map(async function (secretSubkeyPacket, index) {
    const subkeyPassphrase = options.subkeys[index].passphrase;
    if (subkeyPassphrase) {
      await secretSubkeyPacket.encrypt(subkeyPassphrase);
    }
  }));

  const packetlist = new _packet2.default.List();

  packetlist.push(secretKeyPacket);

  await Promise.all(options.userIds.map(async function (userId, index) {
    function createdPreferredAlgos(algos, configAlgo) {
      if (configAlgo) {
        // Not `uncompressed` / `plaintext`
        const configIndex = algos.indexOf(configAlgo);
        if (configIndex >= 1) {
          // If it is included and not in first place,
          algos.splice(configIndex, 1); // remove it.
        }
        if (configIndex !== 0) {
          // If it was included and not in first place, or wasn't included,
          algos.unshift(configAlgo); // add it to the front.
        }
      }
      return algos;
    }

    const userIdPacket = new _packet2.default.Userid();
    userIdPacket.format(userId);

    const dataToSign = {};
    dataToSign.userId = userIdPacket;
    dataToSign.key = secretKeyPacket;
    const signaturePacket = new _packet2.default.Signature(options.date);
    signaturePacket.signatureType = _enums2.default.signature.cert_generic;
    signaturePacket.publicKeyAlgorithm = secretKeyPacket.algorithm;
    signaturePacket.hashAlgorithm = await getPreferredHashAlgo(null, secretKeyPacket);
    signaturePacket.keyFlags = [_enums2.default.keyFlags.certify_keys | _enums2.default.keyFlags.sign_data];
    signaturePacket.preferredSymmetricAlgorithms = createdPreferredAlgos([
    // prefer aes256, aes128, then aes192 (no WebCrypto support: https://www.chromium.org/blink/webcrypto#TOC-AES-support)
    _enums2.default.symmetric.aes256, _enums2.default.symmetric.aes128, _enums2.default.symmetric.aes192, _enums2.default.symmetric.cast5, _enums2.default.symmetric.tripledes], _config2.default.encryption_cipher);
    if (_config2.default.aead_protect && _config2.default.aead_protect_version === 4) {
      signaturePacket.preferredAeadAlgorithms = createdPreferredAlgos([_enums2.default.aead.eax, _enums2.default.aead.ocb], _config2.default.aead_mode);
    }
    signaturePacket.preferredHashAlgorithms = createdPreferredAlgos([
    // prefer fast asm.js implementations (SHA-256). SHA-1 will not be secure much longer...move to bottom of list
    _enums2.default.hash.sha256, _enums2.default.hash.sha512, _enums2.default.hash.sha1], _config2.default.prefer_hash_algorithm);
    signaturePacket.preferredCompressionAlgorithms = createdPreferredAlgos([_enums2.default.compression.zlib, _enums2.default.compression.zip], _config2.default.compression);
    if (index === 0) {
      signaturePacket.isPrimaryUserID = true;
    }
    if (_config2.default.integrity_protect) {
      signaturePacket.features = [0];
      signaturePacket.features[0] |= _enums2.default.features.modification_detection;
    }
    if (_config2.default.aead_protect && _config2.default.aead_protect_version === 4) {
      signaturePacket.features || (signaturePacket.features = [0]);
      signaturePacket.features[0] |= _enums2.default.features.aead;
      signaturePacket.features[0] |= _enums2.default.features.v5_keys;
    }
    if (options.keyExpirationTime > 0) {
      signaturePacket.keyExpirationTime = options.keyExpirationTime;
      signaturePacket.keyNeverExpires = false;
    }
    await signaturePacket.sign(secretKeyPacket, dataToSign);

    return { userIdPacket, signaturePacket };
  })).then(list => {
    list.forEach(({ userIdPacket, signaturePacket }) => {
      packetlist.push(userIdPacket);
      packetlist.push(signaturePacket);
    });
  });

  await Promise.all(secretSubkeyPackets.map(async function (secretSubkeyPacket, index) {
    const subkeyOptions = options.subkeys[index];
    const dataToSign = {};
    dataToSign.key = secretKeyPacket;
    dataToSign.bind = secretSubkeyPacket;
    const subkeySignaturePacket = new _packet2.default.Signature(subkeyOptions.date);
    subkeySignaturePacket.signatureType = _enums2.default.signature.subkey_binding;
    subkeySignaturePacket.publicKeyAlgorithm = secretKeyPacket.algorithm;
    subkeySignaturePacket.hashAlgorithm = await getPreferredHashAlgo(null, secretSubkeyPacket);
    if (subkeyOptions.sign) {
      subkeySignaturePacket.keyFlags = [_enums2.default.keyFlags.sign_data];
      subkeySignaturePacket.embeddedSignature = await createSignaturePacket(dataToSign, null, secretSubkeyPacket, {
        signatureType: _enums2.default.signature.key_binding
      }, subkeyOptions.date);
    } else {
      subkeySignaturePacket.keyFlags = [_enums2.default.keyFlags.encrypt_communication | _enums2.default.keyFlags.encrypt_storage];
    }
    if (subkeyOptions.keyExpirationTime > 0) {
      subkeySignaturePacket.keyExpirationTime = subkeyOptions.keyExpirationTime;
      subkeySignaturePacket.keyNeverExpires = false;
    }
    await subkeySignaturePacket.sign(secretKeyPacket, dataToSign);

    return { secretSubkeyPacket, subkeySignaturePacket };
  })).then(packets => {
    packets.forEach(({ secretSubkeyPacket, subkeySignaturePacket }) => {
      packetlist.push(secretSubkeyPacket);
      packetlist.push(subkeySignaturePacket);
    });
  });

  // Add revocation signature packet for creating a revocation certificate.
  // This packet should be removed before returning the key.
  const dataToSign = { key: secretKeyPacket };
  packetlist.push((await createSignaturePacket(dataToSign, null, secretKeyPacket, {
    signatureType: _enums2.default.signature.key_revocation,
    reasonForRevocationFlag: _enums2.default.reasonForRevocation.no_reason,
    reasonForRevocationString: ''
  }, options.date)));

  // set passphrase protection
  if (options.passphrase) {
    secretKeyPacket.clearPrivateParams();
  }

  await Promise.all(secretSubkeyPackets.map(async function (secretSubkeyPacket, index) {
    const subkeyPassphrase = options.subkeys[index].passphrase;
    if (subkeyPassphrase) {
      secretSubkeyPacket.clearPrivateParams();
    }
  }));

  return new Key(packetlist);
}

/**
 * Checks if a given certificate or binding signature is revoked
 * @param  {module:packet.SecretKey|
 *          module:packet.PublicKey}       primaryKey   The primary key packet
 * @param  {Object}                         dataToVerify The data to check
 * @param  {Array<module:packet.Signature>} revocations  The revocation signatures to check
 * @param  {module:packet.Signature}        signature    The certificate or signature to check
 * @param  {module:packet.PublicSubkey|
 *          module:packet.SecretSubkey|
 *          module:packet.PublicKey|
 *          module:packet.SecretKey} key, optional The key packet to check the signature
 * @param  {Date}                     date          Use the given date instead of the current time
 * @returns {Promise<Boolean>}                      True if the signature revokes the data
 * @async
 */
async function isDataRevoked(primaryKey, signatureType, dataToVerify, revocations, signature, key, date = new Date()) {
  key = key || primaryKey;
  const normDate = _util2.default.normalizeDate(date);
  const revocationKeyIds = [];
  await Promise.all(revocations.map(async function (revocationSignature) {
    if (
    // Note: a third-party revocation signature could legitimately revoke a
    // self-signature if the signature has an authorized revocation key.
    // However, we don't support passing authorized revocation keys, nor
    // verifying such revocation signatures. Instead, we indicate an error
    // when parsing a key with an authorized revocation key, and ignore
    // third-party revocation signatures here. (It could also be revoking a
    // third-party key certification, which should only affect
    // `verifyAllCertifications`.)
    (!signature || revocationSignature.issuerKeyId.equals(signature.issuerKeyId)) && !(_config2.default.revocations_expire && revocationSignature.isExpired(normDate)) && (revocationSignature.verified || (await revocationSignature.verify(key, signatureType, dataToVerify)))) {
      // TODO get an identifier of the revoked object instead
      revocationKeyIds.push(revocationSignature.issuerKeyId);
      return true;
    }
    return false;
  }));
  // TODO further verify that this is the signature that should be revoked
  if (signature) {
    signature.revoked = revocationKeyIds.some(keyId => keyId.equals(signature.issuerKeyId)) ? true : signature.revoked || false;
    return signature.revoked;
  }
  return revocationKeyIds.length > 0;
}

function isDataExpired(keyPacket, signature, date = new Date()) {
  const normDate = _util2.default.normalizeDate(date);
  if (normDate !== null) {
    const expirationTime = getExpirationTime(keyPacket, signature);
    return !(keyPacket.created <= normDate && normDate <= expirationTime) || signature && signature.isExpired(date);
  }
  return false;
}

function getExpirationTime(keyPacket, signature) {
  let expirationTime;
  // check V4 expiration time
  if (signature.keyNeverExpires === false) {
    expirationTime = keyPacket.created.getTime() + signature.keyExpirationTime * 1000;
  }
  return expirationTime ? new Date(expirationTime) : Infinity;
}

/**
 * Check if signature has revocation key sub packet (not supported by OpenPGP.js)
 * and throw error if found
 * @param {module:packet.Signature} signature The certificate or signature to check
 * @param {type/keyid} keyId Check only certificates or signatures from a certain issuer key ID
 */
function checkRevocationKey(signature, keyId) {
  if (signature.revocationKeyClass !== null && signature.issuerKeyId.equals(keyId)) {
    throw new Error('This key is intended to be revoked with an authorized key, which OpenPGP.js does not support.');
  }
}

/**
 * Returns the preferred signature hash algorithm of a key
 * @param  {module:key.Key} key (optional) the key to get preferences from
 * @param  {module:packet.SecretKey|module:packet.SecretSubkey} keyPacket key packet used for signing
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Object} userId (optional) user ID
 * @returns {Promise<String>}
 * @async
 */
async function getPreferredHashAlgo(key, keyPacket, date = new Date(), userId = {}) {
  let hash_algo = _config2.default.prefer_hash_algorithm;
  let pref_algo = hash_algo;
  if (key instanceof Key) {
    const primaryUser = await key.getPrimaryUser(date, userId);
    if (primaryUser && primaryUser.selfCertification.preferredHashAlgorithms) {
      var _primaryUser$selfCert = _slicedToArray(primaryUser.selfCertification.preferredHashAlgorithms, 1);

      pref_algo = _primaryUser$selfCert[0];

      hash_algo = _crypto2.default.hash.getHashByteLength(hash_algo) <= _crypto2.default.hash.getHashByteLength(pref_algo) ? pref_algo : hash_algo;
    }
  }
  switch (Object.getPrototypeOf(keyPacket)) {
    case _packet2.default.SecretKey.prototype:
    case _packet2.default.PublicKey.prototype:
    case _packet2.default.SecretSubkey.prototype:
    case _packet2.default.PublicSubkey.prototype:
      switch (keyPacket.algorithm) {
        case 'ecdh':
        case 'ecdsa':
        case 'eddsa':
          pref_algo = _crypto2.default.publicKey.elliptic.getPreferredHashAlgo(keyPacket.params[0]);
      }
  }
  return _crypto2.default.hash.getHashByteLength(hash_algo) <= _crypto2.default.hash.getHashByteLength(pref_algo) ? pref_algo : hash_algo;
}

/**
 * Returns the preferred symmetric/aead algorithm for a set of keys
 * @param  {symmetric|aead} type Type of preference to return
 * @param  {Array<module:key.Key>} keys Set of keys
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Array} userIds (optional) user IDs
 * @returns {Promise<module:enums.symmetric>}   Preferred symmetric algorithm
 * @async
 */
async function getPreferredAlgo(type, keys, date = new Date(), userIds = []) {
  const prefProperty = type === 'symmetric' ? 'preferredSymmetricAlgorithms' : 'preferredAeadAlgorithms';
  const defaultAlgo = type === 'symmetric' ? _enums2.default.symmetric.aes128 : _enums2.default.aead.eax;
  const prioMap = {};
  await Promise.all(keys.map(async function (key, i) {
    const primaryUser = await key.getPrimaryUser(date, userIds[i]);
    if (!primaryUser || !primaryUser.selfCertification[prefProperty]) {
      return defaultAlgo;
    }
    primaryUser.selfCertification[prefProperty].forEach(function (algo, index) {
      const entry = prioMap[algo] || (prioMap[algo] = { prio: 0, count: 0, algo: algo });
      entry.prio += 64 >> index;
      entry.count++;
    });
  }));
  let prefAlgo = { prio: 0, algo: defaultAlgo };
  Object.values(prioMap).forEach(({ prio, count, algo }) => {
    try {
      if (algo !== _enums2.default[type].plaintext && algo !== _enums2.default[type].idea && // not implemented
      _enums2.default.read(_enums2.default[type], algo) && // known algorithm
      count === keys.length && // available for all keys
      prio > prefAlgo.prio) {
        prefAlgo = prioMap[algo];
      }
    } catch (e) {}
  });
  return prefAlgo.algo;
}

/**
 * Returns whether aead is supported by all keys in the set
 * @param  {Array<module:key.Key>} keys Set of keys
 * @param  {Date} date (optional) use the given date for verification instead of the current time
 * @param  {Array} userIds (optional) user IDs
 * @returns {Promise<Boolean>}
 * @async
 */
async function isAeadSupported(keys, date = new Date(), userIds = []) {
  let supported = true;
  // TODO replace when Promise.some or Promise.any are implemented
  await Promise.all(keys.map(async function (key, i) {
    const primaryUser = await key.getPrimaryUser(date, userIds[i]);
    if (!primaryUser || !primaryUser.selfCertification.features || !(primaryUser.selfCertification.features[0] & _enums2.default.features.aead)) {
      supported = false;
    }
  }));
  return supported;
}

},{"./config":80,"./crypto":95,"./encoding/armor":112,"./enums":114,"./packet":126,"./util":153}],118:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keyring = require('./keyring.js');

var _keyring2 = _interopRequireDefault(_keyring);

var _localstore = require('./localstore.js');

var _localstore2 = _interopRequireDefault(_localstore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview Functions dealing with storage of the keyring.
 * @see module:keyring/keyring
 * @see module:keyring/localstore
 * @module keyring
 */
_keyring2.default.localstore = _localstore2.default;

exports.default = _keyring2.default;

},{"./keyring.js":119,"./localstore.js":120}],119:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _key = require('../key');

var _localstore = require('./localstore');

var _localstore2 = _interopRequireDefault(_localstore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initialization routine for the keyring.
 * @constructor
 * @param {keyring/localstore} [storeHandler] class implementing loadPublic(), loadPrivate(), storePublic(), and storePrivate() methods
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Provides the Keyring class
 * @requires key
 * @requires keyring/localstore
 * @module keyring/keyring
 */

function Keyring(storeHandler) {
  this.storeHandler = storeHandler || new _localstore2.default();
}

/**
 * Calls the storeHandler to load the keys
 * @async
 */
Keyring.prototype.load = async function () {
  this.publicKeys = new KeyArray((await this.storeHandler.loadPublic()));
  this.privateKeys = new KeyArray((await this.storeHandler.loadPrivate()));
};

/**
 * Calls the storeHandler to save the keys
 * @async
 */
Keyring.prototype.store = async function () {
  await Promise.all([this.storeHandler.storePublic(this.publicKeys.keys), this.storeHandler.storePrivate(this.privateKeys.keys)]);
};

/**
 * Clear the keyring - erase all the keys
 */
Keyring.prototype.clear = function () {
  this.publicKeys.keys = [];
  this.privateKeys.keys = [];
};

/**
 * Searches the keyring for keys having the specified key id
 * @param {String} keyId provided as string of lowercase hex number
 * withouth 0x prefix (can be 16-character key ID or fingerprint)
 * @param  {Boolean} deep if true search also in subkeys
 * @returns {Array<module:key.Key>|null} keys found or null
 */
Keyring.prototype.getKeysForId = function (keyId, deep) {
  let result = [];
  result = result.concat(this.publicKeys.getForId(keyId, deep) || []);
  result = result.concat(this.privateKeys.getForId(keyId, deep) || []);
  return result.length ? result : null;
};

/**
 * Removes keys having the specified key id from the keyring
 * @param {String} keyId provided as string of lowercase hex number
 * withouth 0x prefix (can be 16-character key ID or fingerprint)
 * @returns {Array<module:key.Key>|null} keys found or null
 */
Keyring.prototype.removeKeysForId = function (keyId) {
  let result = [];
  result = result.concat(this.publicKeys.removeForId(keyId) || []);
  result = result.concat(this.privateKeys.removeForId(keyId) || []);
  return result.length ? result : null;
};

/**
 * Get all public and private keys
 * @returns {Array<module:key.Key>} all keys
 */
Keyring.prototype.getAllKeys = function () {
  return this.publicKeys.keys.concat(this.privateKeys.keys);
};

/**
 * Array of keys
 * @param {Array<module:key.Key>} keys The keys to store in this array
 */
function KeyArray(keys) {
  this.keys = keys;
}

/**
 * Searches all keys in the KeyArray matching the address or address part of the user ids
 * @param {String} email email address to search for
 * @returns {Array<module:key.Key>} The public keys associated with provided email address.
 */
KeyArray.prototype.getForAddress = function (email) {
  const results = [];
  for (let i = 0; i < this.keys.length; i++) {
    if (emailCheck(email, this.keys[i])) {
      results.push(this.keys[i]);
    }
  }
  return results;
};

/**
 * Checks a key to see if it matches the specified email address
 * @private
 * @param {String} email email address to search for
 * @param {module:key.Key} key The key to be checked.
 * @returns {Boolean} True if the email address is defined in the specified key
 */
function emailCheck(email, key) {
  email = email.toLowerCase();
  // escape email before using in regular expression
  const emailEsc = email.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  const emailRegex = new RegExp('<' + emailEsc + '>');
  const userIds = key.getUserIds();
  for (let i = 0; i < userIds.length; i++) {
    const userId = userIds[i].toLowerCase();
    if (email === userId || emailRegex.test(userId)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks a key to see if it matches the specified keyid
 * @private
 * @param {String} keyId provided as string of lowercase hex number
 * withouth 0x prefix (can be 16-character key ID or fingerprint)
 * @param {module:key.Key|module:key.SubKey} key The key to be checked
 * @returns {Boolean} True if key has the specified keyid
 */
function keyIdCheck(keyId, key) {
  if (keyId.length === 16) {
    return keyId === key.getKeyId().toHex();
  }
  return keyId === key.getFingerprint();
}

/**
 * Searches the KeyArray for a key having the specified key id
 * @param {String} keyId provided as string of lowercase hex number
 * withouth 0x prefix (can be 16-character key ID or fingerprint)
 * @param  {Boolean} deep if true search also in subkeys
 * @returns {module:key.Key|null} key found or null
 */
KeyArray.prototype.getForId = function (keyId, deep) {
  for (let i = 0; i < this.keys.length; i++) {
    if (keyIdCheck(keyId, this.keys[i])) {
      return this.keys[i];
    }
    if (deep && this.keys[i].subKeys.length) {
      for (let j = 0; j < this.keys[i].subKeys.length; j++) {
        if (keyIdCheck(keyId, this.keys[i].subKeys[j])) {
          return this.keys[i];
        }
      }
    }
  }
  return null;
};

/**
 * Imports a key from an ascii armored message
 * @param {String} armored message to read the keys/key from
 * @returns {Promise<Array<Error>|null>} array of error objects or null
 * @async
 */
KeyArray.prototype.importKey = async function (armored) {
  const imported = await (0, _key.readArmored)(armored);
  for (let i = 0; i < imported.keys.length; i++) {
    const key = imported.keys[i];
    // check if key already in key array
    const keyidHex = key.getKeyId().toHex();
    const keyFound = this.getForId(keyidHex);
    if (keyFound) {
      await keyFound.update(key);
    } else {
      this.push(key);
    }
  }
  return imported.err ? imported.err : null;
};

/**
 * Add key to KeyArray
 * @param {module:key.Key} key The key that will be added to the keyring
 * @returns {Number} The new length of the KeyArray
 */
KeyArray.prototype.push = function (key) {
  return this.keys.push(key);
};

/**
 * Removes a key with the specified keyid from the keyring
 * @param {String} keyId provided as string of lowercase hex number
 * withouth 0x prefix (can be 16-character key ID or fingerprint)
 * @returns {module:key.Key|null} The key object which has been removed or null
 */
KeyArray.prototype.removeForId = function (keyId) {
  for (let i = 0; i < this.keys.length; i++) {
    if (keyIdCheck(keyId, this.keys[i])) {
      return this.keys.splice(i, 1)[0];
    }
  }
  return null;
};

exports.default = Keyring;

},{"../key":117,"./localstore":120}],120:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _key = require('../key');

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The class that deals with storage of the keyring.
 * Currently the only option is to use HTML5 local storage.
 * @constructor
 * @param {String} prefix prefix for itemnames in localstore
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Provides the LocalStore class
 * @requires web-stream-tools
 * @requires config
 * @requires key
 * @requires util
 * @module keyring/localstore
 */

function LocalStore(prefix) {
  prefix = prefix || 'openpgp-';
  this.publicKeysItem = prefix + this.publicKeysItem;
  this.privateKeysItem = prefix + this.privateKeysItem;
  if (typeof window !== 'undefined' && window.localStorage) {
    this.storage = window.localStorage;
  } else {
    this.storage = new (require('node-localstorage').LocalStorage)(_config2.default.node_store);
  }
}

/*
 * Declare the localstore itemnames
 */
LocalStore.prototype.publicKeysItem = 'public-keys';
LocalStore.prototype.privateKeysItem = 'private-keys';

/**
 * Load the public keys from HTML5 local storage.
 * @returns {Array<module:key.Key>} array of keys retrieved from localstore
 * @async
 */
LocalStore.prototype.loadPublic = async function () {
  return loadKeys(this.storage, this.publicKeysItem);
};

/**
 * Load the private keys from HTML5 local storage.
 * @returns {Array<module:key.Key>} array of keys retrieved from localstore
 * @async
 */
LocalStore.prototype.loadPrivate = async function () {
  return loadKeys(this.storage, this.privateKeysItem);
};

async function loadKeys(storage, itemname) {
  const armoredKeys = JSON.parse(storage.getItem(itemname));
  const keys = [];
  if (armoredKeys !== null && armoredKeys.length !== 0) {
    let key;
    for (let i = 0; i < armoredKeys.length; i++) {
      key = await (0, _key.readArmored)(armoredKeys[i]);
      if (!key.err) {
        keys.push(key.keys[0]);
      } else {
        _util2.default.print_debug("Error reading armored key from keyring index: " + i);
      }
    }
  }
  return keys;
}

/**
 * Saves the current state of the public keys to HTML5 local storage.
 * The key array gets stringified using JSON
 * @param {Array<module:key.Key>} keys array of keys to save in localstore
 * @async
 */
LocalStore.prototype.storePublic = async function (keys) {
  await storeKeys(this.storage, this.publicKeysItem, keys);
};

/**
 * Saves the current state of the private keys to HTML5 local storage.
 * The key array gets stringified using JSON
 * @param {Array<module:key.Key>} keys array of keys to save in localstore
 * @async
 */
LocalStore.prototype.storePrivate = async function (keys) {
  await storeKeys(this.storage, this.privateKeysItem, keys);
};

async function storeKeys(storage, itemname, keys) {
  if (keys.length) {
    const armoredKeys = await Promise.all(keys.map(key => _webStreamTools2.default.readToEnd(key.armor())));
    storage.setItem(itemname, JSON.stringify(armoredKeys));
  } else {
    storage.removeItem(itemname);
  }
}

exports.default = LocalStore;

},{"../config":80,"../key":117,"../util":153,"node-localstorage":"node-localstorage","web-stream-tools":76}],121:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Message = Message;
exports.encryptSessionKey = encryptSessionKey;
exports.createSignaturePackets = createSignaturePackets;
exports.createVerificationObjects = createVerificationObjects;
exports.readArmored = readArmored;
exports.read = read;
exports.fromText = fromText;
exports.fromBinary = fromBinary;

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _armor = require('./encoding/armor');

var _armor2 = _interopRequireDefault(_armor);

var _keyid = require('./type/keyid');

var _keyid2 = _interopRequireDefault(_keyid);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('./crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _signature = require('./signature');

var _key = require('./key');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @classdesc Class that represents an OpenPGP message.
 * Can be an encrypted message, signed message, compressed message or literal message
 * @param  {module:packet.List} packetlist The packets that form this message
 * See {@link https://tools.ietf.org/html/rfc4880#section-11.3}
 */

// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires encoding/armor
 * @requires type/keyid
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 * @requires packet
 * @requires signature
 * @requires key
 * @module message
 */

function Message(packetlist) {
  if (!(this instanceof Message)) {
    return new Message(packetlist);
  }
  this.packets = packetlist || new _packet2.default.List();
}

/**
 * Returns the key IDs of the keys to which the session key is encrypted
 * @returns {Array<module:type/keyid>} array of keyid objects
 */
Message.prototype.getEncryptionKeyIds = function () {
  const keyIds = [];
  const pkESKeyPacketlist = this.packets.filterByTag(_enums2.default.packet.publicKeyEncryptedSessionKey);
  pkESKeyPacketlist.forEach(function (packet) {
    keyIds.push(packet.publicKeyId);
  });
  return keyIds;
};

/**
 * Returns the key IDs of the keys that signed the message
 * @returns {Array<module:type/keyid>} array of keyid objects
 */
Message.prototype.getSigningKeyIds = function () {
  const keyIds = [];
  const msg = this.unwrapCompressed();
  // search for one pass signatures
  const onePassSigList = msg.packets.filterByTag(_enums2.default.packet.onePassSignature);
  onePassSigList.forEach(function (packet) {
    keyIds.push(packet.issuerKeyId);
  });
  // if nothing found look for signature packets
  if (!keyIds.length) {
    const signatureList = msg.packets.filterByTag(_enums2.default.packet.signature);
    signatureList.forEach(function (packet) {
      keyIds.push(packet.issuerKeyId);
    });
  }
  return keyIds;
};

/**
 * Decrypt the message. Either a private key, a session key, or a password must be specified.
 * @param  {Array<Key>} privateKeys     (optional) private keys with decrypted secret data
 * @param  {Array<String>} passwords    (optional) passwords used to decrypt
 * @param  {Array<Object>} sessionKeys  (optional) session keys in the form: { data:Uint8Array, algorithm:String, [aeadAlgorithm:String] }
 * @param  {Boolean} streaming          (optional) whether to process data as a stream
 * @returns {Promise<Message>}             new message with decrypted content
 * @async
 */
Message.prototype.decrypt = async function (privateKeys, passwords, sessionKeys, streaming) {
  const keyObjs = sessionKeys || (await this.decryptSessionKeys(privateKeys, passwords));

  const symEncryptedPacketlist = this.packets.filterByTag(_enums2.default.packet.symmetricallyEncrypted, _enums2.default.packet.symEncryptedIntegrityProtected, _enums2.default.packet.symEncryptedAEADProtected);

  if (symEncryptedPacketlist.length === 0) {
    return this;
  }

  const symEncryptedPacket = symEncryptedPacketlist[0];
  let exception = null;
  for (let i = 0; i < keyObjs.length; i++) {
    if (!keyObjs[i] || !_util2.default.isUint8Array(keyObjs[i].data) || !_util2.default.isString(keyObjs[i].algorithm)) {
      throw new Error('Invalid session key for decryption.');
    }

    try {
      await symEncryptedPacket.decrypt(keyObjs[i].algorithm, keyObjs[i].data, streaming);
      break;
    } catch (e) {
      _util2.default.print_debug_error(e);
      exception = e;
    }
  }
  // We don't await stream.cancel here because it only returns when the other copy is canceled too.
  _webStreamTools2.default.cancel(symEncryptedPacket.encrypted); // Don't keep copy of encrypted data in memory.
  symEncryptedPacket.encrypted = null;

  if (!symEncryptedPacket.packets || !symEncryptedPacket.packets.length) {
    throw exception || new Error('Decryption failed.');
  }

  const resultMsg = new Message(symEncryptedPacket.packets);
  symEncryptedPacket.packets = new _packet2.default.List(); // remove packets after decryption

  return resultMsg;
};

/**
 * Decrypt encrypted session keys either with private keys or passwords.
 * @param  {Array<Key>} privateKeys    (optional) private keys with decrypted secret data
 * @param  {Array<String>} passwords   (optional) passwords used to decrypt
 * @returns {Promise<Array<{ data:      Uint8Array,
                             algorithm: String }>>} array of object with potential sessionKey, algorithm pairs
 * @async
 */
Message.prototype.decryptSessionKeys = async function (privateKeys, passwords) {
  let keyPackets = [];

  let exception;
  if (passwords) {
    const symESKeyPacketlist = this.packets.filterByTag(_enums2.default.packet.symEncryptedSessionKey);
    if (!symESKeyPacketlist) {
      throw new Error('No symmetrically encrypted session key packet found.');
    }
    await Promise.all(passwords.map(async function (password, i) {
      let packets;
      if (i) {
        packets = new _packet2.default.List();
        await packets.read(symESKeyPacketlist.write());
      } else {
        packets = symESKeyPacketlist;
      }
      await Promise.all(packets.map(async function (keyPacket) {
        try {
          await keyPacket.decrypt(password);
          keyPackets.push(keyPacket);
        } catch (err) {
          _util2.default.print_debug_error(err);
        }
      }));
    }));
  } else if (privateKeys) {
    const pkESKeyPacketlist = this.packets.filterByTag(_enums2.default.packet.publicKeyEncryptedSessionKey);
    if (!pkESKeyPacketlist) {
      throw new Error('No public key encrypted session key packet found.');
    }
    await Promise.all(pkESKeyPacketlist.map(async function (keyPacket) {
      await Promise.all(privateKeys.map(async function (privateKey) {
        const primaryUser = await privateKey.getPrimaryUser(); // TODO: Pass userId from somewhere.
        let algos = [_enums2.default.symmetric.aes256, // Old OpenPGP.js default fallback
        _enums2.default.symmetric.aes128, // RFC4880bis fallback
        _enums2.default.symmetric.tripledes, // RFC4880 fallback
        _enums2.default.symmetric.cast5 // Golang OpenPGP fallback
        ];
        if (primaryUser && primaryUser.selfCertification.preferredSymmetricAlgorithms) {
          algos = algos.concat(primaryUser.selfCertification.preferredSymmetricAlgorithms);
        }

        const privateKeyPackets = privateKey.getKeys(keyPacket.publicKeyId).map(key => key.keyPacket);
        await Promise.all(privateKeyPackets.map(async function (privateKeyPacket) {
          if (!privateKeyPacket) {
            return;
          }
          if (!privateKeyPacket.isDecrypted()) {
            throw new Error('Private key is not decrypted.');
          }
          try {
            await keyPacket.decrypt(privateKeyPacket);
            if (!algos.includes(_enums2.default.write(_enums2.default.symmetric, keyPacket.sessionKeyAlgorithm))) {
              throw new Error('A non-preferred symmetric algorithm was used.');
            }
            keyPackets.push(keyPacket);
          } catch (err) {
            _util2.default.print_debug_error(err);
            exception = err;
          }
        }));
      }));
      _webStreamTools2.default.cancel(keyPacket.encrypted); // Don't keep copy of encrypted data in memory.
      keyPacket.encrypted = null;
    }));
  } else {
    throw new Error('No key or password specified.');
  }

  if (keyPackets.length) {
    // Return only unique session keys
    if (keyPackets.length > 1) {
      const seen = {};
      keyPackets = keyPackets.filter(function (item) {
        const k = item.sessionKeyAlgorithm + _util2.default.Uint8Array_to_str(item.sessionKey);
        if (seen.hasOwnProperty(k)) {
          return false;
        }
        seen[k] = true;
        return true;
      });
    }

    return keyPackets.map(packet => ({ data: packet.sessionKey, algorithm: packet.sessionKeyAlgorithm }));
  }
  throw exception || new Error('Session key decryption failed.');
};

/**
 * Get literal data that is the body of the message
 * @returns {(Uint8Array|null)} literal body of the message as Uint8Array
 */
Message.prototype.getLiteralData = function () {
  const msg = this.unwrapCompressed();
  const literal = msg.packets.findPacket(_enums2.default.packet.literal);
  return literal && literal.getBytes() || null;
};

/**
 * Get filename from literal data packet
 * @returns {(String|null)} filename of literal data packet as string
 */
Message.prototype.getFilename = function () {
  const msg = this.unwrapCompressed();
  const literal = msg.packets.findPacket(_enums2.default.packet.literal);
  return literal && literal.getFilename() || null;
};

/**
 * Get literal data as text
 * @returns {(String|null)} literal body of the message interpreted as text
 */
Message.prototype.getText = function () {
  const msg = this.unwrapCompressed();
  const literal = msg.packets.findPacket(_enums2.default.packet.literal);
  if (literal) {
    return literal.getText();
  }
  return null;
};

/**
 * Encrypt the message either with public keys, passwords, or both at once.
 * @param  {Array<Key>} keys           (optional) public key(s) for message encryption
 * @param  {Array<String>} passwords   (optional) password(s) for message encryption
 * @param  {Object} sessionKey         (optional) session key in the form: { data:Uint8Array, algorithm:String, [aeadAlgorithm:String] }
 * @param  {Boolean} wildcard          (optional) use a key ID of 0 instead of the public key IDs
 * @param  {Date} date                 (optional) override the creation date of the literal package
 * @param  {Array} userIds             (optional) user IDs to encrypt for, e.g. [{ name:'Robert Receiver', email:'robert@openpgp.org' }]
 * @param  {Boolean} streaming         (optional) whether to process data as a stream
 * @returns {Promise<Message>}                   new message with encrypted content
 * @async
 */
Message.prototype.encrypt = async function (keys, passwords, sessionKey, wildcard = false, date = new Date(), userIds = [], streaming) {
  let symAlgo;
  let aeadAlgo;
  let symEncryptedPacket;

  if (sessionKey) {
    if (!_util2.default.isUint8Array(sessionKey.data) || !_util2.default.isString(sessionKey.algorithm)) {
      throw new Error('Invalid session key for encryption.');
    }
    symAlgo = sessionKey.algorithm;
    aeadAlgo = sessionKey.aeadAlgorithm;
    sessionKey = sessionKey.data;
  } else if (keys && keys.length) {
    symAlgo = _enums2.default.read(_enums2.default.symmetric, (await (0, _key.getPreferredAlgo)('symmetric', keys, date, userIds)));
    if (_config2.default.aead_protect && _config2.default.aead_protect_version === 4 && (await (0, _key.isAeadSupported)(keys, date, userIds))) {
      aeadAlgo = _enums2.default.read(_enums2.default.aead, (await (0, _key.getPreferredAlgo)('aead', keys, date, userIds)));
    }
  } else if (passwords && passwords.length) {
    symAlgo = _enums2.default.read(_enums2.default.symmetric, _config2.default.encryption_cipher);
    aeadAlgo = _enums2.default.read(_enums2.default.aead, _config2.default.aead_mode);
  } else {
    throw new Error('No keys, passwords, or session key provided.');
  }

  if (!sessionKey) {
    sessionKey = await _crypto2.default.generateSessionKey(symAlgo);
  }

  const msg = await encryptSessionKey(sessionKey, symAlgo, aeadAlgo, keys, passwords, wildcard, date, userIds);

  if (_config2.default.aead_protect && (_config2.default.aead_protect_version !== 4 || aeadAlgo)) {
    symEncryptedPacket = new _packet2.default.SymEncryptedAEADProtected();
    symEncryptedPacket.aeadAlgorithm = aeadAlgo;
  } else if (_config2.default.integrity_protect) {
    symEncryptedPacket = new _packet2.default.SymEncryptedIntegrityProtected();
  } else {
    symEncryptedPacket = new _packet2.default.SymmetricallyEncrypted();
  }
  symEncryptedPacket.packets = this.packets;

  await symEncryptedPacket.encrypt(symAlgo, sessionKey, streaming);

  msg.packets.push(symEncryptedPacket);
  symEncryptedPacket.packets = new _packet2.default.List(); // remove packets after encryption
  return {
    message: msg,
    sessionKey: {
      data: sessionKey,
      algorithm: symAlgo,
      aeadAlgorithm: aeadAlgo
    }
  };
};

/**
 * Encrypt a session key either with public keys, passwords, or both at once.
 * @param  {Uint8Array} sessionKey     session key for encryption
 * @param  {String} symAlgo            session key algorithm
 * @param  {String} aeadAlgo           (optional) aead algorithm, e.g. 'eax' or 'ocb'
 * @param  {Array<Key>} publicKeys     (optional) public key(s) for message encryption
 * @param  {Array<String>} passwords   (optional) for message encryption
 * @param  {Boolean} wildcard          (optional) use a key ID of 0 instead of the public key IDs
 * @param  {Date} date                 (optional) override the date
 * @param  {Array} userIds             (optional) user IDs to encrypt for, e.g. [{ name:'Robert Receiver', email:'robert@openpgp.org' }]
 * @returns {Promise<Message>}          new message with encrypted content
 * @async
 */
async function encryptSessionKey(sessionKey, symAlgo, aeadAlgo, publicKeys, passwords, wildcard = false, date = new Date(), userIds = []) {
  const packetlist = new _packet2.default.List();

  if (publicKeys) {
    const results = await Promise.all(publicKeys.map(async function (publicKey) {
      const encryptionKey = await publicKey.getEncryptionKey(undefined, date, userIds);
      if (!encryptionKey) {
        throw new Error('Could not find valid key packet for encryption in key ' + publicKey.getKeyId().toHex());
      }
      const pkESKeyPacket = new _packet2.default.PublicKeyEncryptedSessionKey();
      pkESKeyPacket.publicKeyId = wildcard ? _keyid2.default.wildcard() : encryptionKey.getKeyId();
      pkESKeyPacket.publicKeyAlgorithm = encryptionKey.keyPacket.algorithm;
      pkESKeyPacket.sessionKey = sessionKey;
      pkESKeyPacket.sessionKeyAlgorithm = symAlgo;
      await pkESKeyPacket.encrypt(encryptionKey.keyPacket);
      delete pkESKeyPacket.sessionKey; // delete plaintext session key after encryption
      return pkESKeyPacket;
    }));
    packetlist.concat(results);
  }
  if (passwords) {
    const testDecrypt = async function testDecrypt(keyPacket, password) {
      try {
        await keyPacket.decrypt(password);
        return 1;
      } catch (e) {
        return 0;
      }
    };

    const sum = (accumulator, currentValue) => accumulator + currentValue;

    const encryptPassword = async function encryptPassword(sessionKey, symAlgo, aeadAlgo, password) {
      const symEncryptedSessionKeyPacket = new _packet2.default.SymEncryptedSessionKey();
      symEncryptedSessionKeyPacket.sessionKey = sessionKey;
      symEncryptedSessionKeyPacket.sessionKeyAlgorithm = symAlgo;
      if (aeadAlgo) {
        symEncryptedSessionKeyPacket.aeadAlgorithm = aeadAlgo;
      }
      await symEncryptedSessionKeyPacket.encrypt(password);

      if (_config2.default.password_collision_check) {
        const results = await Promise.all(passwords.map(pwd => testDecrypt(symEncryptedSessionKeyPacket, pwd)));
        if (results.reduce(sum) !== 1) {
          return encryptPassword(sessionKey, symAlgo, password);
        }
      }

      delete symEncryptedSessionKeyPacket.sessionKey; // delete plaintext session key after encryption
      return symEncryptedSessionKeyPacket;
    };

    const results = await Promise.all(passwords.map(pwd => encryptPassword(sessionKey, symAlgo, aeadAlgo, pwd)));
    packetlist.concat(results);
  }

  return new Message(packetlist);
}

/**
 * Sign the message (the literal data packet of the message)
 * @param  {Array<module:key.Key>}        privateKeys private keys with decrypted secret key data for signing
 * @param  {Signature} signature          (optional) any existing detached signature to add to the message
 * @param  {Date} date                    (optional) override the creation time of the signature
 * @param  {Array} userIds                (optional) user IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<Message>}             new message with signed content
 * @async
 */
Message.prototype.sign = async function (privateKeys = [], signature = null, date = new Date(), userIds = []) {
  const packetlist = new _packet2.default.List();

  const literalDataPacket = this.packets.findPacket(_enums2.default.packet.literal);
  if (!literalDataPacket) {
    throw new Error('No literal data packet to sign.');
  }

  let i;
  let existingSigPacketlist;
  // If data packet was created from Uint8Array, use binary, otherwise use text
  const signatureType = literalDataPacket.text === null ? _enums2.default.signature.binary : _enums2.default.signature.text;

  if (signature) {
    existingSigPacketlist = signature.packets.filterByTag(_enums2.default.packet.signature);
    for (i = existingSigPacketlist.length - 1; i >= 0; i--) {
      const signaturePacket = existingSigPacketlist[i];
      const onePassSig = new _packet2.default.OnePassSignature();
      onePassSig.signatureType = signaturePacket.signatureType;
      onePassSig.hashAlgorithm = signaturePacket.hashAlgorithm;
      onePassSig.publicKeyAlgorithm = signaturePacket.publicKeyAlgorithm;
      onePassSig.issuerKeyId = signaturePacket.issuerKeyId;
      if (!privateKeys.length && i === 0) {
        onePassSig.flags = 1;
      }
      packetlist.push(onePassSig);
    }
  }

  await Promise.all(Array.from(privateKeys).reverse().map(async function (privateKey, i) {
    if (privateKey.isPublic()) {
      throw new Error('Need private key for signing');
    }
    const signingKey = await privateKey.getSigningKey(undefined, date, userIds);
    if (!signingKey) {
      throw new Error('Could not find valid key packet for signing in key ' + privateKey.getKeyId().toHex());
    }
    const onePassSig = new _packet2.default.OnePassSignature();
    onePassSig.signatureType = signatureType;
    onePassSig.hashAlgorithm = await (0, _key.getPreferredHashAlgo)(privateKey, signingKey.keyPacket, date, userIds);
    onePassSig.publicKeyAlgorithm = signingKey.keyPacket.algorithm;
    onePassSig.issuerKeyId = signingKey.getKeyId();
    if (i === privateKeys.length - 1) {
      onePassSig.flags = 1;
    }
    return onePassSig;
  })).then(onePassSignatureList => {
    onePassSignatureList.forEach(onePassSig => packetlist.push(onePassSig));
  });

  packetlist.push(literalDataPacket);
  packetlist.concat((await createSignaturePackets(literalDataPacket, privateKeys, signature, date)));

  return new Message(packetlist);
};

/**
 * Compresses the message (the literal and -if signed- signature data packets of the message)
 * @param  {module:enums.compression}   compression     compression algorithm to be used
 * @returns {module:message.Message}       new message with compressed content
 */
Message.prototype.compress = function (compression) {
  if (compression === _enums2.default.compression.uncompressed) {
    return this;
  }

  const compressed = new _packet2.default.Compressed();
  compressed.packets = this.packets;
  compressed.algorithm = _enums2.default.read(_enums2.default.compression, compression);

  const packetList = new _packet2.default.List();
  packetList.push(compressed);

  return new Message(packetList);
};

/**
 * Create a detached signature for the message (the literal data packet of the message)
 * @param  {Array<module:key.Key>}               privateKeys private keys with decrypted secret key data for signing
 * @param  {Signature} signature                 (optional) any existing detached signature
 * @param  {Date} date                           (optional) override the creation time of the signature
 * @param  {Array} userIds                       (optional) user IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<module:signature.Signature>} new detached signature of message content
 * @async
 */
Message.prototype.signDetached = async function (privateKeys = [], signature = null, date = new Date(), userIds = []) {
  const literalDataPacket = this.packets.findPacket(_enums2.default.packet.literal);
  if (!literalDataPacket) {
    throw new Error('No literal data packet to sign.');
  }
  return new _signature.Signature((await createSignaturePackets(literalDataPacket, privateKeys, signature, date, userIds)));
};

/**
 * Create signature packets for the message
 * @param  {module:packet.Literal}             literalDataPacket the literal data packet to sign
 * @param  {Array<module:key.Key>}             privateKeys private keys with decrypted secret key data for signing
 * @param  {Signature} signature               (optional) any existing detached signature to append
 * @param  {Date} date                         (optional) override the creationtime of the signature
 * @param  {Array} userIds                     (optional) user IDs to sign with, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<module:packet.List>} list of signature packets
 * @async
 */
async function createSignaturePackets(literalDataPacket, privateKeys, signature = null, date = new Date(), userIds = []) {
  const packetlist = new _packet2.default.List();

  // If data packet was created from Uint8Array, use binary, otherwise use text
  const signatureType = literalDataPacket.text === null ? _enums2.default.signature.binary : _enums2.default.signature.text;

  await Promise.all(privateKeys.map(async (privateKey, i) => {
    const userId = userIds[i];
    if (privateKey.isPublic()) {
      throw new Error('Need private key for signing');
    }
    const signingKey = await privateKey.getSigningKey(undefined, date, userId);
    if (!signingKey) {
      throw new Error(`Could not find valid signing key packet in key ${privateKey.getKeyId().toHex()}`);
    }
    return (0, _key.createSignaturePacket)(literalDataPacket, privateKey, signingKey.keyPacket, { signatureType }, date, userId);
  })).then(signatureList => {
    signatureList.forEach(signaturePacket => packetlist.push(signaturePacket));
  });

  if (signature) {
    const existingSigPacketlist = signature.packets.filterByTag(_enums2.default.packet.signature);
    packetlist.concat(existingSigPacketlist);
  }
  return packetlist;
}

/**
 * Verify message signatures
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Date} date (optional) Verify the signature against the given date, i.e. check signature creation time < date < expiration time
 * @param  {Boolean} streaming (optional) whether to process data as a stream
 * @returns {Promise<Array<({keyid: module:type/keyid, valid: Boolean})>>} list of signer's keyid and validity of signature
 * @async
 */
Message.prototype.verify = async function (keys, date = new Date(), streaming) {
  const msg = this.unwrapCompressed();
  const literalDataList = msg.packets.filterByTag(_enums2.default.packet.literal);
  if (literalDataList.length !== 1) {
    throw new Error('Can only verify message with one literal data packet.');
  }
  const onePassSigList = msg.packets.filterByTag(_enums2.default.packet.onePassSignature).reverse();
  const signatureList = msg.packets.filterByTag(_enums2.default.packet.signature);
  if (onePassSigList.length && !signatureList.length && msg.packets.stream) {
    await Promise.all(onePassSigList.map(async onePassSig => {
      onePassSig.correspondingSig = new Promise((resolve, reject) => {
        onePassSig.correspondingSigResolve = resolve;
        onePassSig.correspondingSigReject = reject;
      });
      onePassSig.signatureData = _webStreamTools2.default.fromAsync(async () => (await onePassSig.correspondingSig).signatureData);
      onePassSig.hashed = await onePassSig.hash(onePassSig.signatureType, literalDataList[0], undefined, streaming);
    }));
    msg.packets.stream = _webStreamTools2.default.transformPair(msg.packets.stream, async (readable, writable) => {
      const reader = _webStreamTools2.default.getReader(readable);
      const writer = _webStreamTools2.default.getWriter(writable);
      try {
        for (let i = 0; i < onePassSigList.length; i++) {
          var _ref = await reader.read();

          const signature = _ref.value;

          onePassSigList[i].correspondingSigResolve(signature);
        }
        await reader.readToEnd();
        await writer.ready;
        await writer.close();
      } catch (e) {
        onePassSigList.forEach(onePassSig => {
          onePassSig.correspondingSigReject(e);
        });
        await writer.abort(e);
      }
    });
    return createVerificationObjects(onePassSigList, literalDataList, keys, date);
  }
  return createVerificationObjects(signatureList, literalDataList, keys, date);
};

/**
 * Verify detached message signature
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Signature} signature
 * @param {Date} date Verify the signature against the given date, i.e. check signature creation time < date < expiration time
 * @returns {Promise<Array<({keyid: module:type/keyid, valid: Boolean})>>} list of signer's keyid and validity of signature
 * @async
 */
Message.prototype.verifyDetached = function (signature, keys, date = new Date()) {
  const msg = this.unwrapCompressed();
  const literalDataList = msg.packets.filterByTag(_enums2.default.packet.literal);
  if (literalDataList.length !== 1) {
    throw new Error('Can only verify message with one literal data packet.');
  }
  const signatureList = signature.packets;
  return createVerificationObjects(signatureList, literalDataList, keys, date);
};

/**
 * Create object containing signer's keyid and validity of signature
 * @param {module:packet.Signature} signature signature packets
 * @param {Array<module:packet.Literal>} literalDataList array of literal data packets
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Date} date Verify the signature against the given date,
 *                    i.e. check signature creation time < date < expiration time
 * @returns {Promise<Array<{keyid: module:type/keyid,
 *                          valid: Boolean}>>} list of signer's keyid and validity of signature
 * @async
 */
async function createVerificationObject(signature, literalDataList, keys, date = new Date()) {
  let primaryKey = null;
  let signingKey = null;
  await Promise.all(keys.map(async function (key) {
    // Look for the unique key that matches issuerKeyId of signature
    const result = await key.getSigningKey(signature.issuerKeyId, null);
    if (result) {
      primaryKey = key;
      signingKey = result;
    }
  }));

  const signaturePacket = signature.correspondingSig || signature;
  const verifiedSig = {
    keyid: signature.issuerKeyId,
    verified: (async () => {
      if (!signingKey) {
        return null;
      }
      const verified = await signature.verify(signingKey.keyPacket, signature.signatureType, literalDataList[0]);
      const sig = await signaturePacket;
      if (sig.isExpired(date) || !(sig.created >= signingKey.getCreationTime() && sig.created < (await (signingKey === primaryKey ? signingKey.getExpirationTime() : signingKey.getExpirationTime(primaryKey, date))))) {
        return null;
      }
      return verified;
    })(),
    signature: (async () => {
      const sig = await signaturePacket;
      const packetlist = new _packet2.default.List();
      packetlist.push(sig);
      return new _signature.Signature(packetlist);
    })()
  };

  // Mark potential promise rejections as "handled". This is needed because in
  // some cases, we reject them before the user has a reasonable chance to
  // handle them (e.g. `await readToEnd(result.data); await result.verified` and
  // the data stream errors).
  verifiedSig.signature.catch(() => {});
  verifiedSig.verified.catch(() => {});

  return verifiedSig;
}

/**
 * Create list of objects containing signer's keyid and validity of signature
 * @param {Array<module:packet.Signature>} signatureList array of signature packets
 * @param {Array<module:packet.Literal>} literalDataList array of literal data packets
 * @param {Array<module:key.Key>} keys array of keys to verify signatures
 * @param {Date} date Verify the signature against the given date,
 *                    i.e. check signature creation time < date < expiration time
 * @returns {Promise<Array<{keyid: module:type/keyid,
 *                          valid: Boolean}>>} list of signer's keyid and validity of signature
 * @async
 */
async function createVerificationObjects(signatureList, literalDataList, keys, date = new Date()) {
  return Promise.all(signatureList.filter(function (signature) {
    return ['text', 'binary'].includes(_enums2.default.read(_enums2.default.signature, signature.signatureType));
  }).map(async function (signature) {
    return createVerificationObject(signature, literalDataList, keys, date);
  }));
}

/**
 * Unwrap compressed message
 * @returns {module:message.Message} message Content of compressed message
 */
Message.prototype.unwrapCompressed = function () {
  const compressed = this.packets.filterByTag(_enums2.default.packet.compressed);
  if (compressed.length) {
    return new Message(compressed[0].packets);
  }
  return this;
};

/**
 * Append signature to unencrypted message object
 * @param {String|Uint8Array} detachedSignature The detached ASCII-armored or Uint8Array PGP signature
 */
Message.prototype.appendSignature = async function (detachedSignature) {
  await this.packets.read(_util2.default.isUint8Array(detachedSignature) ? detachedSignature : (await _armor2.default.decode(detachedSignature)).data);
};

/**
 * Returns ASCII armored text of message
 * @returns {ReadableStream<String>} ASCII armor
 */
Message.prototype.armor = function () {
  return _armor2.default.encode(_enums2.default.armor.message, this.packets.write());
};

/**
 * reads an OpenPGP armored message and returns a message object
 * @param {String | ReadableStream<String>} armoredText text to be parsed
 * @returns {Promise<module:message.Message>} new message object
 * @async
 * @static
 */
async function readArmored(armoredText) {
  //TODO how do we want to handle bad text? Exception throwing
  //TODO don't accept non-message armored texts
  const streamType = _util2.default.isStream(armoredText);
  if (streamType === 'node') {
    armoredText = _webStreamTools2.default.nodeToWeb(armoredText);
  }
  const input = await _armor2.default.decode(armoredText);
  return read(input.data, streamType);
}

/**
 * reads an OpenPGP message as byte array and returns a message object
 * @param {Uint8Array | ReadableStream<Uint8Array>} input    binary message
 * @param {Boolean} fromStream  whether the message was created from a Stream
 * @returns {Promise<module:message.Message>} new message object
 * @async
 * @static
 */
async function read(input, fromStream = _util2.default.isStream(input)) {
  const streamType = _util2.default.isStream(input);
  if (streamType === 'node') {
    input = _webStreamTools2.default.nodeToWeb(input);
  }
  const packetlist = new _packet2.default.List();
  await packetlist.read(input, fromStream);
  const message = new Message(packetlist);
  message.fromStream = fromStream;
  return message;
}

/**
 * creates new message object from text
 * @param {String | ReadableStream<String>} text
 * @param {String} filename (optional)
 * @param {Date} date (optional)
 * @param {utf8|binary|text|mime} type (optional) data packet type
 * @returns {module:message.Message} new message object
 * @static
 */
function fromText(text, filename, date = new Date(), type = 'utf8') {
  const streamType = _util2.default.isStream(text);
  if (streamType === 'node') {
    text = _webStreamTools2.default.nodeToWeb(text);
  }
  const literalDataPacket = new _packet2.default.Literal(date);
  // text will be converted to UTF8
  literalDataPacket.setText(text, type);
  if (filename !== undefined) {
    literalDataPacket.setFilename(filename);
  }
  const literalDataPacketlist = new _packet2.default.List();
  literalDataPacketlist.push(literalDataPacket);
  const message = new Message(literalDataPacketlist);
  message.fromStream = streamType;
  return message;
}

/**
 * creates new message object from binary data
 * @param {Uint8Array | ReadableStream<Uint8Array>} bytes
 * @param {String} filename (optional)
 * @param {Date} date (optional)
 * @param {utf8|binary|text|mime} type (optional) data packet type
 * @returns {module:message.Message} new message object
 * @static
 */
function fromBinary(bytes, filename, date = new Date(), type = 'binary') {
  const streamType = _util2.default.isStream(bytes);
  if (!_util2.default.isUint8Array(bytes) && !streamType) {
    throw new Error('Data must be in the form of a Uint8Array or Stream');
  }
  if (streamType === 'node') {
    bytes = _webStreamTools2.default.nodeToWeb(bytes);
  }

  const literalDataPacket = new _packet2.default.Literal(date);
  literalDataPacket.setBytes(bytes, type);
  if (filename !== undefined) {
    literalDataPacket.setFilename(filename);
  }
  const literalDataPacketlist = new _packet2.default.List();
  literalDataPacketlist.push(literalDataPacket);
  const message = new Message(literalDataPacketlist);
  message.fromStream = streamType;
  return message;
}

},{"./config":80,"./crypto":95,"./encoding/armor":112,"./enums":114,"./key":117,"./packet":126,"./signature":146,"./type/keyid":149,"./util":153,"web-stream-tools":76}],122:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initWorker = initWorker;
exports.getWorker = getWorker;
exports.destroyWorker = destroyWorker;
exports.generateKey = generateKey;
exports.reformatKey = reformatKey;
exports.revokeKey = revokeKey;
exports.decryptKey = decryptKey;
exports.encryptKey = encryptKey;
exports.encrypt = encrypt;
exports.decrypt = decrypt;
exports.sign = sign;
exports.verify = verify;
exports.encryptSessionKey = encryptSessionKey;
exports.decryptSessionKeys = decryptSessionKeys;

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _message = require('./message');

var messageLib = _interopRequireWildcard(_message);

var _cleartext = require('./cleartext');

var _key = require('./key');

var _config = require('./config/config');

var _config2 = _interopRequireDefault(_config);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

require('./polyfills');

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _async_proxy = require('./worker/async_proxy');

var _async_proxy2 = _interopRequireDefault(_async_proxy);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//////////////////////////
//                      //
//   Web Worker setup   //
//                      //
//////////////////////////


let asyncProxy; // instance of the asyncproxy

/**
 * Set the path for the web worker script and create an instance of the async proxy
 * @param {String} path            relative path to the worker scripts, default: 'openpgp.worker.js'
 * @param {Number} n               number of workers to initialize
 * @param {Array<Object>} workers  alternative to path parameter: web workers initialized with 'openpgp.worker.js'
 * @returns {Promise<Boolean>}     returns a promise that resolves to true if all workers have succesfully finished loading
 * @async
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2016 Tankred Hase
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview The openpgp base module should provide all of the functionality
 * to consume the openpgp.js library. All additional classes are documented
 * for extending and developing on top of the base library.
 * @requires web-stream-tools
 * @requires message
 * @requires cleartext
 * @requires key
 * @requires config
 * @requires enums
 * @requires util
 * @requires polyfills
 * @requires worker/async_proxy
 * @module openpgp
 */

// This file intentionally has two separate file overviews so that
// a reference to this module appears at the end of doc/index.html.

/**
 * @fileoverview To view the full API documentation, start from
 * {@link module:openpgp}
 */

async function initWorker({ path = 'openpgp.worker.js', n = 1, workers = [] } = {}) {
  if (workers.length || typeof window !== 'undefined' && window.Worker && window.MessageChannel) {
    const proxy = new _async_proxy2.default({ path, n, workers, config: _config2.default });
    const loaded = await proxy.loaded();
    if (loaded) {
      asyncProxy = proxy;
      return true;
    }
  }
  return false;
}

/**
 * Returns a reference to the async proxy if the worker was initialized with openpgp.initWorker()
 * @returns {module:worker/async_proxy.AsyncProxy|null} the async proxy or null if not initialized
 */
function getWorker() {
  return asyncProxy;
}

/**
 * Cleanup the current instance of the web worker.
 */
function destroyWorker() {
  asyncProxy = undefined;
}

//////////////////////
//                  //
//   Key handling   //
//                  //
//////////////////////


/**
 * Generates a new OpenPGP key pair. Supports RSA and ECC keys. Primary and subkey will be of same type.
 * @param  {Array<Object>} userIds   array of user IDs e.g. [{ name:'Phil Zimmermann', email:'phil@openpgp.org' }]
 * @param  {String} passphrase       (optional) The passphrase used to encrypt the resulting private key
 * @param  {Number} numBits          (optional) number of bits for RSA keys: 2048 or 4096.
 * @param  {Number} keyExpirationTime (optional) The number of seconds after the key creation time that the key expires
 * @param  {String} curve            (optional) elliptic curve for ECC keys:
 *                                              curve25519, p256, p384, p521, secp256k1,
 *                                              brainpoolP256r1, brainpoolP384r1, or brainpoolP512r1.
 * @param  {Date} date               (optional) override the creation date of the key and the key signatures
 * @param  {Array<Object>} subkeys   (optional) options for each subkey, default to main key options. e.g. [{sign: true, passphrase: '123'}]
 *                                              sign parameter defaults to false, and indicates whether the subkey should sign rather than encrypt
 * @returns {Promise<Object>}         The generated key object in the form:
 *                                     { key:Key, privateKeyArmored:String, publicKeyArmored:String, revocationCertificate:String }
 * @async
 * @static
 */

function generateKey({ userIds = [], passphrase = "", numBits = 2048, keyExpirationTime = 0, curve = "", date = new Date(), subkeys = [{}] }) {
  userIds = toArray(userIds);
  const options = { userIds, passphrase, numBits, keyExpirationTime, curve, date, subkeys };
  if (_util2.default.getWebCryptoAll() && numBits < 2048) {
    throw new Error('numBits should be 2048 or 4096, found: ' + numBits);
  }

  if (!_util2.default.getWebCryptoAll() && asyncProxy) {
    // use web worker if web crypto apis are not supported
    return asyncProxy.delegate('generateKey', options);
  }

  return (0, _key.generate)(options).then(async key => {
    const revocationCertificate = await key.getRevocationCertificate();
    key.revocationSignatures = [];

    return convertStreams({

      key: key,
      privateKeyArmored: key.armor(),
      publicKeyArmored: key.toPublic().armor(),
      revocationCertificate: revocationCertificate

    });
  }).catch(onError.bind(null, 'Error generating keypair'));
}

/**
 * Reformats signature packets for a key and rewraps key object.
 * @param  {Key} privateKey          private key to reformat
 * @param  {Array<Object>} userIds   array of user IDs e.g. [{ name:'Phil Zimmermann', email:'phil@openpgp.org' }]
 * @param  {String} passphrase       (optional) The passphrase used to encrypt the resulting private key
 * @param  {Number} keyExpirationTime (optional) The number of seconds after the key creation time that the key expires
 * @param  {Boolean} revocationCertificate (optional) Whether the returned object should include a revocation certificate to revoke the public key
 * @returns {Promise<Object>}         The generated key object in the form:
 *                                     { key:Key, privateKeyArmored:String, publicKeyArmored:String, revocationCertificate:String }
 * @async
 * @static
 */
function reformatKey({ privateKey, userIds = [], passphrase = "", keyExpirationTime = 0, date, revocationCertificate = true }) {
  userIds = toArray(userIds);
  const options = { privateKey, userIds, passphrase, keyExpirationTime, date, revocationCertificate };
  if (asyncProxy) {
    return asyncProxy.delegate('reformatKey', options);
  }

  options.revoked = options.revocationCertificate;

  return (0, _key.reformat)(options).then(async key => {
    const revocationCertificate = await key.getRevocationCertificate();
    key.revocationSignatures = [];

    return convertStreams({

      key: key,
      privateKeyArmored: key.armor(),
      publicKeyArmored: key.toPublic().armor(),
      revocationCertificate: revocationCertificate

    });
  }).catch(onError.bind(null, 'Error reformatting keypair'));
}

/**
 * Revokes a key. Requires either a private key or a revocation certificate.
 *   If a revocation certificate is passed, the reasonForRevocation parameters will be ignored.
 * @param  {Key} key                 (optional) public or private key to revoke
 * @param  {String} revocationCertificate (optional) revocation certificate to revoke the key with
 * @param  {Object} reasonForRevocation (optional) object indicating the reason for revocation
 * @param  {module:enums.reasonForRevocation} reasonForRevocation.flag (optional) flag indicating the reason for revocation
 * @param  {String} reasonForRevocation.string (optional) string explaining the reason for revocation
 * @returns {Promise<Object>}         The revoked key object in the form:
 *                                     { privateKey:Key, privateKeyArmored:String, publicKey:Key, publicKeyArmored:String }
 *                                     (if private key is passed) or { publicKey:Key, publicKeyArmored:String } (otherwise)
 * @static
 */
function revokeKey({
  key, revocationCertificate, reasonForRevocation
} = {}) {
  const options = {
    key, revocationCertificate, reasonForRevocation
  };

  if (!_util2.default.getWebCryptoAll() && asyncProxy) {
    // use web worker if web crypto apis are not supported
    return asyncProxy.delegate('revokeKey', options);
  }

  return Promise.resolve().then(() => {
    if (revocationCertificate) {
      return key.applyRevocationCertificate(revocationCertificate);
    } else {
      return key.revoke(reasonForRevocation);
    }
  }).then(async key => {
    await convertStreams(key);
    if (key.isPrivate()) {
      const publicKey = key.toPublic();
      return {
        privateKey: key,
        privateKeyArmored: key.armor(),
        publicKey: publicKey,
        publicKeyArmored: publicKey.armor()
      };
    }
    return {
      publicKey: key,
      publicKeyArmored: key.armor()
    };
  }).catch(onError.bind(null, 'Error revoking key'));
}

/**
 * Unlock a private key with your passphrase.
 * @param  {Key} privateKey                    the private key that is to be decrypted
 * @param  {String|Array<String>} passphrase   the user's passphrase(s) chosen during key generation
 * @returns {Promise<Object>}                  the unlocked key object in the form: { key:Key }
 * @async
 */
function decryptKey({ privateKey, passphrase }) {
  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('decryptKey', { privateKey, passphrase });
  }

  return Promise.resolve().then(async function () {
    await privateKey.decrypt(passphrase);

    return {
      key: privateKey
    };
  }).catch(onError.bind(null, 'Error decrypting private key'));
}

/**
 * Lock a private key with your passphrase.
 * @param  {Key} privateKey                      the private key that is to be decrypted
 * @param  {String|Array<String>} passphrase     the user's passphrase(s) chosen during key generation
 * @returns {Promise<Object>}                    the locked key object in the form: { key:Key }
 * @async
 */
function encryptKey({ privateKey, passphrase }) {
  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('encryptKey', { privateKey, passphrase });
  }

  return Promise.resolve().then(async function () {
    await privateKey.encrypt(passphrase);

    return {
      key: privateKey
    };
  }).catch(onError.bind(null, 'Error decrypting private key'));
}

///////////////////////////////////////////
//                                       //
//   Message encryption and decryption   //
//                                       //
///////////////////////////////////////////


/**
 * Encrypts message text/data with public keys, passwords or both at once. At least either public keys or passwords
 *   must be specified. If private keys are specified, those will be used to sign the message.
 * @param  {Message} message                      message to be encrypted as created by openpgp.message.fromText or openpgp.message.fromBinary
 * @param  {Key|Array<Key>} publicKeys            (optional) array of keys or single key, used to encrypt the message
 * @param  {Key|Array<Key>} privateKeys           (optional) private keys for signing. If omitted message will not be signed
 * @param  {String|Array<String>} passwords       (optional) array of passwords or a single password to encrypt the message
 * @param  {Object} sessionKey                    (optional) session key in the form: { data:Uint8Array, algorithm:String }
 * @param  {module:enums.compression} compression (optional) which compression algorithm to compress the message with, defaults to what is specified in config
 * @param  {Boolean} armor                        (optional) if the return values should be ascii armored or the message/signature objects
 * @param  {'web'|'node'|false} streaming         (optional) whether to return data as a stream. Defaults to the type of stream `message` was created from, if any.
 * @param  {Boolean} detached                     (optional) if the signature should be detached (if true, signature will be added to returned object)
 * @param  {Signature} signature                  (optional) a detached signature to add to the encrypted message
 * @param  {Boolean} returnSessionKey             (optional) if the unencrypted session key should be added to returned object
 * @param  {Boolean} wildcard                     (optional) use a key ID of 0 instead of the public key IDs
 * @param  {Date} date                            (optional) override the creation date of the message signature
 * @param  {Array} fromUserIds                    (optional) array of user IDs to sign with, one per key in `privateKeys`, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @param  {Array} toUserIds                      (optional) array of user IDs to encrypt for, one per key in `publicKeys`, e.g. [{ name:'Robert Receiver', email:'robert@openpgp.org' }]
 * @returns {Promise<Object>}                     Object containing encrypted (and optionally signed) message in the form:
 *
 *     {
 *       data: String|ReadableStream<String>|NodeStream, (if `armor` was true, the default)
 *       message: Message, (if `armor` was false)
 *       signature: String|ReadableStream<String>|NodeStream, (if `detached` was true and `armor` was true)
 *       signature: Signature (if `detached` was true and `armor` was false)
 *       sessionKey: { data, algorithm, aeadAlgorithm } (if `returnSessionKey` was true)
 *     }
 * @async
 * @static
 */
function encrypt({ message, publicKeys, privateKeys, passwords, sessionKey, compression = _config2.default.compression, armor = true, streaming = message && message.fromStream, detached = false, signature = null, returnSessionKey = false, wildcard = false, date = new Date(), fromUserIds = [], toUserIds = [] }) {
  checkMessage(message);publicKeys = toArray(publicKeys);privateKeys = toArray(privateKeys);passwords = toArray(passwords);fromUserIds = toArray(fromUserIds);toUserIds = toArray(toUserIds);

  if (!nativeAEAD() && asyncProxy) {
    // use web worker if web crypto apis are not supported
    return asyncProxy.delegate('encrypt', { message, publicKeys, privateKeys, passwords, sessionKey, compression, armor, streaming, detached, signature, returnSessionKey, wildcard, date, fromUserIds, toUserIds });
  }
  const result = {};
  return Promise.resolve().then(async function () {
    if (!privateKeys) {
      privateKeys = [];
    }
    if (privateKeys.length || signature) {
      // sign the message only if private keys or signature is specified
      if (detached) {
        const detachedSignature = await message.signDetached(privateKeys, signature, date, fromUserIds);
        result.signature = armor ? detachedSignature.armor() : detachedSignature;
      } else {
        message = await message.sign(privateKeys, signature, date, fromUserIds);
      }
    }
    message = message.compress(compression);
    return message.encrypt(publicKeys, passwords, sessionKey, wildcard, date, toUserIds, streaming);
  }).then(async encrypted => {
    if (armor) {
      result.data = encrypted.message.armor();
    } else {
      result.message = encrypted.message;
    }
    if (returnSessionKey) {
      result.sessionKey = encrypted.sessionKey;
    }
    return convertStreams(result, streaming, armor ? ['signature', 'data'] : []);
  }).catch(onError.bind(null, 'Error encrypting message'));
}

/**
 * Decrypts a message with the user's private key, a session key or a password. Either a private key,
 *   a session key or a password must be specified.
 * @param  {Message} message                  the message object with the encrypted data
 * @param  {Key|Array<Key>} privateKeys       (optional) private keys with decrypted secret key data or session key
 * @param  {String|Array<String>} passwords   (optional) passwords to decrypt the message
 * @param  {Object|Array<Object>} sessionKeys (optional) session keys in the form: { data:Uint8Array, algorithm:String }
 * @param  {Key|Array<Key>} publicKeys        (optional) array of public keys or single key, to verify signatures
 * @param  {'utf8'|'binary'} format           (optional) whether to return data as a string(Stream) or Uint8Array(Stream). If 'utf8' (the default), also normalize newlines.
 * @param  {'web'|'node'|false} streaming     (optional) whether to return data as a stream. Defaults to the type of stream `message` was created from, if any.
 * @param  {Signature} signature              (optional) detached signature for verification
 * @param  {Date} date                        (optional) use the given date for verification instead of the current time
 * @returns {Promise<Object>}                 Object containing decrypted and verified message in the form:
 *
 *     {
 *       data: String|ReadableStream<String>|NodeStream, (if format was 'utf8', the default)
 *       data: Uint8Array|ReadableStream<Uint8Array>|NodeStream, (if format was 'binary')
 *       filename: String,
 *       signatures: [
 *         {
 *           keyid: module:type/keyid,
 *           verified: Promise<Boolean>,
 *           valid: Boolean (if streaming was false)
 *         }, ...
 *       ]
 *     }
 * @async
 * @static
 */
function decrypt({ message, privateKeys, passwords, sessionKeys, publicKeys, format = 'utf8', streaming = message && message.fromStream, signature = null, date = new Date() }) {
  checkMessage(message);publicKeys = toArray(publicKeys);privateKeys = toArray(privateKeys);passwords = toArray(passwords);sessionKeys = toArray(sessionKeys);

  if (!nativeAEAD() && asyncProxy) {
    // use web worker if web crypto apis are not supported
    return asyncProxy.delegate('decrypt', { message, privateKeys, passwords, sessionKeys, publicKeys, format, streaming, signature, date });
  }

  return message.decrypt(privateKeys, passwords, sessionKeys, streaming).then(async function (decrypted) {
    if (!publicKeys) {
      publicKeys = [];
    }

    const result = {};
    result.signatures = signature ? await decrypted.verifyDetached(signature, publicKeys, date, streaming) : await decrypted.verify(publicKeys, date, streaming);
    result.data = format === 'binary' ? decrypted.getLiteralData() : decrypted.getText();
    result.filename = decrypted.getFilename();
    if (streaming) linkStreams(result, message, decrypted.packets.stream);
    result.data = await convertStream(result.data, streaming);
    if (!streaming) await prepareSignatures(result.signatures);
    return result;
  }).catch(onError.bind(null, 'Error decrypting message'));
}

//////////////////////////////////////////
//                                      //
//   Message signing and verification   //
//                                      //
//////////////////////////////////////////


/**
 * Signs a cleartext message.
 * @param  {CleartextMessage|Message} message (cleartext) message to be signed
 * @param  {Key|Array<Key>} privateKeys       array of keys or single key with decrypted secret key data to sign cleartext
 * @param  {Boolean} armor                    (optional) if the return value should be ascii armored or the message object
 * @param  {'web'|'node'|false} streaming     (optional) whether to return data as a stream. Defaults to the type of stream `message` was created from, if any.
 * @param  {Boolean} detached                 (optional) if the return value should contain a detached signature
 * @param  {Date} date                        (optional) override the creation date of the signature
 * @param  {Array} fromUserIds                (optional) array of user IDs to sign with, one per key in `privateKeys`, e.g. [{ name:'Steve Sender', email:'steve@openpgp.org' }]
 * @returns {Promise<Object>}                 Object containing signed message in the form:
 *
 *     {
 *       data: String|ReadableStream<String>|NodeStream, (if `armor` was true, the default)
 *       message: Message (if `armor` was false)
 *     }
 *
 * Or, if `detached` was true:
 *
 *     {
 *       signature: String|ReadableStream<String>|NodeStream, (if `armor` was true, the default)
 *       signature: Signature (if `armor` was false)
 *     }
 * @async
 * @static
 */
function sign({ message, privateKeys, armor = true, streaming = message && message.fromStream, detached = false, date = new Date(), fromUserIds = [] }) {
  checkCleartextOrMessage(message);
  privateKeys = toArray(privateKeys);fromUserIds = toArray(fromUserIds);

  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('sign', {
      message, privateKeys, armor, streaming, detached, date, fromUserIds
    });
  }

  const result = {};
  return Promise.resolve().then(async function () {
    if (detached) {
      const signature = await message.signDetached(privateKeys, undefined, date, fromUserIds);
      result.signature = armor ? signature.armor() : signature;
      if (message.packets) {
        result.signature = _webStreamTools2.default.transformPair(message.packets.write(), async (readable, writable) => {
          await Promise.all([_webStreamTools2.default.pipe(result.signature, writable), _webStreamTools2.default.readToEnd(readable).catch(() => {})]);
        });
      }
    } else {
      message = await message.sign(privateKeys, undefined, date, fromUserIds);
      if (armor) {
        result.data = message.armor();
      } else {
        result.message = message;
      }
    }
    return convertStreams(result, streaming, armor ? ['signature', 'data'] : []);
  }).catch(onError.bind(null, 'Error signing cleartext message'));
}

/**
 * Verifies signatures of cleartext signed message
 * @param  {Key|Array<Key>} publicKeys         array of publicKeys or single key, to verify signatures
 * @param  {CleartextMessage|Message} message  (cleartext) message object with signatures
 * @param  {'web'|'node'|false} streaming      (optional) whether to return data as a stream. Defaults to the type of stream `message` was created from, if any.
 * @param  {Signature} signature               (optional) detached signature for verification
 * @param  {Date} date                         (optional) use the given date for verification instead of the current time
 * @returns {Promise<Object>}                  Object containing verified message in the form:
 *
 *     {
 *       data: String|ReadableStream<String>|NodeStream, (if `message` was a CleartextMessage)
 *       data: Uint8Array|ReadableStream<Uint8Array>|NodeStream, (if `message` was a Message)
 *       signatures: [
 *         {
 *           keyid: module:type/keyid,
 *           verified: Promise<Boolean>,
 *           valid: Boolean (if `streaming` was false)
 *         }, ...
 *       ]
 *     }
 * @async
 * @static
 */
function verify({ message, publicKeys, streaming = message && message.fromStream, signature = null, date = new Date() }) {
  checkCleartextOrMessage(message);
  publicKeys = toArray(publicKeys);

  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('verify', { message, publicKeys, streaming, signature, date });
  }

  return Promise.resolve().then(async function () {
    const result = {};
    result.signatures = signature ? await message.verifyDetached(signature, publicKeys, date, streaming) : await message.verify(publicKeys, date, streaming);
    result.data = message instanceof _cleartext.CleartextMessage ? message.getText() : message.getLiteralData();
    if (streaming) linkStreams(result, message);
    result.data = await convertStream(result.data, streaming);
    if (!streaming) await prepareSignatures(result.signatures);
    return result;
  }).catch(onError.bind(null, 'Error verifying cleartext signed message'));
}

///////////////////////////////////////////////
//                                           //
//   Session key encryption and decryption   //
//                                           //
///////////////////////////////////////////////


/**
 * Encrypt a symmetric session key with public keys, passwords, or both at once. At least either public keys
 *   or passwords must be specified.
 * @param  {Uint8Array} data                  the session key to be encrypted e.g. 16 random bytes (for aes128)
 * @param  {String} algorithm                 algorithm of the symmetric session key e.g. 'aes128' or 'aes256'
 * @param  {String} aeadAlgorithm             (optional) aead algorithm, e.g. 'eax' or 'ocb'
 * @param  {Key|Array<Key>} publicKeys        (optional) array of public keys or single key, used to encrypt the key
 * @param  {String|Array<String>} passwords   (optional) passwords for the message
 * @param  {Boolean} wildcard                 (optional) use a key ID of 0 instead of the public key IDs
 * @param  {Date} date                        (optional) override the date
 * @param  {Array} toUserIds                  (optional) array of user IDs to encrypt for, one per key in `publicKeys`, e.g. [{ name:'Phil Zimmermann', email:'phil@openpgp.org' }]
 * @returns {Promise<Message>}                 the encrypted session key packets contained in a message object
 * @async
 * @static
 */
function encryptSessionKey({ data, algorithm, aeadAlgorithm, publicKeys, passwords, wildcard = false, date = new Date(), toUserIds = [] }) {
  checkBinary(data);checkString(algorithm, 'algorithm');publicKeys = toArray(publicKeys);passwords = toArray(passwords);toUserIds = toArray(toUserIds);

  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('encryptSessionKey', { data, algorithm, aeadAlgorithm, publicKeys, passwords, wildcard, date, toUserIds });
  }

  return Promise.resolve().then(async function () {

    return { message: await messageLib.encryptSessionKey(data, algorithm, aeadAlgorithm, publicKeys, passwords, wildcard, date, toUserIds) };
  }).catch(onError.bind(null, 'Error encrypting session key'));
}

/**
 * Decrypt symmetric session keys with a private key or password. Either a private key or
 *   a password must be specified.
 * @param  {Message} message                 a message object containing the encrypted session key packets
 * @param  {Key|Array<Key>} privateKeys     (optional) private keys with decrypted secret key data
 * @param  {String|Array<String>} passwords (optional) passwords to decrypt the session key
 * @returns {Promise<Object|undefined>}    Array of decrypted session key, algorithm pairs in form:
 *                                          { data:Uint8Array, algorithm:String }
 *                                          or 'undefined' if no key packets found
 * @async
 * @static
 */
function decryptSessionKeys({ message, privateKeys, passwords }) {
  checkMessage(message);privateKeys = toArray(privateKeys);passwords = toArray(passwords);

  if (asyncProxy) {
    // use web worker if available
    return asyncProxy.delegate('decryptSessionKeys', { message, privateKeys, passwords });
  }

  return Promise.resolve().then(async function () {

    return message.decryptSessionKeys(privateKeys, passwords);
  }).catch(onError.bind(null, 'Error decrypting session keys'));
}

//////////////////////////
//                      //
//   Helper functions   //
//                      //
//////////////////////////


/**
 * Input validation
 */
function checkString(data, name) {
  if (!_util2.default.isString(data)) {
    throw new Error('Parameter [' + (name || 'data') + '] must be of type String');
  }
}
function checkBinary(data, name) {
  if (!_util2.default.isUint8Array(data)) {
    throw new Error('Parameter [' + (name || 'data') + '] must be of type Uint8Array');
  }
}
function checkMessage(message) {
  if (!(message instanceof messageLib.Message)) {
    throw new Error('Parameter [message] needs to be of type Message');
  }
}
function checkCleartextOrMessage(message) {
  if (!(message instanceof _cleartext.CleartextMessage) && !(message instanceof messageLib.Message)) {
    throw new Error('Parameter [message] needs to be of type Message or CleartextMessage');
  }
}

/**
 * Normalize parameter to an array if it is not undefined.
 * @param  {Object} param              the parameter to be normalized
 * @returns {Array<Object>|undefined}   the resulting array or undefined
 */
function toArray(param) {
  if (param && !_util2.default.isArray(param)) {
    param = [param];
  }
  return param;
}

/**
 * Convert data to or from Stream
 * @param  {Object} data                   the data to convert
 * @param  {'web'|'node'|false} streaming  (optional) whether to return a ReadableStream
 * @returns {Object}                       the data in the respective format
 */
async function convertStream(data, streaming) {
  if (!streaming && _util2.default.isStream(data)) {
    return _webStreamTools2.default.readToEnd(data);
  }
  if (streaming && !_util2.default.isStream(data)) {
    data = new ReadableStream({
      start(controller) {
        controller.enqueue(data);
        controller.close();
      }
    });
  }
  if (streaming === 'node') {
    data = _webStreamTools2.default.webToNode(data);
  }
  return data;
}

/**
 * Convert object properties from Stream
 * @param  {Object} obj                    the data to convert
 * @param  {'web'|'node'|false} streaming  (optional) whether to return ReadableStreams
 * @param  {Array<String>} keys            (optional) which keys to return as streams, if possible
 * @returns {Object}                       the data in the respective format
 */
async function convertStreams(obj, streaming, keys = []) {
  if (Object.prototype.isPrototypeOf(obj) && !Uint8Array.prototype.isPrototypeOf(obj)) {
    await Promise.all(Object.entries(obj).map(async ([key, value]) => {
      // recursively search all children
      if (_util2.default.isStream(value) || keys.includes(key)) {
        obj[key] = await convertStream(value, streaming);
      } else {
        await convertStreams(obj[key], streaming);
      }
    }));
  }
  return obj;
}

/**
 * Link result.data to the message stream for cancellation.
 * Also, forward errors in the message to result.data.
 * @param  {Object} result                  the data to convert
 * @param  {Message} message                message object
 * @param  {ReadableStream} erroringStream  (optional) stream which either errors or gets closed without data
 * @returns {Object}
 */
function linkStreams(result, message, erroringStream) {
  result.data = _webStreamTools2.default.transformPair(message.packets.stream, async (readable, writable) => {
    await _webStreamTools2.default.pipe(result.data, writable, {
      preventClose: true
    });
    const writer = _webStreamTools2.default.getWriter(writable);
    try {
      // Forward errors in erroringStream (defaulting to the message stream) to result.data.
      await _webStreamTools2.default.readToEnd(erroringStream || readable, arr => arr);
      await writer.close();
    } catch (e) {
      await writer.abort(e);
    }
  });
}

/**
 * Wait until signature objects have been verified
 * @param  {Object} signatures              list of signatures
 */
async function prepareSignatures(signatures) {
  await Promise.all(signatures.map(async signature => {
    signature.signature = await signature.signature;
    try {
      signature.valid = await signature.verified;
    } catch (e) {
      signature.valid = null;
      signature.error = e;
      _util2.default.print_debug_error(e);
    }
  }));
}

/**
 * Global error handler that logs the stack trace and rethrows a high lvl error message.
 * @param {String} message   A human readable high level error Message
 * @param {Error} error      The internal error that caused the failure
 */
function onError(message, error) {
  // log the stack trace
  _util2.default.print_debug_error(error);

  // update error message
  try {
    error.message = message + ': ' + error.message;
  } catch (e) {}

  throw error;
}

/**
 * Check for native AEAD support and configuration by the user. Only
 * browsers that implement the current WebCrypto specification support
 * native GCM. Native EAX is built on CTR and CBC, which current
 * browsers support. OCB and CFB are not natively supported.
 * @returns {Boolean}   If authenticated encryption should be used
 */
function nativeAEAD() {
  return _config2.default.aead_protect && ((_config2.default.aead_protect_version !== 4 || _config2.default.aead_mode === _enums2.default.aead.experimental_gcm) && _util2.default.getWebCrypto() || _config2.default.aead_protect_version === 4 && _config2.default.aead_mode === _enums2.default.aead.eax && _util2.default.getWebCrypto());
}

},{"./cleartext":78,"./config/config":79,"./enums":114,"./key":117,"./message":121,"./polyfills":145,"./util":153,"./worker/async_proxy":155,"web-stream-tools":76}],123:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Trust = exports.Signature = exports.SecretSubkey = exports.Userid = exports.SecretKey = exports.OnePassSignature = exports.UserAttribute = exports.PublicSubkey = exports.Marker = exports.SymmetricallyEncrypted = exports.PublicKey = exports.Literal = exports.SymEncryptedSessionKey = exports.PublicKeyEncryptedSessionKey = exports.SymEncryptedAEADProtected = exports.SymEncryptedIntegrityProtected = exports.Compressed = undefined;

var _compressed = require('./compressed.js');

Object.defineProperty(exports, 'Compressed', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_compressed).default;
  }
});

var _sym_encrypted_integrity_protected = require('./sym_encrypted_integrity_protected.js');

Object.defineProperty(exports, 'SymEncryptedIntegrityProtected', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sym_encrypted_integrity_protected).default;
  }
});

var _sym_encrypted_aead_protected = require('./sym_encrypted_aead_protected.js');

Object.defineProperty(exports, 'SymEncryptedAEADProtected', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sym_encrypted_aead_protected).default;
  }
});

var _public_key_encrypted_session_key = require('./public_key_encrypted_session_key.js');

Object.defineProperty(exports, 'PublicKeyEncryptedSessionKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_public_key_encrypted_session_key).default;
  }
});

var _sym_encrypted_session_key = require('./sym_encrypted_session_key.js');

Object.defineProperty(exports, 'SymEncryptedSessionKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sym_encrypted_session_key).default;
  }
});

var _literal = require('./literal.js');

Object.defineProperty(exports, 'Literal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_literal).default;
  }
});

var _public_key = require('./public_key.js');

Object.defineProperty(exports, 'PublicKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_public_key).default;
  }
});

var _symmetrically_encrypted = require('./symmetrically_encrypted.js');

Object.defineProperty(exports, 'SymmetricallyEncrypted', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_symmetrically_encrypted).default;
  }
});

var _marker = require('./marker.js');

Object.defineProperty(exports, 'Marker', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_marker).default;
  }
});

var _public_subkey = require('./public_subkey.js');

Object.defineProperty(exports, 'PublicSubkey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_public_subkey).default;
  }
});

var _user_attribute = require('./user_attribute.js');

Object.defineProperty(exports, 'UserAttribute', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_user_attribute).default;
  }
});

var _one_pass_signature = require('./one_pass_signature.js');

Object.defineProperty(exports, 'OnePassSignature', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_one_pass_signature).default;
  }
});

var _secret_key = require('./secret_key.js');

Object.defineProperty(exports, 'SecretKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_secret_key).default;
  }
});

var _userid = require('./userid.js');

Object.defineProperty(exports, 'Userid', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_userid).default;
  }
});

var _secret_subkey = require('./secret_subkey.js');

Object.defineProperty(exports, 'SecretSubkey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_secret_subkey).default;
  }
});

var _signature = require('./signature.js');

Object.defineProperty(exports, 'Signature', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_signature).default;
  }
});

var _trust = require('./trust.js');

Object.defineProperty(exports, 'Trust', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_trust).default;
  }
});
exports.newPacketFromTag = newPacketFromTag;
exports.fromStructuredClone = fromStructuredClone;

var _enums = require('../enums.js');

var _enums2 = _interopRequireDefault(_enums);

var _all_packets = require('./all_packets.js');

var packets = _interopRequireWildcard(_all_packets);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Allocate a new packet
 * @function newPacketFromTag
 * @memberof module:packet
 * @param {String} tag property name from {@link module:enums.packet}
 * @returns {Object} new packet object with type based on tag
 */
function newPacketFromTag(tag) {
  return new packets[packetClassFromTagName(tag)]();
}

/**
 * Allocate a new packet from structured packet clone
 * @see {@link https://w3c.github.io/html/infrastructure.html#safe-passing-of-structured-data}
 * @function fromStructuredClone
 * @memberof module:packet
 * @param {Object} packetClone packet clone
 * @returns {Object} new packet object with data from packet clone
 */
function fromStructuredClone(packetClone) {
  const tagName = _enums2.default.read(_enums2.default.packet, packetClone.tag);
  const packet = newPacketFromTag(tagName);
  Object.assign(packet, packetClone);
  if (packet.postCloneTypeFix) {
    packet.postCloneTypeFix();
  }
  return packet;
}

/**
 * Convert tag name to class name
 * @param {String} tag property name from {@link module:enums.packet}
 * @returns {String}
 * @private
 */
function packetClassFromTagName(tag) {
  return tag.substr(0, 1).toUpperCase() + tag.substr(1);
}

},{"../enums.js":114,"./all_packets.js":123,"./compressed.js":125,"./literal.js":127,"./marker.js":128,"./one_pass_signature.js":129,"./public_key.js":132,"./public_key_encrypted_session_key.js":133,"./public_subkey.js":134,"./secret_key.js":135,"./secret_subkey.js":136,"./signature.js":137,"./sym_encrypted_aead_protected.js":138,"./sym_encrypted_integrity_protected.js":139,"./sym_encrypted_session_key.js":140,"./symmetrically_encrypted.js":141,"./trust.js":142,"./user_attribute.js":143,"./userid.js":144}],124:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clonePackets = clonePackets;
exports.parseClonedPackets = parseClonedPackets;

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _key = require('../key');

var _message = require('../message');

var _cleartext = require('../cleartext');

var _signature = require('../signature');

var _packetlist = require('./packetlist');

var _packetlist2 = _interopRequireDefault(_packetlist);

var _keyid = require('../type/keyid');

var _keyid2 = _interopRequireDefault(_keyid);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//////////////////////////////
//                          //
//   List --> Clone   //
//                          //
//////////////////////////////


/**
 * Create a packetlist from the correspoding object types.
 * @param  {Object} options   the object passed to and from the web worker
 * @returns {Object}           a mutated version of the options optject
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015 Tankred Hase
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This module implements packet list cloning required to
 * pass certain object types between the web worker and main thread using
 * the structured cloning algorithm.
 * @module packet/clone
 */

function clonePackets(options) {
  if (options.publicKeys) {
    options.publicKeys = options.publicKeys.map(key => key.toPacketlist());
  }
  if (options.privateKeys) {
    options.privateKeys = options.privateKeys.map(key => key.toPacketlist());
  }
  if (options.privateKey) {
    options.privateKey = options.privateKey.toPacketlist();
  }
  if (options.key) {
    options.key = options.key.toPacketlist();
  }
  if (options.message) {
    //could be either a Message or CleartextMessage object
    if (options.message instanceof _message.Message) {
      options.message = options.message.packets;
    } else if (options.message instanceof _cleartext.CleartextMessage) {
      options.message = { text: options.message.text, signature: options.message.signature.packets };
    }
  }
  if (options.signature && options.signature instanceof _signature.Signature) {
    options.signature = options.signature.packets;
  }
  if (options.signatures) {
    options.signatures.forEach(verificationObjectToClone);
  }
  return options;
}

function verificationObjectToClone(verObject) {
  const verified = verObject.verified;
  verObject.verified = _webStreamTools2.default.fromAsync(() => verified);
  if (verObject.signature instanceof Promise) {
    const signature = verObject.signature;
    verObject.signature = _webStreamTools2.default.fromAsync(async () => {
      const packets = (await signature).packets;
      try {
        await verified;
        delete packets[0].signature;
      } catch (e) {}
      return packets;
    });
  } else {
    verObject.signature = verObject.signature.packets;
  }
  if (verObject.error) {
    verObject.error = verObject.error.message;
  }
  return verObject;
}

//////////////////////////////
//                          //
//   Clone --> List   //
//                          //
//////////////////////////////


/**
 * Creates an object with the correct prototype from a corresponding packetlist.
 * @param  {Object} options   the object passed to and from the web worker
 * @param  {String} method    the public api function name to be delegated to the worker
 * @returns {Object}           a mutated version of the options optject
 */
function parseClonedPackets(options) {
  if (options.publicKeys) {
    options.publicKeys = options.publicKeys.map(packetlistCloneToKey);
  }
  if (options.privateKeys) {
    options.privateKeys = options.privateKeys.map(packetlistCloneToKey);
  }
  if (options.privateKey) {
    options.privateKey = packetlistCloneToKey(options.privateKey);
  }
  if (options.key) {
    options.key = packetlistCloneToKey(options.key);
  }
  if (options.message && options.message.signature) {
    options.message = packetlistCloneToCleartextMessage(options.message);
  } else if (options.message) {
    options.message = packetlistCloneToMessage(options.message);
  }
  if (options.signatures) {
    options.signatures = options.signatures.map(packetlistCloneToSignatures);
  }
  if (options.signature) {
    options.signature = packetlistCloneToSignature(options.signature);
  }
  return options;
}

function packetlistCloneToKey(clone) {
  const packetlist = _packetlist2.default.fromStructuredClone(clone);
  return new _key.Key(packetlist);
}

function packetlistCloneToMessage(clone) {
  const packetlist = _packetlist2.default.fromStructuredClone(clone);
  return new _message.Message(packetlist);
}

function packetlistCloneToCleartextMessage(clone) {
  const packetlist = _packetlist2.default.fromStructuredClone(clone.signature);
  return new _cleartext.CleartextMessage(clone.text, new _signature.Signature(packetlist));
}

//verification objects
function packetlistCloneToSignatures(clone) {
  clone.keyid = _keyid2.default.fromClone(clone.keyid);
  if (_util2.default.isStream(clone.signature)) {
    clone.signature = _webStreamTools2.default.readToEnd(clone.signature, ([signature]) => new _signature.Signature(_packetlist2.default.fromStructuredClone(signature)));
    clone.signature.catch(() => {});
  } else {
    clone.signature = new _signature.Signature(_packetlist2.default.fromStructuredClone(clone.signature));
  }
  clone.verified = _webStreamTools2.default.readToEnd(clone.verified, ([verified]) => verified);
  clone.verified.catch(() => {});
  if (clone.error) {
    clone.error = new Error(clone.error);
  }
  return clone;
}

function packetlistCloneToSignature(clone) {
  if (_util2.default.isString(clone) || _util2.default.isStream(clone)) {
    //signature is armored
    return clone;
  }
  const packetlist = _packetlist2.default.fromStructuredClone(clone);
  return new _signature.Signature(packetlist);
}

},{"../cleartext":78,"../key":117,"../message":121,"../signature":146,"../type/keyid":149,"../util":153,"./packetlist":131,"web-stream-tools":76}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pako = require('pako');

var _pako2 = _interopRequireDefault(_pako);

var _seekBzip = require('seek-bzip');

var _seekBzip2 = _interopRequireDefault(_seekBzip);

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Compressed Data Packet (Tag 8)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.6|RFC4880 5.6}:
 * The Compressed Data packet contains compressed data.  Typically,
 * this packet is found as the contents of an encrypted packet, or following
 * a Signature or One-Pass Signature packet, and contains a literal data packet.
 * @memberof module:packet
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires pako
 * @requires config
 * @requires enums
 * @requires util
 * @requires compression/bzip2
 */

function Compressed() {
  /**
   * Packet type
   * @type {module:enums.packet}
   */
  this.tag = _enums2.default.packet.compressed;
  /**
   * List of packets
   * @type {module:packet.List}
   */
  this.packets = null;
  /**
   * Compression algorithm
   * @type {compression}
   */
  this.algorithm = 'zip';

  /**
   * Compressed packet data
   * @type {Uint8Array | ReadableStream<Uint8Array>}
   */
  this.compressed = null;
}

/**
 * Parsing function for the packet.
 * @param {Uint8Array | ReadableStream<Uint8Array>} bytes Payload of a tag 8 packet
 */
Compressed.prototype.read = async function (bytes, streaming) {
  await _webStreamTools2.default.parse(bytes, async reader => {

    // One octet that gives the algorithm used to compress the packet.
    this.algorithm = _enums2.default.read(_enums2.default.compression, (await reader.readByte()));

    // Compressed data, which makes up the remainder of the packet.
    this.compressed = reader.remainder();

    await this.decompress(streaming);
  });
};

/**
 * Return the compressed packet.
 * @returns {Uint8Array | ReadableStream<Uint8Array>} binary compressed packet
 */
Compressed.prototype.write = function () {
  if (this.compressed === null) {
    this.compress();
  }

  return _util2.default.concat([new Uint8Array([_enums2.default.write(_enums2.default.compression, this.algorithm)]), this.compressed]);
};

/**
 * Decompression method for decompressing the compressed data
 * read by read_packet
 */
Compressed.prototype.decompress = async function (streaming) {

  if (!decompress_fns[this.algorithm]) {
    throw new Error(this.algorithm + ' decompression not supported');
  }

  await this.packets.read(decompress_fns[this.algorithm](this.compressed), streaming);
};

/**
 * Compress the packet data (member decompressedData)
 */
Compressed.prototype.compress = function () {

  if (!compress_fns[this.algorithm]) {
    throw new Error(this.algorithm + ' compression not supported');
  }

  this.compressed = compress_fns[this.algorithm](this.packets.write());
};

exports.default = Compressed;

//////////////////////////
//                      //
//   Helper functions   //
//                      //
//////////////////////////


const nodeZlib = _util2.default.getNodeZlib();

function node_zlib(func, options = {}) {
  return function (data) {
    return _webStreamTools2.default.nodeToWeb(_webStreamTools2.default.webToNode(data).pipe(func(options)));
  };
}

function pako_zlib(constructor, options = {}) {
  return function (data) {
    const obj = new constructor(options);
    return _webStreamTools2.default.transform(data, value => {
      if (value.length) {
        obj.push(value, _pako2.default.Z_SYNC_FLUSH);
        return obj.result;
      }
    }, () => {
      if (constructor === _pako2.default.Deflate) {
        obj.push([], _pako2.default.Z_FINISH);
        return obj.result;
      }
    });
  };
}

function bzip2(func) {
  return function (data) {
    return _webStreamTools2.default.fromAsync(async () => func((await _webStreamTools2.default.readToEnd(data))));
  };
}

let compress_fns;
let decompress_fns;
if (nodeZlib) {
  // Use Node native zlib for DEFLATE compression/decompression
  compress_fns = {
    zip: node_zlib(nodeZlib.createDeflateRaw, { level: _config2.default.deflate_level }),
    zlib: node_zlib(nodeZlib.createDeflate, { level: _config2.default.deflate_level })
  };

  decompress_fns = {
    zip: node_zlib(nodeZlib.createInflateRaw),
    zlib: node_zlib(nodeZlib.createInflate),
    bzip2: bzip2(_seekBzip2.default.decode)
  };
} else {
  // Use JS fallbacks
  compress_fns = {
    zip: pako_zlib(_pako2.default.Deflate, { raw: true, level: _config2.default.deflate_level }),
    zlib: pako_zlib(_pako2.default.Deflate, { level: _config2.default.deflate_level })
  };

  decompress_fns = {
    zip: pako_zlib(_pako2.default.Inflate, { raw: true }),
    zlib: pako_zlib(_pako2.default.Inflate),
    bzip2: bzip2(_seekBzip2.default.decode)
  };
}

},{"../config":80,"../enums":114,"../util":153,"pako":51,"seek-bzip":70,"web-stream-tools":76}],126:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _all_packets = require('./all_packets');

var packets = _interopRequireWildcard(_all_packets);

var _clone = require('./clone');

var clone = _interopRequireWildcard(_clone);

var _packetlist = require('./packetlist');

var _packetlist2 = _interopRequireDefault(_packetlist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const mod = {
  List: _packetlist2.default,
  clone
}; /**
    * @fileoverview OpenPGP packet types
    * @see module:packet/all_packets
    * @see module:packet/clone
    * @see module:packet.List
    * @module packet
    */

Object.assign(mod, packets);

exports.default = mod;

},{"./all_packets":123,"./clone":124,"./packetlist":131}],127:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Literal Data Packet (Tag 11)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.9|RFC4880 5.9}:
 * A Literal Data packet contains the body of a message; data that is not to be
 * further interpreted.
 * @param {Date} date the creation date of the literal package
 * @memberof module:packet
 * @constructor
 */
function Literal(date = new Date()) {
  this.tag = _enums2.default.packet.literal;
  this.format = 'utf8'; // default format for literal data packets
  this.date = _util2.default.normalizeDate(date);
  this.text = null; // textual data representation
  this.data = null; // literal data representation
  this.filename = 'msg.txt';
}

/**
 * Set the packet data to a javascript native string, end of line
 * will be normalized to \r\n and by default text is converted to UTF8
 * @param {String | ReadableStream<String>} text Any native javascript string
 * @param {utf8|binary|text|mime} format (optional) The format of the string of bytes
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires enums
 * @requires util
 */

Literal.prototype.setText = function (text, format = 'utf8') {
  this.format = format;
  this.text = text;
  this.data = null;
};

/**
 * Returns literal data packets as native JavaScript string
 * with normalized end of line to \n
 * @param {Boolean} clone (optional) Whether to return a clone so that getBytes/getText can be called again
 * @returns {String | ReadableStream<String>} literal data as text
 */
Literal.prototype.getText = function (clone = false) {
  if (this.text === null || _util2.default.isStream(this.text)) {
    // Assume that this.text has been read
    this.text = _util2.default.nativeEOL(_util2.default.decode_utf8(this.getBytes(clone)));
  }
  return this.text;
};

/**
 * Set the packet data to value represented by the provided string of bytes.
 * @param {Uint8Array | ReadableStream<Uint8Array>} bytes The string of bytes
 * @param {utf8|binary|text|mime} format The format of the string of bytes
 */
Literal.prototype.setBytes = function (bytes, format) {
  this.format = format;
  this.data = bytes;
  this.text = null;
};

/**
 * Get the byte sequence representing the literal packet data
 * @param {Boolean} clone (optional) Whether to return a clone so that getBytes/getText can be called again
 * @returns {Uint8Array | ReadableStream<Uint8Array>} A sequence of bytes
 */
Literal.prototype.getBytes = function (clone = false) {
  if (this.data === null) {
    // normalize EOL to \r\n and encode UTF8
    this.data = _util2.default.encode_utf8(_util2.default.canonicalizeEOL(this.text));
  }
  if (clone) {
    return _webStreamTools2.default.passiveClone(this.data);
  }
  return this.data;
};

/**
 * Sets the filename of the literal packet data
 * @param {String} filename Any native javascript string
 */
Literal.prototype.setFilename = function (filename) {
  this.filename = filename;
};

/**
 * Get the filename of the literal packet data
 * @returns {String} filename
 */
Literal.prototype.getFilename = function () {
  return this.filename;
};

/**
 * Parsing function for a literal data packet (tag 11).
 *
 * @param {Uint8Array | ReadableStream<Uint8Array>} input Payload of a tag 11 packet
 * @returns {module:packet.Literal} object representation
 */
Literal.prototype.read = async function (bytes) {
  await _webStreamTools2.default.parse(bytes, async reader => {
    // - A one-octet field that describes how the data is formatted.
    const format = _enums2.default.read(_enums2.default.literal, (await reader.readByte()));

    const filename_len = await reader.readByte();
    this.filename = _util2.default.decode_utf8((await reader.readBytes(filename_len)));

    this.date = _util2.default.readDate((await reader.readBytes(4)));

    const data = reader.remainder();

    this.setBytes(data, format);
  });
};

/**
 * Creates a string representation of the packet
 *
 * @returns {Uint8Array | ReadableStream<Uint8Array>} Uint8Array representation of the packet
 */
Literal.prototype.write = function () {
  const filename = _util2.default.encode_utf8(this.filename);
  const filename_length = new Uint8Array([filename.length]);

  const format = new Uint8Array([_enums2.default.write(_enums2.default.literal, this.format)]);
  const date = _util2.default.writeDate(this.date);
  const data = this.getBytes();

  return _util2.default.concat([format, filename_length, filename, date, data]);
};

exports.default = Literal;

},{"../enums":114,"../util":153,"web-stream-tools":76}],128:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the strange "Marker packet" (Tag 10)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.8|RFC4880 5.8}:
 * An experimental version of PGP used this packet as the Literal
 * packet, but no released version of PGP generated Literal packets with this
 * tag. With PGP 5.x, this packet has been reassigned and is reserved for use as
 * the Marker packet.
 *
 * Such a packet MUST be ignored when received.
 * @memberof module:packet
 * @constructor
 */
function Marker() {
  this.tag = _enums2.default.packet.marker;
}

/**
 * Parsing function for a literal data packet (tag 10).
 *
 * @param {String} input Payload of a tag 10 packet
 * @param {Integer} position
 *            Position to start reading from the input string
 * @param {Integer} len
 *            Length of the packet or the remaining length of
 *            input at position
 * @returns {module:packet.Marker} Object representation
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires enums
 */

Marker.prototype.read = function (bytes) {
  if (bytes[0] === 0x50 && // P
  bytes[1] === 0x47 && // G
  bytes[2] === 0x50) {
    // P
    return true;
  }
  // marker packet does not contain "PGP"
  return false;
};

exports.default = Marker;

},{"../enums":114}],129:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _signature = require('./signature');

var _signature2 = _interopRequireDefault(_signature);

var _keyid = require('../type/keyid');

var _keyid2 = _interopRequireDefault(_keyid);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the One-Pass Signature Packets (Tag 4)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.4|RFC4880 5.4}:
 * The One-Pass Signature packet precedes the signed data and contains
 * enough information to allow the receiver to begin calculating any
 * hashes needed to verify the signature.  It allows the Signature
 * packet to be placed at the end of the message, so that the signer
 * can compute the entire signed message in one pass.
 * @memberof module:packet
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires packet/signature
 * @requires type/keyid
 * @requires enums
 * @requires util
 */

function OnePassSignature() {
  /**
   * Packet type
   * @type {module:enums.packet}
   */
  this.tag = _enums2.default.packet.onePassSignature;
  /** A one-octet version number.  The current version is 3. */
  this.version = null;
  /**
   * A one-octet signature type.
   * Signature types are described in
   * {@link https://tools.ietf.org/html/rfc4880#section-5.2.1|RFC4880 Section 5.2.1}.
   */
  this.signatureType = null;
  /**
   * A one-octet number describing the hash algorithm used.
   * @see {@link https://tools.ietf.org/html/rfc4880#section-9.4|RFC4880 9.4}
   */
  this.hashAlgorithm = null;
  /**
   * A one-octet number describing the public-key algorithm used.
   * @see {@link https://tools.ietf.org/html/rfc4880#section-9.1|RFC4880 9.1}
   */
  this.publicKeyAlgorithm = null;
  /** An eight-octet number holding the Key ID of the signing key. */
  this.issuerKeyId = null;
  /**
   * A one-octet number holding a flag showing whether the signature is nested.
   * A zero value indicates that the next packet is another One-Pass Signature packet
   * that describes another signature to be applied to the same message data.
   */
  this.flags = null;
}

/**
 * parsing function for a one-pass signature packet (tag 4).
 * @param {Uint8Array} bytes payload of a tag 4 packet
 * @returns {module:packet.OnePassSignature} object representation
 */
OnePassSignature.prototype.read = function (bytes) {
  let mypos = 0;
  // A one-octet version number.  The current version is 3.
  this.version = bytes[mypos++];

  // A one-octet signature type.  Signature types are described in
  //   Section 5.2.1.
  this.signatureType = bytes[mypos++];

  // A one-octet number describing the hash algorithm used.
  this.hashAlgorithm = bytes[mypos++];

  // A one-octet number describing the public-key algorithm used.
  this.publicKeyAlgorithm = bytes[mypos++];

  // An eight-octet number holding the Key ID of the signing key.
  this.issuerKeyId = new _keyid2.default();
  this.issuerKeyId.read(bytes.subarray(mypos, mypos + 8));
  mypos += 8;

  // A one-octet number holding a flag showing whether the signature
  //   is nested.  A zero value indicates that the next packet is
  //   another One-Pass Signature packet that describes another
  //   signature to be applied to the same message data.
  this.flags = bytes[mypos++];
  return this;
};

/**
 * creates a string representation of a one-pass signature packet
 * @returns {Uint8Array} a Uint8Array representation of a one-pass signature packet
 */
OnePassSignature.prototype.write = function () {
  const start = new Uint8Array([3, _enums2.default.write(_enums2.default.signature, this.signatureType), _enums2.default.write(_enums2.default.hash, this.hashAlgorithm), _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm)]);

  const end = new Uint8Array([this.flags]);

  return _util2.default.concatUint8Array([start, this.issuerKeyId.write(), end]);
};

/**
 * Fix custom types after cloning
 */
OnePassSignature.prototype.postCloneTypeFix = function () {
  this.issuerKeyId = _keyid2.default.fromClone(this.issuerKeyId);
};

OnePassSignature.prototype.hash = function () {
  const version = this.version;
  this.version = 4;
  try {
    return _signature2.default.prototype.hash.apply(this, arguments);
  } finally {
    this.version = version;
  }
};
OnePassSignature.prototype.toHash = _signature2.default.prototype.toHash;
OnePassSignature.prototype.toSign = _signature2.default.prototype.toSign;
OnePassSignature.prototype.calculateTrailer = _signature2.default.prototype.calculateTrailer;

OnePassSignature.prototype.verify = async function () {
  const correspondingSig = await this.correspondingSig;
  if (!correspondingSig || correspondingSig.tag !== _enums2.default.packet.signature) {
    throw new Error('Corresponding signature packet missing');
  }
  if (correspondingSig.signatureType !== this.signatureType || correspondingSig.hashAlgorithm !== this.hashAlgorithm || correspondingSig.publicKeyAlgorithm !== this.publicKeyAlgorithm || !correspondingSig.issuerKeyId.equals(this.issuerKeyId)) {
    throw new Error('Corresponding signature packet does not match one-pass signature packet');
  }
  correspondingSig.hashed = this.hashed;
  return correspondingSig.verify.apply(correspondingSig, arguments);
};

exports.default = OnePassSignature;

},{"../enums":114,"../type/keyid":149,"../util":153,"./signature":137}],130:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/* eslint-disable callback-return */

/**
 * @fileoverview Functions for reading and writing packets
 * @requires web-stream-tools
 * @requires enums
 * @requires util
 * @module packet/packet
 */

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  readSimpleLength: function readSimpleLength(bytes) {
    let len = 0;
    let offset;
    const type = bytes[0];

    if (type < 192) {
      var _bytes = _slicedToArray(bytes, 1);

      len = _bytes[0];

      offset = 1;
    } else if (type < 255) {
      len = (bytes[0] - 192 << 8) + bytes[1] + 192;
      offset = 2;
    } else if (type === 255) {
      len = _util2.default.readNumber(bytes.subarray(1, 1 + 4));
      offset = 5;
    }

    return {
      len: len,
      offset: offset
    };
  },

  /**
   * Encodes a given integer of length to the openpgp length specifier to a
   * string
   *
   * @param {Integer} length The length to encode
   * @returns {Uint8Array} String with openpgp length representation
   */
  writeSimpleLength: function writeSimpleLength(length) {
    if (length < 192) {
      return new Uint8Array([length]);
    } else if (length > 191 && length < 8384) {
      /*
       * let a = (total data packet length) - 192 let bc = two octet
       * representation of a let d = b + 192
       */
      return new Uint8Array([(length - 192 >> 8) + 192, length - 192 & 0xFF]);
    }
    return _util2.default.concatUint8Array([new Uint8Array([255]), _util2.default.writeNumber(length, 4)]);
  },

  writePartialLength: function writePartialLength(power) {
    if (power < 0 || power > 30) {
      throw new Error('Partial Length power must be between 1 and 30');
    }
    return new Uint8Array([224 + power]);
  },

  writeTag: function writeTag(tag_type) {
    /* we're only generating v4 packet headers here */
    return new Uint8Array([0xC0 | tag_type]);
  },

  /**
   * Writes a packet header version 4 with the given tag_type and length to a
   * string
   *
   * @param {Integer} tag_type Tag type
   * @param {Integer} length Length of the payload
   * @returns {String} String of the header
   */
  writeHeader: function writeHeader(tag_type, length) {
    /* we're only generating v4 packet headers here */
    return _util2.default.concatUint8Array([this.writeTag(tag_type), this.writeSimpleLength(length)]);
  },

  /**
   * Writes a packet header Version 3 with the given tag_type and length to a
   * string
   *
   * @param {Integer} tag_type Tag type
   * @param {Integer} length Length of the payload
   * @returns {String} String of the header
   */
  writeOldHeader: function writeOldHeader(tag_type, length) {
    if (length < 256) {
      return new Uint8Array([0x80 | tag_type << 2, length]);
    } else if (length < 65536) {
      return _util2.default.concatUint8Array([new Uint8Array([0x80 | tag_type << 2 | 1]), _util2.default.writeNumber(length, 2)]);
    }
    return _util2.default.concatUint8Array([new Uint8Array([0x80 | tag_type << 2 | 2]), _util2.default.writeNumber(length, 4)]);
  },

  /**
   * Whether the packet type supports partial lengths per RFC4880
   * @param {Integer} tag_type Tag type
   * @returns {Boolean} String of the header
   */
  supportsStreaming: function supportsStreaming(tag_type) {
    return [_enums2.default.packet.literal, _enums2.default.packet.compressed, _enums2.default.packet.symmetricallyEncrypted, _enums2.default.packet.symEncryptedIntegrityProtected, _enums2.default.packet.symEncryptedAEADProtected].includes(tag_type);
  },

  /**
   * Generic static Packet Parser function
   *
   * @param {Uint8Array | ReadableStream<Uint8Array>} input Input stream as string
   * @param {Function} callback Function to call with the parsed packet
   * @returns {Boolean} Returns false if the stream was empty and parsing is done, and true otherwise.
   */
  read: async function read(input, streaming, callback) {
    const reader = _webStreamTools2.default.getReader(input);
    let writer;
    try {
      const peekedBytes = await reader.peekBytes(2);
      // some sanity checks
      if (!peekedBytes || peekedBytes.length < 2 || (peekedBytes[0] & 0x80) === 0) {
        throw new Error("Error during parsing. This message / key probably does not conform to a valid OpenPGP format.");
      }
      const headerByte = await reader.readByte();
      let tag = -1;
      let format = -1;
      let packet_length;

      format = 0; // 0 = old format; 1 = new format
      if ((headerByte & 0x40) !== 0) {
        format = 1;
      }

      let packet_length_type;
      if (format) {
        // new format header
        tag = headerByte & 0x3F; // bit 5-0
      } else {
        // old format header
        tag = (headerByte & 0x3F) >> 2; // bit 5-2
        packet_length_type = headerByte & 0x03; // bit 1-0
      }

      const supportsStreaming = this.supportsStreaming(tag);
      let packet = null;
      let callbackReturned;
      if (streaming && supportsStreaming) {
        const transform = new TransformStream();
        writer = _webStreamTools2.default.getWriter(transform.writable);
        packet = transform.readable;
        callbackReturned = callback({ tag, packet });
      } else {
        packet = [];
      }

      let wasPartialLength;
      do {
        if (!format) {
          // 4.2.1. Old Format Packet Lengths
          switch (packet_length_type) {
            case 0:
              // The packet has a one-octet length. The header is 2 octets
              // long.
              packet_length = await reader.readByte();
              break;
            case 1:
              // The packet has a two-octet length. The header is 3 octets
              // long.
              packet_length = (await reader.readByte()) << 8 | (await reader.readByte());
              break;
            case 2:
              // The packet has a four-octet length. The header is 5
              // octets long.
              packet_length = (await reader.readByte()) << 24 | (await reader.readByte()) << 16 | (await reader.readByte()) << 8 | (await reader.readByte());
              break;
            default:
              // 3 - The packet is of indeterminate length. The header is 1
              // octet long, and the implementation must determine how long
              // the packet is. If the packet is in a file, this means that
              // the packet extends until the end of the file. In general,
              // an implementation SHOULD NOT use indeterminate-length
              // packets except where the end of the data will be clear
              // from the context, and even then it is better to use a
              // definite length, or a new format header. The new format
              // headers described below have a mechanism for precisely
              // encoding data of indeterminate length.
              packet_length = Infinity;
              break;
          }
        } else {
          // 4.2.2. New Format Packet Lengths
          // 4.2.2.1. One-Octet Lengths
          const lengthByte = await reader.readByte();
          wasPartialLength = false;
          if (lengthByte < 192) {
            packet_length = lengthByte;
            // 4.2.2.2. Two-Octet Lengths
          } else if (lengthByte >= 192 && lengthByte < 224) {
            packet_length = (lengthByte - 192 << 8) + (await reader.readByte()) + 192;
            // 4.2.2.4. Partial Body Lengths
          } else if (lengthByte > 223 && lengthByte < 255) {
            packet_length = 1 << (lengthByte & 0x1F);
            wasPartialLength = true;
            if (!supportsStreaming) {
              throw new TypeError('This packet type does not support partial lengths.');
            }
            // 4.2.2.3. Five-Octet Lengths
          } else {
            packet_length = (await reader.readByte()) << 24 | (await reader.readByte()) << 16 | (await reader.readByte()) << 8 | (await reader.readByte());
          }
        }
        if (packet_length > 0) {
          let bytesRead = 0;
          while (true) {
            if (writer) await writer.ready;

            var _ref = await reader.read();

            const done = _ref.done,
                  value = _ref.value;

            if (done) {
              if (packet_length === Infinity) break;
              throw new Error('Unexpected end of packet');
            }
            const chunk = packet_length === Infinity ? value : value.subarray(0, packet_length - bytesRead);
            if (writer) await writer.write(chunk);else packet.push(chunk);
            bytesRead += value.length;
            if (bytesRead >= packet_length) {
              reader.unshift(value.subarray(packet_length - bytesRead + value.length));
              break;
            }
          }
        }
      } while (wasPartialLength);

      if (!writer) {
        packet = _util2.default.concatUint8Array(packet);
        await callback({ tag, packet });
      }
      const nextPacket = await reader.peekBytes(2);
      if (writer) {
        await writer.ready;
        await writer.close();
        await callbackReturned;
      }
      return !nextPacket || !nextPacket.length;
    } catch (e) {
      if (writer) {
        await writer.abort(e);
        return true;
      } else {
        throw e;
      }
    } finally {
      reader.releaseLock();
    }
  }
};

},{"../enums":114,"../util":153,"web-stream-tools":76}],131:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _all_packets = require('./all_packets');

var packets = _interopRequireWildcard(_all_packets);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This class represents a list of openpgp packets.
 * Take care when iterating over it - the packets themselves
 * are stored as numerical indices.
 * @memberof module:packet
 * @constructor
 * @extends Array
 */
/* eslint-disable callback-return */
/**
 * @requires web-stream-tools
 * @requires packet/all_packets
 * @requires packet/packet
 * @requires config
 * @requires enums
 * @requires util
 */

function List() {
  /**
   * The number of packets contained within the list.
   * @readonly
   * @type {Integer}
   */
  this.length = 0;
}

List.prototype = [];

/**
 * Reads a stream of binary data and interprents it as a list of packets.
 * @param {Uint8Array | ReadableStream<Uint8Array>} A Uint8Array of bytes.
 */
List.prototype.read = async function (bytes, streaming) {
  this.stream = _webStreamTools2.default.transformPair(bytes, async (readable, writable) => {
    const writer = _webStreamTools2.default.getWriter(writable);
    try {
      while (true) {
        await writer.ready;
        const done = await _packet2.default.read(readable, streaming, async parsed => {
          try {
            const tag = _enums2.default.read(_enums2.default.packet, parsed.tag);
            const packet = packets.newPacketFromTag(tag);
            packet.packets = new List();
            packet.fromStream = _util2.default.isStream(parsed.packet);
            await packet.read(parsed.packet, streaming);
            await writer.write(packet);
          } catch (e) {
            if (!_config2.default.tolerant || _packet2.default.supportsStreaming(parsed.tag)) {
              // The packets that support streaming are the ones that contain
              // message data. Those are also the ones we want to be more strict
              // about and throw on parse errors for.
              await writer.abort(e);
            }
            _util2.default.print_debug_error(e);
          }
        });
        if (done) {
          await writer.ready;
          await writer.close();
          return;
        }
      }
    } catch (e) {
      await writer.abort(e);
    }
  });

  // Wait until first few packets have been read
  const reader = _webStreamTools2.default.getReader(this.stream);
  while (true) {
    var _ref = await reader.read();

    const done = _ref.done,
          value = _ref.value;

    if (!done) {
      this.push(value);
    } else {
      this.stream = null;
    }
    if (done || _packet2.default.supportsStreaming(value.tag)) {
      break;
    }
  }
  reader.releaseLock();
};

/**
 * Creates a binary representation of openpgp objects contained within the
 * class instance.
 * @returns {Uint8Array} A Uint8Array containing valid openpgp packets.
 */
List.prototype.write = function () {
  const arr = [];

  for (let i = 0; i < this.length; i++) {
    const packetbytes = this[i].write();
    if (_util2.default.isStream(packetbytes) && _packet2.default.supportsStreaming(this[i].tag)) {
      let buffer = [];
      let bufferLength = 0;
      const minLength = 512;
      arr.push(_packet2.default.writeTag(this[i].tag));
      arr.push(_webStreamTools2.default.transform(packetbytes, value => {
        buffer.push(value);
        bufferLength += value.length;
        if (bufferLength >= minLength) {
          const powerOf2 = Math.min(Math.log(bufferLength) / Math.LN2 | 0, 30);
          const chunkSize = 2 ** powerOf2;
          const bufferConcat = _util2.default.concat([_packet2.default.writePartialLength(powerOf2)].concat(buffer));
          buffer = [bufferConcat.subarray(1 + chunkSize)];
          bufferLength = buffer[0].length;
          return bufferConcat.subarray(0, 1 + chunkSize);
        }
      }, () => _util2.default.concat([_packet2.default.writeSimpleLength(bufferLength)].concat(buffer))));
    } else {
      if (_util2.default.isStream(packetbytes)) {
        let length = 0;
        arr.push(_webStreamTools2.default.transform(_webStreamTools2.default.clone(packetbytes), value => {
          length += value.length;
        }, () => _packet2.default.writeHeader(this[i].tag, length)));
      } else {
        arr.push(_packet2.default.writeHeader(this[i].tag, packetbytes.length));
      }
      arr.push(packetbytes);
    }
  }

  return _util2.default.concat(arr);
};

/**
 * Adds a packet to the list. This is the only supported method of doing so;
 * writing to packetlist[i] directly will result in an error.
 * @param {Object} packet Packet to push
 */
List.prototype.push = function (packet) {
  if (!packet) {
    return;
  }

  packet.packets = packet.packets || new List();

  this[this.length] = packet;
  this.length++;
};

/**
 * Creates a new PacketList with all packets from the given types
 */
List.prototype.filterByTag = function (...args) {
  const filtered = new List();

  const handle = tag => packetType => tag === packetType;

  for (let i = 0; i < this.length; i++) {
    if (args.some(handle(this[i].tag))) {
      filtered.push(this[i]);
    }
  }

  return filtered;
};

/**
 * Traverses packet tree and returns first matching packet
 * @param  {module:enums.packet} type The packet type
 * @returns {module:packet/packet|undefined}
 */
List.prototype.findPacket = function (type) {
  return this.find(packet => packet.tag === type);
};

/**
 * Returns array of found indices by tag
 */
List.prototype.indexOfTag = function (...args) {
  const tagIndex = [];
  const that = this;

  const handle = tag => packetType => tag === packetType;

  for (let i = 0; i < this.length; i++) {
    if (args.some(handle(that[i].tag))) {
      tagIndex.push(i);
    }
  }
  return tagIndex;
};

/**
 * Concatenates packetlist or array of packets
 */
List.prototype.concat = function (packetlist) {
  if (packetlist) {
    for (let i = 0; i < packetlist.length; i++) {
      this.push(packetlist[i]);
    }
  }
  return this;
};

/**
 * Allocate a new packetlist from structured packetlist clone
 * See {@link https://w3c.github.io/html/infrastructure.html#safe-passing-of-structured-data}
 * @param {Object} packetClone packetlist clone
 * @returns {Object} new packetlist object with data from packetlist clone
 */
List.fromStructuredClone = function (packetlistClone) {
  const packetlist = new List();
  for (let i = 0; i < packetlistClone.length; i++) {
    const packet = packets.fromStructuredClone(packetlistClone[i]);
    packetlist.push(packet);
    if (packet.embeddedSignature) {
      packet.embeddedSignature = packets.fromStructuredClone(packet.embeddedSignature);
    }
    if (packet.packets.length !== 0) {
      packet.packets = this.fromStructuredClone(packet.packets);
    } else {
      packet.packets = new List();
    }
  }
  if (packetlistClone.stream) {
    packetlist.stream = _webStreamTools2.default.transform(packetlistClone.stream, packet => packets.fromStructuredClone(packet));
  }
  return packetlist;
};

exports.default = List;

},{"../config":80,"../enums":114,"../util":153,"./all_packets":123,"./packet":130,"web-stream-tools":76}],132:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sha = require('asmcrypto.js/dist_es5/hash/sha1/sha1');

var _sha2 = require('asmcrypto.js/dist_es5/hash/sha256/sha256');

var _keyid = require('../type/keyid');

var _keyid2 = _interopRequireDefault(_keyid);

var _mpi = require('../type/mpi');

var _mpi2 = _interopRequireDefault(_mpi);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Key Material Packet (Tag 5,6,7,14)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.5|RFC4480 5.5}:
 * A key material packet contains all the information about a public or
 * private key.  There are four variants of this packet type, and two
 * major versions.
 *
 * A Public-Key packet starts a series of packets that forms an OpenPGP
 * key (sometimes called an OpenPGP certificate).
 * @memberof module:packet
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires type/keyid
 * @requires type/mpi
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 */

function PublicKey(date = new Date()) {
  /**
   * Packet type
   * @type {module:enums.packet}
   */
  this.tag = _enums2.default.packet.publicKey;
  /**
   * Packet version
   * @type {Integer}
   */
  this.version = _config2.default.aead_protect && _config2.default.aead_protect_version === 4 ? 5 : 4;
  /**
   * Key creation date.
   * @type {Date}
   */
  this.created = _util2.default.normalizeDate(date);
  /**
   * Public key algorithm.
   * @type {String}
   */
  this.algorithm = null;
  /**
   * Algorithm specific params
   * @type {Array<Object>}
   */
  this.params = [];
  /**
   * Time until expiration in days (V3 only)
   * @type {Integer}
   */
  this.expirationTimeV3 = 0;
  /**
   * Fingerprint in lowercase hex
   * @type {String}
   */
  this.fingerprint = null;
  /**
   * Keyid
   * @type {module:type/keyid}
   */
  this.keyid = null;
}

/**
 * Internal Parser for public keys as specified in {@link https://tools.ietf.org/html/rfc4880#section-5.5.2|RFC 4880 section 5.5.2 Public-Key Packet Formats}
 * called by read_tag&lt;num&gt;
 * @param {Uint8Array} bytes Input array to read the packet from
 * @returns {Object} This object with attributes set by the parser
 */
PublicKey.prototype.read = function (bytes) {
  let pos = 0;
  // A one-octet version number (3, 4 or 5).
  this.version = bytes[pos++];

  if (this.version === 4 || this.version === 5) {
    // - A four-octet number denoting the time that the key was created.
    this.created = _util2.default.readDate(bytes.subarray(pos, pos + 4));
    pos += 4;

    // - A one-octet number denoting the public-key algorithm of this key.
    this.algorithm = _enums2.default.read(_enums2.default.publicKey, bytes[pos++]);
    const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);

    if (this.version === 5) {
      // - A four-octet scalar octet count for the following key material.
      pos += 4;
    }

    // - A series of values comprising the key material.  This is
    //   algorithm-specific and described in section XXXX.
    const types = _crypto2.default.getPubKeyParamTypes(algo);
    this.params = _crypto2.default.constructParams(types);

    for (let i = 0; i < types.length && pos < bytes.length; i++) {
      pos += this.params[i].read(bytes.subarray(pos, bytes.length));
      if (pos > bytes.length) {
        throw new Error('Error reading MPI @:' + pos);
      }
    }

    return pos;
  }
  throw new Error('Version ' + this.version + ' of the key packet is unsupported.');
};

/**
 * Alias of read()
 * @see module:packet.PublicKey#read
 */
PublicKey.prototype.readPublicKey = PublicKey.prototype.read;

/**
 * Same as write_private_key, but has less information because of
 * public key.
 * @returns {Uint8Array} OpenPGP packet body contents,
 */
PublicKey.prototype.write = function () {
  const arr = [];
  // Version
  arr.push(new Uint8Array([this.version]));
  arr.push(_util2.default.writeDate(this.created));
  // A one-octet number denoting the public-key algorithm of this key
  const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);
  arr.push(new Uint8Array([algo]));

  const paramCount = _crypto2.default.getPubKeyParamTypes(algo).length;
  const params = _util2.default.concatUint8Array(this.params.slice(0, paramCount).map(param => param.write()));
  if (this.version === 5) {
    // A four-octet scalar octet count for the following key material
    arr.push(_util2.default.writeNumber(params.length, 4));
  }
  // Algorithm-specific params
  arr.push(params);
  return _util2.default.concatUint8Array(arr);
};

/**
 * Alias of write()
 * @see module:packet.PublicKey#write
 */
PublicKey.prototype.writePublicKey = PublicKey.prototype.write;

/**
 * Write an old version packet - it's used by some of the internal routines.
 */
PublicKey.prototype.writeOld = function () {
  const bytes = this.writePublicKey();

  return _util2.default.concatUint8Array([new Uint8Array([0x99]), _util2.default.writeNumber(bytes.length, 2), bytes]);
};

/**
 * Check whether secret-key data is available in decrypted form. Returns null for public keys.
 * @returns {Boolean|null}
 */
PublicKey.prototype.isDecrypted = function () {
  return null;
};

/**
 * Returns the creation time of the key
 * @returns {Date}
 */
PublicKey.prototype.getCreationTime = function () {
  return this.created;
};

/**
 * Calculates the key id of the key
 * @returns {String} A 8 byte key id
 */
PublicKey.prototype.getKeyId = function () {
  if (this.keyid) {
    return this.keyid;
  }
  this.keyid = new _keyid2.default();
  if (this.version === 5) {
    this.keyid.read(_util2.default.hex_to_Uint8Array(this.getFingerprint()).subarray(0, 8));
  } else if (this.version === 4) {
    this.keyid.read(_util2.default.hex_to_Uint8Array(this.getFingerprint()).subarray(12, 20));
  }
  return this.keyid;
};

/**
 * Calculates the fingerprint of the key
 * @returns {Uint8Array} A Uint8Array containing the fingerprint
 */
PublicKey.prototype.getFingerprintBytes = function () {
  if (this.fingerprint) {
    return this.fingerprint;
  }
  let toHash;
  if (this.version === 5) {
    const bytes = this.writePublicKey();
    toHash = _util2.default.concatUint8Array([new Uint8Array([0x9A]), _util2.default.writeNumber(bytes.length, 4), bytes]);
    this.fingerprint = _sha2.Sha256.bytes(toHash);
  } else if (this.version === 4) {
    toHash = this.writeOld();
    this.fingerprint = _sha.Sha1.bytes(toHash);
  }
  return this.fingerprint;
};

/**
 * Calculates the fingerprint of the key
 * @returns {String} A string containing the fingerprint in lowercase hex
 */
PublicKey.prototype.getFingerprint = function () {
  return _util2.default.Uint8Array_to_hex(this.getFingerprintBytes());
};

/**
 * Calculates whether two keys have the same fingerprint without actually calculating the fingerprint
 * @returns {Boolean} Whether the two keys have the same version and public key data
 */
PublicKey.prototype.hasSameFingerprintAs = function (other) {
  return this.version === other.version && _util2.default.equalsUint8Array(this.writePublicKey(), other.writePublicKey());
};

/**
 * Returns algorithm information
 * @returns {Object} An object of the form {algorithm: String, bits:int, curve:String}
 */
PublicKey.prototype.getAlgorithmInfo = function () {
  const result = {};
  result.algorithm = this.algorithm;
  if (this.params[0] instanceof _mpi2.default) {
    result.bits = this.params[0].byteLength() * 8;
  } else {
    result.curve = this.params[0].getName();
  }
  return result;
};

/**
 * Fix custom types after cloning
 */
PublicKey.prototype.postCloneTypeFix = function () {
  const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);
  const types = _crypto2.default.getPubKeyParamTypes(algo);
  for (let i = 0; i < types.length; i++) {
    const param = this.params[i];
    this.params[i] = types[i].fromClone(param);
  }
  if (this.keyid) {
    this.keyid = _keyid2.default.fromClone(this.keyid);
  }
};

exports.default = PublicKey;

},{"../config":80,"../crypto":95,"../enums":114,"../type/keyid":149,"../type/mpi":150,"../util":153,"asmcrypto.js/dist_es5/hash/sha1/sha1":12,"asmcrypto.js/dist_es5/hash/sha256/sha256":14}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keyid = require('../type/keyid');

var _keyid2 = _interopRequireDefault(_keyid);

var _mpi = require('../type/mpi');

var _mpi2 = _interopRequireDefault(_mpi);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Public-Key Encrypted Session Key Packets (Tag 1)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.1|RFC4880 5.1}:
 * A Public-Key Encrypted Session Key packet holds the session key
 * used to encrypt a message. Zero or more Public-Key Encrypted Session Key
 * packets and/or Symmetric-Key Encrypted Session Key packets may precede a
 * Symmetrically Encrypted Data Packet, which holds an encrypted message. The
 * message is encrypted with the session key, and the session key is itself
 * encrypted and stored in the Encrypted Session Key packet(s). The
 * Symmetrically Encrypted Data Packet is preceded by one Public-Key Encrypted
 * Session Key packet for each OpenPGP key to which the message is encrypted.
 * The recipient of the message finds a session key that is encrypted to their
 * public key, decrypts the session key, and then uses the session key to
 * decrypt the message.
 * @memberof module:packet
 * @constructor
 */
function PublicKeyEncryptedSessionKey() {
  this.tag = _enums2.default.packet.publicKeyEncryptedSessionKey;
  this.version = 3;

  this.publicKeyId = new _keyid2.default();
  this.publicKeyAlgorithm = null;

  this.sessionKey = null;
  this.sessionKeyAlgorithm = null;

  /** @type {Array<module:type/mpi>} */
  this.encrypted = [];
}

/**
 * Parsing function for a publickey encrypted session key packet (tag 1).
 *
 * @param {Uint8Array} input Payload of a tag 1 packet
 * @param {Integer} position Position to start reading from the input string
 * @param {Integer} len Length of the packet or the remaining length of
 *            input at position
 * @returns {module:packet.PublicKeyEncryptedSessionKey} Object representation
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires type/keyid
 * @requires type/mpi
 * @requires crypto
 * @requires enums
 * @requires util
 */

PublicKeyEncryptedSessionKey.prototype.read = function (bytes) {
  this.version = bytes[0];
  this.publicKeyId.read(bytes.subarray(1, bytes.length));
  this.publicKeyAlgorithm = _enums2.default.read(_enums2.default.publicKey, bytes[9]);

  let i = 10;

  const algo = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  const types = _crypto2.default.getEncSessionKeyParamTypes(algo);
  this.encrypted = _crypto2.default.constructParams(types);

  for (let j = 0; j < types.length; j++) {
    i += this.encrypted[j].read(bytes.subarray(i, bytes.length));
  }
};

/**
 * Create a string representation of a tag 1 packet
 *
 * @returns {Uint8Array} The Uint8Array representation
 */
PublicKeyEncryptedSessionKey.prototype.write = function () {
  const arr = [new Uint8Array([this.version]), this.publicKeyId.write(), new Uint8Array([_enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm)])];

  for (let i = 0; i < this.encrypted.length; i++) {
    arr.push(this.encrypted[i].write());
  }

  return _util2.default.concatUint8Array(arr);
};

/**
 * Encrypt session key packet
 * @param {module:packet.PublicKey} key Public key
 * @returns {Promise<Boolean>}
 * @async
 */
PublicKeyEncryptedSessionKey.prototype.encrypt = async function (key) {
  let data = String.fromCharCode(_enums2.default.write(_enums2.default.symmetric, this.sessionKeyAlgorithm));

  data += _util2.default.Uint8Array_to_str(this.sessionKey);
  data += _util2.default.Uint8Array_to_str(_util2.default.write_checksum(this.sessionKey));

  let toEncrypt;
  const algo = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  if (algo === _enums2.default.publicKey.ecdh) {
    toEncrypt = new _mpi2.default(_crypto2.default.pkcs5.encode(data));
  } else {
    toEncrypt = new _mpi2.default((await _crypto2.default.pkcs1.eme.encode(data, key.params[0].byteLength())));
  }

  this.encrypted = await _crypto2.default.publicKeyEncrypt(algo, key.params, toEncrypt, key.getFingerprintBytes());
  return true;
};

/**
 * Decrypts the session key (only for public key encrypted session key
 * packets (tag 1)
 *
 * @param {module:packet.SecretKey} key
 *            Private key with secret params unlocked
 * @returns {Promise<Boolean>}
 * @async
 */
PublicKeyEncryptedSessionKey.prototype.decrypt = async function (key) {
  const algo = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  const result = new _mpi2.default((await _crypto2.default.publicKeyDecrypt(algo, key.params, this.encrypted, key.getFingerprintBytes())));

  let checksum;
  let decoded;
  if (algo === _enums2.default.publicKey.ecdh) {
    decoded = _crypto2.default.pkcs5.decode(result.toString());
    checksum = _util2.default.str_to_Uint8Array(decoded.substr(decoded.length - 2));
  } else {
    decoded = _crypto2.default.pkcs1.eme.decode(result.toString());
    checksum = result.toUint8Array().slice(result.byteLength() - 2);
  }

  key = _util2.default.str_to_Uint8Array(decoded.substring(1, decoded.length - 2));

  if (!_util2.default.equalsUint8Array(checksum, _util2.default.write_checksum(key))) {
    throw new Error('Decryption error');
  } else {
    this.sessionKey = key;
    this.sessionKeyAlgorithm = _enums2.default.read(_enums2.default.symmetric, decoded.charCodeAt(0));
  }
  return true;
};

/**
 * Fix custom types after cloning
 */
PublicKeyEncryptedSessionKey.prototype.postCloneTypeFix = function () {
  this.publicKeyId = _keyid2.default.fromClone(this.publicKeyId);
  const algo = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  const types = _crypto2.default.getEncSessionKeyParamTypes(algo);
  for (let i = 0; i < this.encrypted.length; i++) {
    this.encrypted[i] = types[i].fromClone(this.encrypted[i]);
  }
};

exports.default = PublicKeyEncryptedSessionKey;

},{"../crypto":95,"../enums":114,"../type/keyid":149,"../type/mpi":150,"../util":153}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _public_key = require('./public_key');

var _public_key2 = _interopRequireDefault(_public_key);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A Public-Subkey packet (tag 14) has exactly the same format as a
 * Public-Key packet, but denotes a subkey.  One or more subkeys may be
 * associated with a top-level key.  By convention, the top-level key
 * provides signature services, and the subkeys provide encryption
 * services.
 * @memberof module:packet
 * @constructor
 * @extends module:packet.PublicKey
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires packet/public_key
 * @requires enums
 */

function PublicSubkey() {
  _public_key2.default.call(this);
  this.tag = _enums2.default.packet.publicSubkey;
}

PublicSubkey.prototype = new _public_key2.default();
PublicSubkey.prototype.constructor = PublicSubkey;

exports.default = PublicSubkey;

},{"../enums":114,"./public_key":132}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _public_key = require('./public_key');

var _public_key2 = _interopRequireDefault(_public_key);

var _keyid = require('../type/keyid.js');

var _keyid2 = _interopRequireDefault(_keyid);

var _s2k = require('../type/s2k');

var _s2k2 = _interopRequireDefault(_s2k);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A Secret-Key packet contains all the information that is found in a
 * Public-Key packet, including the public-key material, but also
 * includes the secret-key material after all the public-key fields.
 * @memberof module:packet
 * @constructor
 * @extends module:packet.PublicKey
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires packet/public_key
 * @requires type/keyid
 * @requires type/s2k
 * @requires crypto
 * @requires enums
 * @requires util
 */

function SecretKey(date = new Date()) {
  _public_key2.default.call(this, date);
  /**
   * Packet type
   * @type {module:enums.packet}
   */
  this.tag = _enums2.default.packet.secretKey;
  /**
   * Encrypted secret-key data
   */
  this.encrypted = null;
  /**
   * Indicator if secret-key data is encrypted. `this.isEncrypted === false` means data is available in decrypted form.
   */
  this.isEncrypted = null;
}

SecretKey.prototype = new _public_key2.default();
SecretKey.prototype.constructor = SecretKey;

// Helper function

function parse_cleartext_params(cleartext, algorithm) {
  const algo = _enums2.default.write(_enums2.default.publicKey, algorithm);
  const types = _crypto2.default.getPrivKeyParamTypes(algo);
  const params = _crypto2.default.constructParams(types);
  let p = 0;

  for (let i = 0; i < types.length && p < cleartext.length; i++) {
    p += params[i].read(cleartext.subarray(p, cleartext.length));
    if (p > cleartext.length) {
      throw new Error('Error reading param @:' + p);
    }
  }

  return params;
}

function write_cleartext_params(params, algorithm) {
  const arr = [];
  const algo = _enums2.default.write(_enums2.default.publicKey, algorithm);
  const numPublicParams = _crypto2.default.getPubKeyParamTypes(algo).length;

  for (let i = numPublicParams; i < params.length; i++) {
    arr.push(params[i].write());
  }

  return _util2.default.concatUint8Array(arr);
}

// 5.5.3.  Secret-Key Packet Formats

/**
 * Internal parser for private keys as specified in
 * {@link https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-04#section-5.5.3|RFC4880bis-04 section 5.5.3}
 * @param {String} bytes Input string to read the packet from
 */
SecretKey.prototype.read = function (bytes) {
  // - A Public-Key or Public-Subkey packet, as described above.
  const len = this.readPublicKey(bytes);

  bytes = bytes.subarray(len, bytes.length);

  // - One octet indicating string-to-key usage conventions.  Zero
  //   indicates that the secret-key data is not encrypted.  255 or 254
  //   indicates that a string-to-key specifier is being given.  Any
  //   other value is a symmetric-key encryption algorithm identifier.
  const isEncrypted = bytes[0];

  if (isEncrypted) {
    this.encrypted = bytes;
    this.isEncrypted = true;
  } else {
    // - Plain or encrypted multiprecision integers comprising the secret
    //   key data.  These algorithm-specific fields are as described
    //   below.
    const cleartext = bytes.subarray(1, -2);
    if (!_util2.default.equalsUint8Array(_util2.default.write_checksum(cleartext), bytes.subarray(-2))) {
      throw new Error('Key checksum mismatch');
    }
    const privParams = parse_cleartext_params(cleartext, this.algorithm);
    this.params = this.params.concat(privParams);
    this.isEncrypted = false;
  }
};

/**
 * Creates an OpenPGP key packet for the given key.
 * @returns {String} A string of bytes containing the secret key OpenPGP packet
 */
SecretKey.prototype.write = function () {
  const arr = [this.writePublicKey()];

  if (!this.encrypted) {
    arr.push(new Uint8Array([0]));
    const cleartextParams = write_cleartext_params(this.params, this.algorithm);
    arr.push(cleartextParams);
    arr.push(_util2.default.write_checksum(cleartextParams));
  } else {
    arr.push(this.encrypted);
  }

  return _util2.default.concatUint8Array(arr);
};

/**
 * Check whether secret-key data is available in decrypted form. Returns null for public keys.
 * @returns {Boolean|null}
 */
SecretKey.prototype.isDecrypted = function () {
  return this.isEncrypted === false;
};

/**
 * Encrypt the payload. By default, we use aes256 and iterated, salted string
 * to key specifier. If the key is in a decrypted state (isEncrypted === false)
 * and the passphrase is empty or undefined, the key will be set as not encrypted.
 * This can be used to remove passphrase protection after calling decrypt().
 * @param {String} passphrase
 * @returns {Promise<Boolean>}
 * @async
 */
SecretKey.prototype.encrypt = async function (passphrase) {
  if (this.isDecrypted() && this.encrypted) {
    // gnu-dummy
    return false;
  }

  if (this.isDecrypted() && !passphrase) {
    this.encrypted = null;
    return false;
  } else if (!passphrase) {
    throw new Error('The key must be decrypted before removing passphrase protection.');
  }

  const s2k = new _s2k2.default();
  s2k.salt = await _crypto2.default.random.getRandomBytes(8);
  const symmetric = 'aes256';
  const cleartext = write_cleartext_params(this.params, this.algorithm);
  const key = await produceEncryptionKey(s2k, passphrase, symmetric);
  const blockLen = _crypto2.default.cipher[symmetric].blockSize;
  const iv = await _crypto2.default.random.getRandomBytes(blockLen);

  let arr;

  if (this.version === 5) {
    const aead = 'eax';
    const optionalFields = _util2.default.concatUint8Array([new Uint8Array([_enums2.default.write(_enums2.default.symmetric, symmetric), _enums2.default.write(_enums2.default.aead, aead)]), s2k.write(), iv]);
    arr = [new Uint8Array([253, optionalFields.length])];
    arr.push(optionalFields);
    const mode = _crypto2.default[aead];
    const modeInstance = await mode(symmetric, key);
    const encrypted = await modeInstance.encrypt(cleartext, iv.subarray(0, mode.ivLength), new Uint8Array());
    arr.push(_util2.default.writeNumber(encrypted.length, 4));
    arr.push(encrypted);
  } else {
    arr = [new Uint8Array([254, _enums2.default.write(_enums2.default.symmetric, symmetric)])];
    arr.push(s2k.write());
    arr.push(iv);
    arr.push(_crypto2.default.cfb.encrypt(symmetric, key, _util2.default.concatUint8Array([cleartext, await _crypto2.default.hash.sha1(cleartext)]), iv));
  }

  this.encrypted = _util2.default.concatUint8Array(arr);
  return true;
};

async function produceEncryptionKey(s2k, passphrase, algorithm) {
  return s2k.produce_key(passphrase, _crypto2.default.cipher[algorithm].keySize);
}

/**
 * Decrypts the private key params which are needed to use the key.
 * {@link module:packet.SecretKey.isDecrypted} should be false, as
 * otherwise calls to this function will throw an error.
 * @param {String} passphrase The passphrase for this private key as string
 * @returns {Promise<Boolean>}
 * @async
 */
SecretKey.prototype.decrypt = async function (passphrase) {
  if (this.isDecrypted()) {
    throw new Error('Key packet is already decrypted.');
  }

  let i = 0;
  let symmetric;
  let aead;
  let key;

  const s2k_usage = this.encrypted[i++];

  // - Only for a version 5 packet, a one-octet scalar octet count of
  //   the next 4 optional fields.
  if (this.version === 5) {
    i++;
  }

  // - [Optional] If string-to-key usage octet was 255, 254, or 253, a
  //   one-octet symmetric encryption algorithm.
  if (s2k_usage === 255 || s2k_usage === 254 || s2k_usage === 253) {
    symmetric = this.encrypted[i++];
    symmetric = _enums2.default.read(_enums2.default.symmetric, symmetric);

    // - [Optional] If string-to-key usage octet was 253, a one-octet
    //   AEAD algorithm.
    if (s2k_usage === 253) {
      aead = this.encrypted[i++];
      aead = _enums2.default.read(_enums2.default.aead, aead);
    }

    // - [Optional] If string-to-key usage octet was 255, 254, or 253, a
    //   string-to-key specifier.  The length of the string-to-key
    //   specifier is implied by its type, as described above.
    const s2k = new _s2k2.default();
    i += s2k.read(this.encrypted.subarray(i, this.encrypted.length));

    if (s2k.type === 'gnu-dummy') {
      this.isEncrypted = false;
      return false;
    }
    key = await produceEncryptionKey(s2k, passphrase, symmetric);
  } else {
    symmetric = s2k_usage;
    symmetric = _enums2.default.read(_enums2.default.symmetric, symmetric);
    key = await _crypto2.default.hash.md5(passphrase);
  }

  // - [Optional] If secret data is encrypted (string-to-key usage octet
  //   not zero), an Initial Vector (IV) of the same length as the
  //   cipher's block size.
  const iv = this.encrypted.subarray(i, i + _crypto2.default.cipher[symmetric].blockSize);

  i += iv.length;

  // - Only for a version 5 packet, a four-octet scalar octet count for
  //   the following key material.
  if (this.version === 5) {
    i += 4;
  }

  const ciphertext = this.encrypted.subarray(i, this.encrypted.length);
  let cleartext;
  if (aead) {
    const mode = _crypto2.default[aead];
    try {
      const modeInstance = await mode(symmetric, key);
      cleartext = await modeInstance.decrypt(ciphertext, iv.subarray(0, mode.ivLength), new Uint8Array());
    } catch (err) {
      if (err.message === 'Authentication tag mismatch') {
        throw new Error('Incorrect key passphrase: ' + err.message);
      }
    }
  } else {
    const cleartextWithHash = await _crypto2.default.cfb.decrypt(symmetric, key, ciphertext, iv);

    let hash;
    let hashlen;
    if (s2k_usage === 255) {
      hashlen = 2;
      cleartext = cleartextWithHash.subarray(0, -hashlen);
      hash = _util2.default.write_checksum(cleartext);
    } else {
      hashlen = 20;
      cleartext = cleartextWithHash.subarray(0, -hashlen);
      hash = await _crypto2.default.hash.sha1(cleartext);
    }

    if (!_util2.default.equalsUint8Array(hash, cleartextWithHash.subarray(-hashlen))) {
      throw new Error('Incorrect key passphrase');
    }
  }

  const privParams = parse_cleartext_params(cleartext, this.algorithm);
  this.params = this.params.concat(privParams);
  this.isEncrypted = false;
  this.encrypted = null;

  return true;
};

SecretKey.prototype.generate = async function (bits, curve) {
  const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);
  this.params = await _crypto2.default.generateParams(algo, bits, curve);
  this.isEncrypted = false;
};

/**
 * Clear private params, return to initial state
 */
SecretKey.prototype.clearPrivateParams = function () {
  if (!this.encrypted) {
    throw new Error('If secret key is not encrypted, clearing private params is irreversible.');
  }
  const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);
  this.params = this.params.slice(0, _crypto2.default.getPubKeyParamTypes(algo).length);
  this.isEncrypted = true;
};

/**
 * Fix custom types after cloning
 */
SecretKey.prototype.postCloneTypeFix = function () {
  const algo = _enums2.default.write(_enums2.default.publicKey, this.algorithm);
  const types = [].concat(_crypto2.default.getPubKeyParamTypes(algo), _crypto2.default.getPrivKeyParamTypes(algo));
  for (let i = 0; i < this.params.length; i++) {
    const param = this.params[i];
    this.params[i] = types[i].fromClone(param);
  }
  if (this.keyid) {
    this.keyid = _keyid2.default.fromClone(this.keyid);
  }
};

exports.default = SecretKey;

},{"../crypto":95,"../enums":114,"../type/keyid.js":149,"../type/s2k":152,"../util":153,"./public_key":132}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _secret_key = require('./secret_key');

var _secret_key2 = _interopRequireDefault(_secret_key);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A Secret-Subkey packet (tag 7) is the subkey analog of the Secret
 * Key packet and has exactly the same format.
 * @memberof module:packet
 * @constructor
 * @extends module:packet.SecretKey
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires packet/secret_key
 * @requires enums
 */

function SecretSubkey(date = new Date()) {
  _secret_key2.default.call(this, date);
  this.tag = _enums2.default.packet.secretSubkey;
}

SecretSubkey.prototype = new _secret_key2.default();
SecretSubkey.prototype.constructor = SecretSubkey;

exports.default = SecretSubkey;

},{"../enums":114,"./secret_key":135}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _keyid = require('../type/keyid.js');

var _keyid2 = _interopRequireDefault(_keyid);

var _mpi = require('../type/mpi.js');

var _mpi2 = _interopRequireDefault(_mpi);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Signature Packet (Tag 2)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.2|RFC4480 5.2}:
 * A Signature packet describes a binding between some public key and
 * some data.  The most common signatures are a signature of a file or a
 * block of text, and a signature that is a certification of a User ID.
 * @memberof module:packet
 * @constructor
 * @param {Date} date the creation date of the signature
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires packet/packet
 * @requires type/keyid
 * @requires type/mpi
 * @requires crypto
 * @requires enums
 * @requires util
 */

function Signature(date = new Date()) {
  this.tag = _enums2.default.packet.signature;
  this.version = 4;
  this.signatureType = null;
  this.hashAlgorithm = null;
  this.publicKeyAlgorithm = null;

  this.signatureData = null;
  this.unhashedSubpackets = [];
  this.signedHashValue = null;

  this.created = _util2.default.normalizeDate(date);
  this.signatureExpirationTime = null;
  this.signatureNeverExpires = true;
  this.exportable = null;
  this.trustLevel = null;
  this.trustAmount = null;
  this.regularExpression = null;
  this.revocable = null;
  this.keyExpirationTime = null;
  this.keyNeverExpires = null;
  this.preferredSymmetricAlgorithms = null;
  this.revocationKeyClass = null;
  this.revocationKeyAlgorithm = null;
  this.revocationKeyFingerprint = null;
  this.issuerKeyId = new _keyid2.default();
  this.notations = [];
  this.preferredHashAlgorithms = null;
  this.preferredCompressionAlgorithms = null;
  this.keyServerPreferences = null;
  this.preferredKeyServer = null;
  this.isPrimaryUserID = null;
  this.policyURI = null;
  this.keyFlags = null;
  this.signersUserId = null;
  this.reasonForRevocationFlag = null;
  this.reasonForRevocationString = null;
  this.features = null;
  this.signatureTargetPublicKeyAlgorithm = null;
  this.signatureTargetHashAlgorithm = null;
  this.signatureTargetHash = null;
  this.embeddedSignature = null;
  this.issuerKeyVersion = null;
  this.issuerFingerprint = null;
  this.preferredAeadAlgorithms = null;

  this.verified = null;
  this.revoked = null;
}

/**
 * parsing function for a signature packet (tag 2).
 * @param {String} bytes payload of a tag 2 packet
 * @param {Integer} position position to start reading from the bytes string
 * @param {Integer} len length of the packet or the remaining length of bytes at position
 * @returns {module:packet.Signature} object representation
 */
Signature.prototype.read = function (bytes) {
  let i = 0;
  this.version = bytes[i++];

  if (this.version !== 4) {
    throw new Error('Version ' + this.version + ' of the signature is unsupported.');
  }

  this.signatureType = bytes[i++];
  this.publicKeyAlgorithm = bytes[i++];
  this.hashAlgorithm = bytes[i++];

  // hashed subpackets
  i += this.read_sub_packets(bytes.subarray(i, bytes.length), true);

  // A V4 signature hashes the packet body
  // starting from its first field, the version number, through the end
  // of the hashed subpacket data.  Thus, the fields hashed are the
  // signature version, the signature type, the public-key algorithm, the
  // hash algorithm, the hashed subpacket length, and the hashed
  // subpacket body.
  this.signatureData = bytes.subarray(0, i);

  // unhashed subpackets
  i += this.read_sub_packets(bytes.subarray(i, bytes.length), false);

  // Two-octet field holding left 16 bits of signed hash value.
  this.signedHashValue = bytes.subarray(i, i + 2);
  i += 2;

  this.signature = bytes.subarray(i, bytes.length);
};

Signature.prototype.write = function () {
  const arr = [];
  arr.push(this.signatureData);
  arr.push(this.write_unhashed_sub_packets());
  arr.push(this.signedHashValue);
  arr.push(_webStreamTools2.default.clone(this.signature));
  return _util2.default.concat(arr);
};

/**
 * Signs provided data. This needs to be done prior to serialization.
 * @param {module:packet.SecretKey} key private key used to sign the message.
 * @param {Object} data Contains packets to be signed.
 * @returns {Promise<Boolean>}
 * @async
 */
Signature.prototype.sign = async function (key, data) {
  const signatureType = _enums2.default.write(_enums2.default.signature, this.signatureType);
  const publicKeyAlgorithm = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  const hashAlgorithm = _enums2.default.write(_enums2.default.hash, this.hashAlgorithm);

  const arr = [new Uint8Array([4, signatureType, publicKeyAlgorithm, hashAlgorithm])];

  if (key.version === 5) {
    // We could also generate this subpacket for version 4 keys, but for
    // now we don't.
    this.issuerKeyVersion = key.version;
    this.issuerFingerprint = key.getFingerprintBytes();
  }

  this.issuerKeyId = key.getKeyId();

  // Add hashed subpackets
  arr.push(this.write_hashed_sub_packets());

  this.signatureData = _util2.default.concat(arr);

  const toHash = this.toHash(signatureType, data);
  const hash = await this.hash(signatureType, data, toHash);

  this.signedHashValue = _webStreamTools2.default.slice(_webStreamTools2.default.clone(hash), 0, 2);

  const params = key.params;
  this.signature = _webStreamTools2.default.fromAsync(async () => _crypto2.default.signature.sign(publicKeyAlgorithm, hashAlgorithm, params, toHash, (await _webStreamTools2.default.readToEnd(hash))));

  // Store the fact that this signature is valid, e.g. for when we call `await
  // getLatestValidSignature(this.revocationSignatures, key, data)` later. Note
  // that this only holds up if the key and data passed to verify are the same
  // as the ones passed to sign.
  this.verified = true;
  return true;
};

/**
 * Creates Uint8Array of bytes of all subpacket data except Issuer and Embedded Signature subpackets
 * @returns {Uint8Array} subpacket data
 */
Signature.prototype.write_hashed_sub_packets = function () {
  const sub = _enums2.default.signatureSubpacket;
  const arr = [];
  let bytes;
  if (this.created !== null) {
    arr.push(write_sub_packet(sub.signature_creation_time, _util2.default.writeDate(this.created)));
  }
  if (this.signatureExpirationTime !== null) {
    arr.push(write_sub_packet(sub.signature_expiration_time, _util2.default.writeNumber(this.signatureExpirationTime, 4)));
  }
  if (this.exportable !== null) {
    arr.push(write_sub_packet(sub.exportable_certification, new Uint8Array([this.exportable ? 1 : 0])));
  }
  if (this.trustLevel !== null) {
    bytes = new Uint8Array([this.trustLevel, this.trustAmount]);
    arr.push(write_sub_packet(sub.trust_signature, bytes));
  }
  if (this.regularExpression !== null) {
    arr.push(write_sub_packet(sub.regular_expression, this.regularExpression));
  }
  if (this.revocable !== null) {
    arr.push(write_sub_packet(sub.revocable, new Uint8Array([this.revocable ? 1 : 0])));
  }
  if (this.keyExpirationTime !== null) {
    arr.push(write_sub_packet(sub.key_expiration_time, _util2.default.writeNumber(this.keyExpirationTime, 4)));
  }
  if (this.preferredSymmetricAlgorithms !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.preferredSymmetricAlgorithms));
    arr.push(write_sub_packet(sub.preferred_symmetric_algorithms, bytes));
  }
  if (this.revocationKeyClass !== null) {
    bytes = new Uint8Array([this.revocationKeyClass, this.revocationKeyAlgorithm]);
    bytes = _util2.default.concat([bytes, this.revocationKeyFingerprint]);
    arr.push(write_sub_packet(sub.revocation_key, bytes));
  }
  this.notations.forEach(([name, value]) => {
    bytes = [new Uint8Array([0x80, 0, 0, 0])];
    // 2 octets of name length
    bytes.push(_util2.default.writeNumber(name.length, 2));
    // 2 octets of value length
    bytes.push(_util2.default.writeNumber(value.length, 2));
    bytes.push(_util2.default.str_to_Uint8Array(name + value));
    bytes = _util2.default.concat(bytes);
    arr.push(write_sub_packet(sub.notation_data, bytes));
  });
  if (this.preferredHashAlgorithms !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.preferredHashAlgorithms));
    arr.push(write_sub_packet(sub.preferred_hash_algorithms, bytes));
  }
  if (this.preferredCompressionAlgorithms !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.preferredCompressionAlgorithms));
    arr.push(write_sub_packet(sub.preferred_compression_algorithms, bytes));
  }
  if (this.keyServerPreferences !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.keyServerPreferences));
    arr.push(write_sub_packet(sub.key_server_preferences, bytes));
  }
  if (this.preferredKeyServer !== null) {
    arr.push(write_sub_packet(sub.preferred_key_server, _util2.default.str_to_Uint8Array(this.preferredKeyServer)));
  }
  if (this.isPrimaryUserID !== null) {
    arr.push(write_sub_packet(sub.primary_user_id, new Uint8Array([this.isPrimaryUserID ? 1 : 0])));
  }
  if (this.policyURI !== null) {
    arr.push(write_sub_packet(sub.policy_uri, _util2.default.str_to_Uint8Array(this.policyURI)));
  }
  if (this.keyFlags !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.keyFlags));
    arr.push(write_sub_packet(sub.key_flags, bytes));
  }
  if (this.signersUserId !== null) {
    arr.push(write_sub_packet(sub.signers_user_id, _util2.default.str_to_Uint8Array(this.signersUserId)));
  }
  if (this.reasonForRevocationFlag !== null) {
    bytes = _util2.default.str_to_Uint8Array(String.fromCharCode(this.reasonForRevocationFlag) + this.reasonForRevocationString);
    arr.push(write_sub_packet(sub.reason_for_revocation, bytes));
  }
  if (this.features !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.features));
    arr.push(write_sub_packet(sub.features, bytes));
  }
  if (this.signatureTargetPublicKeyAlgorithm !== null) {
    bytes = [new Uint8Array([this.signatureTargetPublicKeyAlgorithm, this.signatureTargetHashAlgorithm])];
    bytes.push(_util2.default.str_to_Uint8Array(this.signatureTargetHash));
    bytes = _util2.default.concat(bytes);
    arr.push(write_sub_packet(sub.signature_target, bytes));
  }
  if (this.preferredAeadAlgorithms !== null) {
    bytes = _util2.default.str_to_Uint8Array(_util2.default.Uint8Array_to_str(this.preferredAeadAlgorithms));
    arr.push(write_sub_packet(sub.preferred_aead_algorithms, bytes));
  }

  const result = _util2.default.concat(arr);
  const length = _util2.default.writeNumber(result.length, 2);

  return _util2.default.concat([length, result]);
};

/**
 * Creates Uint8Array of bytes of Issuer and Embedded Signature subpackets
 * @returns {Uint8Array} subpacket data
 */
Signature.prototype.write_unhashed_sub_packets = function () {
  const sub = _enums2.default.signatureSubpacket;
  const arr = [];
  let bytes;
  if (!this.issuerKeyId.isNull() && this.issuerKeyVersion !== 5) {
    // If the version of [the] key is greater than 4, this subpacket
    // MUST NOT be included in the signature.
    arr.push(write_sub_packet(sub.issuer, this.issuerKeyId.write()));
  }
  if (this.embeddedSignature !== null) {
    arr.push(write_sub_packet(sub.embedded_signature, this.embeddedSignature.write()));
  }
  if (this.issuerFingerprint !== null) {
    bytes = [new Uint8Array([this.issuerKeyVersion]), this.issuerFingerprint];
    bytes = _util2.default.concat(bytes);
    arr.push(write_sub_packet(sub.issuer_fingerprint, bytes));
  }
  this.unhashedSubpackets.forEach(data => {
    arr.push(_packet2.default.writeSimpleLength(data.length));
    arr.push(data);
  });

  const result = _util2.default.concat(arr);
  const length = _util2.default.writeNumber(result.length, 2);

  return _util2.default.concat([length, result]);
};

/**
 * Creates a string representation of a sub signature packet
 * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.1|RFC4880 5.2.3.1}
 * @see {@link https://tools.ietf.org/html/rfc4880#section-5.2.3.2|RFC4880 5.2.3.2}
 * @param {Integer} type subpacket signature type.
 * @param {String} data data to be included
 * @returns {String} a string-representation of a sub signature packet
 * @private
 */
function write_sub_packet(type, data) {
  const arr = [];
  arr.push(_packet2.default.writeSimpleLength(data.length + 1));
  arr.push(new Uint8Array([type]));
  arr.push(data);
  return _util2.default.concat(arr);
}

// V4 signature sub packets

Signature.prototype.read_sub_packet = function (bytes, trusted = true) {
  let mypos = 0;

  const read_array = (prop, bytes) => {
    this[prop] = [];

    for (let i = 0; i < bytes.length; i++) {
      this[prop].push(bytes[i]);
    }
  };

  // The leftmost bit denotes a "critical" packet
  const critical = bytes[mypos] & 0x80;
  const type = bytes[mypos] & 0x7F;

  // GPG puts the Issuer and Signature subpackets in the unhashed area.
  // Tampering with those invalidates the signature, so we can trust them.
  // Ignore all other unhashed subpackets.
  if (!trusted && ![_enums2.default.signatureSubpacket.issuer, _enums2.default.signatureSubpacket.issuer_fingerprint, _enums2.default.signatureSubpacket.embedded_signature].includes(type)) {
    this.unhashedSubpackets.push(bytes.subarray(mypos, bytes.length));
    return;
  }

  mypos++;

  // subpacket type
  switch (type) {
    case 2:
      // Signature Creation Time
      this.created = _util2.default.readDate(bytes.subarray(mypos, bytes.length));
      break;
    case 3:
      {
        // Signature Expiration Time in seconds
        const seconds = _util2.default.readNumber(bytes.subarray(mypos, bytes.length));

        this.signatureNeverExpires = seconds === 0;
        this.signatureExpirationTime = seconds;

        break;
      }
    case 4:
      // Exportable Certification
      this.exportable = bytes[mypos++] === 1;
      break;
    case 5:
      // Trust Signature
      this.trustLevel = bytes[mypos++];
      this.trustAmount = bytes[mypos++];
      break;
    case 6:
      // Regular Expression
      this.regularExpression = bytes[mypos];
      break;
    case 7:
      // Revocable
      this.revocable = bytes[mypos++] === 1;
      break;
    case 9:
      {
        // Key Expiration Time in seconds
        const seconds = _util2.default.readNumber(bytes.subarray(mypos, bytes.length));

        this.keyExpirationTime = seconds;
        this.keyNeverExpires = seconds === 0;

        break;
      }
    case 11:
      // Preferred Symmetric Algorithms
      read_array('preferredSymmetricAlgorithms', bytes.subarray(mypos, bytes.length));
      break;
    case 12:
      // Revocation Key
      // (1 octet of class, 1 octet of public-key algorithm ID, 20
      // octets of
      // fingerprint)
      this.revocationKeyClass = bytes[mypos++];
      this.revocationKeyAlgorithm = bytes[mypos++];
      this.revocationKeyFingerprint = bytes.subarray(mypos, mypos + 20);
      break;

    case 16:
      // Issuer
      this.issuerKeyId.read(bytes.subarray(mypos, bytes.length));
      break;

    case 20:
      // Notation Data
      // We don't know how to handle anything but a text flagged data.
      if (bytes[mypos] === 0x80) {
        // We extract key/value tuple from the byte stream.
        mypos += 4;
        const m = _util2.default.readNumber(bytes.subarray(mypos, mypos + 2));
        mypos += 2;
        const n = _util2.default.readNumber(bytes.subarray(mypos, mypos + 2));
        mypos += 2;

        const name = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, mypos + m));
        const value = _util2.default.Uint8Array_to_str(bytes.subarray(mypos + m, mypos + m + n));

        this.notations.push([name, value]);

        if (critical && _config2.default.known_notations.indexOf(name) === -1) {
          throw new Error("Unknown critical notation: " + name);
        }
      } else {
        _util2.default.print_debug("Unsupported notation flag " + bytes[mypos]);
      }
      break;
    case 21:
      // Preferred Hash Algorithms
      read_array('preferredHashAlgorithms', bytes.subarray(mypos, bytes.length));
      break;
    case 22:
      // Preferred Compression Algorithms
      read_array('preferredCompressionAlgorithms', bytes.subarray(mypos, bytes.length));
      break;
    case 23:
      // Key Server Preferences
      read_array('keyServerPreferences', bytes.subarray(mypos, bytes.length));
      break;
    case 24:
      // Preferred Key Server
      this.preferredKeyServer = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, bytes.length));
      break;
    case 25:
      // Primary User ID
      this.isPrimaryUserID = bytes[mypos++] !== 0;
      break;
    case 26:
      // Policy URI
      this.policyURI = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, bytes.length));
      break;
    case 27:
      // Key Flags
      read_array('keyFlags', bytes.subarray(mypos, bytes.length));
      break;
    case 28:
      // Signer's User ID
      this.signersUserId = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, bytes.length));
      break;
    case 29:
      // Reason for Revocation
      this.reasonForRevocationFlag = bytes[mypos++];
      this.reasonForRevocationString = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, bytes.length));
      break;
    case 30:
      // Features
      read_array('features', bytes.subarray(mypos, bytes.length));
      break;
    case 31:
      {
        // Signature Target
        // (1 octet public-key algorithm, 1 octet hash algorithm, N octets hash)
        this.signatureTargetPublicKeyAlgorithm = bytes[mypos++];
        this.signatureTargetHashAlgorithm = bytes[mypos++];

        const len = _crypto2.default.getHashByteLength(this.signatureTargetHashAlgorithm);

        this.signatureTargetHash = _util2.default.Uint8Array_to_str(bytes.subarray(mypos, mypos + len));
        break;
      }
    case 32:
      // Embedded Signature
      this.embeddedSignature = new Signature();
      this.embeddedSignature.read(bytes.subarray(mypos, bytes.length));
      break;
    case 33:
      // Issuer Fingerprint
      this.issuerKeyVersion = bytes[mypos++];
      this.issuerFingerprint = bytes.subarray(mypos, bytes.length);
      if (this.issuerKeyVersion === 5) {
        this.issuerKeyId.read(this.issuerFingerprint);
      } else {
        this.issuerKeyId.read(this.issuerFingerprint.subarray(-8));
      }
      break;
    case 34:
      // Preferred AEAD Algorithms
      read_array.call(this, 'preferredAeadAlgorithms', bytes.subarray(mypos, bytes.length));
      break;
    default:
      {
        const err = new Error("Unknown signature subpacket type " + type + " @:" + mypos);
        if (critical) {
          throw err;
        } else {
          _util2.default.print_debug(err);
        }
      }
  }
};

Signature.prototype.read_sub_packets = function (bytes, trusted = true) {
  // Two-octet scalar octet count for following subpacket data.
  const subpacket_length = _util2.default.readNumber(bytes.subarray(0, 2));

  let i = 2;

  // subpacket data set (zero or more subpackets)
  while (i < 2 + subpacket_length) {
    const len = _packet2.default.readSimpleLength(bytes.subarray(i, bytes.length));
    i += len.offset;

    this.read_sub_packet(bytes.subarray(i, i + len.len), trusted);

    i += len.len;
  }

  return i;
};

// Produces data to produce signature on
Signature.prototype.toSign = function (type, data) {
  const t = _enums2.default.signature;

  switch (type) {
    case t.binary:
      if (data.text !== null) {
        return _util2.default.str_to_Uint8Array(data.getText(true));
      }
      return data.getBytes(true);

    case t.text:
      {
        let text = data.getText(true);
        // normalize EOL to \r\n
        text = _util2.default.canonicalizeEOL(text);
        // encode UTF8
        return _util2.default.encode_utf8(text);
      }
    case t.standalone:
      return new Uint8Array(0);

    case t.cert_generic:
    case t.cert_persona:
    case t.cert_casual:
    case t.cert_positive:
    case t.cert_revocation:
      {
        let packet;
        let tag;

        if (data.userId) {
          tag = 0xB4;
          packet = data.userId;
        } else if (data.userAttribute) {
          tag = 0xD1;
          packet = data.userAttribute;
        } else {
          throw new Error('Either a userId or userAttribute packet needs to be ' + 'supplied for certification.');
        }

        const bytes = packet.write();

        return _util2.default.concat([this.toSign(t.key, data), new Uint8Array([tag]), _util2.default.writeNumber(bytes.length, 4), bytes]);
      }
    case t.subkey_binding:
    case t.subkey_revocation:
    case t.key_binding:
      return _util2.default.concat([this.toSign(t.key, data), this.toSign(t.key, {
        key: data.bind
      })]);

    case t.key:
      if (data.key === undefined) {
        throw new Error('Key packet is required for this signature.');
      }
      return data.key.writeOld();

    case t.key_revocation:
      return this.toSign(t.key, data);
    case t.timestamp:
      return new Uint8Array(0);
    case t.third_party:
      throw new Error('Not implemented');
    default:
      throw new Error('Unknown signature type.');
  }
};

Signature.prototype.calculateTrailer = function () {
  let length = 0;
  return _webStreamTools2.default.transform(_webStreamTools2.default.clone(this.signatureData), value => {
    length += value.length;
  }, () => {
    const first = new Uint8Array([4, 0xFF]); //Version, ?
    return _util2.default.concat([first, _util2.default.writeNumber(length, 4)]);
  });
};

Signature.prototype.toHash = function (signatureType, data) {
  const bytes = this.toSign(signatureType, data);

  return _util2.default.concat([bytes, this.signatureData, this.calculateTrailer()]);
};

Signature.prototype.hash = async function (signatureType, data, toHash, streaming = true) {
  const hashAlgorithm = _enums2.default.write(_enums2.default.hash, this.hashAlgorithm);
  if (!toHash) toHash = this.toHash(signatureType, data);
  if (!streaming && _util2.default.isStream(toHash)) {
    return _webStreamTools2.default.fromAsync(async () => this.hash(signatureType, data, (await _webStreamTools2.default.readToEnd(toHash))));
  }
  return _crypto2.default.hash.digest(hashAlgorithm, toHash);
};

/**
 * verifys the signature packet. Note: not signature types are implemented
 * @param {module:packet.PublicSubkey|module:packet.PublicKey|
 *         module:packet.SecretSubkey|module:packet.SecretKey} key the public key to verify the signature
 * @param {module:enums.signature} signatureType expected signature type
 * @param {String|Object} data data which on the signature applies
 * @returns {Promise<Boolean>} True if message is verified, else false.
 * @async
 */
Signature.prototype.verify = async function (key, signatureType, data) {
  const publicKeyAlgorithm = _enums2.default.write(_enums2.default.publicKey, this.publicKeyAlgorithm);
  const hashAlgorithm = _enums2.default.write(_enums2.default.hash, this.hashAlgorithm);

  if (publicKeyAlgorithm !== _enums2.default.write(_enums2.default.publicKey, key.algorithm)) {
    throw new Error('Public key algorithm used to sign signature does not match issuer key algorithm.');
  }

  let toHash;
  let hash;
  if (this.hashed) {
    hash = this.hashed;
  } else {
    toHash = this.toHash(signatureType, data);
    hash = await this.hash(signatureType, data, toHash);
  }
  hash = await _webStreamTools2.default.readToEnd(hash);

  if (this.signedHashValue[0] !== hash[0] || this.signedHashValue[1] !== hash[1]) {
    this.verified = false;
  } else {
    let mpicount = 0;
    // Algorithm-Specific Fields for RSA signatures:
    //      - multiprecision number (MPI) of RSA signature value m**d mod n.
    if (publicKeyAlgorithm > 0 && publicKeyAlgorithm < 4) {
      mpicount = 1;

      //    Algorithm-Specific Fields for DSA, ECDSA, and EdDSA signatures:
      //      - MPI of DSA value r.
      //      - MPI of DSA value s.
    } else if (publicKeyAlgorithm === _enums2.default.publicKey.dsa || publicKeyAlgorithm === _enums2.default.publicKey.ecdsa || publicKeyAlgorithm === _enums2.default.publicKey.eddsa) {
      mpicount = 2;
    }

    // EdDSA signature parameters are encoded in little-endian format
    // https://tools.ietf.org/html/rfc8032#section-5.1.2
    const endian = publicKeyAlgorithm === _enums2.default.publicKey.eddsa ? 'le' : 'be';
    const mpi = [];
    let i = 0;
    this.signature = await _webStreamTools2.default.readToEnd(this.signature);
    for (let j = 0; j < mpicount; j++) {
      mpi[j] = new _mpi2.default();
      i += mpi[j].read(this.signature.subarray(i, this.signature.length), endian);
    }

    this.verified = await _crypto2.default.signature.verify(publicKeyAlgorithm, hashAlgorithm, mpi, key.params, toHash, hash);
  }
  return this.verified;
};

/**
 * Verifies signature expiration date
 * @param {Date} date (optional) use the given date for verification instead of the current time
 * @returns {Boolean} true if expired
 */
Signature.prototype.isExpired = function (date = new Date()) {
  const normDate = _util2.default.normalizeDate(date);
  if (normDate !== null) {
    const expirationTime = this.getExpirationTime();
    return !(this.created <= normDate && normDate <= expirationTime);
  }
  return false;
};

/**
 * Returns the expiration time of the signature or Infinity if signature does not expire
 * @returns {Date} expiration time
 */
Signature.prototype.getExpirationTime = function () {
  return !this.signatureNeverExpires ? new Date(this.created.getTime() + this.signatureExpirationTime * 1000) : Infinity;
};

/**
 * Fix custom types after cloning
 */
Signature.prototype.postCloneTypeFix = function () {
  this.issuerKeyId = _keyid2.default.fromClone(this.issuerKeyId);
};

exports.default = Signature;

},{"../config":80,"../crypto":95,"../enums":114,"../type/keyid.js":149,"../type/mpi.js":150,"../util":153,"./packet":130,"web-stream-tools":76}],138:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VERSION = 1; // A one-octet version number of the data packet.

/**
 * Implementation of the Symmetrically Encrypted Authenticated Encryption with
 * Additional Data (AEAD) Protected Data Packet
 *
 * {@link https://tools.ietf.org/html/draft-ford-openpgp-format-00#section-2.1}:
 * AEAD Protected Data Packet
 * @memberof module:packet
 * @constructor
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2016 Tankred Hase
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 */

function SymEncryptedAEADProtected() {
  this.tag = _enums2.default.packet.symEncryptedAEADProtected;
  this.version = VERSION;
  this.cipherAlgo = null;
  this.aeadAlgorithm = 'eax';
  this.aeadAlgo = null;
  this.chunkSizeByte = null;
  this.iv = null;
  this.encrypted = null;
  this.packets = null;
}

exports.default = SymEncryptedAEADProtected;

/**
 * Parse an encrypted payload of bytes in the order: version, IV, ciphertext (see specification)
 * @param {Uint8Array | ReadableStream<Uint8Array>} bytes
 */

SymEncryptedAEADProtected.prototype.read = async function (bytes) {
  await _webStreamTools2.default.parse(bytes, async reader => {
    if ((await reader.readByte()) !== VERSION) {
      // The only currently defined value is 1.
      throw new Error('Invalid packet version.');
    }
    if (_config2.default.aead_protect_version === 4) {
      this.cipherAlgo = await reader.readByte();
      this.aeadAlgo = await reader.readByte();
      this.chunkSizeByte = await reader.readByte();
    } else {
      this.aeadAlgo = _enums2.default.aead.experimental_gcm;
    }
    const mode = _crypto2.default[_enums2.default.read(_enums2.default.aead, this.aeadAlgo)];
    this.iv = await reader.readBytes(mode.ivLength);
    this.encrypted = reader.remainder();
  });
};

/**
 * Write the encrypted payload of bytes in the order: version, IV, ciphertext (see specification)
 * @returns {Uint8Array | ReadableStream<Uint8Array>} The encrypted payload
 */
SymEncryptedAEADProtected.prototype.write = function () {
  if (_config2.default.aead_protect_version === 4) {
    return _util2.default.concat([new Uint8Array([this.version, this.cipherAlgo, this.aeadAlgo, this.chunkSizeByte]), this.iv, this.encrypted]);
  }
  return _util2.default.concat([new Uint8Array([this.version]), this.iv, this.encrypted]);
};

/**
 * Decrypt the encrypted payload.
 * @param  {String} sessionKeyAlgorithm   The session key's cipher algorithm e.g. 'aes128'
 * @param  {Uint8Array} key               The session key used to encrypt the payload
 * @param  {Boolean} streaming            Whether the top-level function will return a stream
 * @returns {Boolean}
 * @async
 */
SymEncryptedAEADProtected.prototype.decrypt = async function (sessionKeyAlgorithm, key, streaming) {
  if (_config2.default.aead_protect_version !== 4) {
    this.cipherAlgo = _enums2.default.write(_enums2.default.symmetric, sessionKeyAlgorithm);
  }
  await this.packets.read((await this.crypt('decrypt', key, _webStreamTools2.default.clone(this.encrypted), streaming)), streaming);
  return true;
};

/**
 * Encrypt the packet list payload.
 * @param  {String} sessionKeyAlgorithm   The session key's cipher algorithm e.g. 'aes128'
 * @param  {Uint8Array} key               The session key used to encrypt the payload
 * @param  {Boolean} streaming            Whether the top-level function will return a stream
 * @async
 */
SymEncryptedAEADProtected.prototype.encrypt = async function (sessionKeyAlgorithm, key, streaming) {
  this.cipherAlgo = _enums2.default.write(_enums2.default.symmetric, sessionKeyAlgorithm);
  this.aeadAlgo = _config2.default.aead_protect_version === 4 ? _enums2.default.write(_enums2.default.aead, this.aeadAlgorithm) : _enums2.default.aead.experimental_gcm;
  const mode = _crypto2.default[_enums2.default.read(_enums2.default.aead, this.aeadAlgo)];
  this.iv = await _crypto2.default.random.getRandomBytes(mode.ivLength); // generate new random IV
  this.chunkSizeByte = _config2.default.aead_chunk_size_byte;
  const data = this.packets.write();
  this.encrypted = await this.crypt('encrypt', key, data, streaming);
};

/**
 * En/decrypt the payload.
 * @param  {encrypt|decrypt} fn      Whether to encrypt or decrypt
 * @param  {Uint8Array} key          The session key used to en/decrypt the payload
 * @param  {Uint8Array | ReadableStream<Uint8Array>} data         The data to en/decrypt
 * @param  {Boolean} streaming        Whether the top-level function will return a stream
 * @returns {Uint8Array | ReadableStream<Uint8Array>}
 * @async
 */
SymEncryptedAEADProtected.prototype.crypt = async function (fn, key, data, streaming) {
  const cipher = _enums2.default.read(_enums2.default.symmetric, this.cipherAlgo);
  const mode = _crypto2.default[_enums2.default.read(_enums2.default.aead, this.aeadAlgo)];
  const modeInstance = await mode(cipher, key);
  if (_config2.default.aead_protect_version === 4) {
    const tagLengthIfDecrypting = fn === 'decrypt' ? mode.tagLength : 0;
    const chunkSize = 2 ** (this.chunkSizeByte + 6) + tagLengthIfDecrypting; // ((uint64_t)1 << (c + 6))
    const adataBuffer = new ArrayBuffer(21);
    const adataArray = new Uint8Array(adataBuffer, 0, 13);
    const adataTagArray = new Uint8Array(adataBuffer);
    const adataView = new DataView(adataBuffer);
    const chunkIndexArray = new Uint8Array(adataBuffer, 5, 8);
    adataArray.set([0xC0 | this.tag, this.version, this.cipherAlgo, this.aeadAlgo, this.chunkSizeByte], 0);
    let chunkIndex = 0;
    let latestPromise = Promise.resolve();
    let cryptedBytes = 0;
    let queuedBytes = 0;
    const iv = this.iv;
    return _webStreamTools2.default.transformPair(data, async (readable, writable) => {
      const reader = _webStreamTools2.default.getReader(readable);
      const buffer = new TransformStream({}, {
        highWaterMark: streaming ? _util2.default.getHardwareConcurrency() * 2 ** (_config2.default.aead_chunk_size_byte + 6) : Infinity,
        size: array => array.length
      });
      _webStreamTools2.default.pipe(buffer.readable, writable);
      const writer = _webStreamTools2.default.getWriter(buffer.writable);
      try {
        while (true) {
          let chunk = (await reader.readBytes(chunkSize + tagLengthIfDecrypting)) || new Uint8Array();
          const finalChunk = chunk.subarray(chunk.length - tagLengthIfDecrypting);
          chunk = chunk.subarray(0, chunk.length - tagLengthIfDecrypting);
          let cryptedPromise;
          let done;
          if (!chunkIndex || chunk.length) {
            reader.unshift(finalChunk);
            cryptedPromise = modeInstance[fn](chunk, mode.getNonce(iv, chunkIndexArray), adataArray);
          } else {
            // After the last chunk, we either encrypt a final, empty
            // data chunk to get the final authentication tag or
            // validate that final authentication tag.
            adataView.setInt32(13 + 4, cryptedBytes); // Should be setInt64(13, ...)
            cryptedPromise = modeInstance[fn](finalChunk, mode.getNonce(iv, chunkIndexArray), adataTagArray);
            done = true;
          }
          cryptedBytes += chunk.length - tagLengthIfDecrypting;
          queuedBytes += chunk.length - tagLengthIfDecrypting;
          // eslint-disable-next-line no-loop-func
          latestPromise = latestPromise.then(() => cryptedPromise).then(async crypted => {
            await writer.ready;
            await writer.write(crypted);
            queuedBytes -= chunk.length;
          }).catch(err => writer.abort(err));
          if (done || queuedBytes > writer.desiredSize) {
            await latestPromise; // Respect backpressure
          }
          if (!done) {
            adataView.setInt32(5 + 4, ++chunkIndex); // Should be setInt64(5, ...)
          } else {
            await writer.close();
            break;
          }
        }
      } catch (e) {
        await writer.abort(e);
      }
    });
  } else {
    return modeInstance[fn]((await _webStreamTools2.default.readToEnd(data)), this.iv);
  }
};

},{"../config":80,"../crypto":95,"../enums":114,"../util":153,"web-stream-tools":76}],139:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VERSION = 1; // A one-octet version number of the data packet.

/**
 * Implementation of the Sym. Encrypted Integrity Protected Data Packet (Tag 18)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.13|RFC4880 5.13}:
 * The Symmetrically Encrypted Integrity Protected Data packet is
 * a variant of the Symmetrically Encrypted Data packet. It is a new feature
 * created for OpenPGP that addresses the problem of detecting a modification to
 * encrypted data. It is used in combination with a Modification Detection Code
 * packet.
 * @memberof module:packet
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires asmcrypto.js
 * @requires web-stream-tools
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 */

function SymEncryptedIntegrityProtected() {
  this.tag = _enums2.default.packet.symEncryptedIntegrityProtected;
  this.version = VERSION;
  /** The encrypted payload. */
  this.encrypted = null; // string
  /**
   * If after decrypting the packet this is set to true,
   * a modification has been detected and thus the contents
   * should be discarded.
   * @type {Boolean}
   */
  this.modification = false;
  this.packets = null;
}

SymEncryptedIntegrityProtected.prototype.read = async function (bytes) {
  await _webStreamTools2.default.parse(bytes, async reader => {

    // - A one-octet version number. The only currently defined value is 1.
    if ((await reader.readByte()) !== VERSION) {
      throw new Error('Invalid packet version.');
    }

    // - Encrypted data, the output of the selected symmetric-key cipher
    //   operating in Cipher Feedback mode with shift amount equal to the
    //   block size of the cipher (CFB-n where n is the block size).
    this.encrypted = reader.remainder();
  });
};

SymEncryptedIntegrityProtected.prototype.write = function () {
  return _util2.default.concat([new Uint8Array([VERSION]), this.encrypted]);
};

/**
 * Encrypt the payload in the packet.
 * @param  {String} sessionKeyAlgorithm   The selected symmetric encryption algorithm to be used e.g. 'aes128'
 * @param  {Uint8Array} key               The key of cipher blocksize length to be used
 * @param  {Boolean} streaming            Whether to set this.encrypted to a stream
 * @returns {Promise<Boolean>}
 * @async
 */
SymEncryptedIntegrityProtected.prototype.encrypt = async function (sessionKeyAlgorithm, key, streaming) {
  let bytes = this.packets.write();
  if (!streaming) bytes = await _webStreamTools2.default.readToEnd(bytes);
  const prefix = await _crypto2.default.getPrefixRandom(sessionKeyAlgorithm);
  const mdc = new Uint8Array([0xD3, 0x14]); // modification detection code packet

  const tohash = _util2.default.concat([prefix, bytes, mdc]);
  const hash = await _crypto2.default.hash.sha1(_webStreamTools2.default.passiveClone(tohash));
  const plaintext = _util2.default.concat([tohash, hash]);

  this.encrypted = await _crypto2.default.cfb.encrypt(sessionKeyAlgorithm, key, plaintext, new Uint8Array(_crypto2.default.cipher[sessionKeyAlgorithm].blockSize));
  return true;
};

/**
 * Decrypts the encrypted data contained in the packet.
 * @param  {String} sessionKeyAlgorithm   The selected symmetric encryption algorithm to be used e.g. 'aes128'
 * @param  {Uint8Array} key               The key of cipher blocksize length to be used
 * @param  {Boolean} streaming            Whether to read this.encrypted as a stream
 * @returns {Promise<Boolean>}
 * @async
 */
SymEncryptedIntegrityProtected.prototype.decrypt = async function (sessionKeyAlgorithm, key, streaming) {
  if (!streaming) this.encrypted = await _webStreamTools2.default.readToEnd(this.encrypted);
  const encrypted = _webStreamTools2.default.clone(this.encrypted);
  const decrypted = await _crypto2.default.cfb.decrypt(sessionKeyAlgorithm, key, encrypted, new Uint8Array(_crypto2.default.cipher[sessionKeyAlgorithm].blockSize));

  // there must be a modification detection code packet as the
  // last packet and everything gets hashed except the hash itself
  const realHash = _webStreamTools2.default.slice(_webStreamTools2.default.passiveClone(decrypted), -20);
  const tohash = _webStreamTools2.default.slice(decrypted, 0, -20);
  const verifyHash = Promise.all([_webStreamTools2.default.readToEnd((await _crypto2.default.hash.sha1(_webStreamTools2.default.passiveClone(tohash)))), _webStreamTools2.default.readToEnd(realHash)]).then(([hash, mdc]) => {
    if (!_util2.default.equalsUint8Array(hash, mdc)) {
      throw new Error('Modification detected.');
    }
    return new Uint8Array();
  });
  const bytes = _webStreamTools2.default.slice(tohash, _crypto2.default.cipher[sessionKeyAlgorithm].blockSize + 2); // Remove random prefix
  let packetbytes = _webStreamTools2.default.slice(bytes, 0, -2); // Remove MDC packet
  packetbytes = _webStreamTools2.default.concat([packetbytes, _webStreamTools2.default.fromAsync(() => verifyHash)]);
  if (!_util2.default.isStream(encrypted) || !_config2.default.allow_unauthenticated_stream) {
    packetbytes = await _webStreamTools2.default.readToEnd(packetbytes);
  }
  await this.packets.read(packetbytes, streaming);
  return true;
};

exports.default = SymEncryptedIntegrityProtected;

},{"../config":80,"../crypto":95,"../enums":114,"../util":153,"web-stream-tools":76}],140:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _s2k = require('../type/s2k');

var _s2k2 = _interopRequireDefault(_s2k);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Public-Key Encrypted Session Key Packets (Tag 1)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.1|RFC4880 5.1}:
 * A Public-Key Encrypted Session Key packet holds the session key
 * used to encrypt a message. Zero or more Public-Key Encrypted Session Key
 * packets and/or Symmetric-Key Encrypted Session Key packets may precede a
 * Symmetrically Encrypted Data Packet, which holds an encrypted message. The
 * message is encrypted with the session key, and the session key is itself
 * encrypted and stored in the Encrypted Session Key packet(s). The
 * Symmetrically Encrypted Data Packet is preceded by one Public-Key Encrypted
 * Session Key packet for each OpenPGP key to which the message is encrypted.
 * The recipient of the message finds a session key that is encrypted to their
 * public key, decrypts the session key, and then uses the session key to
 * decrypt the message.
 * @memberof module:packet
 * @constructor
 */
function SymEncryptedSessionKey() {
  this.tag = _enums2.default.packet.symEncryptedSessionKey;
  this.version = _config2.default.aead_protect && _config2.default.aead_protect_version === 4 ? 5 : 4;
  this.sessionKey = null;
  this.sessionKeyEncryptionAlgorithm = null;
  this.sessionKeyAlgorithm = 'aes256';
  this.aeadAlgorithm = _enums2.default.read(_enums2.default.aead, _config2.default.aead_mode);
  this.encrypted = null;
  this.s2k = null;
  this.iv = null;
}

/**
 * Parsing function for a symmetric encrypted session key packet (tag 3).
 *
 * @param {Uint8Array} input Payload of a tag 1 packet
 * @param {Integer} position Position to start reading from the input string
 * @param {Integer} len
 *            Length of the packet or the remaining length of
 *            input at position
 * @returns {module:packet.SymEncryptedSessionKey} Object representation
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires type/s2k
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 */

SymEncryptedSessionKey.prototype.read = function (bytes) {
  let offset = 0;

  // A one-octet version number. The only currently defined version is 4.
  this.version = bytes[offset++];

  // A one-octet number describing the symmetric algorithm used.
  const algo = _enums2.default.read(_enums2.default.symmetric, bytes[offset++]);

  if (this.version === 5) {
    // A one-octet AEAD algorithm.
    this.aeadAlgorithm = _enums2.default.read(_enums2.default.aead, bytes[offset++]);
  }

  // A string-to-key (S2K) specifier, length as defined above.
  this.s2k = new _s2k2.default();
  offset += this.s2k.read(bytes.subarray(offset, bytes.length));

  if (this.version === 5) {
    const mode = _crypto2.default[this.aeadAlgorithm];

    // A starting initialization vector of size specified by the AEAD
    // algorithm.
    this.iv = bytes.subarray(offset, offset += mode.ivLength);
  }

  // The encrypted session key itself, which is decrypted with the
  // string-to-key object. This is optional in version 4.
  if (this.version === 5 || offset < bytes.length) {
    this.encrypted = bytes.subarray(offset, bytes.length);
    this.sessionKeyEncryptionAlgorithm = algo;
  } else {
    this.sessionKeyAlgorithm = algo;
  }
};

SymEncryptedSessionKey.prototype.write = function () {
  const algo = this.encrypted === null ? this.sessionKeyAlgorithm : this.sessionKeyEncryptionAlgorithm;

  let bytes;

  if (this.version === 5) {
    bytes = _util2.default.concatUint8Array([new Uint8Array([this.version, _enums2.default.write(_enums2.default.symmetric, algo), _enums2.default.write(_enums2.default.aead, this.aeadAlgorithm)]), this.s2k.write(), this.iv, this.encrypted]);
  } else {
    bytes = _util2.default.concatUint8Array([new Uint8Array([this.version, _enums2.default.write(_enums2.default.symmetric, algo)]), this.s2k.write()]);

    if (this.encrypted !== null) {
      bytes = _util2.default.concatUint8Array([bytes, this.encrypted]);
    }
  }

  return bytes;
};

/**
 * Decrypts the session key
 * @param {String} passphrase The passphrase in string form
 * @returns {Promise<Boolean>}
 * @async
 */
SymEncryptedSessionKey.prototype.decrypt = async function (passphrase) {
  const algo = this.sessionKeyEncryptionAlgorithm !== null ? this.sessionKeyEncryptionAlgorithm : this.sessionKeyAlgorithm;

  const length = _crypto2.default.cipher[algo].keySize;
  const key = await this.s2k.produce_key(passphrase, length);

  if (this.version === 5) {
    const mode = _crypto2.default[this.aeadAlgorithm];
    const adata = new Uint8Array([0xC0 | this.tag, this.version, _enums2.default.write(_enums2.default.symmetric, this.sessionKeyEncryptionAlgorithm), _enums2.default.write(_enums2.default.aead, this.aeadAlgorithm)]);
    const modeInstance = await mode(algo, key);
    this.sessionKey = await modeInstance.decrypt(this.encrypted, this.iv, adata);
  } else if (this.encrypted !== null) {
    const decrypted = await _crypto2.default.cfb.decrypt(algo, key, this.encrypted, new Uint8Array(_crypto2.default.cipher[algo].blockSize));

    this.sessionKeyAlgorithm = _enums2.default.read(_enums2.default.symmetric, decrypted[0]);
    this.sessionKey = decrypted.subarray(1, decrypted.length);
  } else {
    this.sessionKey = key;
  }

  return true;
};

/**
 * Encrypts the session key
 * @param {String} passphrase The passphrase in string form
 * @returns {Promise<Boolean>}
 * @async
 */
SymEncryptedSessionKey.prototype.encrypt = async function (passphrase) {
  const algo = this.sessionKeyEncryptionAlgorithm !== null ? this.sessionKeyEncryptionAlgorithm : this.sessionKeyAlgorithm;

  this.sessionKeyEncryptionAlgorithm = algo;

  this.s2k = new _s2k2.default();
  this.s2k.salt = await _crypto2.default.random.getRandomBytes(8);

  const length = _crypto2.default.cipher[algo].keySize;
  const key = await this.s2k.produce_key(passphrase, length);

  if (this.sessionKey === null) {
    this.sessionKey = await _crypto2.default.generateSessionKey(this.sessionKeyAlgorithm);
  }

  if (this.version === 5) {
    const mode = _crypto2.default[this.aeadAlgorithm];
    this.iv = await _crypto2.default.random.getRandomBytes(mode.ivLength); // generate new random IV
    const adata = new Uint8Array([0xC0 | this.tag, this.version, _enums2.default.write(_enums2.default.symmetric, this.sessionKeyEncryptionAlgorithm), _enums2.default.write(_enums2.default.aead, this.aeadAlgorithm)]);
    const modeInstance = await mode(algo, key);
    this.encrypted = await modeInstance.encrypt(this.sessionKey, this.iv, adata);
  } else {
    const algo_enum = new Uint8Array([_enums2.default.write(_enums2.default.symmetric, this.sessionKeyAlgorithm)]);
    const private_key = _util2.default.concatUint8Array([algo_enum, this.sessionKey]);
    this.encrypted = await _crypto2.default.cfb.encrypt(algo, key, private_key, new Uint8Array(_crypto2.default.cipher[algo].blockSize));
  }

  return true;
};

/**
 * Fix custom types after cloning
 */
SymEncryptedSessionKey.prototype.postCloneTypeFix = function () {
  this.s2k = _s2k2.default.fromClone(this.s2k);
};

exports.default = SymEncryptedSessionKey;

},{"../config":80,"../crypto":95,"../enums":114,"../type/s2k":152,"../util":153}],141:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Symmetrically Encrypted Data Packet (Tag 9)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.7|RFC4880 5.7}:
 * The Symmetrically Encrypted Data packet contains data encrypted with a
 * symmetric-key algorithm. When it has been decrypted, it contains other
 * packets (usually a literal data packet or compressed data packet, but in
 * theory other Symmetrically Encrypted Data packets or sequences of packets
 * that form whole OpenPGP messages).
 * @memberof module:packet
 * @constructor
 */
function SymmetricallyEncrypted() {
  /**
   * Packet type
   * @type {module:enums.packet}
   */
  this.tag = _enums2.default.packet.symmetricallyEncrypted;
  /**
   * Encrypted secret-key data
   */
  this.encrypted = null;
  /**
   * Decrypted packets contained within.
   * @type {module:packet.List}
   */
  this.packets = null;
  /**
   * When true, decrypt fails if message is not integrity protected
   * @see module:config.ignore_mdc_error
   */
  this.ignore_mdc_error = _config2.default.ignore_mdc_error;
} // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires web-stream-tools
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 */

SymmetricallyEncrypted.prototype.read = function (bytes) {
  this.encrypted = bytes;
};

SymmetricallyEncrypted.prototype.write = function () {
  return this.encrypted;
};

/**
 * Decrypt the symmetrically-encrypted packet data
 * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.
 * @param {module:enums.symmetric} sessionKeyAlgorithm Symmetric key algorithm to use
 * @param {Uint8Array} key    The key of cipher blocksize length to be used
 * @returns {Promise<Boolean>}
 * @async
 */
SymmetricallyEncrypted.prototype.decrypt = async function (sessionKeyAlgorithm, key) {
  // If MDC errors are not being ignored, all missing MDC packets in symmetrically encrypted data should throw an error
  if (!this.ignore_mdc_error) {
    throw new Error('Decryption failed due to missing MDC.');
  }

  this.encrypted = await _webStreamTools2.default.readToEnd(this.encrypted);
  const decrypted = await _crypto2.default.cfb.decrypt(sessionKeyAlgorithm, key, this.encrypted.subarray(_crypto2.default.cipher[sessionKeyAlgorithm].blockSize + 2), this.encrypted.subarray(2, _crypto2.default.cipher[sessionKeyAlgorithm].blockSize + 2));

  await this.packets.read(decrypted);

  return true;
};

/**
 * Encrypt the symmetrically-encrypted packet data
 * See {@link https://tools.ietf.org/html/rfc4880#section-9.2|RFC 4880 9.2} for algorithms.
 * @param {module:enums.symmetric} sessionKeyAlgorithm Symmetric key algorithm to use
 * @param {Uint8Array} key    The key of cipher blocksize length to be used
 * @returns {Promise<Boolean>}
 * @async
 */
SymmetricallyEncrypted.prototype.encrypt = async function (algo, key) {
  const data = this.packets.write();

  const prefix = await _crypto2.default.getPrefixRandom(algo);
  const FRE = await _crypto2.default.cfb.encrypt(algo, key, prefix, new Uint8Array(_crypto2.default.cipher[algo].blockSize));
  const ciphertext = await _crypto2.default.cfb.encrypt(algo, key, data, FRE.subarray(2));
  this.encrypted = _util2.default.concat([FRE, ciphertext]);

  return true;
};

exports.default = SymmetricallyEncrypted;

},{"../config":80,"../crypto":95,"../enums":114,"../util":153,"web-stream-tools":76}],142:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the Trust Packet (Tag 12)
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-5.10|RFC4880 5.10}:
 * The Trust packet is used only within keyrings and is not normally
 * exported.  Trust packets contain data that record the user's
 * specifications of which key holders are trustworthy introducers,
 * along with other information that implementing software uses for
 * trust information.  The format of Trust packets is defined by a given
 * implementation.
 *
 * Trust packets SHOULD NOT be emitted to output streams that are
 * transferred to other users, and they SHOULD be ignored on any input
 * other than local keyring files.
 * @memberof module:packet
 * @constructor
 */
function Trust() {
  this.tag = _enums2.default.packet.trust;
}

/**
 * Parsing function for a trust packet (tag 12).
 * Currently not implemented as we ignore trust packets
 * @param {String} byptes payload of a tag 12 packet
 */
/**
 * @requires enums
 */

Trust.prototype.read = function () {}; // TODO

exports.default = Trust;

},{"../enums":114}],143:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the User Attribute Packet (Tag 17)
 *
 * The User Attribute packet is a variation of the User ID packet.  It
 * is capable of storing more types of data than the User ID packet,
 * which is limited to text.  Like the User ID packet, a User Attribute
 * packet may be certified by the key owner ("self-signed") or any other
 * key owner who cares to certify it.  Except as noted, a User Attribute
 * packet may be used anywhere that a User ID packet may be used.
 *
 * While User Attribute packets are not a required part of the OpenPGP
 * standard, implementations SHOULD provide at least enough
 * compatibility to properly handle a certification signature on the
 * User Attribute packet.  A simple way to do this is by treating the
 * User Attribute packet as a User ID packet with opaque contents, but
 * an implementation may use any method desired.
 * @memberof module:packet
 * @constructor
 */
function UserAttribute() {
  this.tag = _enums2.default.packet.userAttribute;
  this.attributes = [];
}

/**
 * parsing function for a user attribute packet (tag 17).
 * @param {Uint8Array} input payload of a tag 17 packet
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires packet
 * @requires enums
 * @requires util
 */

UserAttribute.prototype.read = function (bytes) {
  let i = 0;
  while (i < bytes.length) {
    const len = _packet2.default.readSimpleLength(bytes.subarray(i, bytes.length));
    i += len.offset;

    this.attributes.push(_util2.default.Uint8Array_to_str(bytes.subarray(i, i + len.len)));
    i += len.len;
  }
};

/**
 * Creates a binary representation of the user attribute packet
 * @returns {Uint8Array} string representation
 */
UserAttribute.prototype.write = function () {
  const arr = [];
  for (let i = 0; i < this.attributes.length; i++) {
    arr.push(_packet2.default.writeSimpleLength(this.attributes[i].length));
    arr.push(_util2.default.str_to_Uint8Array(this.attributes[i]));
  }
  return _util2.default.concatUint8Array(arr);
};

/**
 * Compare for equality
 * @param  {module:packet.UserAttribute} usrAttr
 * @returns {Boolean}         true if equal
 */
UserAttribute.prototype.equals = function (usrAttr) {
  if (!usrAttr || !(usrAttr instanceof UserAttribute)) {
    return false;
  }
  return this.attributes.every(function (attr, index) {
    return attr === usrAttr.attributes[index];
  });
};

exports.default = UserAttribute;

},{"../enums":114,"../util":153,"./packet":130}],144:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implementation of the User ID Packet (Tag 13)
 *
 * A User ID packet consists of UTF-8 text that is intended to represent
 * the name and email address of the key holder.  By convention, it
 * includes an RFC 2822 [RFC2822] mail name-addr, but there are no
 * restrictions on its content.  The packet length in the header
 * specifies the length of the User ID.
 * @memberof module:packet
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires enums
 * @requires util
 */

function Userid() {
  this.tag = _enums2.default.packet.userid;
  /** A string containing the user id. Usually in the form
   * John Doe <john@example.com>
   * @type {String}
   */
  this.userid = '';

  this.name = '';
  this.email = '';
  this.comment = '';
}

/**
 * Parsing function for a user id packet (tag 13).
 * @param {Uint8Array} input payload of a tag 13 packet
 */
Userid.prototype.read = function (bytes) {
  this.parse(_util2.default.decode_utf8(bytes));
};

/**
 * Parse userid string, e.g. 'John Doe <john@example.com>'
 */
Userid.prototype.parse = function (userid) {
  try {
    Object.assign(this, _util2.default.parseUserId(userid));
  } catch (e) {}
  this.userid = userid;
};

/**
 * Creates a binary representation of the user id packet
 * @returns {Uint8Array} binary representation
 */
Userid.prototype.write = function () {
  return _util2.default.encode_utf8(this.userid);
};

/**
 * Set userid string from object, e.g. { name:'Phil Zimmermann', email:'phil@openpgp.org' }
 */
Userid.prototype.format = function (userid) {
  if (_util2.default.isString(userid)) {
    userid = _util2.default.parseUserId(userid);
  }
  Object.assign(this, userid);
  this.userid = _util2.default.formatUserId(userid);
};

exports.default = Userid;

},{"../enums":114,"../util":153}],145:[function(require,module,exports){
(function (global){
'use strict';

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof window !== 'undefined') {
  /********************************************************************
   * NOTE: This list is duplicated in Gruntfile.js,                   *
   * so that these polyfills are only included in the compat bundle.  *
   ********************************************************************/

  try {
    if (typeof window.fetch === 'undefined') {
      require('whatwg-fetch');
    }
    if (typeof Array.prototype.fill === 'undefined') {
      require('core-js/fn/array/fill');
    }
    if (typeof Array.prototype.find === 'undefined') {
      require('core-js/fn/array/find');
    }
    if (typeof Array.prototype.includes === 'undefined') {
      require('core-js/fn/array/includes');
    }
    if (typeof Array.from === 'undefined') {
      require('core-js/fn/array/from');
    }

    // No if-statement on Promise because of IE11. Otherwise Promise is undefined in the service worker.
    require('core-js/fn/promise');

    if (typeof Uint8Array.from === 'undefined') {
      require('core-js/fn/typed/uint8-array');
    }
    if (typeof String.prototype.repeat === 'undefined') {
      require('core-js/fn/string/repeat');
    }
    if (typeof Symbol === 'undefined') {
      require('core-js/fn/symbol');
    }
    if (typeof Object.assign === 'undefined') {
      require('core-js/fn/object/assign');
    }
  } catch (e) {}
} /**
   * @fileoverview Old browser polyfills
   * All are listed as dev dependencies because Node does not need them
   * and for browser babel will take care of it
   * @requires util
   * @module polyfills
   */

if (typeof TransformStream === 'undefined') {
  require('@mattiasbuelens/web-streams-polyfill/es6');
}
if (typeof TextEncoder === 'undefined') {
  const nodeUtil = _util2.default.nodeRequire('util') || {};
  global.TextEncoder = nodeUtil.TextEncoder;
  global.TextDecoder = nodeUtil.TextDecoder;
}
if (typeof TextEncoder === 'undefined') {
  const textEncoding = require('text-encoding-utf-8');
  global.TextEncoder = textEncoding.TextEncoder;
  global.TextDecoder = textEncoding.TextDecoder;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./util":153,"@mattiasbuelens/web-streams-polyfill/es6":1,"core-js/fn/array/fill":"core-js/fn/array/fill","core-js/fn/array/find":"core-js/fn/array/find","core-js/fn/array/from":"core-js/fn/array/from","core-js/fn/array/includes":"core-js/fn/array/includes","core-js/fn/object/assign":"core-js/fn/object/assign","core-js/fn/promise":"core-js/fn/promise","core-js/fn/string/repeat":"core-js/fn/string/repeat","core-js/fn/symbol":"core-js/fn/symbol","core-js/fn/typed/uint8-array":"core-js/fn/typed/uint8-array","text-encoding-utf-8":72,"whatwg-fetch":"whatwg-fetch"}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Signature = Signature;
exports.readArmored = readArmored;
exports.read = read;

var _armor = require('./encoding/armor');

var _armor2 = _interopRequireDefault(_armor);

var _packet = require('./packet');

var _packet2 = _interopRequireDefault(_packet);

var _enums = require('./enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @classdesc Class that represents an OpenPGP signature.
 * @param  {module:packet.List} packetlist The signature packets
 */
function Signature(packetlist) {
  if (!(this instanceof Signature)) {
    return new Signature(packetlist);
  }
  this.packets = packetlist || new _packet2.default.List();
}

/**
 * Returns ASCII armored text of signature
 * @returns {ReadableStream<String>} ASCII armor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @requires encoding/armor
 * @requires packet
 * @requires enums
 * @module signature
 */

Signature.prototype.armor = function () {
  return _armor2.default.encode(_enums2.default.armor.signature, this.packets.write());
};

/**
 * reads an OpenPGP armored signature and returns a signature object
 * @param {String | ReadableStream<String>} armoredText text to be parsed
 * @returns {Signature} new signature object
 * @async
 * @static
 */
async function readArmored(armoredText) {
  const input = await _armor2.default.decode(armoredText);
  return read(input.data);
}

/**
 * reads an OpenPGP signature as byte array and returns a signature object
 * @param {Uint8Array | ReadableStream<Uint8Array>} input   binary signature
 * @returns {Signature}         new signature object
 * @async
 * @static
 */
async function read(input) {
  const packetlist = new _packet2.default.List();
  await packetlist.read(input);
  return new Signature(packetlist);
}

},{"./encoding/armor":112,"./enums":114,"./packet":126}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 */
function ECDHSymmetricKey(data) {
  if (typeof data === 'undefined') {
    data = new Uint8Array([]);
  } else if (_util2.default.isString(data)) {
    data = _util2.default.str_to_Uint8Array(data);
  } else {
    data = new Uint8Array(data);
  }
  this.data = data;
}

/**
 * Read an ECDHSymmetricKey from an Uint8Array
 * @param  {Uint8Array}  input  Where to read the encoded symmetric key from
 * @returns {Number}             Number of read bytes
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Encoded symmetric key for ECDH
 *
 * @requires util
 * @module type/ecdh_symkey
 */

ECDHSymmetricKey.prototype.read = function (input) {
  if (input.length >= 1) {
    const length = input[0];
    if (input.length >= 1 + length) {
      this.data = input.subarray(1, 1 + length);
      return 1 + this.data.length;
    }
  }
  throw new Error('Invalid symmetric key');
};

/**
 * Write an ECDHSymmetricKey as an Uint8Array
 * @returns  {Uint8Array}  An array containing the value
 */
ECDHSymmetricKey.prototype.write = function () {
  return _util2.default.concatUint8Array([new Uint8Array([this.data.length]), this.data]);
};

ECDHSymmetricKey.fromClone = function (clone) {
  return new ECDHSymmetricKey(clone.data);
};

exports.default = ECDHSymmetricKey;

},{"../util":153}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enums = require('../enums.js');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 * @param  {enums.hash}       hash    Hash algorithm
 * @param  {enums.symmetric}  cipher  Symmetric algorithm
 */
function KDFParams(data) {
  if (data && data.length === 2) {
    this.hash = data[0];
    this.cipher = data[1];
  } else {
    this.hash = _enums2.default.hash.sha1;
    this.cipher = _enums2.default.symmetric.aes128;
  }
}

/**
 * Read KDFParams from an Uint8Array
 * @param  {Uint8Array}  input  Where to read the KDFParams from
 * @returns {Number}             Number of read bytes
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Implementation of type KDF parameters
 *
 * {@link https://tools.ietf.org/html/rfc6637#section-7|RFC 6637 7}:
 * A key derivation function (KDF) is necessary to implement the EC
 * encryption.  The Concatenation Key Derivation Function (Approved
 * Alternative 1) [NIST-SP800-56A] with the KDF hash function that is
 * SHA2-256 [FIPS-180-3] or stronger is REQUIRED.
 * @requires enums
 * @module type/kdf_params
 */

KDFParams.prototype.read = function (input) {
  if (input.length < 4 || input[0] !== 3 || input[1] !== 1) {
    throw new Error('Cannot read KDFParams');
  }
  this.hash = input[2];
  this.cipher = input[3];
  return 4;
};

/**
 * Write KDFParams to an Uint8Array
 * @returns  {Uint8Array}  Array with the KDFParams value
 */
KDFParams.prototype.write = function () {
  return new Uint8Array([3, 1, this.hash, this.cipher]);
};

KDFParams.fromClone = function (clone) {
  return new KDFParams([clone.hash, clone.cipher]);
};

exports.default = KDFParams;

},{"../enums.js":114}],149:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 */
function Keyid() {
  this.bytes = '';
}

/**
 * Parsing method for a key id
 * @param {Uint8Array} input Input to read the key id from
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Implementation of type key id
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-3.3|RFC4880 3.3}:
 * A Key ID is an eight-octet scalar that identifies a key.
 * Implementations SHOULD NOT assume that Key IDs are unique.  The
 * section "Enhanced Key Formats" below describes how Key IDs are
 * formed.
 * @requires util
 * @module type/keyid
 */

Keyid.prototype.read = function (bytes) {
  this.bytes = _util2.default.Uint8Array_to_str(bytes.subarray(0, 8));
};

Keyid.prototype.write = function () {
  return _util2.default.str_to_Uint8Array(this.bytes);
};

Keyid.prototype.toHex = function () {
  return _util2.default.str_to_hex(this.bytes);
};

/**
 * Checks equality of Key ID's
 * @param {Keyid} keyid
 * @param {Boolean} matchWildcard Indicates whether to check if either keyid is a wildcard
 */
Keyid.prototype.equals = function (keyid, matchWildcard = false) {
  return matchWildcard && (keyid.isWildcard() || this.isWildcard()) || this.bytes === keyid.bytes;
};

Keyid.prototype.isNull = function () {
  return this.bytes === '';
};

Keyid.prototype.isWildcard = function () {
  return (/^0+$/.test(this.toHex())
  );
};

Keyid.mapToHex = function (keyId) {
  return keyId.toHex();
};

Keyid.fromClone = function (clone) {
  const keyid = new Keyid();
  keyid.bytes = clone.bytes;
  return keyid;
};

Keyid.fromId = function (hex) {
  const keyid = new Keyid();
  keyid.read(_util2.default.hex_to_Uint8Array(hex));
  return keyid;
};

Keyid.wildcard = function () {
  const keyid = new Keyid();
  keyid.read(new Uint8Array(8));
  return keyid;
};

exports.default = Keyid;

},{"../util.js":153}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bn = dereq_bn;

var _bn2 = _interopRequireDefault(_bn);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

// Hint: We hold our MPIs as an array of octets in big endian format preceding a two
// octet scalar: MPI: [a,b,c,d,e,f]
// - MPI size: (a << 8) | b
// - MPI = c | d << 8 | e << ((MPI.length -2)*8) | f ((MPI.length -2)*8)

/**
 * Implementation of type MPI ({@link https://tools.ietf.org/html/rfc4880#section-3.2|RFC4880 3.2})
 * Multiprecision integers (also called MPIs) are unsigned integers used
 * to hold large integers such as the ones used in cryptographic
 * calculations.
 * An MPI consists of two pieces: a two-octet scalar that is the length
 * of the MPI in bits followed by a string of octets that contain the
 * actual integer.
 * @requires bn.js
 * @requires util
 * @module type/mpi
 */

function MPI(data) {
  /** An implementation dependent integer */
  if (data instanceof MPI) {
    this.data = data.data;
  } else if (_bn2.default.isBN(data)) {
    this.fromBN(data);
  } else if (_util2.default.isUint8Array(data)) {
    this.fromUint8Array(data);
  } else if (_util2.default.isString(data)) {
    this.fromString(data);
  } else {
    this.data = null;
  }
}

/**
 * Parsing function for a MPI ({@link https://tools.ietf.org/html/rfc4880#section-3.2|RFC 4880 3.2}).
 * @param {Uint8Array} input  Payload of MPI data
 * @param {String}     endian Endianness of the data; 'be' for big-endian or 'le' for little-endian
 * @returns {Integer}          Length of data read
 */
MPI.prototype.read = function (bytes, endian = 'be') {
  if (_util2.default.isString(bytes)) {
    bytes = _util2.default.str_to_Uint8Array(bytes);
  }

  const bits = bytes[0] << 8 | bytes[1];
  const bytelen = bits + 7 >>> 3;
  const payload = bytes.subarray(2, 2 + bytelen);

  this.fromUint8Array(payload, endian);

  return 2 + bytelen;
};

/**
 * Converts the mpi object to a bytes as specified in
 * {@link https://tools.ietf.org/html/rfc4880#section-3.2|RFC4880 3.2}
 * @param {String} endian Endianness of the payload; 'be' for big-endian or 'le' for little-endian
 * @param {Integer} length Length of the data part of the MPI
 * @returns {Uint8Aray} mpi Byte representation
 */
MPI.prototype.write = function (endian, length) {
  return _util2.default.Uint8Array_to_MPI(this.toUint8Array(endian, length));
};

MPI.prototype.bitLength = function () {
  return (this.data.length - 1) * 8 + _util2.default.nbits(this.data[0]);
};

MPI.prototype.byteLength = function () {
  return this.data.length;
};

MPI.prototype.toUint8Array = function (endian, length) {
  endian = endian || 'be';
  length = length || this.data.length;

  const payload = new Uint8Array(length);
  const start = length - this.data.length;
  if (start < 0) {
    throw new Error('Payload is too large.');
  }

  payload.set(this.data, start);
  if (endian === 'le') {
    payload.reverse();
  }

  return payload;
};

MPI.prototype.fromUint8Array = function (bytes, endian = 'be') {
  this.data = new Uint8Array(bytes.length);
  this.data.set(bytes);

  if (endian === 'le') {
    this.data.reverse();
  }
};

MPI.prototype.toString = function () {
  return _util2.default.Uint8Array_to_str(this.toUint8Array());
};

MPI.prototype.fromString = function (str, endian = 'be') {
  this.fromUint8Array(_util2.default.str_to_Uint8Array(str), endian);
};

MPI.prototype.toBN = function () {
  return new _bn2.default(this.toUint8Array());
};

MPI.prototype.fromBN = function (bn) {
  this.data = bn.toArrayLike(Uint8Array);
};

MPI.fromClone = function (clone) {
  return new MPI(clone.data);
};

exports.default = MPI;

},{"../util":153,"bn.js":17}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _enums = require('../enums');

var _enums2 = _interopRequireDefault(_enums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 */
// OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2015-2016 Decentral
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Wrapper to an OID value
 *
 * {@link https://tools.ietf.org/html/rfc6637#section-11|RFC6637, section 11}:
 * The sequence of octets in the third column is the result of applying
 * the Distinguished Encoding Rules (DER) to the ASN.1 Object Identifier
 * with subsequent truncation.  The truncation removes the two fields of
 * encoded Object Identifier.  The first omitted field is one octet
 * representing the Object Identifier tag, and the second omitted field
 * is the length of the Object Identifier body.  For example, the
 * complete ASN.1 DER encoding for the NIST P-256 curve OID is "06 08 2A
 * 86 48 CE 3D 03 01 07", from which the first entry in the table above
 * is constructed by omitting the first two octets.  Only the truncated
 * sequence of octets is the valid representation of a curve OID.
 * @requires util
 * @requires enums
 * @module type/oid
 */

function OID(oid) {
  if (oid instanceof OID) {
    this.oid = oid.oid;
  } else if (_util2.default.isArray(oid) || _util2.default.isUint8Array(oid)) {
    oid = new Uint8Array(oid);
    if (oid[0] === 0x06) {
      // DER encoded oid byte array
      if (oid[1] !== oid.length - 2) {
        throw new Error('Length mismatch in DER encoded oid');
      }
      oid = oid.subarray(2);
    }
    this.oid = oid;
  } else {
    this.oid = '';
  }
}

/**
 * Method to read an OID object
 * @param  {Uint8Array}  input  Where to read the OID from
 * @returns {Number}             Number of read bytes
 */
OID.prototype.read = function (input) {
  if (input.length >= 1) {
    const length = input[0];
    if (input.length >= 1 + length) {
      this.oid = input.subarray(1, 1 + length);
      return 1 + this.oid.length;
    }
  }
  throw new Error('Invalid oid');
};

/**
 * Serialize an OID object
 * @returns {Uint8Array} Array with the serialized value the OID
 */
OID.prototype.write = function () {
  return _util2.default.concatUint8Array([new Uint8Array([this.oid.length]), this.oid]);
};

/**
 * Serialize an OID object as a hex string
 * @returns {string} String with the hex value of the OID
 */
OID.prototype.toHex = function () {
  return _util2.default.Uint8Array_to_hex(this.oid);
};

/**
 * If a known curve object identifier, return the canonical name of the curve
 * @returns {string} String with the canonical name of the curve
 */
OID.prototype.getName = function () {
  const hex = this.toHex();
  if (_enums2.default.curve[hex]) {
    return _enums2.default.write(_enums2.default.curve, hex);
  } else {
    throw new Error('Unknown curve object identifier.');
  }
};

OID.fromClone = function (clone) {
  return new OID(clone.oid);
};

exports.default = OID;

},{"../enums":114,"../util":153}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _enums = require('../enums.js');

var _enums2 = _interopRequireDefault(_enums);

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * Implementation of the String-to-key specifier
 *
 * {@link https://tools.ietf.org/html/rfc4880#section-3.7|RFC4880 3.7}:
 * String-to-key (S2K) specifiers are used to convert passphrase strings
 * into symmetric-key encryption/decryption keys.  They are used in two
 * places, currently: to encrypt the secret part of private keys in the
 * private keyring, and to convert passphrases to encryption keys for
 * symmetrically encrypted messages.
 * @requires config
 * @requires crypto
 * @requires enums
 * @requires util
 * @module type/s2k
 */

function S2K() {
  /** @type {module:enums.hash} */
  this.algorithm = 'sha256';
  /** @type {module:enums.s2k} */
  this.type = 'iterated';
  /** @type {Integer} */
  this.c = _config2.default.s2k_iteration_count_byte;
  /** Eight bytes of salt in a binary string.
   * @type {String}
   */
  this.salt = null;
}

S2K.prototype.get_count = function () {
  // Exponent bias, defined in RFC4880
  const expbias = 6;

  return 16 + (this.c & 15) << (this.c >> 4) + expbias;
};

/**
 * Parsing function for a string-to-key specifier ({@link https://tools.ietf.org/html/rfc4880#section-3.7|RFC 4880 3.7}).
 * @param {String} input Payload of string-to-key specifier
 * @returns {Integer} Actual length of the object
 */
S2K.prototype.read = function (bytes) {
  let i = 0;
  this.type = _enums2.default.read(_enums2.default.s2k, bytes[i++]);
  this.algorithm = bytes[i++];
  if (this.type !== 'gnu') {
    this.algorithm = _enums2.default.read(_enums2.default.hash, this.algorithm);
  }

  switch (this.type) {
    case 'simple':
      break;

    case 'salted':
      this.salt = bytes.subarray(i, i + 8);
      i += 8;
      break;

    case 'iterated':
      this.salt = bytes.subarray(i, i + 8);
      i += 8;

      // Octet 10: count, a one-octet, coded value
      this.c = bytes[i++];
      break;

    case 'gnu':
      if (_util2.default.Uint8Array_to_str(bytes.subarray(i, i + 3)) === "GNU") {
        i += 3; // GNU
        const gnuExtType = 1000 + bytes[i++];
        if (gnuExtType === 1001) {
          this.type = 'gnu-dummy';
          // GnuPG extension mode 1001 -- don't write secret key at all
        } else {
          throw new Error("Unknown s2k gnu protection mode.");
        }
      } else {
        throw new Error("Unknown s2k type.");
      }
      break;

    default:
      throw new Error("Unknown s2k type.");
  }

  return i;
};

/**
 * Serializes s2k information
 * @returns {Uint8Array} binary representation of s2k
 */
S2K.prototype.write = function () {
  const arr = [new Uint8Array([_enums2.default.write(_enums2.default.s2k, this.type), _enums2.default.write(_enums2.default.hash, this.algorithm)])];

  switch (this.type) {
    case 'simple':
      break;
    case 'salted':
      arr.push(this.salt);
      break;
    case 'iterated':
      arr.push(this.salt);
      arr.push(new Uint8Array([this.c]));
      break;
    case 'gnu':
      throw new Error("GNU s2k type not supported.");
    default:
      throw new Error("Unknown s2k type.");
  }

  return _util2.default.concatUint8Array(arr);
};

/**
 * Produces a key using the specified passphrase and the defined
 * hashAlgorithm
 * @param {String} passphrase Passphrase containing user input
 * @returns {Uint8Array} Produced key with a length corresponding to
 * hashAlgorithm hash length
 */
S2K.prototype.produce_key = async function (passphrase, numBytes) {
  passphrase = _util2.default.encode_utf8(passphrase);

  async function round(prefix, s2k) {
    const algorithm = _enums2.default.write(_enums2.default.hash, s2k.algorithm);

    switch (s2k.type) {
      case 'simple':
        return _crypto2.default.hash.digest(algorithm, _util2.default.concatUint8Array([prefix, passphrase]));

      case 'salted':
        return _crypto2.default.hash.digest(algorithm, _util2.default.concatUint8Array([prefix, s2k.salt, passphrase]));

      case 'iterated':
        {
          const count = s2k.get_count();
          const data = _util2.default.concatUint8Array([s2k.salt, passphrase]);
          const datalen = data.length;
          const isp = new Uint8Array(prefix.length + count + datalen);
          isp.set(prefix);
          for (let pos = prefix.length; pos < count; pos += datalen) {
            isp.set(data, pos);
          }
          return _crypto2.default.hash.digest(algorithm, isp.subarray(0, prefix.length + count));
        }
      case 'gnu':
        throw new Error("GNU s2k type not supported.");

      default:
        throw new Error("Unknown s2k type.");
    }
  }

  const arr = [];
  let rlength = 0;
  const prefix = new Uint8Array(numBytes);

  for (let i = 0; i < numBytes; i++) {
    prefix[i] = 0;
  }

  let i = 0;
  while (rlength < numBytes) {
    const result = await round(prefix.subarray(0, i), this);
    arr.push(result);
    rlength += result.length;
    i++;
  }

  return _util2.default.concatUint8Array(arr).subarray(0, numBytes);
};

S2K.fromClone = function (clone) {
  const s2k = new S2K();
  s2k.algorithm = clone.algorithm;
  s2k.type = clone.type;
  s2k.c = clone.c;
  s2k.salt = clone.salt;
  return s2k;
};

exports.default = S2K;

},{"../config":80,"../crypto":95,"../enums.js":114,"../util.js":153}],153:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/* eslint-disable no-console */

/**
 * This object contains utility functions
 * @requires address-rfc2822
 * @requires web-stream-tools
 * @requires config
 * @requires encoding/base64
 * @module util
 */

// re-import module to access util functions


var _addressRfc = require('address-rfc2822');

var _addressRfc2 = _interopRequireDefault(_addressRfc);

var _webStreamTools = require('web-stream-tools');

var _webStreamTools2 = _interopRequireDefault(_webStreamTools);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _base = require('./encoding/base64');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  isString: function isString(data) {
    return typeof data === 'string' || String.prototype.isPrototypeOf(data);
  },

  isArray: function isArray(data) {
    return Array.prototype.isPrototypeOf(data);
  },

  isUint8Array: _webStreamTools2.default.isUint8Array,

  isStream: _webStreamTools2.default.isStream,

  /**
   * Get transferable objects to pass buffers with zero copy (similar to "pass by reference" in C++)
   *   See: https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage
   * Also, convert ReadableStreams to MessagePorts
   * @param  {Object} obj           the options object to be passed to the web worker
   * @returns {Array<ArrayBuffer>}   an array of binary data to be passed
   */
  getTransferables: function getTransferables(obj, zero_copy) {
    const transferables = [];
    _util2.default.collectTransferables(obj, transferables, zero_copy);
    return transferables.length ? transferables : undefined;
  },

  collectTransferables: function collectTransferables(obj, collection, zero_copy) {
    if (!obj) {
      return;
    }

    if (_util2.default.isUint8Array(obj)) {
      if (zero_copy && collection.indexOf(obj.buffer) === -1 && !(navigator.userAgent.indexOf('Version/11.1') !== -1 || // Safari 11.1
      (navigator.userAgent.match(/Chrome\/(\d+)/) || [])[1] < 56 && navigator.userAgent.indexOf('Edge') === -1 // Chrome < 56
      )) {
        collection.push(obj.buffer);
      }
      return;
    }
    if (Object.prototype.isPrototypeOf(obj)) {
      Object.entries(obj).forEach(([key, value]) => {
        // recursively search all children
        if (_util2.default.isStream(value)) {
          if (value.locked) {
            obj[key] = null;
          } else {
            const transformed = _webStreamTools2.default.transformPair(value, async readable => {
              const reader = _webStreamTools2.default.getReader(readable);

              var _ref = new MessageChannel();

              const port1 = _ref.port1,
                    port2 = _ref.port2;

              port1.onmessage = async function ({ data: { action } }) {
                if (action === 'read') {
                  try {
                    const result = await reader.read();
                    port1.postMessage(result, _util2.default.getTransferables(result));
                  } catch (e) {
                    port1.postMessage({ error: e.message });
                  }
                } else if (action === 'cancel') {
                  await transformed.cancel();
                  port1.postMessage();
                }
              };
              obj[key] = port2;
              collection.push(port2);
            });
          }
          return;
        }
        if (Object.prototype.toString.call(value) === '[object MessagePort]') {
          throw new Error("Can't transfer the same stream twice.");
        }
        _util2.default.collectTransferables(value, collection, zero_copy);
      });
    }
  },

  /**
   * Convert MessagePorts back to ReadableStreams
   * @param  {Object} obj
   * @returns {Object}
   */
  restoreStreams: function restoreStreams(obj) {
    if (Object.prototype.isPrototypeOf(obj) && !Uint8Array.prototype.isPrototypeOf(obj)) {
      Object.entries(obj).forEach(([key, value]) => {
        // recursively search all children
        if (Object.prototype.toString.call(value) === '[object MessagePort]') {
          obj[key] = new ReadableStream({
            pull(controller) {
              return new Promise(resolve => {
                value.onmessage = evt => {
                  var _evt$data = evt.data;
                  const done = _evt$data.done,
                        value = _evt$data.value,
                        error = _evt$data.error;

                  if (error) {
                    controller.error(new Error(error));
                  } else if (!done) {
                    controller.enqueue(value);
                  } else {
                    controller.close();
                  }
                  resolve();
                };
                value.postMessage({ action: 'read' });
              });
            },
            cancel() {
              return new Promise(resolve => {
                value.onmessage = resolve;
                value.postMessage({ action: 'cancel' });
              });
            }
          }, { highWaterMark: 0 });
          return;
        }
        _util2.default.restoreStreams(value);
      });
    }
    return obj;
  },

  readNumber: function readNumber(bytes) {
    let n = 0;
    for (let i = 0; i < bytes.length; i++) {
      n += 256 ** i * bytes[bytes.length - 1 - i];
    }
    return n;
  },

  writeNumber: function writeNumber(n, bytes) {
    const b = new Uint8Array(bytes);
    for (let i = 0; i < bytes; i++) {
      b[i] = n >> 8 * (bytes - i - 1) & 0xFF;
    }

    return b;
  },

  readDate: function readDate(bytes) {
    const n = _util2.default.readNumber(bytes);
    const d = new Date(n * 1000);
    return d;
  },

  writeDate: function writeDate(time) {
    const numeric = Math.floor(time.getTime() / 1000);

    return _util2.default.writeNumber(numeric, 4);
  },

  normalizeDate: function normalizeDate(time = Date.now()) {
    return time === null || time === Infinity ? time : new Date(Math.floor(+time / 1000) * 1000);
  },

  /**
   * Create hex string from a binary
   * @param {String} str String to convert
   * @returns {String} String containing the hexadecimal values
   */
  str_to_hex: function str_to_hex(str) {
    if (str === null) {
      return "";
    }
    const r = [];
    const e = str.length;
    let c = 0;
    let h;
    while (c < e) {
      h = str.charCodeAt(c++).toString(16);
      while (h.length < 2) {
        h = "0" + h;
      }
      r.push("" + h);
    }
    return r.join('');
  },

  /**
   * Create binary string from a hex encoded string
   * @param {String} str Hex string to convert
   * @returns {String}
   */
  hex_to_str: function hex_to_str(hex) {
    let str = '';
    for (let i = 0; i < hex.length; i += 2) {
      str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    }
    return str;
  },

  /**
   * Convert a Uint8Array to an MPI-formatted Uint8Array.
   * Note: the output is **not** an MPI object.
   * @see {@link module:type/mpi/MPI.fromUint8Array}
   * @see {@link module:type/mpi/MPI.toUint8Array}
   * @param {Uint8Array} bin An array of 8-bit integers to convert
   * @returns {Uint8Array} MPI-formatted Uint8Array
   */
  Uint8Array_to_MPI: function Uint8Array_to_MPI(bin) {
    const size = (bin.length - 1) * 8 + _util2.default.nbits(bin[0]);
    const prefix = Uint8Array.from([(size & 0xFF00) >> 8, size & 0xFF]);
    return _util2.default.concatUint8Array([prefix, bin]);
  },

  /**
   * Convert a Base-64 encoded string an array of 8-bit integer
   *
   * Note: accepts both Radix-64 and URL-safe strings
   * @param {String} base64 Base-64 encoded string to convert
   * @returns {Uint8Array} An array of 8-bit integers
   */
  b64_to_Uint8Array: function b64_to_Uint8Array(base64) {
    return _base2.default.decode(base64.replace(/-/g, '+').replace(/_/g, '/'));
  },

  /**
   * Convert an array of 8-bit integer to a Base-64 encoded string
   * @param {Uint8Array} bytes An array of 8-bit integers to convert
   * @param {bool}       url   If true, output is URL-safe
   * @returns {String}          Base-64 encoded string
   */
  Uint8Array_to_b64: function Uint8Array_to_b64(bytes, url) {
    return _base2.default.encode(bytes, url).replace(/(\n)/g, '');
  },

  /**
   * Convert a hex string to an array of 8-bit integers
   * @param {String} hex  A hex string to convert
   * @returns {Uint8Array} An array of 8-bit integers
   */
  hex_to_Uint8Array: function hex_to_Uint8Array(hex) {
    const result = new Uint8Array(hex.length >> 1);
    for (let k = 0; k < hex.length >> 1; k++) {
      result[k] = parseInt(hex.substr(k << 1, 2), 16);
    }
    return result;
  },

  /**
   * Convert an array of 8-bit integers to a hex string
   * @param {Uint8Array} bytes Array of 8-bit integers to convert
   * @returns {String} Hexadecimal representation of the array
   */
  Uint8Array_to_hex: function Uint8Array_to_hex(bytes) {
    const r = [];
    const e = bytes.length;
    let c = 0;
    let h;
    while (c < e) {
      h = bytes[c++].toString(16);
      while (h.length < 2) {
        h = "0" + h;
      }
      r.push("" + h);
    }
    return r.join('');
  },

  /**
   * Convert a string to an array of 8-bit integers
   * @param {String} str String to convert
   * @returns {Uint8Array} An array of 8-bit integers
   */
  str_to_Uint8Array: function str_to_Uint8Array(str) {
    return _webStreamTools2.default.transform(str, str => {
      if (!_util2.default.isString(str)) {
        throw new Error('str_to_Uint8Array: Data must be in the form of a string');
      }

      const result = new Uint8Array(str.length);
      for (let i = 0; i < str.length; i++) {
        result[i] = str.charCodeAt(i);
      }
      return result;
    });
  },

  /**
   * Convert an array of 8-bit integers to a string
   * @param {Uint8Array} bytes An array of 8-bit integers to convert
   * @returns {String} String representation of the array
   */
  Uint8Array_to_str: function Uint8Array_to_str(bytes) {
    bytes = new Uint8Array(bytes);
    const result = [];
    const bs = 1 << 14;
    const j = bytes.length;

    for (let i = 0; i < j; i += bs) {
      result.push(String.fromCharCode.apply(String, bytes.subarray(i, i + bs < j ? i + bs : j)));
    }
    return result.join('');
  },

  /**
   * Convert a native javascript string to a Uint8Array of utf8 bytes
   * @param {String|ReadableStream} str The string to convert
   * @returns {Uint8Array|ReadableStream} A valid squence of utf8 bytes
   */
  encode_utf8: function encode_utf8(str) {
    const encoder = new TextEncoder('utf-8');
    // eslint-disable-next-line no-inner-declarations
    function process(value, lastChunk = false) {
      return encoder.encode(value, { stream: !lastChunk });
    }
    return _webStreamTools2.default.transform(str, process, () => process('', true));
  },

  /**
   * Convert a Uint8Array of utf8 bytes to a native javascript string
   * @param {Uint8Array|ReadableStream} utf8 A valid squence of utf8 bytes
   * @returns {String|ReadableStream} A native javascript string
   */
  decode_utf8: function decode_utf8(utf8) {
    const decoder = new TextDecoder('utf-8');
    // eslint-disable-next-line no-inner-declarations
    function process(value, lastChunk = false) {
      return decoder.decode(value, { stream: !lastChunk });
    }
    return _webStreamTools2.default.transform(utf8, process, () => process(new Uint8Array(), true));
  },

  /**
   * Concat a list of Uint8Arrays, Strings or Streams
   * The caller must not mix Uint8Arrays with Strings, but may mix Streams with non-Streams.
   * @param {Array<Uint8Array|String|ReadableStream>} Array of Uint8Arrays/Strings/Streams to concatenate
   * @returns {Uint8Array|String|ReadableStream} Concatenated array
   */
  concat: _webStreamTools2.default.concat,

  /**
   * Concat Uint8Arrays
   * @param {Array<Uint8Array>} Array of Uint8Arrays to concatenate
   * @returns {Uint8Array} Concatenated array
   */
  concatUint8Array: _webStreamTools2.default.concatUint8Array,

  /**
   * Check Uint8Array equality
   * @param {Uint8Array} first array
   * @param {Uint8Array} second array
   * @returns {Boolean} equality
   */
  equalsUint8Array: function equalsUint8Array(array1, array2) {
    if (!_util2.default.isUint8Array(array1) || !_util2.default.isUint8Array(array2)) {
      throw new Error('Data must be in the form of a Uint8Array');
    }

    if (array1.length !== array2.length) {
      return false;
    }

    for (let i = 0; i < array1.length; i++) {
      if (array1[i] !== array2[i]) {
        return false;
      }
    }
    return true;
  },

  /**
   * Calculates a 16bit sum of a Uint8Array by adding each character
   * codes modulus 65535
   * @param {Uint8Array} Uint8Array to create a sum of
   * @returns {Uint8Array} 2 bytes containing the sum of all charcodes % 65535
   */
  write_checksum: function write_checksum(text) {
    let s = 0;
    for (let i = 0; i < text.length; i++) {
      s = s + text[i] & 0xFFFF;
    }
    return _util2.default.writeNumber(s, 2);
  },

  /**
   * Helper function to print a debug message. Debug
   * messages are only printed if
   * @link module:config/config.debug is set to true.
   * @param {String} str String of the debug message
   */
  print_debug: function print_debug(str) {
    if (_config2.default.debug) {
      console.log(str);
    }
  },

  /**
   * Helper function to print a debug message. Debug
   * messages are only printed if
   * @link module:config/config.debug is set to true.
   * Different than print_debug because will call Uint8Array_to_hex iff necessary.
   * @param {String} str String of the debug message
   */
  print_debug_hexarray_dump: function print_debug_hexarray_dump(str, arrToHex) {
    if (_config2.default.debug) {
      str += ': ' + _util2.default.Uint8Array_to_hex(arrToHex);
      console.log(str);
    }
  },

  /**
   * Helper function to print a debug message. Debug
   * messages are only printed if
   * @link module:config/config.debug is set to true.
   * Different than print_debug because will call str_to_hex iff necessary.
   * @param {String} str String of the debug message
   */
  print_debug_hexstr_dump: function print_debug_hexstr_dump(str, strToHex) {
    if (_config2.default.debug) {
      str += _util2.default.str_to_hex(strToHex);
      console.log(str);
    }
  },

  /**
   * Helper function to print a debug error. Debug
   * messages are only printed if
   * @link module:config/config.debug is set to true.
   * @param {String} str String of the debug message
   */
  print_debug_error: function print_debug_error(error) {
    if (_config2.default.debug) {
      console.error(error);
    }
  },

  /**
   * Read a stream to the end and print it to the console when it's closed.
   * @param {String} str String of the debug message
   * @param {ReadableStream|Uint8array|String} input Stream to print
   * @param {Function} concat Function to concatenate chunks of the stream (defaults to util.concat).
   */
  print_entire_stream: function print_entire_stream(str, input, concat) {
    _webStreamTools2.default.readToEnd(_webStreamTools2.default.clone(input), concat).then(result => {
      console.log(str + ': ', result);
    });
  },

  getLeftNBits: function getLeftNBits(array, bitcount) {
    const rest = bitcount % 8;
    if (rest === 0) {
      return array.subarray(0, bitcount / 8);
    }
    const bytes = (bitcount - rest) / 8 + 1;
    const result = array.subarray(0, bytes);
    return _util2.default.shiftRight(result, 8 - rest); // +String.fromCharCode(string.charCodeAt(bytes -1) << (8-rest) & 0xFF);
  },

  // returns bit length of the integer x
  nbits: function nbits(x) {
    let r = 1;
    let t = x >>> 16;
    if (t !== 0) {
      x = t;
      r += 16;
    }
    t = x >> 8;
    if (t !== 0) {
      x = t;
      r += 8;
    }
    t = x >> 4;
    if (t !== 0) {
      x = t;
      r += 4;
    }
    t = x >> 2;
    if (t !== 0) {
      x = t;
      r += 2;
    }
    t = x >> 1;
    if (t !== 0) {
      x = t;
      r += 1;
    }
    return r;
  },

  /**
   * If S[1] == 0, then double(S) == (S[2..128] || 0);
   * otherwise, double(S) == (S[2..128] || 0) xor
   * (zeros(120) || 10000111).
   *
   * Both OCB and EAX (through CMAC) require this function to be constant-time.
   *
   * @param {Uint8Array} data
   */
  double: function double(data) {
    const double_var = new Uint8Array(data.length);
    const last = data.length - 1;
    for (let i = 0; i < last; i++) {
      double_var[i] = data[i] << 1 ^ data[i + 1] >> 7;
    }
    double_var[last] = data[last] << 1 ^ (data[0] >> 7) * 0x87;
    return double_var;
  },

  /**
   * Shift a Uint8Array to the right by n bits
   * @param {Uint8Array} array The array to shift
   * @param {Integer} bits Amount of bits to shift (MUST be smaller
   * than 8)
   * @returns {String} Resulting array.
   */
  shiftRight: function shiftRight(array, bits) {
    if (bits) {
      for (let i = array.length - 1; i >= 0; i--) {
        array[i] >>= bits;
        if (i > 0) {
          array[i] |= array[i - 1] << 8 - bits;
        }
      }
    }
    return array;
  },

  /**
   * Get native Web Cryptography api, only the current version of the spec.
   * The default configuration is to use the api when available. But it can
   * be deactivated with config.use_native
   * @returns {Object}   The SubtleCrypto api or 'undefined'
   */
  getWebCrypto: function getWebCrypto() {
    if (!_config2.default.use_native) {
      return;
    }

    return typeof window !== 'undefined' && window.crypto && window.crypto.subtle;
  },

  /**
   * Get native Web Cryptography api for all browsers, including legacy
   * implementations of the spec e.g IE11 and Safari 8/9. The default
   * configuration is to use the api when available. But it can be deactivated
   * with config.use_native
   * @returns {Object}   The SubtleCrypto api or 'undefined'
   */
  getWebCryptoAll: function getWebCryptoAll() {
    if (!_config2.default.use_native) {
      return;
    }

    if (typeof window !== 'undefined') {
      if (window.crypto) {
        return window.crypto.subtle || window.crypto.webkitSubtle;
      }
      if (window.msCrypto) {
        return window.msCrypto.subtle;
      }
    }
  },

  /**
   * Detect Node.js runtime.
   */
  detectNode: function detectNode() {
    return typeof global.process === 'object' && typeof global.process.versions === 'object';
  },

  /**
   * Get native Node.js module
   * @param {String}     The module to require
   * @returns {Object}   The required module or 'undefined'
   */
  nodeRequire: function nodeRequire(module) {
    if (!_util2.default.detectNode()) {
      return;
    }

    // Requiring the module dynamically allows us to access the native node module.
    // otherwise, it gets replaced with the browserified version
    // eslint-disable-next-line import/no-dynamic-require
    return require(module);
  },

  /**
   * Get native Node.js crypto api. The default configuration is to use
   * the api when available. But it can also be deactivated with config.use_native
   * @returns {Object}   The crypto module or 'undefined'
   */
  getNodeCrypto: function getNodeCrypto() {
    if (!_config2.default.use_native) {
      return;
    }

    return _util2.default.nodeRequire('crypto');
  },

  getNodeZlib: function getNodeZlib() {
    if (!_config2.default.use_native) {
      return;
    }

    return _util2.default.nodeRequire('zlib');
  },

  /**
   * Get native Node.js Buffer constructor. This should be used since
   * Buffer is not available under browserify.
   * @returns {Function}   The Buffer constructor or 'undefined'
   */
  getNodeBuffer: function getNodeBuffer() {
    return (_util2.default.nodeRequire('buffer') || {}).Buffer;
  },

  getNodeStream: function getNodeStream() {
    return (_util2.default.nodeRequire('stream') || {}).Readable;
  },

  getHardwareConcurrency: function getHardwareConcurrency() {
    if (_util2.default.detectNode()) {
      const os = _util2.default.nodeRequire('os');
      return os.cpus().length;
    }

    return navigator.hardwareConcurrency || 1;
  },

  isEmailAddress: function isEmailAddress(data) {
    if (!_util2.default.isString(data)) {
      return false;
    }
    const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+([a-zA-Z]{2,}|xn--[a-zA-Z\-0-9]+)))$/;
    return re.test(data);
  },

  /**
   * Format user id for internal use.
   */
  formatUserId: function formatUserId(id) {
    // name, email address and comment can be empty but must be of the correct type
    if (id.name && !_util2.default.isString(id.name) || id.email && !_util2.default.isEmailAddress(id.email) || id.comment && !_util2.default.isString(id.comment)) {
      throw new Error('Invalid user id format');
    }
    const components = [];
    if (id.name) {
      components.push(id.name);
    }
    if (id.comment) {
      components.push(`(${id.comment})`);
    }
    if (id.email) {
      components.push(`<${id.email}>`);
    }
    return components.join(' ');
  },

  /**
   * Parse user id.
   */
  parseUserId: function parseUserId(userid) {
    if (userid.length > _config2.default.max_userid_length) {
      throw new Error('User id string is too long');
    }
    try {
      var _rfc2822$parse = _addressRfc2.default.parse(userid),
          _rfc2822$parse2 = _slicedToArray(_rfc2822$parse, 1),
          _rfc2822$parse2$ = _rfc2822$parse2[0];

      const name = _rfc2822$parse2$.phrase,
            email = _rfc2822$parse2$.address,
            comment = _rfc2822$parse2$.comment;

      return { name, email, comment: comment.replace(/^\(|\)$/g, '') };
    } catch (e) {
      throw new Error('Invalid user id format');
    }
  },

  /**
   * Normalize line endings to \r\n
   */
  canonicalizeEOL: function canonicalizeEOL(text) {
    return _webStreamTools2.default.transform(_util2.default.nativeEOL(text), value => value.replace(/\r/g, "\n").replace(/\n/g, "\r\n"));
  },

  /**
   * Convert line endings from canonicalized \r\n to native \n
   */
  nativeEOL: function nativeEOL(text) {
    let lastChar = '';
    return _webStreamTools2.default.transform(text, value => {
      value = lastChar + value;
      if (value[value.length - 1] === '\r') {
        lastChar = '\r';
        value = value.slice(0, -1);
      } else {
        lastChar = '';
      }
      return value.replace(/\r\n/g, '\n');
    }, () => lastChar);
  },

  /**
   * Remove trailing spaces and tabs from each line
   */
  removeTrailingSpaces: function removeTrailingSpaces(text) {
    return text.split('\n').map(line => {
      let i = line.length - 1;
      for (; i >= 0 && (line[i] === ' ' || line[i] === '\t'); i--);
      return line.substr(0, i + 1);
    }).join('\n');
  },

  /**
   * Encode input buffer using Z-Base32 encoding.
   * See: https://tools.ietf.org/html/rfc6189#section-5.1.6
   *
   * @param {Uint8Array} data The binary data to encode
   * @returns {String} Binary data encoded using Z-Base32
   */
  encodeZBase32: function encodeZBase32(data) {
    if (data.length === 0) {
      return "";
    }
    const ALPHABET = "ybndrfg8ejkmcpqxot1uwisza345h769";
    const SHIFT = 5;
    const MASK = 31;
    let buffer = data[0];
    let index = 1;
    let bitsLeft = 8;
    let result = '';
    while (bitsLeft > 0 || index < data.length) {
      if (bitsLeft < SHIFT) {
        if (index < data.length) {
          buffer <<= 8;
          buffer |= data[index++] & 0xff;
          bitsLeft += 8;
        } else {
          const pad = SHIFT - bitsLeft;
          buffer <<= pad;
          bitsLeft += pad;
        }
      }
      bitsLeft -= SHIFT;
      result += ALPHABET[MASK & buffer >> bitsLeft];
    }
    return result;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./config":80,"./encoding/base64":113,"./util":153,"address-rfc2822":2,"web-stream-tools":76}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // OpenPGP.js - An OpenPGP implementation in javascript
// Copyright (C) 2018 Wiktor Kwapisiewicz
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview This class implements a client for the Web Key Directory (wkd) protocol
 * in order to lookup keys on designated servers.
 * See: https://datatracker.ietf.org/doc/draft-koch-openpgp-webkey-service/
 * @module wkd
 */

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _crypto = require('./crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _key = require('./key');

var keyMod = _interopRequireWildcard(_key);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initialize the WKD client
 * @constructor
 */
function WKD() {
  this._fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');
}

/**
 * Search for a public key using Web Key Directory protocol.
 * @param   {String}   options.email         User's email.
 * @param   {Boolean}  options.rawBytes      Returns Uint8Array instead of parsed key.
 * @returns {Promise<Uint8Array|
 *           {keys: Array<module:key.Key>,
 *            err: (Array<Error>|null)}>}     The public key.
 * @async
 */
WKD.prototype.lookup = async function (options) {
  const fetch = this._fetch;

  if (!options.email) {
    throw new Error('You must provide an email parameter!');
  }

  if (!_util2.default.isEmailAddress(options.email)) {
    throw new Error('Invalid e-mail address.');
  }

  var _$exec = /(.*)@(.*)/.exec(options.email),
      _$exec2 = _slicedToArray(_$exec, 3);

  const localPart = _$exec2[1],
        domain = _$exec2[2];

  const localEncoded = _util2.default.encodeZBase32((await _crypto2.default.hash.sha1(_util2.default.str_to_Uint8Array(localPart.toLowerCase()))));

  const url = `https://${domain}/.well-known/openpgpkey/hu/${localEncoded}`;

  return fetch(url).then(function (response) {
    if (response.status === 200) {
      return response.arrayBuffer();
    }
  }).then(function (publicKey) {
    if (publicKey) {
      const rawBytes = new Uint8Array(publicKey);
      if (options.rawBytes) {
        return rawBytes;
      }
      return keyMod.read(rawBytes);
    }
  });
};

exports.default = WKD;

},{"./crypto":95,"./key":117,"./util":153,"node-fetch":"node-fetch"}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _crypto = require('../crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _packet = require('../packet');

var _packet2 = _interopRequireDefault(_packet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initializes a new proxy and loads the web worker
 * @param {String} path            The path to the worker or 'openpgp.worker.js' by default
 * @param {Number} n               number of workers to initialize if path given
 * @param {Object} config          config The worker configuration
 * @param {Array<Object>} worker   alternative to path parameter: web worker initialized with 'openpgp.worker.js'
 * @constructor
 */
// GPG4Browsers - An OpenPGP implementation in javascript
// Copyright (C) 2011 Recurity Labs GmbH
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

/**
 * @fileoverview Provides functions for maintaining browser workers
 * @see module:openpgp.initWorker
 * @see module:openpgp.getWorker
 * @see module:openpgp.destroyWorker
 * @see module:worker/worker
 * @requires util
 * @requires config
 * @requires crypto
 * @requires packet
 * @module worker/async_proxy
 */

function AsyncProxy({ path = 'openpgp.worker.js', n = 1, workers = [], config } = {}) {
  /**
   * Message handling
   */
  const handleMessage = workerId => event => {
    const msg = event.data;
    switch (msg.event) {
      case 'loaded':
        this.workers[workerId].loadedResolve(true);
        break;
      case 'method-return':
        if (msg.err) {
          // fail
          const err = new Error(msg.err);
          // add worker stack
          err.workerStack = msg.stack;
          this.tasks[msg.id].reject(err);
        } else {
          // success
          this.tasks[msg.id].resolve(msg.data);
        }
        delete this.tasks[msg.id];
        this.workers[workerId].requests--;
        break;
      case 'request-seed':
        this.seedRandom(workerId, msg.amount);
        break;
      default:
        throw new Error('Unknown Worker Event.');
    }
  };

  if (workers.length) {
    this.workers = workers;
  } else {
    this.workers = [];
    while (this.workers.length < n) {
      this.workers.push(new Worker(path));
    }
  }

  let workerId = 0;
  this.workers.forEach(worker => {
    worker.loadedPromise = new Promise(resolve => {
      worker.loadedResolve = resolve;
    });
    worker.requests = 0;
    worker.onmessage = handleMessage(workerId++);
    worker.onerror = e => {
      worker.loadedResolve(false);
      console.error('Unhandled error in openpgp worker: ' + e.message + ' (' + e.filename + ':' + e.lineno + ')');
      return false;
    };

    if (config) {
      worker.postMessage({ event: 'configure', config });
    }
  });

  // Cannot rely on task order being maintained, use object keyed by request ID to track tasks
  this.tasks = {};
  this.currentID = 0;
}

/**
 * Returns a promise that resolves when all workers have finished loading
 * @returns {Promise<Boolean>} Resolves to true if all workers have loaded succesfully; false otherwise
*/
AsyncProxy.prototype.loaded = async function () {
  const loaded = await Promise.all(this.workers.map(worker => worker.loadedPromise));
  return loaded.every(Boolean);
};

/**
 * Get new request ID
 * @returns {integer}          New unique request ID
*/
AsyncProxy.prototype.getID = function () {
  return this.currentID++;
};

/**
 * Send message to worker with random data
 * @param  {Integer} size Number of bytes to send
 * @async
 */
AsyncProxy.prototype.seedRandom = async function (workerId, size) {
  const buf = await _crypto2.default.random.getRandomBytes(size);
  this.workers[workerId].postMessage({ event: 'seed-random', buf }, _util2.default.getTransferables(buf, true));
};

/**
 * Terminates the workers
 */
AsyncProxy.prototype.terminate = function () {
  this.workers.forEach(worker => {
    worker.terminate();
  });
};

/**
 * Generic proxy function that handles all commands from the public api.
 * @param  {String} method    the public api function to be delegated to the worker thread
 * @param  {Object} options   the api function's options
 * @returns {Promise}          see the corresponding public api functions for their return types
 * @async
 */
AsyncProxy.prototype.delegate = function (method, options) {

  const id = this.getID();
  const requests = this.workers.map(worker => worker.requests);
  const minRequests = Math.min(...requests);
  let workerId = 0;
  for (; workerId < this.workers.length; workerId++) {
    if (this.workers[workerId].requests === minRequests) {
      break;
    }
  }

  return new Promise((_resolve, reject) => {
    // clone packets (for web worker structured cloning algorithm)
    this.workers[workerId].postMessage({ id: id, event: method, options: _packet2.default.clone.clonePackets(options) }, _util2.default.getTransferables(options, _config2.default.zero_copy));
    this.workers[workerId].requests++;

    // remember to handle parsing cloned packets from worker
    this.tasks[id] = { resolve: data => _resolve(_packet2.default.clone.parseClonedPackets(_util2.default.restoreStreams(data), method)), reject };
  });
};

exports.default = AsyncProxy;

},{"../config":80,"../crypto":95,"../packet":126,"../util.js":153}]},{},[116])(116)
});


	const openpgp = module.exports;
	module.exports = {};

	global['openpgp'] = openpgp;

})();
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */
/// <reference path="../../../flowcrypt-node-modules/node_modules/@types/node/index.d.ts" />
/// <reference path="./core/types/openpgp.d.ts" />


Object.defineProperty(exports, "__esModule", {
  value: true
});

const https = __webpack_require__(1);

const parse_1 = __webpack_require__(2);

const fmt_1 = __webpack_require__(3);

const endpoints_1 = __webpack_require__(18);

const native_1 = __webpack_require__(20);

const util_1 = __webpack_require__(5);

util_1.setGlobals();
const doPrintDebug = Boolean(NODE_DEBUG === 'true');
const doProfile = Boolean(APP_PROFILE === 'true');
const doPrintReplay = Boolean(NODE_PRINT_REPLAY === 'true');
const endpoints = new endpoints_1.Endpoints();

const delegateReqToEndpoint = async (endpointName, uncheckedReq, data) => {
  const endpointHandler = endpoints[endpointName];

  if (endpointHandler) {
    return endpointHandler(uncheckedReq, data);
  }

  throw new fmt_1.HttpClientErr(`unknown endpoint: ${endpointName}`);
};

const handleReq = async (req, res, receivedAt) => {
  if (doProfile) {
    console.debug(`PROFILE[${Date.now() - receivedAt}ms] new request ${req.url}`);
  }

  if (!NODE_AUTH_HEADER || !NODE_SSL_KEY || !NODE_SSL_CRT || !NODE_SSL_CA) {
    throw new Error('Missing NODE_AUTH_HEADER, NODE_SSL_CA, NODE_SSL_KEY or NODE_SSL_CRT');
  }

  if (req.headers['authorization'] !== NODE_AUTH_HEADER) {
    throw new fmt_1.HttpAuthErr('Wrong Authorization');
  }

  if (req.url === '/' && req.method === 'GET') {
    res.setHeader('content-type', 'text/html');
    return [fmt_1.indexHtml];
  }

  if (req.url === '/' && req.method === 'POST') {
    const {
      endpoint,
      request,
      data
    } = await parse_1.parseReq(req, doPrintDebug);

    if (doProfile) {
      console.debug(`PROFILE[${Date.now() - receivedAt}ms] finished receiving and parsing request+data`);
    }

    if (doPrintDebug) {
      console.debug(`parsed endpoint:`, endpoint);
      console.debug(`parsed request:`, request);
    }

    if (doPrintReplay) {
      fmt_1.printReplayTestDefinition(endpoint, request, Buffer.concat(data));
    }

    const endpointResponse = await delegateReqToEndpoint(endpoint, request, data);

    if (doProfile) {
      console.debug(`PROFILE[${Date.now() - receivedAt}ms] finished processing request`);
    }

    return endpointResponse;
  }

  throw new fmt_1.HttpClientErr(`unknown path ${req.url}`);
};

const serverOptins = {
  key: NODE_SSL_KEY,
  cert: NODE_SSL_CRT,
  ca: NODE_SSL_CA,
  requestCert: true,
  rejectUnauthorized: true
};
const LISTEN_PORT = Number(NODE_PORT);

if (isNaN(LISTEN_PORT) || LISTEN_PORT < 1024) {
  throw new Error('Wrong or no NODE_PORT supplied');
}

const sendRes = (res, buffers) => {
  res.end(Buffer.concat(buffers));
};

const server = https.createServer(serverOptins, (request, res) => {
  const receivedAt = Date.now();
  handleReq(request, res, receivedAt).then(buffers => {
    if (doProfile) {
      console.debug(`PROFILE[${Date.now() - receivedAt}ms] begin sending response`);
    }

    sendRes(res, buffers);

    if (doProfile) {
      console.debug(`PROFILE[${Date.now() - receivedAt}ms] response sent, DONE`);
    }
  }).catch(e => {
    res.statusCode = 200;

    if (e instanceof fmt_1.HttpAuthErr) {
      res.setHeader('WWW-Authenticate', 'Basic realm="flowcrypt-android-node"');
    } else if (!(e instanceof fmt_1.HttpClientErr)) {
      console.error(e);
    }

    res.end(fmt_1.fmtErr(e));
  });
});
server.listen(LISTEN_PORT, 'localhost');
server.on('listening', () => {
  const address = server.address();
  const msg = `listening on ${typeof address === 'object' ? address.port : address} APP_ENV:${APP_ENV}`;
  console.info(msg);
  native_1.sendNativeMessageToJava(msg);
});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const fmt_1 = __webpack_require__(3);

const endpoints_1 = __webpack_require__(18);

const NEWLINE = Buffer.from('\n');

exports.parseReq = (r, debug) => new Promise((resolve, reject) => {
  const initBuffers = [];
  const data = [];
  let newlinesEncountered = 0;
  let totalLen = 0;
  r.on('data', chunk => {
    if (debug) {
      totalLen += chunk.length;
      endpoints_1.Debug.printChunk(`http chunk`, chunk);
    }

    let byteOffset = 0;

    while (newlinesEncountered < 2) {
      // console.log(`while newlinesEncountered: ${newlinesEncountered}`)
      // console.log(`byteOffset: ${byteOffset}`);
      const nextNewlineIndex = chunk.indexOf(NEWLINE, byteOffset); // console.log(`nextNewlineIndex: ${nextNewlineIndex}`)

      if (nextNewlineIndex === -1) {
        // console.log(`pushing -1`);
        initBuffers.push(chunk.subarray(byteOffset));
        return;
      }

      const beginNextLine = nextNewlineIndex + NEWLINE.length; // console.log(`beginNextLine: ${beginNextLine}`);

      initBuffers.push(chunk.slice(byteOffset, beginNextLine));
      byteOffset = beginNextLine;
      newlinesEncountered++;
    }

    data.push(chunk.slice(byteOffset));
  });
  r.on('end', () => {
    if (debug) {
      const initLen = initBuffers.map(b => b.length).reduce((a, b) => a + b);
      const dataLen = data.map(b => b.length).reduce((a, b) => a + b);
      console.log(`Reached end of stream. Total stream length: ${totalLen} of which ${initLen} was first two lines and ${dataLen} was data`);

      for (let i = 0; i < initBuffers.length; i++) {
        endpoints_1.Debug.printChunk(`initBuffer ${i}`, initBuffers[i]);
      }

      for (let i = 0; i < data.length; i++) {
        endpoints_1.Debug.printChunk(`dataBuffer ${i}`, data[i]);
      }
    }

    if (initBuffers.length && data.length) {
      const [endpointLine, requestLine] = Buffer.concat(initBuffers).toString().split(Buffer.from(NEWLINE).toString());

      if (debug) {
        endpoints_1.Debug.printChunk('endpointLine', Buffer.from(endpointLine));
        endpoints_1.Debug.printChunk('requestLine', Buffer.from(requestLine));
      }

      try {
        const request = JSON.parse(requestLine.trim());
        const endpoint = endpointLine.trim();
        resolve({
          endpoint,
          request,
          data
        });
      } catch (e) {
        if (debug) {
          console.log('---- begin faulty input ----');
          console.log(requestLine);
          console.log('---- end faulty input ----');
        }

        reject(new fmt_1.HttpClientErr(`cannot parse request part as json: ${String(e)}`));
      }
    } else {
      reject(new fmt_1.HttpClientErr('missing endpoint or request part'));
    }
  });
});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const common_1 = __webpack_require__(4);

const pgp_1 = __webpack_require__(7);

const xss_1 = __webpack_require__(17);

const buf_1 = __webpack_require__(15);

class HttpAuthErr extends Error {}

exports.HttpAuthErr = HttpAuthErr;

class HttpClientErr extends Error {}

exports.HttpClientErr = HttpClientErr;

exports.isContentBlock = t => t === 'plainText' || t === 'decryptedText' || t === 'plainHtml' || t === 'decryptedHtml' || t === 'signedMsg' || t === 'verifiedMsg';

const seamlessLockBg = 'iVBORw0KGgoAAAANSUhEUgAAAFoAAABaCAMAAAAPdrEwAAAAh1BMVEXw8PD////w8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PD7MuHIAAAALXRSTlMAAAECBAcICw4QEhUZIyYqMTtGTV5kdn2Ii5mfoKOqrbG0uL6/xcnM0NTX2t1l7cN4AAAB0UlEQVR4Ae3Y3Y4SQRCG4bdHweFHRBTBH1FRFLXv//qsA8kmvbMdXhh2Q0KfknpSCQc130c67s22+e9+v/+d84fxkSPH0m/+5P9vN7vRV0vPfx7or1NB23e99KAHuoXOOc6moQsBwNN1Q9g4Wdh1uq3MA7Qn0+2ylAt7WbWpyT+Wo8roKH6v2QhZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2ghZ2gjZ2AUNOLmwgQdogEJ2dnF3UJdU3WjqO/u96aYtVd/7jqvIyu76G5se6GaY7tNNcy5d7se7eWVnDz87fMkuVuS8epF6f9NPObPY5re9y4N1/vya9Gr3se2bfvl9M0mkyZdv077p+a/3z4Meby5Br4NWiV51BaiUqfLro9I3WiR61RVcffwfXI7u5zZ20EOA82Uu8x3SlrSwXQuBSvSqK0AletUVoBK96gpIwlZy0MJWctDCVnLQwlZy0MJWctDCVnLQwlZy0MJWctDCVnLQwlZy0MJWctDCVnLQwlZy0MJWckIletUVIJJxITN6wtZd2EI+0NquyIJOnUpFVvRpcwmV6FVXgEr0qitAJXrVFaASveoKUIledQWoRK+6AlSiV13BP+/VVbky7Xq1AAAAAElFTkSuQmCC';

const fmtMsgContentBlockAsHtml = (dirtyContent, frameColor) => {
  const generalCss = `background: white;padding-left: 8px;min-height: 50px;padding-top: 4px;padding-bottom: 4px;width: 100%;`;
  let frameCss;

  if (frameColor === 'green') {
    frameCss = `border: 1px solid #f0f0f0;border-left: 8px solid #31A217;border-right: none;background-image: url(data:image/png;base64,${seamlessLockBg});`;
  } else if (frameColor === 'red') {
    frameCss = `border: 1px solid #f0f0f0;border-left: 8px solid #d14836;border-right: none;`;
  } else if (frameColor === 'plain') {
    frameCss = `border: none;`;
  } else {
    // gray
    frameCss = `border: 1px solid #f0f0f0;border-left: 8px solid #989898;border-right: none;`;
  }

  return `<div class="MsgBlock ${frameColor}" style="${generalCss}${frameCss}">${xss_1.Xss.htmlSanitizeKeepBasicTags(dirtyContent)}</div><!-- next MsgBlock -->\n`;
};

exports.stripHtmlRootTags = html => {
  html = html.replace(/<\/?html[^>]*>/g, ''); // remove opening and closing html tags

  html = html.replace(/<head[^>]*>.*<\/head>/g, ''); // remove the whole head section

  html = html.replace(/<\/?body[^>]*>/g, ''); // remove opening and closing body tags

  return html.trim();
};

exports.fmtContentBlock = contentBlocks => {
  let msgContentAsHtml = '';
  let msgContentAsText = '';

  for (const block of contentBlocks) {
    if (block.type === 'decryptedText') {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(common_1.Str.asEscapedHtml(block.content.toString()), 'green');
      msgContentAsText += block.content.toString() + '\n';
    } else if (block.type === 'decryptedHtml') {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(exports.stripHtmlRootTags(block.content.toString()), 'green');
      msgContentAsText += xss_1.Xss.htmlSanitizeAndStripAllTags(block.content.toString(), '\n') + '\n';
    } else if (block.type === 'plainText') {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(common_1.Str.asEscapedHtml(block.content.toString()), 'plain');
      msgContentAsText += block.content.toString() + '\n';
    } else if (block.type === 'plainHtml') {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(exports.stripHtmlRootTags(block.content.toString()), 'plain');
      msgContentAsText += xss_1.Xss.htmlSanitizeAndStripAllTags(block.content.toString(), '\n');
      +'\n';
    } else if (block.type === 'verifiedMsg') {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(block.content.toString(), 'gray');
      msgContentAsText += block.content.toString() + '\n';
    } else {
      msgContentAsHtml += fmtMsgContentBlockAsHtml(block.content.toString(), 'plain');
      msgContentAsText += block.content.toString() + '\n';
    }
  }

  msgContentAsHtml = `
  <!DOCTYPE html><html>
    <head>
      <meta name="viewport" content="width=device-width" />
      <style>
        body { word-wrap: break-word; word-break: break-word; hyphens: auto; margin-left: 0px; padding-left: 0px; }
        body img { display: inline !important; height: auto !important; max-width: 95% !important; }
        body pre { white-space: pre-wrap !important; }
        body > div.MsgBlock > table { zoom: 75% } /* table layouts tend to overflow - eg emails from fb */
      </style>
    </head>
    <body>${msgContentAsHtml}</body>
  </html>`;
  return {
    contentBlock: pgp_1.Pgp.internal.msgBlockObj('plainHtml', msgContentAsHtml),
    text: msgContentAsText.trim()
  };
};

exports.fmtRes = (response, data) => {
  const buffers = [];
  buffers.push(Buffer.from(JSON.stringify(response)));
  buffers.push(Buffer.from('\n'));

  if (data) {
    buffers.push(data);
  }

  return buffers;
};

exports.fmtErr = e => Buffer.concat(exports.fmtRes({
  error: {
    message: String(e),
    stack: e && typeof e === 'object' ? e.stack || '' : ''
  }
}));

exports.indexHtml = Buffer.from(`
<html><head></head><body>
<form method="POST" target="_blank" enctype="multipart/form-data">
  <input type="text" placeholder="endpoint" name="endpoint"><br>
  <textarea name="request" cols="160" rows="4" placeholder="json"></textarea><br>
  <input name="data" type="file"> <button type="submit">submit post request</button>
</form>
</body></html>`);

exports.printReplayTestDefinition = (endpoint, request, data) => {
  console.log(`
ava.test.only('replaying', async t => {
  const reqData = Buf.fromBase64Str('${buf_1.Buf.fromUint8(data).toBase64Str()}');
  console.log('replay ${endpoint}: ', ${JSON.stringify(request)}, '-------- begin req data ---------', reqData.toString(), '--------- end req data ---------');
  const { data, json } = await request('${endpoint}', ${JSON.stringify(request)}, Buffer.from(reqData));
  console.log('response: ', json, '\n\n\n-------- begin res data ---------', Buf.fromUint8(data).toString(), '--------- end res data ---------\n\n\n');
  t.pass();
});
  `);
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const util_js_1 = __webpack_require__(5);

class Str {}

Str.parseEmail = (full, flag = 'VALIDATE') => {
  let email;
  let name;

  if (full.includes('<') && full.includes('>')) {
    email = full.substr(full.indexOf('<') + 1, full.indexOf('>') - full.indexOf('<') - 1).replace(/["']/g, '').trim().toLowerCase();
    name = full.substr(0, full.indexOf('<')).replace(/["']/g, '').trim();
  } else {
    email = full.replace(/["']/g, '').trim().toLowerCase();
  }

  if (flag === 'VALIDATE' && !Str.isEmailValid(email)) {
    email = undefined;
  }

  return {
    email,
    name,
    full
  };
};

Str.prettyPrint = obj => typeof obj === 'object' ? JSON.stringify(obj, undefined, 2).replace(/ /g, '&nbsp;').replace(/\n/g, '<br />') : String(obj);

Str.normalizeSpaces = str => str.replace(RegExp(String.fromCharCode(160), 'g'), String.fromCharCode(32));

Str.normalizeDashes = str => str.replace(/^—–|—–$/gm, '-----');

Str.normalize = str => Str.normalizeSpaces(Str.normalizeDashes(str));

Str.numberFormat = number => {
  const nStr = number + '';
  const x = nStr.split('.');
  let x1 = x[0];
  const x2 = x.length > 1 ? '.' + x[1] : '';
  const rgx = /(\d+)(\d{3})/;

  while (rgx.test(x1)) {
    x1 = x1.replace(rgx, '$1' + ',' + '$2');
  }

  return x1 + x2;
};

Str.isEmailValid = email => {
  if (email.indexOf(' ') !== -1) {
    return false;
  }

  return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i.test(email);
};

Str.monthName = monthIndex => ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][monthIndex];

Str.sloppyRandom = (length = 5) => {
  let id = '';
  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

  for (let i = 0; i < length; i++) {
    id += possible.charAt(Math.floor(Math.random() * possible.length));
  }

  return id;
};

Str.regexEscape = toBeUsedInRegex => toBeUsedInRegex.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

Str.asEscapedHtml = text => {
  return text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\n/g, '<br />');
};

Str.htmlAttrEncode = values => Str.base64urlUtfEncode(JSON.stringify(values));

Str.htmlAttrDecode = encoded => {
  try {
    return JSON.parse(Str.base64urlUtfDecode(encoded)); // tslint:disable-line:no-unsafe-any
  } catch (e) {
    return undefined;
  }
};

Str.capitalize = string => string.trim().split(' ').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');

Str.toUtcTimestamp = (datetimeStr, asStr = false) => asStr ? String(Date.parse(datetimeStr)) : Date.parse(datetimeStr);

Str.datetimeToDate = date => date.substr(0, 10).replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;');

Str.fromDate = date => date.toISOString().replace(/T/, ' ').replace(/:[^:]+$/, '');

Str.base64urlUtfEncode = str => {
  // https://stackoverflow.com/questions/30106476/using-javascripts-atob-to-decode-base64-doesnt-properly-decode-utf-8-strings
  if (typeof str === 'undefined') {
    return str;
  }

  return util_js_1.base64encode(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (match, p1) => String.fromCharCode(parseInt(String(p1), 16)))).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
};

Str.base64urlUtfDecode = str => {
  // https://stackoverflow.com/questions/30106476/using-javascripts-atob-to-decode-base64-doesnt-properly-decode-utf-8-strings
  if (typeof str === 'undefined') {
    return str;
  } // tslint:disable-next-line:no-unsafe-any


  return decodeURIComponent(Array.prototype.map.call(util_js_1.base64decode(str.replace(/-/g, '+').replace(/_/g, '/')), c => {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
};

exports.Str = Str;

class Value {}

Value.arr = {
  unique: array => {
    const unique = [];

    for (const v of array) {
      if (!unique.includes(v)) {
        unique.push(v);
      }
    }

    return unique;
  },
  withoutKey: (array, i) => array.splice(0, i).concat(array.splice(i + 1, array.length)),
  withoutVal: (array, withoutVal) => {
    const result = [];

    for (const value of array) {
      if (value !== withoutVal) {
        result.push(value);
      }
    }

    return result;
  },
  contains: (arr, value) => Boolean(arr && typeof arr.indexOf === 'function' && arr.indexOf(value) !== -1),
  sum: arr => arr.reduce((a, b) => a + b, 0),
  average: arr => Value.arr.sum(arr) / arr.length,
  zeroes: length => new Array(length).map(() => 0)
};
Value.obj = {
  keyByValue: (obj, v) => {
    for (const k of Object.keys(obj)) {
      if (obj[k] === v) {
        return k;
      }
    }

    return undefined;
  }
};
Value.int = {
  lousyRandom: (minVal, maxVal) => minVal + Math.round(Math.random() * (maxVal - minVal)),
  getFutureTimestampInMonths: monthsToAdd => new Date().getTime() + 1000 * 3600 * 24 * 30 * monthsToAdd,
  hoursAsMiliseconds: h => h * 1000 * 60 * 60
};

Value.noop = () => undefined;

exports.Value = Value;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const crypto_1 = __webpack_require__(6);

exports.secureRandomBytes = length => {
  return crypto_1.randomBytes(length);
};

exports.base64encode = binary => {
  return Buffer.from(binary, 'binary').toString('base64');
};

exports.base64decode = b64tr => {
  return Buffer.from(b64tr, 'base64').toString('binary');
};

exports.setGlobals = () => {
  global.btoa = exports.base64encode;
  global.atob = exports.base64decode;
};

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const const_js_1 = __webpack_require__(8);

const catch_js_1 = __webpack_require__(9);

const store_js_1 = __webpack_require__(10);

const common_js_1 = __webpack_require__(4);

const mime_js_1 = __webpack_require__(13);

const mnemonic_js_1 = __webpack_require__(16);

const require_js_1 = __webpack_require__(11);

const util_js_1 = __webpack_require__(5);

const buf_js_1 = __webpack_require__(15);

const xss_js_1 = __webpack_require__(17);

const openpgp = require_js_1.requireOpenpgp();

if (typeof openpgp !== 'undefined') {
  // in certain environments, eg browser content scripts, openpgp is not included (not all functions below need it)
  openpgp.config.versionstring = `FlowCrypt ${const_js_1.VERSION} Gmail Encryption`;
  openpgp.config.commentstring = 'Seamlessly send and receive encrypted email';
  openpgp.config.ignore_mdc_error = true; // we manually check for missing MDC and show loud warning to user (no auto-decrypt)
  // openpgp.config.require_uid_self_cert = false;
}

var DecryptErrTypes;

(function (DecryptErrTypes) {
  DecryptErrTypes["keyMismatch"] = "key_mismatch";
  DecryptErrTypes["usePassword"] = "use_password";
  DecryptErrTypes["wrongPwd"] = "wrong_password";
  DecryptErrTypes["noMdc"] = "no_mdc";
  DecryptErrTypes["badMdc"] = "bad_mdc";
  DecryptErrTypes["needPassphrase"] = "need_passphrase";
  DecryptErrTypes["format"] = "format";
  DecryptErrTypes["other"] = "other";
})(DecryptErrTypes = exports.DecryptErrTypes || (exports.DecryptErrTypes = {}));

class FormatError extends Error {
  constructor(message, data) {
    super(message);
    this.data = data;
  }

}

exports.FormatError = FormatError;

class Pgp {}

Pgp.ARMOR_HEADER_MAX_LENGTH = 50;
Pgp.ARMOR_HEADER_DICT = {
  null: {
    begin: '-----BEGIN',
    end: '-----END',
    replace: false
  },
  publicKey: {
    begin: '-----BEGIN PGP PUBLIC KEY BLOCK-----',
    end: '-----END PGP PUBLIC KEY BLOCK-----',
    replace: true
  },
  privateKey: {
    begin: '-----BEGIN PGP PRIVATE KEY BLOCK-----',
    end: '-----END PGP PRIVATE KEY BLOCK-----',
    replace: true
  },
  cryptupVerification: {
    begin: '-----BEGIN CRYPTUP VERIFICATION-----',
    end: '-----END CRYPTUP VERIFICATION-----',
    replace: true
  },
  signedMsg: {
    begin: '-----BEGIN PGP SIGNED MESSAGE-----',
    middle: '-----BEGIN PGP SIGNATURE-----',
    end: '-----END PGP SIGNATURE-----',
    replace: true
  },
  signature: {
    begin: '-----BEGIN PGP SIGNATURE-----',
    end: '-----END PGP SIGNATURE-----',
    replace: false
  },
  encryptedMsg: {
    begin: '-----BEGIN PGP MESSAGE-----',
    end: '-----END PGP MESSAGE-----',
    replace: true
  },
  encryptedMsgLink: {
    begin: 'This message is encrypted: Open Message',
    end: /https:(\/|&#x2F;){2}(cryptup\.org|flowcrypt\.com)(\/|&#x2F;)[a-zA-Z0-9]{10}(\n|$)/,
    replace: true
  }
}; // (10k pc)*(2 core p/pc)*(4k guess p/core) httpshttps://www.abuse.ch/?p=3294://threatpost.com/how-much-does-botnet-cost-022813/77573/ https://www.abuse.ch/?p=3294

Pgp.PASSWORD_GUESSES_PER_SECOND = 10000 * 2 * 4000;
Pgp.PASSWORD_CRACK_TIME_WORDS = [{
  match: 'millenni',
  word: 'perfect',
  bar: 100,
  color: 'green',
  pass: true
}, {
  match: 'centu',
  word: 'great',
  bar: 80,
  color: 'green',
  pass: true
}, {
  match: 'year',
  word: 'good',
  bar: 60,
  color: 'orange',
  pass: true
}, {
  match: 'month',
  word: 'reasonable',
  bar: 40,
  color: 'darkorange',
  pass: true
}, {
  match: 'day',
  word: 'poor',
  bar: 20,
  color: 'darkred',
  pass: false
}, {
  match: '',
  word: 'weak',
  bar: 10,
  color: 'red',
  pass: false
}];
Pgp.armor = {
  clip: text => {
    if (text && text.includes(Pgp.ARMOR_HEADER_DICT.null.begin) && text.includes(String(Pgp.ARMOR_HEADER_DICT.null.end))) {
      const match = text.match(/(-----BEGIN PGP (MESSAGE|SIGNED MESSAGE|SIGNATURE|PUBLIC KEY BLOCK)-----[^]+-----END PGP (MESSAGE|SIGNATURE|PUBLIC KEY BLOCK)-----)/gm);
      return match && match.length ? match[0] : undefined;
    }

    return undefined;
  },
  headers: (blockType, format = 'string') => {
    const h = Pgp.ARMOR_HEADER_DICT[blockType];
    return {
      begin: typeof h.begin === 'string' && format === 're' ? h.begin.replace(/ /g, '\\\s') : h.begin,
      end: typeof h.end === 'string' && format === 're' ? h.end.replace(/ /g, '\\\s') : h.end,
      replace: h.replace
    };
  },
  detectBlocks: origText => {
    const blocks = [];
    const normalized = common_js_1.Str.normalize(origText);
    let startAt = 0;

    while (true) {
      const r = Pgp.internal.detectBlockNext(normalized, startAt);

      if (r.found) {
        blocks.push(...r.found);
      }

      if (typeof r.continueAt === 'undefined') {
        return {
          blocks,
          normalized
        };
      } else {
        if (r.continueAt <= startAt) {
          catch_js_1.Catch.report(`Pgp.armor.detect_blocks likely infinite loop: r.continue_at(${r.continueAt}) <= start_at(${startAt})`);
          return {
            blocks,
            normalized
          }; // prevent infinite loop
        }

        startAt = r.continueAt;
      }
    }
  },
  normalize: (armored, type) => {
    armored = common_js_1.Str.normalize(armored).replace(/\n /g, '\n');

    if (['encryptedMsg', 'publicKey', 'privateKey', 'key'].includes(type)) {
      armored = armored.replace(/\r?\n/g, '\n').trim();
      const nl2 = armored.match(/\n\n/g);
      const nl3 = armored.match(/\n\n\n/g);
      const nl4 = armored.match(/\n\n\n\n/g);
      const nl6 = armored.match(/\n\n\n\n\n\n/g);

      if (nl3 && nl6 && nl3.length > 1 && nl6.length === 1) {
        armored = armored.replace(/\n\n\n/g, '\n'); // newlines tripled: fix
      } else if (nl2 && nl4 && nl2.length > 1 && nl4.length === 1) {
        armored = armored.replace(/\n\n/g, '\n'); // newlines doubled. GPA on windows does this, and sometimes message can get extracted this way from html
      }
    }

    const lines = armored.split('\n');
    const h = Pgp.armor.headers(type === 'key' ? 'null' : type); // check for and fix missing a mandatory empty line

    if (lines.length > 5 && lines[0].includes(h.begin) && lines[lines.length - 1].includes(String(h.end)) && !lines.includes('')) {
      for (let i = 1; i < 5; i++) {
        if (lines[i].match(/^[a-zA-Z0-9\-_. ]+: .+$/)) {
          continue; // skip comment lines, looking for first data line
        }

        if (lines[i].match(/^[a-zA-Z0-9\/+]{32,77}$/)) {
          // insert empty line before first data line
          armored = `${lines.slice(0, i).join('\n')}\n\n${lines.slice(i).join('\n')}`;
          break;
        }

        break; // don't do anything if format not as expected
      }
    }

    return armored;
  }
};
Pgp.hash = {
  sha1UtfStr: async string => {
    return openpgp.util.Uint8Array_to_hex((await openpgp.crypto.hash.digest(openpgp.enums.hash.sha1, buf_js_1.Buf.fromUtfStr(string))));
  },
  sha256UtfStr: async string => {
    return openpgp.util.Uint8Array_to_hex((await openpgp.crypto.hash.digest(openpgp.enums.hash.sha256, buf_js_1.Buf.fromUtfStr(string))));
  },
  doubleSha1Upper: async string => {
    return (await Pgp.hash.sha1UtfStr((await Pgp.hash.sha1UtfStr(string)))).toUpperCase();
  },
  challengeAnswer: async answer => {
    return await Pgp.internal.cryptoHashSha256Loop(answer);
  }
};
Pgp.key = {
  create: async (userIds, variant, passphrase) => {
    const opt = {
      userIds,
      passphrase
    };

    if (variant === 'curve25519') {
      opt.curve = 'curve25519';
    } else if (variant === 'rsa2048') {
      opt.numBits = 2048;
    } else {
      opt.numBits = 4096;
    }

    const k = await openpgp.generateKey(opt);
    return {
      public: k.publicKeyArmored,
      private: k.privateKeyArmored
    };
  },

  /**
   * used only for keys that we ourselves parsed / formatted before, eg from local storage, because no err handling
   */
  read: async armoredKey => {
    const fromCache = store_js_1.Store.armoredKeyCacheGet(armoredKey);

    if (fromCache) {
      return fromCache;
    }

    const {
      keys: [key]
    } = await openpgp.key.readArmored(armoredKey);

    if (key && key.isPrivate()) {
      store_js_1.Store.armoredKeyCacheSet(armoredKey, key);
    }

    return key;
  },

  /**
   * Read many keys, could be armored or binary, in single armor or separately, useful for importing keychains of various formats
   */
  readMany: async fileData => {
    const allKeys = [];
    const allErrs = [];
    const {
      blocks
    } = await Pgp.armor.detectBlocks(fileData.toUtfStr());
    const armoredPublicKeyBlocks = blocks.filter(block => block.type === "publicKey");

    try {
      if (armoredPublicKeyBlocks.length) {
        for (const block of blocks) {
          const {
            err,
            keys
          } = await openpgp.key.readArmored(block.content.toString());
          allErrs.push(...(err || []));
          allKeys.push(...keys);
        }
      } else {
        const {
          err,
          keys
        } = await openpgp.key.read(fileData);
        allErrs.push(...(err || []));
        allKeys.push(...keys);
      }
    } catch (e) {
      allErrs.push(e instanceof Error ? e : new Error(String(e)));
    }

    return {
      keys: allKeys,
      errs: allErrs
    };
  },
  decrypt: async (key, passphrases, optionalKeyid, optionalBehaviorFlag) => {
    try {
      return await key.decrypt(passphrases, optionalKeyid); // when no keyid intersection found, it will decrypt all
    } catch (e) {
      if (e instanceof Error && e.message.toLowerCase().includes('passphrase')) {
        return false;
      } else if (e instanceof Error && e.message.toLowerCase().includes('already decrypted') && optionalBehaviorFlag === 'OK-IF-ALREADY-DECRYPTED') {
        // OpenPGP.js will say key.isDecrypted() -> false, but still throw 'already decrypted', if some packets were already decrypted, but not others
        // below we can gracefully decrypt the remaining required packets, if a flag was provided to do so
        if (passphrases.length !== 1) {
          throw new Error(`Key packet is already decrypted + cannot gracefully decrypt with more than one pass phrase`);
        }

        for (const {
          keyPacket
        } of key.getKeys(optionalKeyid)) {
          if (keyPacket.isDecrypted() === false) {
            try {
              await keyPacket.decrypt(passphrases[0]);
            } catch (e) {
              if (e instanceof Error && e.message.includes('passphrase')) {
                return false;
              }

              throw e;
            }
          }
        }

        return true;
      }

      throw e;
    }
  },
  normalize: async armored => {
    try {
      let keys = [];
      armored = Pgp.armor.normalize(armored, 'key');

      if (RegExp(Pgp.armor.headers('publicKey', 're').begin).test(armored)) {
        keys = (await openpgp.key.readArmored(armored)).keys;
      } else if (RegExp(Pgp.armor.headers('privateKey', 're').begin).test(armored)) {
        keys = (await openpgp.key.readArmored(armored)).keys;
      } else if (RegExp(Pgp.armor.headers('encryptedMsg', 're').begin).test(armored)) {
        keys = [new openpgp.key.Key((await openpgp.message.readArmored(armored)).packets)];
      }

      for (const k of keys) {
        for (const u of k.users) {
          u.otherCertifications = []; // prevent key bloat
        }
      }

      return {
        normalized: keys.map(k => k.armor()).join('\n'),
        keys
      };
    } catch (error) {
      catch_js_1.Catch.reportErr(error);
      return {
        normalized: '',
        keys: []
      };
    }
  },
  fingerprint: async (key, formatting = 'default') => {
    if (!key) {
      return undefined;
    } else if (key instanceof openpgp.key.Key) {
      if (!key.primaryKey.getFingerprintBytes()) {
        return undefined;
      }

      try {
        const fp = key.primaryKey.getFingerprint().toUpperCase();

        if (formatting === 'spaced') {
          return fp.replace(/(.{4})/g, '$1 ').trim();
        }

        return fp;
      } catch (e) {
        console.error(e);
        return undefined;
      }
    } else {
      try {
        return await Pgp.key.fingerprint((await Pgp.key.read(key)), formatting);
      } catch (e) {
        if (e instanceof Error && e.message === 'openpgp is not defined') {
          catch_js_1.Catch.reportErr(e);
        }

        console.error(e);
        return undefined;
      }
    }
  },
  longid: async keyOrFingerprintOrBytes => {
    if (!keyOrFingerprintOrBytes || typeof keyOrFingerprintOrBytes === 'undefined') {
      return undefined;
    } else if (typeof keyOrFingerprintOrBytes === 'string' && keyOrFingerprintOrBytes.length === 8) {
      return openpgp.util.str_to_hex(keyOrFingerprintOrBytes).toUpperCase();
    } else if (typeof keyOrFingerprintOrBytes === 'string' && keyOrFingerprintOrBytes.length === 40) {
      return keyOrFingerprintOrBytes.substr(-16);
    } else if (typeof keyOrFingerprintOrBytes === 'string' && keyOrFingerprintOrBytes.length === 49) {
      return keyOrFingerprintOrBytes.replace(/ /g, '').substr(-16);
    } else {
      return await Pgp.key.longid((await Pgp.key.fingerprint(keyOrFingerprintOrBytes)));
    }
  },
  usable: async armored => {
    if (!Pgp.key.fingerprint(armored)) {
      return false;
    }

    const {
      keys: [pubkey]
    } = await openpgp.key.readArmored(armored);

    if (!pubkey) {
      return false;
    }

    if (await pubkey.getEncryptionKey()) {
      return true; // good key - cannot be expired
    }

    return await Pgp.key.usableButExpired(pubkey);
  },
  usableButExpired: async key => {
    if (!key) {
      return false;
    }

    if (await key.getEncryptionKey()) {
      return false; // good key - cannot be expired
    }

    const oneSecondBeforeExpiration = await Pgp.key.dateBeforeExpiration(key);

    if (typeof oneSecondBeforeExpiration === 'undefined') {
      return false; // key does not expire
    } // try to see if the key was usable just before expiration


    return Boolean((await key.getEncryptionKey(undefined, oneSecondBeforeExpiration)));
  },
  dateBeforeExpiration: async key => {
    const expires = await key.getExpirationTime();

    if (expires instanceof Date && expires.getTime() < Date.now()) {
      // expired
      return new Date(expires.getTime() - 1000);
    }

    return undefined;
  },
  parse: async armored => {
    const {
      normalized,
      keys
    } = await Pgp.key.normalize(armored);
    return {
      original: armored,
      normalized,
      keys: await Promise.all(keys.map(Pgp.key.details))
    };
  },
  details: async k => {
    const keys = k.getKeys();
    const algoInfo = k.primaryKey.getAlgorithmInfo();
    const algo = {
      algorithm: algoInfo.algorithm,
      bits: algoInfo.bits,
      curve: algoInfo.curve,
      algorithmId: openpgp.enums.publicKey[algoInfo.algorithm]
    };
    const created = k.primaryKey.created.getTime() / 1000;
    const ids = [];

    for (const key of keys) {
      const fingerprint = key.getFingerprint().toUpperCase();

      if (fingerprint) {
        const longid = await Pgp.key.longid(fingerprint);

        if (longid) {
          const shortid = longid.substr(-8);
          ids.push({
            fingerprint,
            longid,
            shortid,
            keywords: mnemonic_js_1.mnemonic(longid)
          });
        }
      }
    }

    return {
      private: k.isPrivate() ? k.armor() : undefined,
      isDecrypted: k.isDecrypted(),
      public: k.toPublic().armor(),
      users: k.getUserIds(),
      ids,
      algo,
      created
    };
  },

  /**
   * Get latest self-signature date, in utc millis.
   * This is used to figure out how recently was key updated, and if one key is newer than other.
   */
  lastSig: async key => {
    await key.getExpirationTime(); // will force all sigs to be verified

    const allSignatures = [];

    for (const user of key.users) {
      allSignatures.push(...user.selfCertifications);
    }

    for (const subKey of key.subKeys) {
      allSignatures.push(...subKey.bindingSignatures);
    }

    allSignatures.sort((a, b) => b.created.getTime() - a.created.getTime());
    const newestSig = allSignatures.find(sig => sig.verified === true);

    if (newestSig) {
      return newestSig.created.getTime();
    }

    throw new Error('No valid signature found in key');
  }
};
Pgp.password = {
  estimateStrength: zxcvbnResultGuesses => {
    const timeToCrack = zxcvbnResultGuesses / Pgp.PASSWORD_GUESSES_PER_SECOND;

    for (const word of Pgp.PASSWORD_CRACK_TIME_WORDS) {
      const readableTime = Pgp.internal.readableCrackTime(timeToCrack);

      if (readableTime.includes(word.match)) {
        // looks for a word match from readable_crack_time, defaults on "weak"
        return {
          word,
          seconds: Math.round(timeToCrack),
          time: readableTime
        };
      }
    }

    throw Error('(thrown) estimate_strength: got to end without any result');
  },
  weakWords: () => ['crypt', 'up', 'cryptup', 'flow', 'flowcrypt', 'encryption', 'pgp', 'email', 'set', 'backup', 'passphrase', 'best', 'pass', 'phrases', 'are', 'long', 'and', 'have', 'several', 'words', 'in', 'them', 'Best pass phrases are long', 'have several words', 'in them', 'bestpassphrasesarelong', 'haveseveralwords', 'inthem', 'Loss of this pass phrase', 'cannot be recovered', 'Note it down', 'on a paper', 'lossofthispassphrase', 'cannotberecovered', 'noteitdown', 'onapaper', 'setpassword', 'set password', 'set pass word', 'setpassphrase', 'set pass phrase', 'set passphrase'],
  random: () => {
    return util_js_1.base64encode(openpgp.util.Uint8Array_to_str(util_js_1.secureRandomBytes(128))).toUpperCase().replace(/[^A-Z0-9]|0|O|1/g, '').replace(/(.{4})/g, '$1-').substr(0, 19);
  }
};
Pgp.internal = {
  msgBlockObj: (type, content, missingEnd = false) => ({
    type,
    content,
    complete: !missingEnd
  }),
  msgBlockDecryptErrObj: (encryptedContent, decryptErr) => ({
    type: 'decryptErr',
    content: encryptedContent,
    decryptErr,
    complete: true
  }),
  msgBlockAttObj: (type, content, attMeta) => ({
    type,
    content,
    complete: true,
    attMeta
  }),
  msgBlockKeyObj: (type, content, keyDetails) => ({
    type,
    content,
    complete: true,
    keyDetails
  }),
  detectBlockNext: (origText, startAt) => {
    const result = {
      found: []
    };
    const begin = origText.indexOf(Pgp.armor.headers('null').begin, startAt);

    if (begin !== -1) {
      // found
      const potentialBeginHeader = origText.substr(begin, Pgp.ARMOR_HEADER_MAX_LENGTH);

      for (const xType of Object.keys(Pgp.ARMOR_HEADER_DICT)) {
        const type = xType;
        const blockHeaderDef = Pgp.ARMOR_HEADER_DICT[type];

        if (blockHeaderDef.replace) {
          const indexOfConfirmedBegin = potentialBeginHeader.indexOf(blockHeaderDef.begin);

          if (indexOfConfirmedBegin === 0 || type === 'encryptedMsgLink' && indexOfConfirmedBegin >= 0 && indexOfConfirmedBegin < 15) {
            // identified beginning of a specific block
            if (begin > startAt) {
              const potentialTextBeforeBlockBegun = origText.substring(startAt, begin).trim();

              if (potentialTextBeforeBlockBegun) {
                result.found.push(Pgp.internal.msgBlockObj('plainText', potentialTextBeforeBlockBegun));
              }
            }

            let endIndex = -1;
            let foundBlockEndHeaderLength = 0;

            if (typeof blockHeaderDef.end === 'string') {
              endIndex = origText.indexOf(blockHeaderDef.end, begin + blockHeaderDef.begin.length);
              foundBlockEndHeaderLength = blockHeaderDef.end.length;
            } else {
              // regexp
              const origTextAfterBeginIndex = origText.substring(begin);
              const matchEnd = origTextAfterBeginIndex.match(blockHeaderDef.end);

              if (matchEnd) {
                endIndex = matchEnd.index ? begin + matchEnd.index : -1;
                foundBlockEndHeaderLength = matchEnd[0].length;
              }
            }

            if (endIndex !== -1) {
              // identified end of the same block
              if (type !== 'encryptedMsgLink') {
                result.found.push(Pgp.internal.msgBlockObj(type, origText.substring(begin, endIndex + foundBlockEndHeaderLength).trim()));
              } else {
                const pwdMsgFullText = origText.substring(begin, endIndex + foundBlockEndHeaderLength).trim();
                const pwdMsgShortIdMatch = pwdMsgFullText.match(/[a-zA-Z0-9]{10}$/);

                if (pwdMsgShortIdMatch) {
                  result.found.push(Pgp.internal.msgBlockObj(type, pwdMsgShortIdMatch[0]));
                } else {
                  result.found.push(Pgp.internal.msgBlockObj('plainText', pwdMsgFullText));
                }
              }

              result.continueAt = endIndex + foundBlockEndHeaderLength;
            } else {
              // corresponding end not found
              result.found.push(Pgp.internal.msgBlockObj(type, origText.substr(begin), true));
            }

            break;
          }
        }
      }
    }

    if (origText && !result.found.length) {
      // didn't find any blocks, but input is non-empty
      const potentialText = origText.substr(startAt).trim();

      if (potentialText) {
        result.found.push(Pgp.internal.msgBlockObj('plainText', potentialText));
      }
    }

    return result;
  },
  cryptoHashSha256Loop: async (string, times = 100000) => {
    for (let i = 0; i < times; i++) {
      string = await Pgp.hash.sha256UtfStr(string);
    }

    return string;
  },
  cryptoMsgPrepareForDecrypt: async encrypted => {
    if (!encrypted.length) {
      throw new Error('Encrypted message could not be parsed because no data was provided');
    }

    const utfChunk = new buf_js_1.Buf(encrypted.slice(0, 100)).toUtfStr('ignore'); // ignore errors - this may not be utf string, just testing

    const isArmoredEncrypted = utfChunk.includes(Pgp.armor.headers('encryptedMsg').begin);
    const isArmoredSignedOnly = utfChunk.includes(Pgp.armor.headers('signedMsg').begin);
    const isArmored = isArmoredEncrypted || isArmoredSignedOnly;

    if (isArmoredEncrypted) {
      return {
        isArmored,
        isCleartext: false,
        message: await openpgp.message.readArmored(new buf_js_1.Buf(encrypted).toUtfStr())
      };
    } else if (isArmoredSignedOnly) {
      return {
        isArmored,
        isCleartext: true,
        message: await openpgp.cleartext.readArmored(new buf_js_1.Buf(encrypted).toUtfStr())
      };
    } else if (encrypted instanceof Uint8Array) {
      return {
        isArmored,
        isCleartext: false,
        message: await openpgp.message.read(encrypted)
      };
    }

    throw new Error('Message does not have armor headers');
  },
  longids: async keyIds => {
    const longids = [];

    for (const id of keyIds) {
      const longid = await Pgp.key.longid(id.bytes);

      if (longid) {
        longids.push(longid);
      }
    }

    return longids;
  },
  cryptoMsgGetSignedBy: async (msg, keys) => {
    keys.signedBy = await Pgp.internal.longids(msg.getSigningKeyIds ? msg.getSigningKeyIds() : []);

    if (keys.signedBy.length && typeof store_js_1.Store.dbContactGet === 'function') {
      const verificationContacts = await store_js_1.Store.dbContactGet(undefined, keys.signedBy);
      keys.verificationContacts = verificationContacts.filter(contact => contact && contact.pubkey);
      keys.forVerification = [];

      for (const contact of keys.verificationContacts) {
        const {
          keys: keysForVerification
        } = await openpgp.key.readArmored(contact.pubkey);
        keys.forVerification.push(...keysForVerification);
      }
    }
  },
  cryptoKeyOptionalMatchingKeyid: (key, forMsgKeyids) => {
    const msgKeyidBytesArr = (forMsgKeyids || []).map(kid => kid.bytes);
    return key.getKeyIds().find(kid => msgKeyidBytesArr.includes(kid.bytes));
  },
  cryptoMsgGetSortedKeys: async (kiWithPp, msg) => {
    const keys = {
      verificationContacts: [],
      forVerification: [],
      encryptedFor: [],
      signedBy: [],
      prvMatching: [],
      prvForDecrypt: [],
      prvForDecryptDecrypted: [],
      prvForDecryptWithoutPassphrases: []
    };
    const encryptedForKeyids = msg instanceof openpgp.message.Message ? msg.getEncryptionKeyIds() : [];
    keys.encryptedFor = await Pgp.internal.longids(encryptedForKeyids);
    await Pgp.internal.cryptoMsgGetSignedBy(msg, keys);

    for (const ki of kiWithPp) {
      ki.parsed = await Pgp.key.read(ki.private); // this is inefficient because we are doing unnecessary parsing of all keys here
      // better would be to compare to already stored KeyInfo, however KeyInfo currently only holds primary longid, not longids of subkeys
      // while messages are typically encrypted for subkeys, thus we have to parse the key to get the info
      // we are filtering here to avoid a significant performance issue of having to attempt decrypting with all keys simultaneously

      for (const longid of await Promise.all(ki.parsed.getKeyIds().map(({
        bytes
      }) => Pgp.key.longid(bytes)))) {
        if (keys.encryptedFor.includes(longid)) {
          keys.prvMatching.push(ki);
          break;
        }
      }
    }

    keys.prvForDecrypt = keys.prvMatching.length ? keys.prvMatching : kiWithPp;

    for (const ki of keys.prvForDecrypt) {
      const optionalMatchingKeyid = Pgp.internal.cryptoKeyOptionalMatchingKeyid(ki.parsed, encryptedForKeyids);
      const cachedDecryptedKey = store_js_1.Store.decryptedKeyCacheGet(ki.longid);

      if (cachedDecryptedKey && (cachedDecryptedKey.isDecrypted() || optionalMatchingKeyid && cachedDecryptedKey.getKeys(optionalMatchingKeyid).every(k => k.isDecrypted() === true))) {
        ki.decrypted = cachedDecryptedKey;
        keys.prvForDecryptDecrypted.push(ki);
      } else if (ki.parsed.isDecrypted() || (await Pgp.key.decrypt(ki.parsed, [ki.passphrase], optionalMatchingKeyid, 'OK-IF-ALREADY-DECRYPTED')) === true) {
        store_js_1.Store.decryptedKeyCacheSet(ki.parsed);
        ki.decrypted = ki.parsed;
        keys.prvForDecryptDecrypted.push(ki);
      } else {
        keys.prvForDecryptWithoutPassphrases.push(ki);
      }
    }

    return keys;
  },
  cryptoMsgDecryptCategorizeErr: (decryptErr, msgPwd) => {
    const e = String(decryptErr).replace('Error: ', '').replace('Error decrypting message: ', '');
    const keyMismatchErrStrings = ['Cannot read property \'isDecrypted\' of null', 'privateKeyPacket is null', 'TypeprivateKeyPacket is null', 'Session key decryption failed.', 'Invalid session key for decryption.'];

    if (keyMismatchErrStrings.includes(e) && !msgPwd) {
      return {
        type: DecryptErrTypes.keyMismatch,
        message: e
      };
    } else if (msgPwd && ['Invalid enum value.', 'CFB decrypt: invalid key', 'Session key decryption failed.'].includes(e)) {
      return {
        type: DecryptErrTypes.wrongPwd,
        message: e
      };
    } else if (e === 'Decryption failed due to missing MDC in combination with modern cipher.' || e === 'Decryption failed due to missing MDC.') {
      return {
        type: DecryptErrTypes.noMdc,
        message: e
      };
    } else if (e === 'Decryption error') {
      return {
        type: DecryptErrTypes.format,
        message: e
      };
    } else if (e === 'Modification detected.') {
      return {
        type: DecryptErrTypes.badMdc,
        message: `Security threat - opening this message is dangerous because it was modified in transit.`
      };
    } else {
      return {
        type: DecryptErrTypes.other,
        message: e
      };
    }
  },
  readableCrackTime: totalSeconds => {
    const numberWordEnding = n => n > 1 ? 's' : '';

    totalSeconds = Math.round(totalSeconds);
    const millennia = Math.round(totalSeconds / (86400 * 30 * 12 * 100 * 1000));

    if (millennia) {
      return millennia === 1 ? 'a millennium' : 'millennia';
    }

    const centuries = Math.round(totalSeconds / (86400 * 30 * 12 * 100));

    if (centuries) {
      return centuries === 1 ? 'a century' : 'centuries';
    }

    const years = Math.round(totalSeconds / (86400 * 30 * 12));

    if (years) {
      return years + ' year' + numberWordEnding(years);
    }

    const months = Math.round(totalSeconds / (86400 * 30));

    if (months) {
      return months + ' month' + numberWordEnding(months);
    }

    const days = Math.round(totalSeconds / 86400);

    if (days) {
      return days + ' day' + numberWordEnding(days);
    }

    const hours = Math.round(totalSeconds / 3600);

    if (hours) {
      return hours + ' hour' + numberWordEnding(hours);
    }

    const minutes = Math.round(totalSeconds / 60);

    if (minutes) {
      return minutes + ' minute' + numberWordEnding(minutes);
    }

    const seconds = totalSeconds % 60;

    if (seconds) {
      return seconds + ' second' + numberWordEnding(seconds);
    }

    return 'less than a second';
  }
};
exports.Pgp = Pgp;

class PgpMsg {}

PgpMsg.type = async ({
  data
}) => {
  if (!data || !data.length) {
    return undefined;
  }

  const firstByte = data[0]; // attempt to understand this as a binary PGP packet: https://tools.ietf.org/html/rfc4880#section-4.2

  if ((firstByte & 0b10000000) === 0b10000000) {
    // 1XXX XXXX - potential pgp packet tag
    let tagNumber = 0; // zero is a forbidden tag number

    if ((firstByte & 0b11000000) === 0b11000000) {
      // 11XX XXXX - potential new pgp packet tag
      tagNumber = firstByte & 0b00111111; // 11TTTTTT where T is tag number bit
    } else {
      // 10XX XXXX - potential old pgp packet tag
      tagNumber = (firstByte & 0b00111100) / 4; // 10TTTTLL where T is tag number bit. Division by 4 in place of two bit shifts. I hate bit shifts.
    }

    if (Object.values(openpgp.enums.packet).includes(tagNumber)) {
      // Indeed a valid OpenPGP packet tag number
      // This does not 100% mean it's OpenPGP message
      // But it's a good indication that it may
      const t = openpgp.enums.packet;
      const msgTpes = [t.symEncryptedIntegrityProtected, t.modificationDetectionCode, t.symEncryptedAEADProtected, t.symmetricallyEncrypted, t.compressed];
      return {
        armored: false,
        type: msgTpes.includes(tagNumber) ? 'encryptedMsg' : 'publicKey'
      };
    }
  }

  const {
    blocks
  } = Pgp.armor.detectBlocks(new buf_js_1.Buf(data.slice(0, 50)).toUtfStr().trim()); // only interested in first 50 bytes

  if (blocks.length === 1 && blocks[0].complete === false && ['encryptedMsg', 'privateKey', 'publicKey', 'signedMsg'].includes(blocks[0].type)) {
    return {
      armored: true,
      type: blocks[0].type
    };
  }

  return undefined;
};

PgpMsg.sign = async (signingPrv, data) => {
  const message = openpgp.cleartext.fromText(data);
  const signRes = await openpgp.sign({
    message,
    armor: true,
    privateKeys: [signingPrv]
  });
  return await openpgp.stream.readToEnd(signRes.data);
};

PgpMsg.verify = async (message, keysForVerification, optionalContact) => {
  const sig = {
    contact: optionalContact,
    match: null
  }; // tslint:disable-line:no-null-keyword

  try {
    const verifyResults = await message.verify(keysForVerification);

    for (const verifyRes of verifyResults) {
      // todo - a valid signature is a valid signature, and should be surfaced. Currently, if any of the signatures are not valid, it's showing all as invalid
      // .. as it is now this could allow an attacker to append bogus signatures to validly signed messages, making otherwise correct messages seem incorrect
      // .. which is not really an issue - an attacker that can append signatures could have also just slightly changed the message, causing the same experience
      // .. so for now #wontfix unless a reasonable usecase surfaces
      sig.match = (sig.match === true || sig.match === null) && (await verifyRes.verified);

      if (!sig.signer) {
        // todo - currently only the first signer will be reported. Should we be showing all signers? How common is that?
        sig.signer = await Pgp.key.longid(verifyRes.keyid.bytes);
      }
    }
  } catch (verifyErr) {
    sig.match = null; // tslint:disable-line:no-null-keyword

    if (verifyErr instanceof Error && verifyErr.message === 'Can only verify message with one literal data packet.') {
      sig.error = 'FlowCrypt is not equipped to verify this message (err 101)';
    } else {
      sig.error = `FlowCrypt had trouble verifying this message (${String(verifyErr)})`;
      catch_js_1.Catch.reportErr(verifyErr);
    }
  }

  return sig;
};

PgpMsg.verifyDetached = async ({
  plaintext,
  sigText
}) => {
  const message = openpgp.message.fromText(buf_js_1.Buf.fromUint8(plaintext).toUtfStr());
  await message.appendSignature(buf_js_1.Buf.fromUint8(sigText).toUtfStr());
  const keys = await Pgp.internal.cryptoMsgGetSortedKeys([], message);
  return await PgpMsg.verify(message, keys.forVerification, keys.verificationContacts[0]);
};
/**
 * Mostly copied from openpgp.js library
 * Todo - remove when this resolved: remove when resolved: https://github.com/openpgpjs/openpgpjs/issues/916
 */


PgpMsg.extractSignature = async decrypted => {
  // tslint:disable:no-unsafe-any
  const finalPacketList = new openpgp.packet.List();
  const streaming = false;
  const msg = decrypted.unwrapCompressed();
  const literalDataList = msg.packets.filterByTag(openpgp.enums.packet.literal);

  if (literalDataList.length !== 1) {
    throw new Error('Can only verify message with one literal data packet.');
  }

  const onePassSigList = msg.packets.filterByTag(openpgp.enums.packet.onePassSignature).reverse();
  const signatureList = msg.packets.filterByTag(openpgp.enums.packet.signature); // @ts-ignore

  if (onePassSigList.length && !signatureList.length && msg.packets.stream) {
    // @ts-ignore
    await Promise.all(onePassSigList.map(async onePassSig => {
      onePassSig.correspondingSig = new Promise((resolve, reject) => {
        // @ts-ignore
        onePassSig.correspondingSigResolve = resolve; // @ts-ignore

        onePassSig.correspondingSigReject = reject;
      }); // @ts-ignore

      onePassSig.signatureData = openpgp.stream.fromAsync(async () => (await onePassSig.correspondingSig).signatureData); // @ts-ignore

      onePassSig.hashed = await onePassSig.hash(onePassSig.signatureType, literalDataList[0], undefined, streaming);
    })); // @ts-ignore

    msg.packets.stream = openpgp.stream.transformPair(msg.packets.stream, async (readable, writable) => {
      // @ts-ignore
      const reader = openpgp.stream.getReader(readable); // @ts-ignore

      const writer = openpgp.stream.getWriter(writable);

      try {
        for (let i = 0; i < onePassSigList.length; i++) {
          // tslint:disable-line:prefer-for-of
          const {
            value: signature
          } = await reader.read(); // @ts-ignore

          onePassSigList[i].correspondingSigResolve(signature);
        }

        await reader.readToEnd();
        await writer.ready;
        await writer.close();
      } catch (e) {
        onePassSigList.forEach(onePassSig => {
          // @ts-ignore
          onePassSig.correspondingSigReject(e);
        });
        await writer.abort(e);
      }
    }); // @ts-ignore

    finalPacketList.push(...(await Promise.all(onePassSigList.map(s => s.correspondingSig))));
  }

  finalPacketList.push(...finalPacketList);

  if (!finalPacketList.length) {
    return undefined;
  } // @ts-ignore


  return buf_js_1.Buf.fromUtfStr(new openpgp.signature.Signature(finalPacketList).armor()); // tslint:enable:no-unsafe-any
};

PgpMsg.decrypt = async ({
  kisWithPp,
  encryptedData,
  msgPwd
}) => {
  let prepared;
  const longids = {
    message: [],
    matching: [],
    chosen: [],
    needPassphrase: []
  };

  try {
    prepared = await Pgp.internal.cryptoMsgPrepareForDecrypt(encryptedData);
  } catch (formatErr) {
    return {
      success: false,
      error: {
        type: DecryptErrTypes.format,
        message: String(formatErr)
      },
      longids
    };
  }

  const keys = await Pgp.internal.cryptoMsgGetSortedKeys(kisWithPp, prepared.message);
  longids.message = keys.encryptedFor;
  longids.matching = keys.prvForDecrypt.map(ki => ki.longid);
  longids.chosen = keys.prvForDecryptDecrypted.map(ki => ki.longid);
  longids.needPassphrase = keys.prvForDecryptWithoutPassphrases.map(ki => ki.longid);
  const isEncrypted = !prepared.isCleartext;

  if (!isEncrypted) {
    const signature = await PgpMsg.verify(prepared.message, keys.forVerification, keys.verificationContacts[0]);
    const text = await openpgp.stream.readToEnd(prepared.message.getText());
    return {
      success: true,
      content: buf_js_1.Buf.fromUtfStr(text),
      isEncrypted,
      signature
    };
  }

  if (!keys.prvForDecryptDecrypted.length && !msgPwd) {
    return {
      success: false,
      error: {
        type: DecryptErrTypes.needPassphrase,
        message: 'Missing pass phrase'
      },
      message: prepared.message,
      longids,
      isEncrypted
    };
  }

  try {
    const packets = prepared.message.packets;
    const isSymEncrypted = packets.filter(p => p.tag === openpgp.enums.packet.symEncryptedSessionKey).length > 0;
    const isPubEncrypted = packets.filter(p => p.tag === openpgp.enums.packet.publicKeyEncryptedSessionKey).length > 0;

    if (isSymEncrypted && !isPubEncrypted && !msgPwd) {
      return {
        success: false,
        error: {
          type: DecryptErrTypes.usePassword,
          message: 'Use message password'
        },
        longids,
        isEncrypted
      };
    }

    const passwords = msgPwd ? [msgPwd] : undefined;
    const privateKeys = keys.prvForDecryptDecrypted.map(ki => ki.decrypted);
    const decrypted = await prepared.message.decrypt(privateKeys, passwords, undefined, false);
    const content = new buf_js_1.Buf((await openpgp.stream.readToEnd(decrypted.getLiteralData())));
    let signature;

    try {
      // remove when resolved: https://github.com/openpgpjs/openpgpjs/issues/916
      const sigText = await PgpMsg.extractSignature(decrypted);
      signature = sigText ? await PgpMsg.verifyDetached({
        plaintext: content,
        sigText
      }) : undefined; // await Pgp.internal.cryptoMsgGetSignedBy(decrypted, keys); // with encrypted messages, we don't know if it's signed until decrypted
      // const signature = keys.signedBy.length ? await PgpMsg.verify(decrypted, keys.forVerification, keys.verificationContacts[0]) : undefined; // hangs
    } catch (e) {
      console.error('error verifying decrypted signature');
      console.error(e);
    }

    if (!prepared.isCleartext && prepared.message.packets.filterByTag(openpgp.enums.packet.symmetricallyEncrypted).length) {
      const noMdc = 'Security threat!\n\nMessage is missing integrity checks (MDC). The sender should update their outdated software.\n\nDisplay the message at your own risk.';
      return {
        success: false,
        content,
        error: {
          type: DecryptErrTypes.noMdc,
          message: noMdc
        },
        message: prepared.message,
        longids,
        isEncrypted
      };
    }

    return {
      success: true,
      content,
      isEncrypted,
      filename: decrypted.getFilename() || undefined,
      signature
    };
  } catch (e) {
    return {
      success: false,
      error: Pgp.internal.cryptoMsgDecryptCategorizeErr(e, msgPwd),
      message: prepared.message,
      longids,
      isEncrypted
    };
  }
};

PgpMsg.encrypt = async ({
  pubkeys,
  signingPrv,
  pwd,
  data,
  filename,
  armor,
  date
}) => {
  const message = openpgp.message.fromBinary(data, filename, date);
  const options = {
    armor,
    message
  };
  let usedChallenge = false;

  if (pubkeys) {
    options.publicKeys = [];

    for (const armoredPubkey of pubkeys) {
      const {
        keys: publicKeys
      } = await openpgp.key.readArmored(armoredPubkey);
      options.publicKeys.push(...publicKeys);
    }
  }

  if (pwd && pwd.answer) {
    options.passwords = [await Pgp.hash.challengeAnswer(pwd.answer)];
    usedChallenge = true;
  }

  if (!pubkeys && !usedChallenge) {
    throw new Error('no-pubkeys-no-challenge');
  }

  if (signingPrv && typeof signingPrv.isPrivate !== 'undefined' && signingPrv.isPrivate()) {
    options.privateKeys = [signingPrv];
  }

  return await openpgp.encrypt(options);
};

PgpMsg.diagnosePubkeys = async ({
  privateKis,
  message
}) => {
  const m = await openpgp.message.readArmored(buf_js_1.Buf.fromUint8(message).toUtfStr());
  const msgKeyIds = m.getEncryptionKeyIds ? m.getEncryptionKeyIds() : [];
  const localKeyIds = [];

  for (const k of await Promise.all(privateKis.map(ki => Pgp.key.read(ki.public)))) {
    localKeyIds.push(...k.getKeyIds());
  }

  const diagnosis = {
    found_match: false,
    receivers: msgKeyIds.length
  };

  for (const msgKeyId of msgKeyIds) {
    for (const localKeyId of localKeyIds) {
      if (msgKeyId.bytes === localKeyId.bytes) {
        diagnosis.found_match = true;
        return diagnosis;
      }
    }
  }

  return diagnosis;
};
/**
 * textBlockType - choose if textual block should be returned as escaped html (for direct browser rendering) or text (other platforms)
 */


PgpMsg.fmtDecryptedAsSanitizedHtmlBlocks = async decryptedContent => {
  const blocks = [];

  if (!mime_js_1.Mime.resemblesMsg(decryptedContent)) {
    let utf = buf_js_1.Buf.fromUint8(decryptedContent).toUtfStr();
    utf = PgpMsg.extractFcAtts(utf, blocks);
    utf = PgpMsg.stripFcTeplyToken(utf);
    const armoredPubKeys = [];
    utf = PgpMsg.stripPublicKeys(utf, armoredPubKeys);
    blocks.push(Pgp.internal.msgBlockObj('decryptedHtml', common_js_1.Str.asEscapedHtml(utf))); // escaped text as html

    await PgpMsg.pushArmoredPubkeysToBlocks(armoredPubKeys, blocks);
  } else {
    const decoded = await mime_js_1.Mime.decode(decryptedContent);

    if (typeof decoded.html !== 'undefined') {
      blocks.push(Pgp.internal.msgBlockObj('decryptedHtml', xss_js_1.Xss.htmlSanitizeKeepBasicTags(decoded.html))); // sanitized html
    } else if (typeof decoded.text !== 'undefined') {
      blocks.push(Pgp.internal.msgBlockObj('decryptedHtml', common_js_1.Str.asEscapedHtml(decoded.text))); // escaped text as html
    } else {
      blocks.push(Pgp.internal.msgBlockObj('decryptedHtml', common_js_1.Str.asEscapedHtml(buf_js_1.Buf.with(decryptedContent).toUtfStr()))); // escaped mime text as html
    }

    for (const att of decoded.atts) {
      if (att.treatAs() === 'publicKey') {
        await PgpMsg.pushArmoredPubkeysToBlocks([att.getData().toUtfStr()], blocks);
      } else {
        blocks.push(Pgp.internal.msgBlockAttObj('decryptedAtt', '', {
          name: att.name,
          data: att.getData(),
          length: att.length,
          type: att.type
        }));
      }
    }
  }

  return blocks;
};

PgpMsg.extractFcAtts = (decryptedContent, blocks) => {
  // these tags were created by FlowCrypt exclusively, so the structure is fairly rigid
  // `<a href="${att.url}" class="cryptup_file" cryptup-data="${fcData}">${linkText}</a>\n`
  // thus we use RegEx so that it works on both browser and node
  if (decryptedContent.includes('class="cryptup_file"')) {
    decryptedContent = decryptedContent.replace(/<a\s+href="([^"]+)"\s+class="cryptup_file"\s+cryptup-data="([^"]+)"\s*>[^<]+<\/a>\n?/gm, (_, url, fcData) => {
      const a = common_js_1.Str.htmlAttrDecode(String(fcData));

      if (PgpMsg.isFcAttLinkData(a)) {
        blocks.push(Pgp.internal.msgBlockAttObj('encryptedAttLink', '', {
          type: a.type,
          name: a.name,
          length: a.size,
          url: String(url)
        }));
      }

      return '';
    });
  }

  return decryptedContent;
};

PgpMsg.stripPublicKeys = (decryptedContent, foundPublicKeys) => {
  let {
    blocks,
    normalized
  } = Pgp.armor.detectBlocks(decryptedContent); // tslint:disable-line:prefer-const

  for (const block of blocks) {
    if (block.type === 'publicKey') {
      const armored = block.content.toString();
      foundPublicKeys.push(armored);
      normalized = normalized.replace(armored, '');
    }
  }

  return normalized;
}; // public static extractFcReplyToken = (decryptedContent: string) => { // todo - used exclusively on the web - move to a web package
//   const fcTokenElement = $(`<div>${decryptedContent}</div>`).find('.cryptup_reply');
//   if (fcTokenElement.length) {
//     const fcData = fcTokenElement.attr('cryptup-data');
//     if (fcData) {
//       return Str.htmlAttrDecode(fcData);
//     }
//   }
// }


PgpMsg.stripFcTeplyToken = decryptedContent => decryptedContent.replace(/<div[^>]+class="cryptup_reply"[^>]+><\/div>/, '');

PgpMsg.isFcAttLinkData = o => {
  return o && typeof o === 'object' && typeof o.name !== 'undefined' && typeof o.size !== 'undefined' && typeof o.type !== 'undefined';
};

PgpMsg.pushArmoredPubkeysToBlocks = async (armoredPubkeys, blocks) => {
  for (const armoredPubkey of armoredPubkeys) {
    const {
      keys
    } = await Pgp.key.parse(armoredPubkey);

    for (const keyDetails of keys) {
      blocks.push(Pgp.internal.msgBlockKeyObj('publicKey', keyDetails.public, keyDetails));
    }
  }
};

exports.PgpMsg = PgpMsg;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERSION = APP_VERSION;
exports.GOOGLE_API_HOST = '[BUILD_REPLACEABLE_GOOGLE_API_HOST]';
exports.GOOGLE_OAUTH_SCREEN_HOST = '[BUILD_REPLACEABLE_GOOGLE_OAUTH_SCREEN_HOST]';
/**
 * Only put constants below if:
 *   - they are useful across web/extension/Nodejs environments, AND
 *   - the only other reasonable place to put them would be OUTSIDE of the /core folder
 *   - example: A Google query below would normally go in Google class, but that's outside of /core and we also need it on Android
 *
 * For any constants that are not expected to be reused that widely, just put them as private or public static props in relevant class.
 */

exports.GMAIL_RECOVERY_EMAIL_SUBJECTS = ['Your FlowCrypt Backup', 'Your CryptUp Backup', 'All you need to know about CryptUP (contains a backup)', 'CryptUP Account Backup'];

exports.gmailBackupSearchQuery = acctEmail => {
  return ['from:' + acctEmail, 'to:' + acctEmail, '(subject:"' + exports.GMAIL_RECOVERY_EMAIL_SUBJECTS.join('" OR subject: "') + '")', '-is:spam'].join(' ');
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

class Catch {}

Catch.reportErr = e => {
  console.error(e); // core errors that were not re-thrown are not so interesting as of 2018
};

Catch.report = (name, details) => {
  console.error(name, details); // core reports are not so interesting as of 2018
};

exports.Catch = Catch;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const require_js_1 = __webpack_require__(11);

const openpgp = require_js_1.requireOpenpgp();
let KEY_CACHE = {};
let KEY_CACHE_WIPE_TIMEOUT;

const keyLongid = k => openpgp.util.str_to_hex(k.getKeyId().bytes).toUpperCase();

class Store {}

Store.dbContactGet = async (db, emailOrLongid) => {
  return [];
};

Store.decryptedKeyCacheSet = k => {
  Store.keyCacheRenewExpiry();
  KEY_CACHE[keyLongid(k)] = k;
};

Store.decryptedKeyCacheGet = longid => {
  Store.keyCacheRenewExpiry();
  return KEY_CACHE[longid];
};

Store.armoredKeyCacheSet = (armored, k) => {
  Store.keyCacheRenewExpiry();
  KEY_CACHE[armored] = k;
};

Store.armoredKeyCacheGet = armored => {
  Store.keyCacheRenewExpiry();
  return KEY_CACHE[armored];
};

Store.keyCacheWipe = () => {
  KEY_CACHE = {};
};

Store.keyCacheRenewExpiry = () => {
  if (KEY_CACHE_WIPE_TIMEOUT) {
    clearTimeout(KEY_CACHE_WIPE_TIMEOUT);
  }

  KEY_CACHE_WIPE_TIMEOUT = setTimeout(Store.keyCacheWipe, 2 * 60 * 1000);
};

exports.Store = Store;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
}); /// <reference path="../../../types/openpgp.d.ts" />

exports.requireOpenpgp = () => {
  // @ts-ignore;
  if (typeof openpgp !== 'undefined') {
    // @ts-ignore;
    return openpgp; // self-contained node-mobile
  }

  return __webpack_require__(12); // normal desktop node, eg when running tests
};

exports.requireMimeParser = () => {
  // @ts-ignore;
  return global['emailjs-mime-parser'];
};

exports.requireMimeBuilder = () => {
  // global['emailjs-mime-builder'] ?
  // dereq_emailjs_mime_builder ?
  // @ts-ignore
  return global['emailjs-mime-builder'];
};

exports.requireIso88592 = () => {
  // @ts-ignore
  return global['iso88592'];
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("openpgp");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const common_js_1 = __webpack_require__(4);

const pgp_js_1 = __webpack_require__(7);

const att_js_1 = __webpack_require__(14);

const catch_js_1 = __webpack_require__(9);

const require_js_1 = __webpack_require__(11);

const buf_js_1 = __webpack_require__(15);

const MimeParser = require_js_1.requireMimeParser(); // tslint:disable-line:variable-name

const MimeBuilder = require_js_1.requireMimeBuilder(); // tslint:disable-line:variable-name

const Iso88592 = require_js_1.requireIso88592(); // tslint:disable-line:variable-name

class Mime {}

Mime.process = async mimeMsg => {
  const decoded = await Mime.decode(mimeMsg);
  const blocks = [];

  if (decoded.text) {
    const blocksFromTextPart = pgp_js_1.Pgp.armor.detectBlocks(common_js_1.Str.normalize(decoded.text)).blocks; // if there are some encryption-related blocks found in the text section, which we can use, and not look at the html section

    if (blocksFromTextPart.find(b => b.type === 'encryptedMsg' || b.type === 'signedMsg' || b.type === 'publicKey' || b.type === 'privateKey' || b.type === 'cryptupVerification')) {
      blocks.push(...blocksFromTextPart); // because the html most likely containt the same thing, just harder to parse pgp sections cause it's html
    } else if (decoded.html) {
      // if no pgp blocks found in text part and there is html part, prefer html
      blocks.push(pgp_js_1.Pgp.internal.msgBlockObj('plainHtml', decoded.html));
    } else {
      // else if no html and just a plain text message, use that
      blocks.push(...blocksFromTextPart);
    }
  } else if (decoded.html) {
    blocks.push(pgp_js_1.Pgp.internal.msgBlockObj('plainHtml', decoded.html));
  }

  for (const file of decoded.atts) {
    const treatAs = file.treatAs();

    if (treatAs === 'encryptedMsg') {
      const armored = pgp_js_1.Pgp.armor.clip(file.getData().toUtfStr());

      if (armored) {
        blocks.push(pgp_js_1.Pgp.internal.msgBlockObj('encryptedMsg', armored));
      }
    } else if (treatAs === 'signature') {
      decoded.signature = decoded.signature || file.getData().toUtfStr();
    } else if (treatAs === 'publicKey') {
      blocks.push(...pgp_js_1.Pgp.armor.detectBlocks(file.getData().toUtfStr()).blocks);
    } else if (treatAs === 'privateKey') {
      blocks.push(...pgp_js_1.Pgp.armor.detectBlocks(file.getData().toUtfStr()).blocks);
    } else if (treatAs === 'encryptedFile') {
      blocks.push(pgp_js_1.Pgp.internal.msgBlockAttObj('encryptedAtt', '', {
        name: file.name,
        type: file.type,
        length: file.getData().length,
        data: file.getData()
      }));
    } else if (treatAs === 'plainFile') {
      blocks.push(pgp_js_1.Pgp.internal.msgBlockAttObj('plainAtt', '', {
        name: file.name,
        type: file.type,
        length: file.getData().length,
        data: file.getData()
      }));
    }
  }

  if (decoded.signature) {
    for (const block of blocks) {
      if (block.type === 'plainText') {
        block.type = 'signedMsg';
        block.signature = decoded.signature;
      } else if (block.type === 'plainHtml') {
        block.type = 'signedHtml';
        block.signature = decoded.signature;
      }
    }

    if (!blocks.find(block => block.type === 'plainText' || block.type === 'plainHtml' || block.type === 'signedMsg' || block.type === 'signedHtml')) {
      // signed an empty message
      blocks.push({
        type: "signedMsg",
        "content": "",
        signature: decoded.signature,
        complete: true
      });
    }
  }

  return {
    headers: decoded.headers,
    blocks,
    from: decoded.from,
    to: decoded.to,
    rawSignedContent: decoded.rawSignedContent
  };
};

Mime.headersToFrom = parsedMimeMsg => {
  const headerTo = [];
  let headerFrom;

  if (Array.isArray(parsedMimeMsg.headers.from) && parsedMimeMsg.headers.from[0] && parsedMimeMsg.headers.from[0].address) {
    headerFrom = parsedMimeMsg.headers.from[0].address;
  }

  if (Array.isArray(parsedMimeMsg.headers.to)) {
    for (const to of parsedMimeMsg.headers.to) {
      if (to.address) {
        headerTo.push(String(to.address));
      }
    }
  }

  return {
    from: headerFrom,
    to: headerTo
  };
};

Mime.replyHeaders = parsedMimeMsg => {
  const msgId = String(parsedMimeMsg.headers['message-id'] || '');
  const refs = String(parsedMimeMsg.headers['in-reply-to'] || '');
  return {
    'in-reply-to': msgId,
    'references': refs + ' ' + msgId
  };
};

Mime.resemblesMsg = msg => {
  const utf8 = new buf_js_1.Buf(msg.slice(0, 1000)).toUtfStr().toLowerCase();
  const contentType = utf8.match(/content-type: +[0-9a-z\-\/]+/);

  if (!contentType) {
    return false;
  }

  if (utf8.match(/content-transfer-encoding: +[0-9a-z\-\/]+/) || utf8.match(/content-disposition: +[0-9a-z\-\/]+/) || utf8.match(/; boundary=/) || utf8.match(/; charset=/)) {
    return true;
  }

  return Boolean(contentType.index === 0 && utf8.match(/boundary=/));
};

Mime.retrieveRawSignedContent = nodes => {
  for (const node of nodes) {
    if (node._isMultipart === 'signed' && node._childNodes && node._childNodes[0]) {
      // PGP/MIME signed content uses <CR><LF> as in // use CR-LF https://tools.ietf.org/html/rfc3156#section-5
      // however emailjs parser will replace it to <LF>, so we fix it here
      let rawSignedContent = node._childNodes[0].raw.replace(/\r?\n/g, '\r\n');

      if (/--$/.test(rawSignedContent)) {
        // end of boundary without a mandatory newline
        rawSignedContent += '\r\n'; // emailjs wrongly leaves out the last newline, fix it here
      }

      return rawSignedContent;
    } else if (node._childNodes) {
      return Mime.retrieveRawSignedContent(node._childNodes);
    }
  }

  return undefined;
};

Mime.decode = mimeMsg => {
  return new Promise(async resolve => {
    const mimeContent = {
      atts: [],
      headers: {},
      subject: undefined,
      text: undefined,
      html: undefined,
      signature: undefined,
      from: undefined,
      to: []
    };

    try {
      const parser = new MimeParser();
      const leafNodes = {};

      parser.onbody = node => {
        const path = String(node.path.join('.'));

        if (typeof leafNodes[path] === 'undefined') {
          leafNodes[path] = node;
        }
      };

      parser.onend = () => {
        for (const name of Object.keys(parser.node.headers)) {
          mimeContent.headers[name] = parser.node.headers[name][0].value;
        }

        mimeContent.rawSignedContent = Mime.retrieveRawSignedContent([parser.node]);

        for (const node of Object.values(leafNodes)) {
          if (Mime.getNodeType(node) === 'application/pgp-signature') {
            mimeContent.signature = node.rawContent;
          } else if (Mime.getNodeType(node) === 'text/html' && !Mime.getNodeFilename(node)) {
            // html content may be broken up into smaller pieces by attachments in between
            // AppleMail does this with inline attachments
            mimeContent.html = (mimeContent.html || '') + Mime.getNodeContentAsUtfStr(node);
          } else if (Mime.getNodeType(node) === 'text/plain' && !Mime.getNodeFilename(node)) {
            mimeContent.text = Mime.getNodeContentAsUtfStr(node);
          } else if (Mime.getNodeType(node) === 'text/rfc822-headers') {
            if (node._parentNode && node._parentNode.headers.subject) {
              mimeContent.subject = node._parentNode.headers.subject[0].value;
            }
          } else {
            mimeContent.atts.push(Mime.getNodeAsAtt(node));
          }
        }

        const {
          from,
          to
        } = Mime.headersToFrom(mimeContent);
        mimeContent.from = from;
        mimeContent.to = to;
        resolve(mimeContent);
      };

      parser.write(mimeMsg);
      parser.end();
    } catch (e) {
      // todo - on Android we may want to fail when this happens, evaluate effect on browser extension
      catch_js_1.Catch.reportErr(e);
      resolve(mimeContent);
    }
  });
};

Mime.encode = async (body, headers, atts = []) => {
  const rootNode = new MimeBuilder('multipart/mixed'); // tslint:disable-line:no-unsafe-any

  for (const key of Object.keys(headers)) {
    rootNode.addHeader(key, headers[key]); // tslint:disable-line:no-unsafe-any
  }

  if (typeof body === 'string') {
    body = {
      'text/plain': body
    };
  }

  let contentNode;

  if (Object.keys(body).length === 1) {
    contentNode = Mime.newContentNode(MimeBuilder, Object.keys(body)[0], body[Object.keys(body)[0]] || '');
  } else {
    contentNode = new MimeBuilder('multipart/alternative'); // tslint:disable-line:no-unsafe-any

    for (const type of Object.keys(body)) {
      contentNode.appendChild(Mime.newContentNode(MimeBuilder, type, body[type])); // already present, that's why part of for loop
    }
  }

  rootNode.appendChild(contentNode); // tslint:disable-line:no-unsafe-any

  for (const att of atts) {
    const type = `${att.type}; name="${att.name}"`;
    const id = `f_${common_js_1.Str.sloppyRandom(30)}@flowcrypt`;
    const header = {
      'Content-Disposition': 'attachment',
      'X-Attachment-Id': id,
      'Content-ID': `<${id}>`,
      'Content-Transfer-Encoding': 'base64'
    };
    rootNode.appendChild(new MimeBuilder(type, {
      filename: att.name
    }).setHeader(header).setContent(att.getData())); // tslint:disable-line:no-unsafe-any
  }

  return rootNode.build(); // tslint:disable-line:no-unsafe-any
};

Mime.getNodeType = node => {
  if (node.headers['content-type'] && node.headers['content-type'][0]) {
    return node.headers['content-type'][0].value;
  }

  return undefined;
};

Mime.getNodeContentId = node => {
  if (node.headers['content-id'] && node.headers['content-id'][0]) {
    return node.headers['content-id'][0].value;
  }

  return undefined;
};

Mime.getNodeFilename = node => {
  if (node.headers['content-disposition'] && node.headers['content-disposition'][0]) {
    const header = node.headers['content-disposition'][0];

    if (header.params && header.params.filename) {
      return String(header.params.filename);
    }
  }

  if (node.headers['content-type'] && node.headers['content-type'][0]) {
    const header = node.headers['content-type'][0];

    if (header.params && header.params.name) {
      return String(header.params.name);
    }
  }

  return;
};

Mime.fromEqualSignNotationAsBuf = str => {
  return buf_js_1.Buf.fromRawBytesStr(str.replace(/(=[A-F0-9]{2})+/g, equalSignUtfPart => {
    const bytes = equalSignUtfPart.replace(/^=/, '').split('=').map(twoHexDigits => parseInt(twoHexDigits, 16));
    return new buf_js_1.Buf(bytes).toRawBytesStr();
  }));
};

Mime.getNodeAsAtt = node => {
  return new att_js_1.Att({
    name: Mime.getNodeFilename(node),
    type: Mime.getNodeType(node),
    data: node.contentTransferEncoding.value === 'quoted-printable' ? Mime.fromEqualSignNotationAsBuf(node.rawContent) : node.content,
    cid: Mime.getNodeContentId(node)
  });
};

Mime.getNodeContentAsUtfStr = node => {
  if (node.charset === 'utf-8' && node.contentTransferEncoding.value === 'base64') {
    return buf_js_1.Buf.fromUint8(node.content).toUtfStr();
  }

  if (node.charset === 'utf-8' && node.contentTransferEncoding.value === 'quoted-printable') {
    return Mime.fromEqualSignNotationAsBuf(node.rawContent).toUtfStr();
  }

  if (node.charset && Iso88592.labels.includes(node.charset)) {
    return Iso88592.decode(node.rawContent); // tslint:disable-line:no-unsafe-any
  }

  return buf_js_1.Buf.fromRawBytesStr(node.rawContent).toUtfStr();
}; // tslint:disable-next-line:variable-name


Mime.newContentNode = (MimeBuilder, type, content) => {
  const node = new MimeBuilder(type).setContent(content); // tslint:disable-line:no-unsafe-any

  if (type === 'text/plain') {
    // gmail likes this
    node.addHeader('Content-Transfer-Encoding', 'quoted-printable'); // tslint:disable-line:no-unsafe-any
  }

  return node;
};

exports.Mime = Mime;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const buf_js_1 = __webpack_require__(15);

class Att {
  constructor({
    data,
    type,
    name,
    length,
    url,
    inline,
    id,
    msgId,
    treatAs,
    cid
  }) {
    this.length = NaN;

    this.hasData = () => this.bytes instanceof Uint8Array;

    this.setData = bytes => {
      if (this.hasData()) {
        throw new Error('Att bytes already set');
      }

      this.bytes = bytes;
    };

    this.getData = () => {
      if (this.bytes instanceof buf_js_1.Buf) {
        return this.bytes;
      }

      if (this.bytes instanceof Uint8Array) {
        return new buf_js_1.Buf(this.bytes);
      }

      throw new Error('Att has no data set');
    };

    this.treatAs = () => {
      // todo - should return a probability in the range of certain-likely-maybe
      // could also return possible types as an array - which makes basic usage more difficult - to think through
      // better option - add an "unknown" type: when encountered, code consuming this should inspect a chunk of contents
      if (this.treatAsValue) {
        // pre-set
        return this.treatAsValue;
      } else if (['PGPexch.htm.pgp', 'PGPMIME version identification', 'Version.txt', 'PGPMIME Versions Identification'].includes(this.name)) {
        return 'hidden'; // PGPexch.htm.pgp is html alternative of textual body content produced by PGP Desktop and GPG4o
      } else if (this.name === 'signature.asc' || this.type === 'application/pgp-signature') {
        return 'signature';
      } else if (!this.name && !this.type.startsWith('image/')) {
        // this.name may be '' or undefined - catch either
        return this.length < 100 ? 'hidden' : 'encryptedMsg';
      } else if (['message', 'msg.asc', 'message.asc', 'encrypted.asc', 'encrypted.eml.pgp', 'Message.pgp'].includes(this.name)) {
        return 'encryptedMsg';
      } else if (this.name.match(/(\.pgp$)|(\.gpg$)|(\.[a-zA-Z0-9]{3,4}\.asc$)/g)) {
        // ends with one of .gpg, .pgp, .???.asc, .????.asc
        return 'encryptedFile';
      } else if (this.name.match(/(cryptup|flowcrypt)-backup-[a-z]+\.key/g)) {
        return 'privateKey';
      } else if (this.name.match(/^(0|0x)?[A-F0-9]{8}([A-F0-9]{8})?.*\.asc$/g)) {
        // name starts with a key id
        return 'publicKey';
      } else if (this.name.toLowerCase().includes('public') && this.name.match(/[A-F0-9]{8}.*\.asc$/g)) {
        // name contains the word "public", any key id and ends with .asc
        return 'publicKey';
      } else if (this.name.match(/\.asc$/) && this.hasData() && buf_js_1.Buf.with(this.getData().subarray(0, 100)).toUtfStr().includes('-----BEGIN PGP PUBLIC KEY BLOCK-----')) {
        return 'publicKey';
      } else if (this.name.match(/\.asc$/) && this.length < 100000 && !this.inline) {
        return 'encryptedMsg';
      } else {
        return 'plainFile';
      }
    };

    if (typeof data === 'undefined' && typeof url === 'undefined' && typeof id === 'undefined') {
      throw new Error('Att: one of data|url|id has to be set');
    }

    if (id && !msgId) {
      throw new Error('Att: if id is set, msgId must be set too');
    }

    if (data) {
      this.bytes = data;
      this.length = data.length;
    } else {
      this.length = Number(length);
    }

    this.name = name || '';
    this.type = type || 'application/octet-stream';
    this.url = url || undefined;
    this.inline = inline !== true;
    this.id = id || undefined;
    this.msgId = msgId || undefined;
    this.treatAsValue = treatAs || undefined;
    this.cid = cid || undefined;
  }

}

Att.attachmentsPattern = /^(((cryptup|flowcrypt)-backup-[a-z]+\.key)|(.+\.pgp)|(.+\.gpg)|(.+\.asc)|(noname)|(message)|(PGPMIME version identification)|())$/gm;

Att.keyinfoAsPubkeyAtt = ki => new Att({
  data: buf_js_1.Buf.fromUtfStr(ki.public),
  type: 'application/pgp-keys',
  name: `0x${ki.longid}.asc`
});

exports.Att = Att;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const util_js_1 = __webpack_require__(5);

class Buf extends Uint8Array {
  constructor() {
    super(...arguments);

    this.toUtfStr = (mode = 'inform') => {
      const length = this.length;
      let bytesLeftInChar = 0;
      let utf8string = '';
      let binaryChar = '';

      for (let i = 0; i < length; i++) {
        if (this[i] < 128) {
          if (bytesLeftInChar) {
            // utf-8 continuation byte missing, assuming the last character was an 8-bit ASCII character
            utf8string += String.fromCharCode(this[i - 1]);
          }

          bytesLeftInChar = 0;
          binaryChar = '';
          utf8string += String.fromCharCode(this[i]);
        } else {
          if (!bytesLeftInChar) {
            // beginning of new multi-byte character
            if (this[i] >= 128 && this[i] < 192) {
              // 10xx xxxx
              utf8string += String.fromCharCode(this[i]); // extended 8-bit ASCII compatibility, european ASCII characters
            } else if (this[i] >= 192 && this[i] < 224) {
              // 110x xxxx
              bytesLeftInChar = 1;
              binaryChar = this[i].toString(2).substr(3);
            } else if (this[i] >= 224 && this[i] < 240) {
              // 1110 xxxx
              bytesLeftInChar = 2;
              binaryChar = this[i].toString(2).substr(4);
            } else if (this[i] >= 240 && this[i] < 248) {
              // 1111 0xxx
              bytesLeftInChar = 3;
              binaryChar = this[i].toString(2).substr(5);
            } else if (this[i] >= 248 && this[i] < 252) {
              // 1111 10xx
              bytesLeftInChar = 4;
              binaryChar = this[i].toString(2).substr(6);
            } else if (this[i] >= 252 && this[i] < 254) {
              // 1111 110x
              bytesLeftInChar = 5;
              binaryChar = this[i].toString(2).substr(7);
            } else {
              if (mode === 'strict' || mode === 'inform') {
                const e = new Error('Buf.toUtfStr: invalid utf-8 character beginning byte: ' + this[i]);

                if (mode === 'strict') {
                  throw e;
                }

                console.info(e);
              }
            }
          } else {
            // continuation of a multi-byte character
            binaryChar += this[i].toString(2).substr(2);
            bytesLeftInChar--;
          }

          if (binaryChar && !bytesLeftInChar) {
            utf8string += String.fromCharCode(parseInt(binaryChar, 2));
            binaryChar = '';
          }
        }
      }

      return utf8string;
    };

    this.toRawBytesStr = () => {
      const chunkSize = 0x8000;
      const length = this.length;
      const chars = [];

      for (let i = 0; i < length; i += chunkSize) {
        chars.push(String.fromCharCode.apply(undefined, Array.from(this.subarray(i, i + chunkSize))));
      }

      return chars.join('');
    };

    this.toBase64Str = () => {
      return util_js_1.base64encode(this.toRawBytesStr());
    };

    this.toBase64UrlStr = () => {
      return this.toBase64Str().replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
    };

    this.toString = this.toUtfStr; // mimic Node api
  }

}

Buf.with = input => {
  if (input instanceof Buf) {
    return input;
  } else if (input instanceof Uint8Array) {
    return Buf.fromUint8(input);
  } else {
    return Buf.fromUtfStr(input);
  }
};

Buf.fromUint8 = u8a => {
  return new Buf(u8a);
};

Buf.fromRawBytesStr = rawStr => {
  const length = rawStr.length;
  const buf = new Buf(length);

  for (let i = 0; i < length; i++) {
    buf[i] = rawStr.charCodeAt(i);
  }

  return buf;
};

Buf.fromUtfStr = utfStr => {
  // adapted from https://github.com/feross/buffer/blob/master/index.js see https://github.com/feross/buffer/blob/master/LICENSE (MIT as of Jan 2018)
  let codePoint;
  const length = utfStr.length;
  let leadSurrogate;
  const bytes = [];

  for (let i = 0; i < length; ++i) {
    codePoint = utfStr.charCodeAt(i);

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // is surrogate component
      if (!leadSurrogate) {
        // last char was a lead
        if (codePoint > 0xDBFF) {
          // no lead yet
          bytes.push(0xEF, 0xBF, 0xBD); // unexpected trail

          continue;
        } else if (i + 1 === length) {
          bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        leadSurrogate = codePoint; // valid lead

        continue;
      }

      if (codePoint < 0xDC00) {
        // 2 leads in a row
        bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000; // valid surrogate pair
    } else if (leadSurrogate) {
      bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = undefined; // encode utf8

    if (codePoint < 0x80) {
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return new Buf(bytes);
};

Buf.fromBase64Str = b64str => {
  return Buf.fromRawBytesStr(util_js_1.base64decode(b64str));
};

Buf.fromBase64UrlStr = b64UrlStr => {
  return Buf.fromBase64Str(b64UrlStr.replace(/-/g, '+').replace(/_/g, '/'));
};

exports.Buf = Buf;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});
const words = ["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid", "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual", "adapt", "add", "addict", "address", "adjust", "admit", "adult", "advance", "advice", "aerobic", "affair", "afford", "afraid", "again", "age", "agent", "agree", "ahead", "aim", "air", "airport", "aisle", "alarm", "album", "alcohol", "alert", "alien", "all", "alley", "allow", "almost", "alone", "alpha", "already", "also", "alter", "always", "amateur", "amazing", "among", "amount", "amused", "analyst", "anchor", "ancient", "anger", "angle", "angry", "animal", "ankle", "announce", "annual", "another", "answer", "antenna", "antique", "anxiety", "any", "apart", "apology", "appear", "apple", "approve", "april", "arch", "arctic", "area", "arena", "argue", "arm", "armed", "armor", "army", "around", "arrange", "arrest", "arrive", "arrow", "art", "artefact", "artist", "artwork", "ask", "aspect", "assault", "asset", "assist", "assume", "asthma", "athlete", "atom", "attack", "attend", "attitude", "attract", "auction", "audit", "august", "aunt", "author", "auto", "autumn", "average", "avocado", "avoid", "awake", "aware", "away", "awesome", "awful", "awkward", "axis", "baby", "bachelor", "bacon", "badge", "bag", "balance", "balcony", "ball", "bamboo", "banana", "banner", "bar", "barely", "bargain", "barrel", "base", "basic", "basket", "battle", "beach", "bean", "beauty", "because", "become", "beef", "before", "begin", "behave", "behind", "believe", "below", "belt", "bench", "benefit", "best", "betray", "better", "between", "beyond", "bicycle", "bid", "bike", "bind", "biology", "bird", "birth", "bitter", "black", "blade", "blame", "blanket", "blast", "bleak", "bless", "blind", "blood", "blossom", "blouse", "blue", "blur", "blush", "board", "boat", "body", "boil", "bomb", "bone", "bonus", "book", "boost", "border", "boring", "borrow", "boss", "bottom", "bounce", "box", "boy", "bracket", "brain", "brand", "brass", "brave", "bread", "breeze", "brick", "bridge", "brief", "bright", "bring", "brisk", "broccoli", "broken", "bronze", "broom", "brother", "brown", "brush", "bubble", "buddy", "budget", "buffalo", "build", "bulb", "bulk", "bullet", "bundle", "bunker", "burden", "burger", "burst", "bus", "business", "busy", "butter", "buyer", "buzz", "cabbage", "cabin", "cable", "cactus", "cage", "cake", "call", "calm", "camera", "camp", "can", "canal", "cancel", "candy", "cannon", "canoe", "canvas", "canyon", "capable", "capital", "captain", "car", "carbon", "card", "cargo", "carpet", "carry", "cart", "case", "cash", "casino", "castle", "casual", "cat", "catalog", "catch", "category", "cattle", "caught", "cause", "caution", "cave", "ceiling", "celery", "cement", "census", "century", "cereal", "certain", "chair", "chalk", "champion", "change", "chaos", "chapter", "charge", "chase", "chat", "cheap", "check", "cheese", "chef", "cherry", "chest", "chicken", "chief", "child", "chimney", "choice", "choose", "chronic", "chuckle", "chunk", "churn", "cigar", "cinnamon", "circle", "citizen", "city", "civil", "claim", "clap", "clarify", "claw", "clay", "clean", "clerk", "clever", "click", "client", "cliff", "climb", "clinic", "clip", "clock", "clog", "close", "cloth", "cloud", "clown", "club", "clump", "cluster", "clutch", "coach", "coast", "coconut", "code", "coffee", "coil", "coin", "collect", "color", "column", "combine", "come", "comfort", "comic", "common", "company", "concert", "conduct", "confirm", "congress", "connect", "consider", "control", "convince", "cook", "cool", "copper", "copy", "coral", "core", "corn", "correct", "cost", "cotton", "couch", "country", "couple", "course", "cousin", "cover", "coyote", "crack", "cradle", "craft", "cram", "crane", "crash", "crater", "crawl", "crazy", "cream", "credit", "creek", "crew", "cricket", "crime", "crisp", "critic", "crop", "cross", "crouch", "crowd", "crucial", "cruel", "cruise", "crumble", "crunch", "crush", "cry", "crystal", "cube", "culture", "cup", "cupboard", "curious", "current", "curtain", "curve", "cushion", "custom", "cute", "cycle", "dad", "damage", "damp", "dance", "danger", "daring", "dash", "daughter", "dawn", "day", "deal", "debate", "debris", "decade", "december", "decide", "decline", "decorate", "decrease", "deer", "defense", "define", "defy", "degree", "delay", "deliver", "demand", "demise", "denial", "dentist", "deny", "depart", "depend", "deposit", "depth", "deputy", "derive", "describe", "desert", "design", "desk", "despair", "destroy", "detail", "detect", "develop", "device", "devote", "diagram", "dial", "diamond", "diary", "dice", "diesel", "diet", "differ", "digital", "dignity", "dilemma", "dinner", "dinosaur", "direct", "dirt", "disagree", "discover", "disease", "dish", "dismiss", "disorder", "display", "distance", "divert", "divide", "divorce", "dizzy", "doctor", "document", "dog", "doll", "dolphin", "domain", "donate", "donkey", "donor", "door", "dose", "double", "dove", "draft", "dragon", "drama", "drastic", "draw", "dream", "dress", "drift", "drill", "drink", "drip", "drive", "drop", "drum", "dry", "duck", "dumb", "dune", "during", "dust", "dutch", "duty", "dwarf", "dynamic", "eager", "eagle", "early", "earn", "earth", "easily", "east", "easy", "echo", "ecology", "economy", "edge", "edit", "educate", "effort", "egg", "eight", "either", "elbow", "elder", "electric", "elegant", "element", "elephant", "elevator", "elite", "else", "embark", "embody", "embrace", "emerge", "emotion", "employ", "empower", "empty", "enable", "enact", "end", "endless", "endorse", "enemy", "energy", "enforce", "engage", "engine", "enhance", "enjoy", "enlist", "enough", "enrich", "enroll", "ensure", "enter", "entire", "entry", "envelope", "episode", "equal", "equip", "era", "erase", "erode", "erosion", "error", "erupt", "escape", "essay", "essence", "estate", "eternal", "ethics", "evidence", "evil", "evoke", "evolve", "exact", "example", "excess", "exchange", "excite", "exclude", "excuse", "execute", "exercise", "exhaust", "exhibit", "exile", "exist", "exit", "exotic", "expand", "expect", "expire", "explain", "expose", "express", "extend", "extra", "eye", "eyebrow", "fabric", "face", "faculty", "fade", "faint", "faith", "fall", "false", "fame", "family", "famous", "fan", "fancy", "fantasy", "farm", "fashion", "fat", "fatal", "father", "fatigue", "fault", "favorite", "feature", "february", "federal", "fee", "feed", "feel", "female", "fence", "festival", "fetch", "fever", "few", "fiber", "fiction", "field", "figure", "file", "film", "filter", "final", "find", "fine", "finger", "finish", "fire", "firm", "first", "fiscal", "fish", "fit", "fitness", "fix", "flag", "flame", "flash", "flat", "flavor", "flee", "flight", "flip", "float", "flock", "floor", "flower", "fluid", "flush", "fly", "foam", "focus", "fog", "foil", "fold", "follow", "food", "foot", "force", "forest", "forget", "fork", "fortune", "forum", "forward", "fossil", "foster", "found", "fox", "fragile", "frame", "frequent", "fresh", "friend", "fringe", "frog", "front", "frost", "frown", "frozen", "fruit", "fuel", "fun", "funny", "furnace", "fury", "future", "gadget", "gain", "galaxy", "gallery", "game", "gap", "garage", "garbage", "garden", "garlic", "garment", "gas", "gasp", "gate", "gather", "gauge", "gaze", "general", "genius", "genre", "gentle", "genuine", "gesture", "ghost", "giant", "gift", "giggle", "ginger", "giraffe", "girl", "give", "glad", "glance", "glare", "glass", "glide", "glimpse", "globe", "gloom", "glory", "glove", "glow", "glue", "goat", "goddess", "gold", "good", "goose", "gorilla", "gospel", "gossip", "govern", "gown", "grab", "grace", "grain", "grant", "grape", "grass", "gravity", "great", "green", "grid", "grief", "grit", "grocery", "group", "grow", "grunt", "guard", "guess", "guide", "guilt", "guitar", "gun", "gym", "habit", "hair", "half", "hammer", "hamster", "hand", "happy", "harbor", "hard", "harsh", "harvest", "hat", "have", "hawk", "hazard", "head", "health", "heart", "heavy", "hedgehog", "height", "hello", "helmet", "help", "hen", "hero", "hidden", "high", "hill", "hint", "hip", "hire", "history", "hobby", "hockey", "hold", "hole", "holiday", "hollow", "home", "honey", "hood", "hope", "horn", "horror", "horse", "hospital", "host", "hotel", "hour", "hover", "hub", "huge", "human", "humble", "humor", "hundred", "hungry", "hunt", "hurdle", "hurry", "hurt", "husband", "hybrid", "ice", "icon", "idea", "identify", "idle", "ignore", "ill", "illegal", "illness", "image", "imitate", "immense", "immune", "impact", "impose", "improve", "impulse", "inch", "include", "income", "increase", "index", "indicate", "indoor", "industry", "infant", "inflict", "inform", "inhale", "inherit", "initial", "inject", "injury", "inmate", "inner", "innocent", "input", "inquiry", "insane", "insect", "inside", "inspire", "install", "intact", "interest", "into", "invest", "invite", "involve", "iron", "island", "isolate", "issue", "item", "ivory", "jacket", "jaguar", "jar", "jazz", "jealous", "jeans", "jelly", "jewel", "job", "join", "joke", "journey", "joy", "judge", "juice", "jump", "jungle", "junior", "junk", "just", "kangaroo", "keen", "keep", "ketchup", "key", "kick", "kid", "kidney", "kind", "kingdom", "kiss", "kit", "kitchen", "kite", "kitten", "kiwi", "knee", "knife", "knock", "know", "lab", "label", "labor", "ladder", "lady", "lake", "lamp", "language", "laptop", "large", "later", "latin", "laugh", "laundry", "lava", "law", "lawn", "lawsuit", "layer", "lazy", "leader", "leaf", "learn", "leave", "lecture", "left", "leg", "legal", "legend", "leisure", "lemon", "lend", "length", "lens", "leopard", "lesson", "letter", "level", "liar", "liberty", "library", "license", "life", "lift", "light", "like", "limb", "limit", "link", "lion", "liquid", "list", "little", "live", "lizard", "load", "loan", "lobster", "local", "lock", "logic", "lonely", "long", "loop", "lottery", "loud", "lounge", "love", "loyal", "lucky", "luggage", "lumber", "lunar", "lunch", "luxury", "lyrics", "machine", "mad", "magic", "magnet", "maid", "mail", "main", "major", "make", "mammal", "man", "manage", "mandate", "mango", "mansion", "manual", "maple", "marble", "march", "margin", "marine", "market", "marriage", "mask", "mass", "master", "match", "material", "math", "matrix", "matter", "maximum", "maze", "meadow", "mean", "measure", "meat", "mechanic", "medal", "media", "melody", "melt", "member", "memory", "mention", "menu", "mercy", "merge", "merit", "merry", "mesh", "message", "metal", "method", "middle", "midnight", "milk", "million", "mimic", "mind", "minimum", "minor", "minute", "miracle", "mirror", "misery", "miss", "mistake", "mix", "mixed", "mixture", "mobile", "model", "modify", "mom", "moment", "monitor", "monkey", "monster", "month", "moon", "moral", "more", "morning", "mosquito", "mother", "motion", "motor", "mountain", "mouse", "move", "movie", "much", "muffin", "mule", "multiply", "muscle", "museum", "mushroom", "music", "must", "mutual", "myself", "mystery", "myth", "naive", "name", "napkin", "narrow", "nasty", "nation", "nature", "near", "neck", "need", "negative", "neglect", "neither", "nephew", "nerve", "nest", "net", "network", "neutral", "never", "news", "next", "nice", "night", "noble", "noise", "nominee", "noodle", "normal", "north", "nose", "notable", "note", "nothing", "notice", "novel", "now", "nuclear", "number", "nurse", "nut", "oak", "obey", "object", "oblige", "obscure", "observe", "obtain", "obvious", "occur", "ocean", "october", "odor", "off", "offer", "office", "often", "oil", "okay", "old", "olive", "olympic", "omit", "once", "one", "onion", "online", "only", "open", "opera", "opinion", "oppose", "option", "orange", "orbit", "orchard", "order", "ordinary", "organ", "orient", "original", "orphan", "ostrich", "other", "outdoor", "outer", "output", "outside", "oval", "oven", "over", "own", "owner", "oxygen", "oyster", "ozone", "pact", "paddle", "page", "pair", "palace", "palm", "panda", "panel", "panic", "panther", "paper", "parade", "parent", "park", "parrot", "party", "pass", "patch", "path", "patient", "patrol", "pattern", "pause", "pave", "payment", "peace", "peanut", "pear", "peasant", "pelican", "pen", "penalty", "pencil", "people", "pepper", "perfect", "permit", "person", "pet", "phone", "photo", "phrase", "physical", "piano", "picnic", "picture", "piece", "pig", "pigeon", "pill", "pilot", "pink", "pioneer", "pipe", "pistol", "pitch", "pizza", "place", "planet", "plastic", "plate", "play", "please", "pledge", "pluck", "plug", "plunge", "poem", "poet", "point", "polar", "pole", "police", "pond", "pony", "pool", "popular", "portion", "position", "possible", "post", "potato", "pottery", "poverty", "powder", "power", "practice", "praise", "predict", "prefer", "prepare", "present", "pretty", "prevent", "price", "pride", "primary", "print", "priority", "prison", "private", "prize", "problem", "process", "produce", "profit", "program", "project", "promote", "proof", "property", "prosper", "protect", "proud", "provide", "public", "pudding", "pull", "pulp", "pulse", "pumpkin", "punch", "pupil", "puppy", "purchase", "purity", "purpose", "purse", "push", "put", "puzzle", "pyramid", "quality", "quantum", "quarter", "question", "quick", "quit", "quiz", "quote", "rabbit", "raccoon", "race", "rack", "radar", "radio", "rail", "rain", "raise", "rally", "ramp", "ranch", "random", "range", "rapid", "rare", "rate", "rather", "raven", "raw", "razor", "ready", "real", "reason", "rebel", "rebuild", "recall", "receive", "recipe", "record", "recycle", "reduce", "reflect", "reform", "refuse", "region", "regret", "regular", "reject", "relax", "release", "relief", "rely", "remain", "remember", "remind", "remove", "render", "renew", "rent", "reopen", "repair", "repeat", "replace", "report", "require", "rescue", "resemble", "resist", "resource", "response", "result", "retire", "retreat", "return", "reunion", "reveal", "review", "reward", "rhythm", "rib", "ribbon", "rice", "rich", "ride", "ridge", "rifle", "right", "rigid", "ring", "riot", "ripple", "risk", "ritual", "rival", "river", "road", "roast", "robot", "robust", "rocket", "romance", "roof", "rookie", "room", "rose", "rotate", "rough", "round", "route", "royal", "rubber", "rude", "rug", "rule", "run", "runway", "rural", "sad", "saddle", "sadness", "safe", "sail", "salad", "salmon", "salon", "salt", "salute", "same", "sample", "sand", "satisfy", "satoshi", "sauce", "sausage", "save", "say", "scale", "scan", "scare", "scatter", "scene", "scheme", "school", "science", "scissors", "scorpion", "scout", "scrap", "screen", "script", "scrub", "sea", "search", "season", "seat", "second", "secret", "section", "security", "seed", "seek", "segment", "select", "sell", "seminar", "senior", "sense", "sentence", "series", "service", "session", "settle", "setup", "seven", "shadow", "shaft", "shallow", "share", "shed", "shell", "sheriff", "shield", "shift", "shine", "ship", "shiver", "shock", "shoe", "shoot", "shop", "short", "shoulder", "shove", "shrimp", "shrug", "shuffle", "shy", "sibling", "sick", "side", "siege", "sight", "sign", "silent", "silk", "silly", "silver", "similar", "simple", "since", "sing", "siren", "sister", "situate", "six", "size", "skate", "sketch", "ski", "skill", "skin", "skirt", "skull", "slab", "slam", "sleep", "slender", "slice", "slide", "slight", "slim", "slogan", "slot", "slow", "slush", "small", "smart", "smile", "smoke", "smooth", "snack", "snake", "snap", "sniff", "snow", "soap", "soccer", "social", "sock", "soda", "soft", "solar", "soldier", "solid", "solution", "solve", "someone", "song", "soon", "sorry", "sort", "soul", "sound", "soup", "source", "south", "space", "spare", "spatial", "spawn", "speak", "special", "speed", "spell", "spend", "sphere", "spice", "spider", "spike", "spin", "spirit", "split", "spoil", "sponsor", "spoon", "sport", "spot", "spray", "spread", "spring", "spy", "square", "squeeze", "squirrel", "stable", "stadium", "staff", "stage", "stairs", "stamp", "stand", "start", "state", "stay", "steak", "steel", "stem", "step", "stereo", "stick", "still", "sting", "stock", "stomach", "stone", "stool", "story", "stove", "strategy", "street", "strike", "strong", "struggle", "student", "stuff", "stumble", "style", "subject", "submit", "subway", "success", "such", "sudden", "suffer", "sugar", "suggest", "suit", "summer", "sun", "sunny", "sunset", "super", "supply", "supreme", "sure", "surface", "surge", "surprise", "surround", "survey", "suspect", "sustain", "swallow", "swamp", "swap", "swarm", "swear", "sweet", "swift", "swim", "swing", "switch", "sword", "symbol", "symptom", "syrup", "system", "table", "tackle", "tag", "tail", "talent", "talk", "tank", "tape", "target", "task", "taste", "tattoo", "taxi", "teach", "team", "tell", "ten", "tenant", "tennis", "tent", "term", "test", "text", "thank", "that", "theme", "then", "theory", "there", "they", "thing", "this", "thought", "three", "thrive", "throw", "thumb", "thunder", "ticket", "tide", "tiger", "tilt", "timber", "time", "tiny", "tip", "tired", "tissue", "title", "toast", "tobacco", "today", "toddler", "toe", "together", "toilet", "token", "tomato", "tomorrow", "tone", "tongue", "tonight", "tool", "tooth", "top", "topic", "topple", "torch", "tornado", "tortoise", "toss", "total", "tourist", "toward", "tower", "town", "toy", "track", "trade", "traffic", "tragic", "train", "transfer", "trap", "trash", "travel", "tray", "treat", "tree", "trend", "trial", "tribe", "trick", "trigger", "trim", "trip", "trophy", "trouble", "truck", "true", "truly", "trumpet", "trust", "truth", "try", "tube", "tuition", "tumble", "tuna", "tunnel", "turkey", "turn", "turtle", "twelve", "twenty", "twice", "twin", "twist", "two", "type", "typical", "ugly", "umbrella", "unable", "unaware", "uncle", "uncover", "under", "undo", "unfair", "unfold", "unhappy", "uniform", "unique", "unit", "universe", "unknown", "unlock", "until", "unusual", "unveil", "update", "upgrade", "uphold", "upon", "upper", "upset", "urban", "urge", "usage", "use", "used", "useful", "useless", "usual", "utility", "vacant", "vacuum", "vague", "valid", "valley", "valve", "van", "vanish", "vapor", "various", "vast", "vault", "vehicle", "velvet", "vendor", "venture", "venue", "verb", "verify", "version", "very", "vessel", "veteran", "viable", "vibrant", "vicious", "victory", "video", "view", "village", "vintage", "violin", "virtual", "virus", "visa", "visit", "visual", "vital", "vivid", "vocal", "voice", "void", "volcano", "volume", "vote", "voyage", "wage", "wagon", "wait", "walk", "wall", "walnut", "want", "warfare", "warm", "warrior", "wash", "wasp", "waste", "water", "wave", "way", "wealth", "weapon", "wear", "weasel", "weather", "web", "wedding", "weekend", "weird", "welcome", "west", "wet", "whale", "what", "wheat", "wheel", "when", "where", "whip", "whisper", "wide", "width", "wife", "wild", "will", "win", "window", "wine", "wing", "wink", "winner", "winter", "wire", "wisdom", "wise", "wish", "witness", "wolf", "woman", "wonder", "wood", "wool", "word", "work", "world", "worry", "worth", "wrap", "wreck", "wrestle", "wrist", "write", "wrong", "yard", "year", "yellow", "you", "young", "youth", "zebra", "zero", "zone", "zoo"];

const leadingZeroes = (num, size) => {
  let s = num + '';

  while (s.length < size) {
    s = '0' + s;
  }

  return s;
};

const stringChunks = (str, length) => {
  return str.match(new RegExp('.{1,' + length + '}', 'g'));
};

exports.mnemonic = hex => {
  if (!hex) {
    return undefined;
  }

  const binary = hex.split('').map(h => leadingZeroes(parseInt(h, 16).toString(2), 4)).join(''); // 0100111000011111011110011001101010100100111111110010001001111001

  const binaryChunks = stringChunks(binary, 11); // ["01001110000", "11111011110", "01100110101", "01001001111", "11110010001", "001111001"]

  const integers = binaryChunks.map(b => parseInt(b, 2)); // [624, 2014, 821, 591, 1937, 121]

  return integers.map(i => words[i].toUpperCase()).join(' '); // "EVOKE WINK GRIT ENEMY VENDOR AUGUST"
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

const common_1 = __webpack_require__(4);
/**
 * This file needs to be in platform/ folder because its implementation is platform-dependant
 *  - on browser, it uses DOMPurify
 *  - in Node (targetting mobile-core environment) it uses sanitize-html
 * It would be preferable to use DOMPurify on all platforms, but on Node it has a JSDOM dependency which is itself 20MB of code, not acceptable on mobile.
 */


class Xss {}

Xss.ALLOWED_BASIC_TAGS = ['p', 'div', 'br', 'u', 'i', 'em', 'b', 'ol', 'ul', 'pre', 'li', 'table', 'thead', 'tbody', 'tfoot', 'tr', 'td', 'th', 'img', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'address', 'blockquote', 'dl', 'fieldset', 'a', 'font', 'strong', 'strike', 'code'];
Xss.ALLOWED_ATTRS = {
  a: ['href', 'name', 'target'],
  img: ['src', 'width', 'height'],
  font: ['size', 'color', 'face'],
  span: ['color'],
  div: ['color'],
  p: ['color'],
  em: ['style'],
  td: ['width', 'height'],
  hr: ['color', 'height']
};
Xss.ALLOWED_SCHEMES = ['data', 'http', 'https', 'mailto'];
/**
 * used whenever untrusted remote content (eg html email) is rendered, but we still want to preserve html
 */

Xss.htmlSanitizeKeepBasicTags = dirtyHtml => {
  const imgContentReplaceable = `IMG_ICON_${common_1.Str.sloppyRandom()}`;
  let remoteContentReplacedWithLink = false;
  let cleanHtml = dereq_html_sanitize(dirtyHtml, {
    allowedTags: Xss.ALLOWED_BASIC_TAGS,
    allowedAttributes: Xss.ALLOWED_ATTRS,
    allowedSchemes: Xss.ALLOWED_SCHEMES,
    transformTags: {
      'img': (tagName, attribs) => {
        const srcBegin = (attribs.src || '').substring(0, 10);

        if (srcBegin.indexOf('data:') === 0) {
          return {
            tagName: 'img',
            attribs: {
              src: attribs.src
            }
          };
        } else if (srcBegin.indexOf('http://') === 0 || srcBegin.indexOf('https://') === 0) {
          remoteContentReplacedWithLink = true;
          return {
            tagName: 'a',
            attribs: {
              href: String(attribs.src),
              target: "_blank"
            },
            text: imgContentReplaceable
          };
        } else {
          return {
            tagName: 'img',
            attribs: {},
            text: '[img]'
          };
        }
      },
      '*': (tagName, attribs) => {
        // let the browser decide how big should elements be, based on their content, except for img
        // attribs.height|width === 1 are left in only so that they can be removed in exclusiveFilter below
        if (attribs.width && attribs.width !== '1' && tagName !== 'img') {
          delete attribs.width;
        }

        if (attribs.height && attribs.height !== '1' && tagName !== 'img') {
          delete attribs.width;
        }

        return {
          tagName,
          attribs
        };
      }
    },
    exclusiveFilter: ({
      tag,
      attribs
    }) => {
      if (attribs.width === '1' || attribs.height === '1' && tag !== 'hr') {
        return true; // remove tiny elements (often contain hidden content, tracking pixels, etc)
      }

      return false;
    }
  });

  if (remoteContentReplacedWithLink) {
    cleanHtml = `<font size="-1" color="#31a217" face="monospace">[remote content blocked for your privacy]</font><br /><br />${cleanHtml}`; // clean it one more time in case something bad slipped in

    cleanHtml = dereq_html_sanitize(cleanHtml, {
      allowedTags: Xss.ALLOWED_BASIC_TAGS,
      allowedAttributes: Xss.ALLOWED_ATTRS,
      allowedSchemes: Xss.ALLOWED_SCHEMES
    });
  }

  cleanHtml = cleanHtml.replace(new RegExp(imgContentReplaceable, 'g'), `<font color="#D14836" face="monospace">[img]</font>`);
  return cleanHtml;
};

Xss.htmlSanitizeAndStripAllTags = (dirtyHtml, outputNl) => {
  let html = Xss.htmlSanitizeKeepBasicTags(dirtyHtml);
  const random = common_1.Str.sloppyRandom(5);
  const br = `CU_BR_${random}`;
  const blockStart = `CU_BS_${random}`;
  const blockEnd = `CU_BE_${random}`;
  html = html.replace(/<br[^>]*>/gi, br);
  html = html.replace(/\n/g, '');
  html = html.replace(/<\/(p|h1|h2|h3|h4|h5|h6|ol|ul|pre|address|blockquote|dl|div|fieldset|form|hr|table)[^>]*>/gi, blockEnd);
  html = html.replace(/<(p|h1|h2|h3|h4|h5|h6|ol|ul|pre|address|blockquote|dl|div|fieldset|form|hr|table)[^>]*>/gi, blockStart);
  html = html.replace(RegExp(`(${blockStart})+`, 'g'), blockStart).replace(RegExp(`(${blockEnd})+`, 'g'), blockEnd);
  html = html.split(br + blockEnd + blockStart).join(br).split(blockEnd + blockStart).join(br).split(br + blockEnd).join(br);
  let text = html.split(br).join('\n').split(blockStart).filter(v => !!v).join('\n').split(blockEnd).filter(v => !!v).join('\n');
  text = text.replace(/\n{2,}/g, '\n\n'); // not all tags were removed above. Remove all remaining tags

  text = dereq_html_sanitize(text, {
    allowedTags: []
  });
  text = text.trim();

  if (outputNl !== '\n') {
    text = text.replace(/\n/g, outputNl);
  }

  return text;
};

Xss.escape = str => {
  return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;');
};

Xss.escapeTextAsRenderableHtml = text => {
  return Xss.escape(text).replace(/\n/g, '<br>\n') // leave newline so that following replaces work
  .replace(/^ +/gm, spaces => spaces.replace(/ /g, '&nbsp;')).replace(/^\t+/gm, tabs => tabs.replace(/\t/g, '&#9;')).replace(/\n/g, ''); // strip newlines, already have <br>
};

Xss.htmlUnescape = str => {
  // the &nbsp; at the end is replaced with an actual NBSP character, not a space character. IDE won't show you the difference. Do not change.
  return str.replace(/&#x2F;/g, '/').replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&nbsp;/g, ' ');
};

exports.Xss = Xss;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */
/// <reference path="../core/types/openpgp.d.ts" />


Object.defineProperty(exports, "__esModule", {
  value: true
});

const pgp_1 = __webpack_require__(7);

const validate_1 = __webpack_require__(19);

const fmt_1 = __webpack_require__(3);

const const_1 = __webpack_require__(8);

const require_1 = __webpack_require__(11);

const common_1 = __webpack_require__(4);

const mime_1 = __webpack_require__(13);

const buf_1 = __webpack_require__(15);

const store_1 = __webpack_require__(10);

const xss_1 = __webpack_require__(17);

const openpgp = require_1.requireOpenpgp();

class Endpoints {
  constructor() {
    this.version = async () => {
      return fmt_1.fmtRes(process.versions);
    };

    this.encryptMsg = async (uncheckedReq, data) => {
      const req = validate_1.Validate.encryptMsg(uncheckedReq);
      const encrypted = await pgp_1.PgpMsg.encrypt({
        pubkeys: req.pubKeys,
        data: Buffer.concat(data),
        armor: true
      });
      return fmt_1.fmtRes({}, Buffer.from(encrypted.data));
    };

    this.generateKey = async uncheckedReq => {
      store_1.Store.keyCacheWipe(); // decryptKey may be used when changing major settings, wipe cache to prevent dated results

      const {
        passphrase,
        userIds,
        variant
      } = validate_1.Validate.generateKey(uncheckedReq);

      if (passphrase.length < 12) {
        throw new Error('Pass phrase length seems way too low! Pass phrase strength should be properly checked before encrypting a key.');
      }

      let k = await pgp_1.Pgp.key.create(userIds, variant, passphrase);
      return fmt_1.fmtRes({
        key: await pgp_1.Pgp.key.details((await pgp_1.Pgp.key.read(k.private)))
      });
    };

    this.composeEmail = async uncheckedReq => {
      const req = validate_1.Validate.composeEmail(uncheckedReq);
      const mimeHeaders = {
        to: req.to,
        from: req.from,
        subject: req.subject,
        cc: req.cc,
        bcc: req.bcc
      };

      if (req.replyToMimeMsg) {
        const previousMsg = await mime_1.Mime.decode(buf_1.Buf.fromUtfStr((req.replyToMimeMsg.substr(0, 10000).split('\n\n')[0] || '') + `\n\nno content`));
        const replyHeaders = mime_1.Mime.replyHeaders(previousMsg);
        mimeHeaders['in-reply-to'] = replyHeaders['in-reply-to'];
        mimeHeaders['references'] = replyHeaders['references'];
      }

      if (req.format === 'plain') {
        return fmt_1.fmtRes({}, buf_1.Buf.fromUtfStr((await mime_1.Mime.encode(req.text, mimeHeaders))));
      } else if (req.format === 'encrypt-inline') {
        const encrypted = await pgp_1.PgpMsg.encrypt({
          pubkeys: req.pubKeys,
          data: buf_1.Buf.fromUtfStr(req.text),
          armor: true
        });
        return fmt_1.fmtRes({}, buf_1.Buf.fromUtfStr((await mime_1.Mime.encode(encrypted.data, mimeHeaders))));
      } else {
        throw new Error(`Unknown format: ${req.format}`);
      }
    };

    this.encryptFile = async (uncheckedReq, data) => {
      const req = validate_1.Validate.encryptFile(uncheckedReq);
      const encrypted = await pgp_1.PgpMsg.encrypt({
        pubkeys: req.pubKeys,
        data: Buffer.concat(data),
        filename: req.name,
        armor: false
      });
      return fmt_1.fmtRes({}, encrypted.message.packets.write());
    };

    this.parseDecryptMsg = async (uncheckedReq, data) => {
      const {
        keys: kisWithPp,
        msgPwd,
        isEmail
      } = validate_1.Validate.parseDecryptMsg(uncheckedReq);
      const rawBlocks = []; // contains parsed, unprocessed / possibly encrypted data

      let rawSigned = undefined;

      if (isEmail) {
        const {
          blocks,
          rawSignedContent
        } = await mime_1.Mime.process(Buffer.concat(data));
        rawSigned = rawSignedContent;
        rawBlocks.push(...blocks);
      } else {
        rawBlocks.push(pgp_1.Pgp.internal.msgBlockObj('encryptedMsg', new buf_1.Buf(Buffer.concat(data))));
      }

      const sequentialProcessedBlocks = []; // contains decrypted or otherwise formatted data

      for (const rawBlock of rawBlocks) {
        if ((rawBlock.type === 'signedMsg' || rawBlock.type === 'signedHtml') && rawBlock.signature) {
          const verify = await pgp_1.PgpMsg.verifyDetached({
            sigText: buf_1.Buf.fromUtfStr(rawBlock.signature),
            plaintext: buf_1.Buf.with(rawSigned || rawBlock.content)
          });

          if (rawBlock.type === 'signedHtml') {
            sequentialProcessedBlocks.push({
              type: 'verifiedMsg',
              content: xss_1.Xss.htmlSanitizeKeepBasicTags(rawBlock.content.toString()),
              verifyRes: verify,
              complete: true
            });
          } else {
            // text
            sequentialProcessedBlocks.push({
              type: 'verifiedMsg',
              content: common_1.Str.asEscapedHtml(rawBlock.content.toString()),
              verifyRes: verify,
              complete: true
            });
          }
        } else if (rawBlock.type === 'encryptedMsg' || rawBlock.type === 'signedMsg') {
          const decryptRes = await pgp_1.PgpMsg.decrypt({
            kisWithPp,
            msgPwd,
            encryptedData: buf_1.Buf.with(rawBlock.content)
          });

          if (decryptRes.success) {
            if (decryptRes.isEncrypted) {
              sequentialProcessedBlocks.push(...(await pgp_1.PgpMsg.fmtDecryptedAsSanitizedHtmlBlocks(decryptRes.content)));
            } else {
              sequentialProcessedBlocks.push({
                type: 'verifiedMsg',
                content: decryptRes.content,
                complete: true,
                verifyRes: decryptRes.signature
              });
            }
          } else {
            decryptRes.message = undefined;
            sequentialProcessedBlocks.push(pgp_1.Pgp.internal.msgBlockDecryptErrObj(decryptRes.error.type === pgp_1.DecryptErrTypes.noMdc ? decryptRes.content : rawBlock.content, decryptRes));
          }
        } else if (rawBlock.type === 'encryptedAtt' && rawBlock.attMeta && /^(0x)?[A-Fa-f0-9]{16,40}\.asc\.pgp$/.test(rawBlock.attMeta.name || '')) {
          // encrypted pubkey attached
          const decryptRes = await pgp_1.PgpMsg.decrypt({
            kisWithPp,
            msgPwd,
            encryptedData: buf_1.Buf.with(rawBlock.attMeta.data || '')
          });

          if (decryptRes.content) {
            sequentialProcessedBlocks.push({
              type: 'publicKey',
              content: decryptRes.content.toString(),
              complete: true
            });
          } else {
            sequentialProcessedBlocks.push(rawBlock); // will show as encryptedAtt
          }
        } else {
          sequentialProcessedBlocks.push(rawBlock);
        }
      }

      const msgContentBlocks = [];
      const blocks = [];
      let replyType = 'plain';

      for (const block of sequentialProcessedBlocks) {
        if (block.content instanceof buf_1.Buf) {
          // cannot JSON-serialize Buf
          block.content = fmt_1.isContentBlock(block.type) ? block.content.toUtfStr() : block.content.toRawBytesStr();
        } else if (block.attMeta && block.attMeta.data instanceof Uint8Array) {
          // converting to base64-encoded string instead of uint8 for JSON serilization
          // value actually replaced to a string, but type remains Uint8Array type set to satisfy TS
          // no longer used below, only gets passed to be serialized so be safe
          block.attMeta.data = buf_1.Buf.fromUint8(block.attMeta.data).toBase64Str();
        }

        if (block.type === 'decryptedHtml' || block.type === 'decryptedText' || block.type === 'decryptedAtt') {
          replyType = 'encrypted';
        }

        if (block.type === 'publicKey' && !block.keyDetails) {
          // this could eventually be moved into detectBlocks, which would make it async
          const {
            keys
          } = await pgp_1.Pgp.key.normalize(block.content);

          if (keys.length) {
            for (const pub of keys) {
              blocks.push({
                type: 'publicKey',
                content: pub.armor(),
                complete: true,
                keyDetails: await pgp_1.Pgp.key.details(pub)
              });
            }
          } else {
            blocks.push({
              type: 'decryptErr',
              content: block.content,
              complete: true,
              decryptErr: {
                success: false,
                error: {
                  type: 'format',
                  message: 'Badly formatted public key'
                },
                longids: {
                  message: [],
                  matching: [],
                  chosen: [],
                  needPassphrase: []
                }
              }
            });
          }
        } else if (fmt_1.isContentBlock(block.type)) {
          msgContentBlocks.push(block);
        } else {
          if (block.attMeta && !block.content.length) {
            // add a note about lacking file support. todo - remove when added support
            block.content = `${block.attMeta.name || '(unnamed file)'} [${common_1.Str.numberFormat(Math.ceil((block.attMeta.length || 0) / 1024)) + 'KB'}]\n(Improved file support coming very soon!)`;
          }

          blocks.push(block);
        }
      }

      const {
        contentBlock,
        text
      } = fmt_1.fmtContentBlock(msgContentBlocks);
      blocks.unshift(contentBlock); // data represent one JSON-stringified block per line. This is so that it can be read as a stream later

      return fmt_1.fmtRes({
        text,
        replyType
      }, Buffer.from(blocks.map(b => JSON.stringify(b)).join('\n')));
    };

    this.decryptFile = async (uncheckedReq, data) => {
      const {
        keys: kisWithPp,
        msgPwd
      } = validate_1.Validate.decryptFile(uncheckedReq);
      const decryptedMeta = await pgp_1.PgpMsg.decrypt({
        kisWithPp,
        encryptedData: Buffer.concat(data),
        msgPwd
      });

      if (!decryptedMeta.success) {
        decryptedMeta.message = undefined;
        return fmt_1.fmtRes(decryptedMeta);
      }

      return fmt_1.fmtRes({
        success: true,
        name: decryptedMeta.filename || ''
      }, decryptedMeta.content);
    };

    this.parseDateStr = async uncheckedReq => {
      const {
        dateStr
      } = validate_1.Validate.parseDateStr(uncheckedReq);
      return fmt_1.fmtRes({
        timestamp: String(Date.parse(dateStr) || -1)
      });
    };

    this.zxcvbnStrengthBar = async uncheckedReq => {
      const {
        guesses,
        purpose
      } = validate_1.Validate.zxcvbnStrengthBar(uncheckedReq);

      if (purpose === 'passphrase') {
        return fmt_1.fmtRes(pgp_1.Pgp.password.estimateStrength(guesses));
      } else {
        throw new Error(`Unknown purpose: ${purpose}`);
      }
    };

    this.gmailBackupSearch = async uncheckedReq => {
      const {
        acctEmail
      } = validate_1.Validate.gmailBackupSearch(uncheckedReq);
      return fmt_1.fmtRes({
        query: const_1.gmailBackupSearchQuery(acctEmail)
      });
    };

    this.parseKeys = async (_uncheckedReq, data) => {
      const keyDetails = [];
      const allData = Buffer.concat(data);
      const pgpType = await pgp_1.PgpMsg.type({
        data: allData
      });

      if (!pgpType) {
        return fmt_1.fmtRes({
          format: 'unknown',
          keyDetails
        });
      }

      if (pgpType.armored) {
        // armored
        const {
          blocks
        } = pgp_1.Pgp.armor.detectBlocks(allData.toString());

        for (const block of blocks) {
          const {
            keys
          } = await pgp_1.Pgp.key.parse(block.content.toString());
          keyDetails.push(...keys);
        }

        return fmt_1.fmtRes({
          format: 'armored',
          keyDetails
        });
      } // binary


      const {
        keys: openPgpKeys
      } = await openpgp.key.read(allData);

      for (const openPgpKey of openPgpKeys) {
        keyDetails.push((await pgp_1.Pgp.key.details(openPgpKey)));
      }

      return fmt_1.fmtRes({
        format: 'binary',
        keyDetails
      });
    };

    this.isEmailValid = async uncheckedReq => {
      const {
        email
      } = validate_1.Validate.isEmailValid(uncheckedReq);
      return fmt_1.fmtRes({
        valid: common_1.Str.isEmailValid(email)
      });
    };

    this.decryptKey = async uncheckedReq => {
      store_1.Store.keyCacheWipe(); // decryptKey may be used when changing major settings, wipe cache to prevent dated results

      const {
        armored,
        passphrases
      } = validate_1.Validate.decryptKey(uncheckedReq);
      const key = await readArmoredKeyOrThrow(armored);

      if (await pgp_1.Pgp.key.decrypt(key, passphrases)) {
        return fmt_1.fmtRes({
          decryptedKey: key.armor()
        });
      }

      return fmt_1.fmtRes({
        decryptedKey: null
      });
    };

    this.encryptKey = async uncheckedReq => {
      store_1.Store.keyCacheWipe(); // encryptKey may be used when changing major settings, wipe cache to prevent dated results

      const {
        armored,
        passphrase
      } = validate_1.Validate.encryptKey(uncheckedReq);
      const key = await readArmoredKeyOrThrow(armored);

      if (!passphrase || passphrase.length < 12) {
        // last resort check, this should never happen
        throw new Error('Pass phrase length seems way too low! Pass phrase strength should be properly checked before encrypting a key.');
      }

      await key.encrypt(passphrase);
      return fmt_1.fmtRes({
        encryptedKey: key.armor()
      });
    };
  }

}

exports.Endpoints = Endpoints;

const readArmoredKeyOrThrow = async armored => {
  const {
    keys: [key],
    err
  } = await openpgp.key.readArmored(armored);

  if (err && err.length && err[0] instanceof Error) {
    throw err[0];
  }

  if (!key) {
    throw new Error('No key found');
  }

  return key;
};

class Debug {}

Debug.printChunk = (name, data) => {
  const header1 = `Debug.printChunk[${name}, ${data.length}B]: `;
  const header2 = ' '.repeat(header1.length);
  const chunk = Array.from(data.subarray(0, 30));
  const chunkIndices = chunk.map((_, i) => i);
  console.log(`-\n${header1}-+-[${chunk.map(Debug.pad).join(' ')} ]\n${header2} |-[${chunk.map(Debug.char).map(Debug.pad).join(' ')} ]\n${header2} \`-[${chunkIndices.map(Debug.pad).join(' ')} ]`);
};

Debug.char = byte => {
  let c = '';

  if (byte === 10) {
    c += '\\n';
  } else if (byte === 13) {
    c += '\\r';
  } else if (byte === 140 || byte === 160) {
    c += '???';
  } else {
    c += String.fromCharCode(byte);
  }

  return c;
};

Debug.pad = char => {
  char = String(char);

  while (char.length < 3) {
    char = ' ' + char;
  }

  return char;
};

exports.Debug = Debug;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});
var NodeRequest;

(function (NodeRequest) {
  ;
  ;
  ;
})(NodeRequest = exports.NodeRequest || (exports.NodeRequest = {}));

class Validate {}

Validate.generateKey = v => {
  if (isObj(v) && hasProp(v, 'userIds', 'Userid[]') && v.userIds.length && hasProp(v, 'passphrase', 'string') && ['rsa2048', 'rsa4096', 'curve25519'].includes(v.variant)) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.generateKey');
};

Validate.encryptMsg = v => {
  if (isObj(v) && hasProp(v, 'pubKeys', 'string[]')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.encryptMsg');
};

Validate.composeEmail = v => {
  if (!(isObj(v) && hasProp(v, 'text', 'string') && hasProp(v, 'from', 'string') && hasProp(v, 'subject', 'string') && hasProp(v, 'to', 'string[]') && hasProp(v, 'cc', 'string[]') && hasProp(v, 'bcc', 'string[]'))) {
    throw new Error('Wrong request structure for NodeRequest.composeEmail, need: text,from,subject,to,cc,bcc (can use empty arr for cc/bcc)');
  }

  if (hasProp(v, 'pubKeys', 'string[]') && v.pubKeys.length && (v.format === 'encrypt-inline' || v.format === 'encrypt-pgpmime')) {
    return v;
  }

  if (!v.pubKeys && v.format === 'plain') {
    return v;
  }

  throw new Error('Wrong choice of pubKeys and format. Either pubKeys:[..]+format:encrypt-inline OR format:plain allowed');
};

Validate.parseDecryptMsg = v => {
  if (isObj(v) && hasProp(v, 'keys', 'PrvKeyInfo[]') && hasProp(v, 'msgPwd', 'string?') && hasProp(v, 'isEmail', 'boolean?')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.parseDecryptMsg');
};

Validate.encryptFile = v => {
  if (isObj(v) && hasProp(v, 'pubKeys', 'string[]') && hasProp(v, 'name', 'string')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.encryptFile');
};

Validate.decryptFile = v => {
  if (isObj(v) && hasProp(v, 'keys', 'PrvKeyInfo[]') && hasProp(v, 'msgPwd', 'string?')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.decryptFile');
};

Validate.parseDateStr = v => {
  if (isObj(v) && hasProp(v, 'dateStr', 'string')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.dateStrParse');
};

Validate.zxcvbnStrengthBar = v => {
  if (isObj(v) && hasProp(v, 'guesses', 'number') && hasProp(v, 'purpose', 'string') && v.purpose === 'passphrase') {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.zxcvbnStrengthBar');
};

Validate.gmailBackupSearch = v => {
  if (isObj(v) && hasProp(v, 'acctEmail', 'string')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.gmailBackupSearchQuery');
};

Validate.isEmailValid = v => {
  if (isObj(v) && hasProp(v, 'email', 'string')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.isEmailValid');
};

Validate.decryptKey = v => {
  if (isObj(v) && hasProp(v, 'armored', 'string') && hasProp(v, 'passphrases', 'string[]')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.decryptKey');
};

Validate.encryptKey = v => {
  if (isObj(v) && hasProp(v, 'armored', 'string') && hasProp(v, 'passphrase', 'string')) {
    return v;
  }

  throw new Error('Wrong request structure for NodeRequest.encryptKey');
};

exports.Validate = Validate;

const isObj = v => {
  return v && typeof v === 'object';
};

const hasProp = (v, name, type) => {
  if (!isObj(v)) {
    return false;
  }

  const value = v[name];

  if (type === 'number' || type === 'string') {
    return typeof value === type;
  }

  if (type === 'boolean?') {
    return typeof value === 'boolean' || typeof value === 'undefined';
  }

  if (type === 'string?') {
    return typeof value === 'string' || typeof value === 'undefined';
  }

  if (type === 'string[]') {
    return Array.isArray(value) && value.filter(x => typeof x === 'string').length === value.length;
  }

  if (type === 'PrvKeyInfo[]') {
    return Array.isArray(value) && value.filter(ki => hasProp(ki, 'private', 'string') && hasProp(ki, 'longid', 'string') && hasProp(ki, 'passphrase', 'string?')).length === value.length;
  }

  if (type === 'Userid[]') {
    return Array.isArray(value) && value.filter(ui => hasProp(ui, 'name', 'string') && hasProp(ui, 'email', 'string')).length === value.length;
  }

  if (type === 'object') {
    return isObj(value);
  }

  return false;
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* © 2016-2018 FlowCrypt Limited. Limitations apply. Contact human@flowcrypt.com */


Object.defineProperty(exports, "__esModule", {
  value: true
});

const EventEmitter = __webpack_require__(21);

let send = msg => {
  if (APP_ENV === 'prod') {
    console.error(`-------------------- native bridge not present for message --------------------\n${msg}\n--------------------`);
  } else {
    console.log(`dev:rn-bridge:${msg}`);
  }
};

try {
  const mybridgeaddon = process.binding('rn_bridge');

  class MyEmitter extends EventEmitter {
    constructor() {
      super(...arguments);

      this.send = function (msg) {
        mybridgeaddon.sendMessage(msg);
      };
    }

  }

  const channel = new MyEmitter();
  /* var myListener =*/

  mybridgeaddon.registerListener(function (msg) {
    channel.emit('message', msg);
  });
  send = channel.send;
} catch (e) {
  if (!(e instanceof Error) || e.message !== 'No such module: rn_bridge') {
    throw e;
  }
}

exports.sendNativeMessageToJava = send;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ })
/******/ ]);
/* final flowcrypt-android bundle ends here */
} catch(e) {
  console.error(e);
}
