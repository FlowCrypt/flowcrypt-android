/*
 * Â© 2016-present FlowCrypt a.s. Limitations apply. Contact human@flowcrypt.com
 * Contributors: DenBond7
 */

import com.android.ddmlib.DdmPreferences
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.text.SimpleDateFormat

//Setting global timeout for apk installation to 10 minutes. We need it for CI
DdmPreferences.setTimeOut(10 * 60 * 1000)

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "com.starter.easylauncher"

def keystoreProperties = new Properties()
File propertiesFile = project.file("keystore.properties")
if (propertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(propertiesFile))
}

android {
    if (projects.hasProperty('devBuild')) {
        splits.abi.enable = false
        splits.density.enable = false
        aaptOptions.cruncherEnable = false
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.flowcrypt.email"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            def keyStoreFile = keystoreProperties['storeFile']
            def keyStorePass = keystoreProperties['storePassword']
            def keySignAlias = keystoreProperties['keyAlias']
            def keyPass = keystoreProperties['keyPassword']

            if (project.hasProperty('runtimeSign')) {
                if (project.hasProperty('storeFile')) {
                    keyStoreFile = project.property("storeFile")
                }

                if (project.hasProperty('storePassword')) {
                    keyStorePass = project.property("storePassword")
                }

                if (project.hasProperty('keyAlias')) {
                    keySignAlias = project.property("keyAlias")
                }

                if (project.hasProperty('keyPassword')) {
                    keyPass = project.property("keyPassword")
                }
            }

            storeFile keyStoreFile != null ? file(keyStoreFile) : file("fix me...")
            storePassword keyStorePass
            keyAlias keySignAlias
            keyPassword keyPass
        }

        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "flowcryptdebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'false'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"NONE\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'false'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"NONE\""
            buildConfigField 'String', 'ATTESTER_URL', "\"https://flowcrypt.com/attester/\""
            buildConfigField 'String', 'API_URL', "\"https://flowcrypt.com/api/\""
            resValue 'string', 'gradle_is_acra_enabled', 'true'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'false'
            resValue 'string', 'gradle_http_log_level', 'NONE'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_node_http_log_level', 'NONE'
            signingConfig signingConfigs.release
        }

        debug {
            versionNameSuffix '_' + defaultConfig.versionCode + '__' + new SimpleDateFormat('yyyy_MM_dd').format(new Date())
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }
    }

    externalNativeBuild {
        cmake {
            version "3.10.2.4988404"
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    flavorDimensions "standard"

    productFlavors {
        //This flavor must be used only for a development.
        // It has settings for a fast building (some features are disabled or not included).
        dev {
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BODY\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BODY\""
            buildConfigField 'String', 'ATTESTER_URL', "\"https://flowcrypt.com/attester/\""
            buildConfigField 'String', 'API_URL', "\"https://flowcrypt.com/api/\""
            resValue 'string', 'gradle_is_acra_enabled', 'false'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'true'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BODY'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'true'
            resValue 'string', 'gradle_node_http_log_level', 'BODY'
            versionNameSuffix "_dev"
            dimension "standard"
            minSdkVersion rootProject.ext.minSdkVersion
            resConfigs "en", "xxhdpi"
        }

        //This is a consumer flavor
        consumer {
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BASIC\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BASIC\""
            buildConfigField 'String', 'ATTESTER_URL', "\"https://flowcrypt.com/attester/\""
            buildConfigField 'String', 'API_URL', "\"https://flowcrypt.com/api/\""
            resValue 'string', 'gradle_is_acra_enabled', 'true'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'false'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BASIC'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'true'
            resValue 'string', 'gradle_node_http_log_level', 'BASIC'
            dimension "standard"
        }

        //This flavor must be used only for a testing
        devTest {
            versionNameSuffix "_devTest"
            dimension "standard"
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BODY\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BODY\""
            buildConfigField 'String', 'ATTESTER_URL', "\"https://localhost:1212/\""
            buildConfigField 'String', 'API_URL', "\"https://localhost:1212/\""
            resValue 'string', 'gradle_is_acra_enabled', 'false'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BODY'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_node_http_log_level', 'NONE'
        }

        //This is an enterprise flavor
        enterprise {
            applicationIdSuffix ".enterprise"
            buildConfigField 'boolean', 'IS_ACRA_ENABLED', 'true'
            buildConfigField 'boolean', 'IS_MAIL_DEBUG_ENABLED', 'false'
            buildConfigField 'boolean', 'IS_HTTP_LOG_ENABLED', 'true'
            buildConfigField 'String', 'HTTP_LOG_LEVEL', "\"BASIC\""
            buildConfigField 'boolean', 'IS_NODE_HTTP_DEBUG_ENABLED', 'true'
            buildConfigField 'String', 'NODE_HTTP_LOG_LEVEL', "\"BASIC\""
            buildConfigField 'String', 'ATTESTER_URL', "\"https://flowcrypt.com/attester/\""
            buildConfigField 'String', 'API_URL', "\"https://flowcrypt.com/api/\""
            resValue 'string', 'gradle_is_acra_enabled', 'true'
            resValue 'string', 'gradle_is_mail_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'false'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'false'
            resValue 'string', 'gradle_is_http_log_enabled', 'true'
            resValue 'string', 'gradle_http_log_level', 'BASIC'
            resValue 'string', 'gradle_is_node_http_debug_enabled', 'true'
            resValue 'string', 'gradle_node_http_log_level', 'BASIC'
            dimension "standard"
        }

        applicationVariants.all { variant ->
            variant.resValue 'string', 'application_id', variant.applicationId
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = "11"
        //need for ACRA, maybe will be deleted in the upcoming updates
        freeCompilerArgs = ['-Xjvm-default=enable']
    }

    lintOptions {
        warningsAsErrors true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    testOptions {
        animationsDisabled = true
        unitTests.all {
            testLogging {
                events TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR
                exceptionFormat TestExceptionFormat.FULL
                showStandardStreams true
                showCauses true
                showExceptions true
                showStackTraces true
            }

            afterSuite { desc, result ->
                if (!desc.parent) {
                    def output = "Results: ${result.resultType} (${result.testCount} tests," +
                            " ${result.successfulTestCount} passed, ${result.failedTestCount}" +
                            " failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output
                            + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    tasks.register('renameReleaseBuilds') {
        doLast {
            applicationVariants.all { variant ->
                if (variant.buildType.buildType == buildTypes.release) {
                    variant.outputs.each { output ->
                        def file = output.outputFile
                        def newName = file.name.replace(".apk", "_" + defaultConfig.versionCode +
                                "_" + defaultConfig.versionName + "_"
                                + new SimpleDateFormat('yyyy_MM_dd_HH_mm').format(new Date()) + ".apk")
                        output.outputFile.renameTo(new File(file.parent, newName))
                    }
                }
            }
        }
    }

    task copyReleaseApks(type: Copy) {
        from("$buildDir") {
            include '**/*release*.apk'
        }

        includeEmptyDirs = false
        into '../release'
        eachFile { file ->
            file.path = file.name
        }
    }

    afterEvaluate {
        Task taskPackageConsumerRelease = tasks.findByName('packageConsumerRelease')
        if (taskPackageConsumerRelease != null) {
            taskPackageConsumerRelease.finalizedBy renameReleaseBuilds
        }

        Task taskPackageConsumerEnterprise = tasks.findByName('packageEnterpriseRelease')
        if (taskPackageConsumerEnterprise != null) {
            taskPackageConsumerEnterprise.finalizedBy renameReleaseBuilds
        }

        Task renameReleaseBuilds = tasks.findByName('renameReleaseBuilds')
        if (renameReleaseBuilds != null) {
            renameReleaseBuilds.finalizedBy copyReleaseApks
        }
    }

    ndkVersion "22.0.7026061"
}

configurations {
    devDebugImplementation {}
}

easylauncher {
    buildTypes {
        debug {
            filters = [
                    customRibbon(ribbonColor: "#6600CC", labelColor: "#FFFFFF", position: "top")
            ]
        }
    }

    variants {
        devDebug {
            filters = [
                    customRibbon(label: "dev", ribbonColor: "#CC5F00", labelColor: "#FFFFFF", position: "top")
            ]
        }
    }
}

dependencies {
    kapt "com.github.bumptech.glide:compiler:${rootProject.ext.glideVersion}"
    kapt 'androidx.annotation:annotation:1.2.0'
    kapt "androidx.room:room-compiler:$roomVersion"
    //ACRA needs the following dependency to use a custom report sender
    kapt("com.google.auto.service:auto-service:1.0")

    devDebugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakcanaryVersion}"

    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-web:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "androidx.test:core-ktx:1.4.0"
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.ext.okhttpVersion}"
    androidTestImplementation "com.squareup.okhttp3:okhttp-tls:${rootProject.ext.okhttpVersion}"
    androidTestUtil 'androidx.test:orchestrator:1.4.0'

    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.ext.okhttpVersion}"
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'io.github.classgraph:classgraph:4.8.112'
    testImplementation 'com.flextrade.jfixture:jfixture:2.7.2'
    testImplementation 'com.shazam:shazamcrest:0.11'
    //we need it to test Parcelable
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.5.21"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.legacy:legacy-support-v4:${rootProject.ext.androidxBaseVersion}"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation "androidx.legacy:legacy-preference-v14:${rootProject.ext.androidxBaseVersion}"
    implementation "androidx.cardview:cardview:${rootProject.ext.androidxBaseVersion}"
    implementation 'androidx.browser:browser:1.3.0'
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.recyclerViewVersion}"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.test.espresso:espresso-idling-resource:${rootProject.ext.espressoVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.activity:activity-ktx:1.3.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.work:work-runtime-ktx:2.5.0'
    implementation "androidx.navigation:navigation-fragment-ktx:${rootProject.ext.navVersion}"
    implementation "androidx.navigation:navigation-ui-ktx:${rootProject.ext.navVersion}"
    implementation "androidx.navigation:navigation-runtime-ktx:${rootProject.ext.navVersion}"

    //https://developers.google.com/android/guides/setup
    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.android.gms:play-services-auth:19.2.0'

    //https://mvnrepository.com/artifact/com.google.android.material/material
    implementation 'com.google.android.material:material:1.4.0'

    //https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.8.7'
    //https://mvnrepository.com/artifact/com.google.api-client/google-api-client-android
    implementation 'com.google.api-client:google-api-client-android:1.32.1'
    //https://mvnrepository.com/artifact/com.google.apis/google-api-services-gmail
    implementation 'com.google.apis:google-api-services-gmail:v1-rev20210614-1.32.1'

    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${rootProject.ext.retrofitVersion}"
    implementation "com.squareup.okio:okio:${okioVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpVersion}"

    implementation "com.sun.mail:android-mail:${rootProject.ext.javaMailVersion}"
    implementation "com.sun.mail:android-activation:${rootProject.ext.javaMailVersion}"
    implementation("com.sun.mail:gimap:${rootProject.ext.javaMailVersion}") {
        //exclude group: 'com.sun.mail' because it exists in 'com.sun.mail:android-mail'
        exclude group: 'com.sun.mail'
    }

    implementation "com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}"
    implementation 'com.hootsuite.android:nachos:1.2.0'
    implementation 'com.nulab-inc:zxcvbn:1.5.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'ja.burhanrashid52:photoeditor:1.1.1'
    implementation 'net.openid:appauth:0.10.0'
    implementation 'org.bitbucket.b_c:jose4j:0.7.8'
    implementation 'me.everything:overscroll-decor-android:1.1.0'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20200713.1'
    implementation 'org.jsoup:jsoup:1.14.1'
    implementation 'com.sandinh:zbase32-commons-codec_2.12:1.0.0'

    implementation ('org.pgpainless:pgpainless-core:0.2.8') {
        // exclude group: 'org.bouncycastle' because we will specify it manually
        exclude group: 'org.bouncycastle'
    }

    implementation "org.bouncycastle:bcpg-jdk15on:${rootProject.ext.bouncycastleVersion}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${rootProject.ext.bouncycastleVersion}"

    implementation 'ch.acra:acra-http:5.8.4'
    //ACRA needs the following dependency to use a custom report sender
    compileOnly("com.google.auto.service:auto-service-annotations:1.0")
}
